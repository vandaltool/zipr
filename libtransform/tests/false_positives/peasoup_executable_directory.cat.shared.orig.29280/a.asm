;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2011 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B735-74D4-4E			    |
; |	 Jason Hiser, University of Virginia / Dpt of Computer Science	    |
; +-------------------------------------------------------------------------+
;
;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2011 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B735-74D4-4E			    |
; |	 Jason Hiser, University of Virginia / Dpt of Computer Science	    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	BDFD8B874B5E71915E9E22ADB1A031F5
; Input	CRC32 :	B8227E42

; File Name   :	/home/jdh8d/peasoup/uva/security_transforms.trunk/libtransform/tests/false_positives/peasoup_executable_directory.cat.shared.orig.29280/a.ncexe
; Format      :	ELF for	Intel 386 (Executable)
; Imagebase   :	8048000
; Interpreter '/lib/ld-linux.so.2'
; Needed Library 'libc.so.6'
;

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_init		segment	dword public 'CODE' use32
		assume cs:_init
		;org 8048DF8h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _init_proc
_init_proc	proc near		; CODE XREF: sub_8052040+14p
		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		call	$+5
		pop	ebx
		add	ebx, 0C1F0h
		mov	edx, ds:(__gmon_start___ptr - 8054FF4h)[ebx]
		test	edx, edx
		jz	short loc_8048E1A
		call	___gmon_start__

loc_8048E1A:				; CODE XREF: _init_proc+1Bj
		call	sub_80492C0
		call	sub_80520E0
		pop	eax
		pop	ebx
		leave
		retn
_init_proc	endp

_init		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_plt		segment	dword public 'CODE' use32
		assume cs:_plt
		;org 8048E28h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
		dd 4 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _getpagesize. PRESS KEYPAD "+" TO	EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _abort. PRESS KEYPAD "+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION ___errno_location. PRESS KEYPAD "+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION ___cxa_atexit. PRESS KEYPAD "+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _open64. PRESS KEYPAD "+"	TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _fputs_unlocked. PRESS KEYPAD "+"	TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION ___ctype_get_mb_cur_max. PRESS KEYPAD "+"	TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION ___fprintf_chk. PRESS KEYPAD "+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION ___gmon_start__. PRESS KEYPAD "+"	TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _realloc.	PRESS KEYPAD "+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _iconv_open. PRESS KEYPAD	"+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION ___printf_chk. PRESS KEYPAD "+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _strchr. PRESS KEYPAD "+"	TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _getenv. PRESS KEYPAD "+"	TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _calloc. PRESS KEYPAD "+"	TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _write. PRESS KEYPAD "+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION ___uflow.	PRESS KEYPAD "+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _memset. PRESS KEYPAD "+"	TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _fopen64.	PRESS KEYPAD "+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION ___libc_start_main. PRESS	KEYPAD "+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _stpcpy. PRESS KEYPAD "+"	TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION __exit. PRESS KEYPAD "+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _strrchr.	PRESS KEYPAD "+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION ___assert_fail. PRESS KEYPAD "+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _bindtextdomain. PRESS KEYPAD "+"	TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _mbrtowc.	PRESS KEYPAD "+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _read. PRESS KEYPAD "+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _ungetc. PRESS KEYPAD "+"	TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _free. PRESS KEYPAD "+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _dcgettext. PRESS	KEYPAD "+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _getopt_long. PRESS KEYPAD "+" TO	EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _ioctl. PRESS KEYPAD "+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION ___ctype_b_loc. PRESS KEYPAD "+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _fclose. PRESS KEYPAD "+"	TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _mbsinit.	PRESS KEYPAD "+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _memcpy. PRESS KEYPAD "+"	TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _strlen. PRESS KEYPAD "+"	TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _iconv. PRESS KEYPAD "+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _setlocale. PRESS	KEYPAD "+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _strcpy. PRESS KEYPAD "+"	TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _iswspace. PRESS KEYPAD "+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _close. PRESS KEYPAD "+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _fwrite. PRESS KEYPAD "+"	TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _nl_langinfo. PRESS KEYPAD "+" TO	EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _malloc. PRESS KEYPAD "+"	TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _iswalnum. PRESS KEYPAD "+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION ___stack_chk_fail. PRESS KEYPAD "+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _iconv_close. PRESS KEYPAD "+" TO	EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION ___fpending. PRESS KEYPAD	"+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _error. PRESS KEYPAD "+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _strnlen.	PRESS KEYPAD "+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _memmove.	PRESS KEYPAD "+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION ___strndup. PRESS	KEYPAD "+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _textdomain. PRESS KEYPAD	"+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION ___fxstat64. PRESS KEYPAD	"+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _fscanf. PRESS KEYPAD "+"	TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION ___sprintf_chk. PRESS KEYPAD "+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _memchr. PRESS KEYPAD "+"	TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION ___snprintf_chk. PRESS KEYPAD "+"	TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _iswprint. PRESS KEYPAD "+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _strcmp. PRESS KEYPAD "+"	TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION ___strdup. PRESS KEYPAD "+" TO EXPAND]
		dw ?
		dd 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _exit. PRESS KEYPAD "+" TO EXPAND]
		dw ?
		dd 2 dup(?)
_plt		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 8049230h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

		public start
start		proc near
		xor	ebp, ebp
		pop	esi
		mov	ecx, esp
		and	esp, 0FFFFFFF0h
		push	eax
		push	esp
		push	edx
		push	offset sub_8052030
		push	offset sub_8052040
		push	ecx
		push	esi
		push	offset sub_80495B0
		call	___libc_start_main
		hlt
start		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_8049260	proc near		; CODE XREF: _term_proc+13p
		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		cmp	ds:byte_8055164, 0
		jnz	short loc_80492AF
		mov	eax, ds:dword_8055168
		mov	ebx, offset dword_8054F14
		sub	ebx, offset dword_8054F10
		sar	ebx, 2
		sub	ebx, 1
		cmp	eax, ebx
		jnb	short loc_80492A8
		lea	esi, [esi+0]

loc_8049290:				; CODE XREF: sub_8049260+46j
		add	eax, 1
		mov	ds:dword_8055168, eax
		call	ds:dword_8054F10[eax*4]
		mov	eax, ds:dword_8055168
		cmp	eax, ebx
		jb	short loc_8049290

loc_80492A8:				; CODE XREF: sub_8049260+28j
		mov	ds:byte_8055164, 1

loc_80492AF:				; CODE XREF: sub_8049260+Ej
		add	esp, 4
		pop	ebx
		pop	ebp
		retn
sub_8049260	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_80492C0	proc near		; CODE XREF: _init_proc:loc_8048E1Ap
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ds:dword_8054F18
		test	eax, eax
		jz	short locret_80492E1
		mov	eax, 0
		test	eax, eax
		jz	short locret_80492E1
		mov	dword ptr [esp], offset	dword_8054F18
		call	eax

locret_80492E1:				; CODE XREF: sub_80492C0+Dj
					; sub_80492C0+16j
		leave
		retn
sub_80492C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl sub_80492F0(int status)
sub_80492F0	proc near		; CODE XREF: sub_80495B0+101p
					; sub_80495B0+178p

status		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, [ebp+status]
		test	ebx, ebx
		jz	short loc_8049348
		mov	esi, ds:dword_8055178
		mov	dword ptr [esp+8], 5 ; category
		mov	dword ptr [esp+4], offset msgid	; "Try `%s --help' for more information.\n"
		mov	dword ptr [esp], 0 ; domainname
		call	_dcgettext
		mov	[esp+0Ch], esi
		mov	dword ptr [esp+4], 1
		mov	[esp+8], eax
		mov	eax, ds:stderr
		mov	[esp], eax
		call	___fprintf_chk

loc_804933E:				; CODE XREF: sub_80492F0+26Dj
					; sub_80492F0+2B2j
		mov	[esp], ebx	; status
		call	_exit
; ---------------------------------------------------------------------------
		align 4

loc_8049348:				; CODE XREF: sub_80492F0+Dj
		mov	esi, ds:dword_8055178
		mov	dword ptr [esp+8], 5 ; category
		mov	dword ptr [esp+4], offset aUsageSOption__ ; "Usage: %s [OPTION]... [FILE]...\n"
		mov	dword ptr [esp], 0 ; domainname
		call	_dcgettext
		mov	[esp+8], esi
		mov	dword ptr [esp], 1
		mov	[esp+4], eax
		call	___printf_chk
		mov	esi, ds:stdout
		mov	dword ptr [esp+8], 5 ; category
		mov	dword ptr [esp+4], offset aConcatenateFil ; "Concatenate FILE(s), or standard input,"...
		mov	dword ptr [esp], 0 ; domainname
		call	_dcgettext
		mov	[esp+4], esi
		mov	[esp], eax
		call	_fputs_unlocked
		mov	esi, ds:stdout
		mov	dword ptr [esp+8], 5 ; category
		mov	dword ptr [esp+4], offset aTEquivalentToV ; "  -t			equivalent t"...
		mov	dword ptr [esp], 0 ; domainname
		call	_dcgettext
		mov	[esp+4], esi
		mov	[esp], eax
		call	_fputs_unlocked
		mov	esi, ds:stdout
		mov	dword ptr [esp+8], 5 ; category
		mov	dword ptr [esp+4], offset aHelpDisplayThi ; "	   --help     display this help	and "...
		mov	dword ptr [esp], 0 ; domainname
		call	_dcgettext
		mov	[esp+4], esi
		mov	[esp], eax
		call	_fputs_unlocked
		mov	esi, ds:stdout
		mov	dword ptr [esp+8], 5 ; category
		mov	dword ptr [esp+4], offset aVersionOutputV ; "	   --version  output version informa"...
		mov	dword ptr [esp], 0 ; domainname
		call	_dcgettext
		mov	[esp+4], esi
		mov	[esp], eax
		call	_fputs_unlocked
		mov	esi, ds:stdout
		mov	dword ptr [esp+8], 5 ; category
		mov	dword ptr [esp+4], offset aWithNoFileOrWh ; "\nWith no FILE, or	when FILE is -,	read "...
		mov	dword ptr [esp], 0 ; domainname
		call	_dcgettext
		mov	[esp+4], esi
		mov	[esp], eax
		call	_fputs_unlocked
		mov	esi, ds:dword_8055178
		mov	dword ptr [esp+8], 5 ; category
		mov	dword ptr [esp+4], offset aExamplesSFGOut ; "\nExamples:\n  %s f - g  Output f's conte"...
		mov	dword ptr [esp], 0 ; domainname
		call	_dcgettext
		mov	[esp+0Ch], esi
		mov	[esp+8], esi
		mov	dword ptr [esp], 1
		mov	[esp+4], eax
		call	___printf_chk
		mov	eax, ds:dword_8055178
		mov	[esp], eax
		call	sub_804BA50
		mov	dword ptr [esp+8], 5 ; category
		mov	dword ptr [esp+4], offset aReportSBugsToS ; "\nReport %s bugs to %s\n"
		mov	dword ptr [esp], 0 ; domainname
		mov	esi, eax
		call	_dcgettext
		mov	[esp+8], esi
		mov	dword ptr [esp+0Ch], offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		mov	dword ptr [esp], 1
		mov	[esp+4], eax
		call	___printf_chk
		mov	dword ptr [esp+8], 5 ; category
		mov	dword ptr [esp+4], offset aSHomePageHttpW ; "%s	home page: <http://www.gnu.org/softw"...
		mov	dword ptr [esp], 0 ; domainname
		call	_dcgettext
		mov	dword ptr [esp+0Ch], offset domainname ; "coreutils"
		mov	dword ptr [esp+8], offset word_80525FA
		mov	dword ptr [esp], 1
		mov	[esp+4], eax
		call	___printf_chk
		mov	esi, ds:stdout
		mov	dword ptr [esp+8], 5 ; category
		mov	dword ptr [esp+4], offset aGeneralHelpUsi ; "General help using	GNU software: <http:"...
		mov	dword ptr [esp], 0 ; domainname
		call	_dcgettext
		mov	[esp+4], esi
		mov	[esp], eax
		call	_fputs_unlocked
		mov	dword ptr [esp], 5 ; category
		call	sub_804BCA0
		test	al, al
		jz	loc_804933E
		mov	eax, ds:dword_8055178
		mov	[esp], eax
		call	sub_804BA50
		mov	dword ptr [esp+8], 5 ; category
		mov	dword ptr [esp+4], offset aReportSTransla ; "Report %s translation bugs	to <http://t"...
		mov	dword ptr [esp], 0 ; domainname
		mov	esi, eax
		call	_dcgettext
		mov	[esp+8], esi
		mov	dword ptr [esp], 1
		mov	[esp+4], eax
		call	___printf_chk
		jmp	loc_804933E
sub_80492F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl sub_80495B0(int argc, char **argv)
sub_80495B0	proc near		; DATA XREF: start+17o

argc		= dword	ptr  8
argv		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		and	esp, 0FFFFFFF0h
		push	edi
		push	esi
		push	ebx
		sub	esp, 174h
		call	_getpagesize
		mov	edx, [ebp+argv]
		mov	[esp+64h], eax
		mov	eax, [edx]
		mov	[esp], eax	; s
		call	sub_804A440
		mov	dword ptr [esp+4], (offset aReportBugsToS_+16h)	; locale
		mov	dword ptr [esp], 6 ; category
		call	_setlocale
		mov	dword ptr [esp+4], offset dirname ; "/usr/share/locale"
		mov	dword ptr [esp], offset	domainname ; "coreutils"
		call	_bindtextdomain
		mov	dword ptr [esp], offset	domainname ; "coreutils"
		call	_textdomain
		mov	dword ptr [esp], offset	sub_804BBC0
		call	sub_80520A0
		mov	ebx, [ebp+argc]
		mov	esi, [ebp+argv]
		mov	byte ptr [esp+82h], 0
		mov	byte ptr [esp+83h], 0
		mov	byte ptr [esp+7Ah], 0
		mov	byte ptr [esp+6Bh], 0
		mov	byte ptr [esp+98h], 0
		mov	byte ptr [esp+7Bh], 0

loc_8049642:				; CODE XREF: sub_80495B0+127j
					; sub_80495B0+141j ...
		mov	dword ptr [esp+10h], 0 ; longind
		mov	dword ptr [esp+0Ch], offset longopts ; longopts
		mov	dword ptr [esp+8], offset shortopts ; "benstuvAET"
		mov	[esp+4], esi	; argv
		mov	[esp], ebx	; argc
		call	_getopt_long
		cmp	eax, 0FFFFFFFFh
		jz	loc_80497CC
		cmp	eax, 62h
		jz	loc_80497B0
		jg	short loc_80496B8
		cmp	eax, 41h
		lea	esi, [esi+0]
		jz	short loc_80496DC
		lea	esi, [esi+0]
		jg	loc_8049717
		cmp	eax, 0FFFFFF7Dh
		nop
		lea	esi, [esi+0]
		jz	loc_8049742
		cmp	eax, 0FFFFFF7Eh
		nop
		lea	esi, [esi+0]
		jnz	short loc_8049721
		mov	dword ptr [esp], 0 ; status
		call	sub_80492F0
; ---------------------------------------------------------------------------
		align 4

loc_80496B8:				; CODE XREF: sub_80495B0+C8j
		cmp	eax, 73h
		jz	loc_80497C2
		jg	short loc_80496F6
		cmp	eax, 65h
		db	66h
		nop
		jz	short loc_80496E4
		cmp	eax, 6Eh
		lea	esi, [esi+0]
		jnz	short loc_8049721
		mov	byte ptr [esp+7Bh], 1
		jmp	loc_8049642
; ---------------------------------------------------------------------------

loc_80496DC:				; CODE XREF: sub_80495B0+D0j
		mov	byte ptr [esp+82h], 1

loc_80496E4:				; CODE XREF: sub_80495B0+118j
		mov	byte ptr [esp+83h], 1

loc_80496EC:				; CODE XREF: sub_80495B0+16Aj
		mov	byte ptr [esp+7Ah], 1
		jmp	loc_8049642
; ---------------------------------------------------------------------------

loc_80496F6:				; CODE XREF: sub_80495B0+111j
		cmp	eax, 75h
		jz	loc_8049642
		jl	short loc_804972D
		cmp	eax, 76h
		lea	esi, [esi+0]
		jnz	short loc_8049721
		mov	byte ptr [esp+83h], 1
		jmp	loc_8049642
; ---------------------------------------------------------------------------

loc_8049717:				; CODE XREF: sub_80495B0+D8j
		cmp	eax, 45h
		jz	short loc_80496EC
		cmp	eax, 54h
		jz	short loc_804979C

loc_8049721:				; CODE XREF: sub_80495B0+F8j
					; sub_80495B0+120j ...
		mov	dword ptr [esp], 1 ; status
		call	sub_80492F0
; ---------------------------------------------------------------------------

loc_804972D:				; CODE XREF: sub_80495B0+14Fj
		mov	byte ptr [esp+82h], 1
		mov	byte ptr [esp+83h], 1
		jmp	loc_8049642
; ---------------------------------------------------------------------------

loc_8049742:				; CODE XREF: sub_80495B0+E8j
		mov	dword ptr [esp+4], offset aTorbjRnGranlun ; "Torbjörn Granlund"
		mov	dword ptr [esp], offset	s2 ; "Torbjorn Granlund"
		call	sub_804ADD0
		mov	dword ptr [esp+18h], 0
		mov	dword ptr [esp+14h], offset aRichardM_Stall ; "Richard M. Stallman"
		mov	dword ptr [esp+8], offset word_80525FA
		mov	dword ptr [esp+4], offset aCat ; "cat"
		mov	[esp+10h], eax
		mov	eax, off_8055120
		mov	[esp+0Ch], eax
		mov	eax, ds:stdout
		mov	[esp], eax
		call	sub_804B8E0
		mov	dword ptr [esp], 0 ; status
		call	_exit
; ---------------------------------------------------------------------------

loc_804979C:				; CODE XREF: sub_80495B0+16Fj
		mov	byte ptr [esp+82h], 1
		jmp	loc_8049642
; ---------------------------------------------------------------------------
		align 10h

loc_80497B0:				; CODE XREF: sub_80495B0+C2j
		mov	byte ptr [esp+98h], 1
		mov	byte ptr [esp+7Bh], 1
		jmp	loc_8049642
; ---------------------------------------------------------------------------

loc_80497C2:				; CODE XREF: sub_80495B0+10Bj
		mov	byte ptr [esp+6Bh], 1
		jmp	loc_8049642
; ---------------------------------------------------------------------------

loc_80497CC:				; CODE XREF: sub_80495B0+B9j
		lea	ecx, [esp+10Ch]
		mov	[esp+28h], ecx
		mov	[esp+8], ecx
		mov	dword ptr [esp+4], 1
		mov	dword ptr [esp], 3
		call	___fxstat64
		test	eax, eax
		js	loc_804A342

loc_80497F7:				; CODE XREF: sub_80495B0+DCBj
		lea	eax, [esp+0ACh]
		mov	esi, [esp+28h]
		mov	ecx, 18h
		mov	edi, eax
		rep movsd
		mov	[esp+2Ch], eax
		mov	ebx, [esp+0E0h]
		lea	eax, [ebx-8000h]
		cmp	eax, 1FFF8000h
		jbe	loc_804A11B
		mov	ebx, 8000h

loc_804982C:				; CODE XREF: sub_80495B0+B73j
					; sub_80495B0+B80j
		mov	eax, [esp+11Ch]
		mov	byte ptr [esp+4Bh], 0
		and	eax, 0F000h
		cmp	eax, 8000h
		jz	loc_804A30C

loc_8049848:				; CODE XREF: sub_80495B0+D8Dj
		mov	ecx, ds:optind
		mov	eax, [ebp+argv]
		movzx	edx, byte ptr [esp+7Bh]
		mov	ds:dword_8055170, offset byte_80527F2
		mov	[esp+60h], ecx
		lea	eax, [eax+ecx*4]
		mov	[esp+58h], eax
		movzx	eax, byte ptr [esp+98h]
		mov	[esp+44h], edx
		mov	byte ptr [esp+53h], 1
		mov	byte ptr [esp+4Ah], 0
		xor	eax, 1
		and	edx, eax
		mov	[esp+5Ch], edx
		mov	[esp+74h], ebx

loc_804988E:				; CODE XREF: sub_80495B0+A16j
		mov	ecx, [ebp+argc]
		cmp	[esp+60h], ecx
		jl	loc_8049EF6
		mov	eax, ds:dword_8055170

loc_80498A0:				; CODE XREF: sub_80495B0+951j
		movzx	edx, byte ptr [eax]
		cmp	dl, ds:byte_80527F2
		jz	loc_8049ED0

loc_80498AF:				; CODE XREF: sub_80495B0+92Aj
		mov	dword ptr [esp+4], 0
		mov	[esp], eax
		call	_open64
		test	eax, eax
		mov	ds:fd, eax
		js	loc_804A135

loc_80498CC:				; CODE XREF: sub_80495B0+941j
		lea	ecx, [esp+10Ch]
		mov	[esp+8], ecx
		mov	[esp+4], eax
		mov	dword ptr [esp], 3
		call	___fxstat64
		test	eax, eax
		js	loc_804A017
		mov	edi, [esp+2Ch]
		mov	ecx, 18h
		mov	esi, [esp+28h]
		rep movsd
		mov	eax, [esp+0E0h]
		mov	[esp+7Ch], eax
		sub	eax, 8000h
		cmp	eax, 1FFF8000h
		jbe	loc_8049F06
		mov	dword ptr [esp+7Ch], 8000h

loc_8049921:				; CODE XREF: sub_80495B0+962j
					; sub_80495B0+970j
		cmp	byte ptr [esp+4Bh], 0
		jz	short loc_8049946
		mov	edx, [esp+3Ch]
		mov	eax, [esp+40h]
		xor	edx, [esp+110h]
		xor	eax, [esp+10Ch]
		or	edx, eax
		jz	loc_804A04A

loc_8049946:				; CODE XREF: sub_80495B0+376j
					; sub_80495B0+AA5j ...
		cmp	byte ptr [esp+7Ah], 0
		jnz	short loc_804996D
		mov	esi, [esp+44h]
		test	esi, esi
		jnz	short loc_804996D
		cmp	byte ptr [esp+83h], 0
		jnz	short loc_804996D
		cmp	byte ptr [esp+82h], 0
		jz	loc_804A1C9

loc_804996D:				; CODE XREF: sub_80495B0+39Bj
					; sub_80495B0+3A3j ...
		mov	eax, [esp+7Ch]
		add	eax, [esp+64h]
		mov	[esp], eax	; size
		call	sub_804D070
		mov	ecx, [esp+64h]
		mov	edx, [esp+74h]
		mov	[esp+54h], eax
		lea	eax, [ecx+edx+12h]
		mov	edx, [esp+7Ch]
		lea	eax, [eax+edx*4]
		mov	[esp], eax	; size
		call	sub_804D070
		mov	esi, [esp+64h]
		xor	edx, edx
		mov	byte ptr [esp+73h], 1
		sub	esi, 1
		mov	ecx, eax
		add	ecx, esi
		mov	[esp+4Ch], eax
		mov	eax, ecx
		div	dword ptr [esp+64h]
		add	esi, [esp+54h]
		mov	eax, esi
		sub	ecx, edx
		xor	edx, edx
		div	dword ptr [esp+64h]
		mov	[esp+90h], ecx
		mov	ecx, ds:dword_805516C
		mov	[esp+94h], ecx
		sub	esi, edx
		mov	edx, [esp+90h]
		mov	eax, esi
		add	eax, 1
		mov	[esp+6Ch], eax
		mov	[esp+9Ch], eax
		mov	eax, [esp+74h]
		mov	[esp+84h], esi
		mov	ecx, [esp+84h]
		add	edx, [esp+74h]
		mov	esi, [esp+90h]
		neg	eax
		mov	[esp+88h], edx
		mov	[esp+8Ch], ecx
		mov	[esp+98h], eax
		nop

loc_8049A28:				; CODE XREF: sub_80495B0+6D2j
		cmp	[esp+88h], esi
		ja	loc_8049AD9
		sub	esi, [esp+88h]
		mov	ebx, [esp+90h]
		mov	edi, [esp+74h]
		jmp	short loc_8049A52
; ---------------------------------------------------------------------------
		align 10h

loc_8049A50:				; CODE XREF: sub_80495B0+509j
		mov	esi, eax

loc_8049A52:				; CODE XREF: sub_80495B0+497j
		mov	[esp+8], edi	; n
		mov	[esp+4], ebx	; buf
		mov	dword ptr [esp], 1 ; fd
		call	sub_804A3E0
		cmp	edi, eax
		jz	short loc_8049AA9
		mov	dword ptr [esp+8], 5 ; category
		mov	dword ptr [esp+4], offset aWriteError ;	"write error"
		mov	dword ptr [esp], 0 ; domainname
		call	_dcgettext
		mov	[esp+30h], eax
		call	___errno_location
		mov	edx, [esp+30h]
		mov	[esp+8], edx	; format
		mov	eax, [eax]
		mov	dword ptr [esp], 1 ; status
		mov	[esp+4], eax	; errnum
		call	_error

loc_8049AA9:				; CODE XREF: sub_80495B0+4B8j
		mov	edx, [esp+98h]
		add	ebx, edi
		lea	eax, [esi+edx]
		mov	ecx, eax
		add	ecx, edi
		jnb	short loc_8049A50
		mov	eax, [esp+90h]
		mov	[esp+8], esi	; n
		mov	[esp+4], ebx	; src
		mov	[esp], eax	; dest
		call	_memmove
		add	esi, [esp+90h]

loc_8049AD9:				; CODE XREF: sub_80495B0+47Fj
		mov	edx, [esp+8Ch]
		cmp	[esp+9Ch], edx
		jbe	loc_8049CB0
		cmp	byte ptr [esp+73h], 0
		mov	dword ptr [esp+16Ch], 0
		jnz	loc_8049DD8

loc_8049B03:				; CODE XREF: sub_80495B0+85Fj
		mov	ebx, esi
		sub	ebx, [esp+90h]
		jnz	loc_8049E30

loc_8049B12:				; CODE XREF: sub_80495B0+859j
					; sub_80495B0+8DFj
		mov	eax, [esp+84h]
		mov	ecx, [esp+7Ch]
		mov	[esp+4], eax	; buf
		mov	eax, ds:fd
		mov	[esp+8], ecx	; nbytes
		mov	[esp], eax	; fd
		call	sub_804CE10
		cmp	eax, 0FFFFFFFFh
		jz	loc_8049F2F
		test	eax, eax
		jz	loc_8049FF8
		add	eax, [esp+84h]
		mov	[esp+8Ch], eax
		mov	byte ptr [eax],	0Ah
		mov	ecx, [esp+84h]
		mov	edi, [esp+6Ch]
		mov	[esp+9Ch], ecx

loc_8049B66:				; CODE XREF: sub_80495B0+7D1j
		mov	edx, [esp+9Ch]
		movzx	ebx, byte ptr [edx]

loc_8049B70:				; CODE XREF: sub_80495B0+742j
		cmp	bl, 0Ah
		jz	loc_8049C7B
		mov	eax, [esp+94h]
		test	eax, eax
		js	short loc_8049BEC
		cmp	byte ptr [esp+7Bh], 0
		jz	short loc_8049BEC
		mov	eax, ds:off_80527E0

loc_8049B90:				; CODE XREF: sub_80495B0+5FFj
		movzx	edx, byte ptr [eax]
		lea	ecx, [edx+1]
		cmp	dl, 38h
		mov	[eax], cl
		jle	loc_8049E24
		mov	byte ptr [eax],	30h
		mov	edx, off_805511C
		sub	eax, 1
		cmp	eax, edx
		jnb	short loc_8049B90
		cmp	edx, offset a0	; "		    0\t"
		jbe	loc_8049E18
		lea	eax, [edx-1]
		mov	off_805511C, eax
		mov	byte ptr [edx-1], 31h

loc_8049BC9:				; CODE XREF: sub_80495B0+86Fj
		mov	eax, dword_8055104
		cmp	off_805511C, eax
		jnb	short loc_8049BDE
		sub	eax, 1
		mov	dword_8055104, eax

loc_8049BDE:				; CODE XREF: sub_80495B0+624j
					; sub_80495B0+879j
		mov	[esp], esi
		mov	[esp+4], eax
		call	_stpcpy
		mov	esi, eax

loc_8049BEC:				; CODE XREF: sub_80495B0+5D2j
					; sub_80495B0+5D9j
		cmp	byte ptr [esp+83h], 0
		jz	loc_8049D88
		movzx	edx, byte ptr [esp+82h]
		jmp	short loc_8049C18
; ---------------------------------------------------------------------------
		align 8

loc_8049C08:				; CODE XREF: sub_80495B0+66Bj
		cmp	bl, 7Eh
		ja	short loc_8049C38
		mov	[esi], bl
		add	esi, 1

loc_8049C12:				; CODE XREF: sub_80495B0+683j
					; sub_80495B0+6ADj ...
		movzx	ebx, byte ptr [edi]
		add	edi, 1

loc_8049C18:				; CODE XREF: sub_80495B0+652j
		cmp	bl, 1Fh
		ja	short loc_8049C08
		cmp	bl, 9
		jz	short loc_8049C60
		cmp	bl, 0Ah
		jz	short loc_8049C70

loc_8049C27:				; CODE XREF: sub_80495B0+6B2j
		add	ebx, 40h
		mov	byte ptr [esi],	5Eh
		mov	[esi+1], bl
		add	esi, 2
		jmp	short loc_8049C12
; ---------------------------------------------------------------------------
		align 4

loc_8049C38:				; CODE XREF: sub_80495B0+65Bj
		cmp	bl, 7Fh
		jz	short loc_8049CA0
		cmp	bl, 9Fh
		mov	byte ptr [esi],	4Dh
		lea	eax, [esi+2]
		mov	byte ptr [esi+1], 2Dh
		jbe	short loc_8049C88
		cmp	bl, 0FFh
		jz	loc_8049DC8
		add	ebx, 0FFFFFF80h
		add	esi, 3
		mov	[eax], bl
		jmp	short loc_8049C12
; ---------------------------------------------------------------------------
		align 10h

loc_8049C60:				; CODE XREF: sub_80495B0+670j
		test	dl, dl
		jnz	short loc_8049C27
		mov	byte ptr [esi],	9
		add	esi, 1
		jmp	short loc_8049C12
; ---------------------------------------------------------------------------
		align 10h

loc_8049C70:				; CODE XREF: sub_80495B0+675j
					; sub_80495B0+7EBj
		mov	dword ptr [esp+94h], 0FFFFFFFFh

loc_8049C7B:				; CODE XREF: sub_80495B0+5C3j
		mov	[esp+9Ch], edi
		jmp	loc_8049A28
; ---------------------------------------------------------------------------
		align 4

loc_8049C88:				; CODE XREF: sub_80495B0+69Aj
		sub	ebx, 40h
		mov	byte ptr [esi+2], 5Eh
		mov	[esi+3], bl
		add	esi, 4
		jmp	loc_8049C12
; ---------------------------------------------------------------------------
		align 10h

loc_8049CA0:				; CODE XREF: sub_80495B0+68Bj
		mov	byte ptr [esi],	5Eh
		mov	byte ptr [esi+1], 3Fh
		add	esi, 2
		jmp	loc_8049C12
; ---------------------------------------------------------------------------
		align 10h

loc_8049CB0:				; CODE XREF: sub_80495B0+537j
		add	dword ptr [esp+94h], 1
		mov	ecx, [esp+94h]
		test	ecx, ecx
		jle	loc_8049D64
		cmp	dword ptr [esp+94h], 1
		jz	short loc_8049CF8
		cmp	byte ptr [esp+6Bh], 0
		mov	dword ptr [esp+94h], 2
		jz	short loc_8049CF8
		mov	eax, [esp+9Ch]
		mov	edi, eax
		movzx	ebx, byte ptr [eax]
		add	edi, 1
		jmp	loc_8049B70
; ---------------------------------------------------------------------------
		align 4

loc_8049CF8:				; CODE XREF: sub_80495B0+71Fj
					; sub_80495B0+731j
		mov	edx, [esp+5Ch]
		test	edx, edx
		jz	short loc_8049D64
		mov	eax, ds:off_80527E0
		lea	esi, [esi+0]

loc_8049D08:				; CODE XREF: sub_80495B0+777j
		movzx	edx, byte ptr [eax]
		lea	ecx, [edx+1]
		cmp	dl, 38h
		mov	[eax], cl
		jle	loc_8049F25
		mov	byte ptr [eax],	30h
		mov	edx, off_805511C
		sub	eax, 1
		cmp	eax, edx
		jnb	short loc_8049D08
		cmp	edx, offset a0	; "		    0\t"
		jbe	loc_8049E94
		lea	eax, [edx-1]
		mov	off_805511C, eax
		mov	byte ptr [edx-1], 31h

loc_8049D41:				; CODE XREF: sub_80495B0+8EBj
		mov	eax, dword_8055104
		cmp	off_805511C, eax
		jnb	short loc_8049D56
		sub	eax, 1
		mov	dword_8055104, eax

loc_8049D56:				; CODE XREF: sub_80495B0+79Cj
					; sub_80495B0+97Aj
		mov	[esp], esi
		mov	[esp+4], eax
		call	_stpcpy
		mov	esi, eax

loc_8049D64:				; CODE XREF: sub_80495B0+711j
					; sub_80495B0+74Ej
		cmp	byte ptr [esp+7Ah], 0
		jz	short loc_8049D71
		mov	byte ptr [esi],	24h
		add	esi, 1

loc_8049D71:				; CODE XREF: sub_80495B0+7B9j
		mov	byte ptr [esi],	0Ah
		mov	edi, [esp+9Ch]
		add	esi, 1
		add	edi, 1
		jmp	loc_8049B66
; ---------------------------------------------------------------------------
		align 4

loc_8049D88:				; CODE XREF: sub_80495B0+644j
		movzx	eax, byte ptr [esp+82h]
		jmp	short loc_8049DAC
; ---------------------------------------------------------------------------
		align 8

loc_8049D98:				; CODE XREF: sub_80495B0+7FFj
		cmp	bl, 0Ah
		jz	loc_8049C70

loc_8049DA1:				; CODE XREF: sub_80495B0+803j
		mov	[esi], bl
		add	esi, 1

loc_8049DA6:				; CODE XREF: sub_80495B0+80Fj
		movzx	ebx, byte ptr [edi]
		add	edi, 1

loc_8049DAC:				; CODE XREF: sub_80495B0+7E0j
		cmp	bl, 9
		jnz	short loc_8049D98
		test	al, al
		jz	short loc_8049DA1
		mov	byte ptr [esi],	5Eh
		mov	byte ptr [esi+1], 49h
		add	esi, 2
		jmp	short loc_8049DA6
; ---------------------------------------------------------------------------
		align 8

loc_8049DC8:				; CODE XREF: sub_80495B0+69Fj
		mov	byte ptr [eax],	5Eh
		mov	byte ptr [esi+3], 3Fh
		add	esi, 4
		jmp	loc_8049C12
; ---------------------------------------------------------------------------
		align 4

loc_8049DD8:				; CODE XREF: sub_80495B0+54Dj
		mov	eax, ds:fd
		lea	ecx, [esp+16Ch]
		mov	[esp+8], ecx
		mov	dword ptr [esp+4], 541Bh ; request
		mov	[esp], eax	; fd
		call	_ioctl
		test	eax, eax
		js	loc_8049EA0

loc_8049E00:				; CODE XREF: sub_80495B0+91Bj
		mov	ebx, [esp+16Ch]
		test	ebx, ebx
		jnz	loc_8049B12
		jmp	loc_8049B03
; ---------------------------------------------------------------------------
		align 8

loc_8049E18:				; CODE XREF: sub_80495B0+607j
		mov	byte ptr a0, 3Eh ; "		     0\t"
		jmp	loc_8049BC9
; ---------------------------------------------------------------------------

loc_8049E24:				; CODE XREF: sub_80495B0+5EBj
		mov	eax, dword_8055104
		jmp	loc_8049BDE
; ---------------------------------------------------------------------------
		align 10h

loc_8049E30:				; CODE XREF: sub_80495B0+55Cj
		mov	edx, [esp+90h]
		mov	[esp+8], ebx	; n
		mov	dword ptr [esp], 1 ; fd
		mov	[esp+4], edx	; buf
		call	sub_804A3E0
		cmp	ebx, eax
		jz	short loc_8049E88
		mov	dword ptr [esp+8], 5 ; category
		mov	dword ptr [esp+4], offset aWriteError ;	"write error"
		mov	dword ptr [esp], 0 ; domainname
		call	_dcgettext
		mov	ebx, eax
		call	___errno_location
		mov	[esp+8], ebx	; format
		mov	eax, [eax]
		mov	dword ptr [esp], 1 ; status
		mov	[esp+4], eax	; errnum
		call	_error

loc_8049E88:				; CODE XREF: sub_80495B0+89Dj
		mov	esi, [esp+90h]
		jmp	loc_8049B12
; ---------------------------------------------------------------------------

loc_8049E94:				; CODE XREF: sub_80495B0+77Fj
		mov	byte ptr a0, 3Eh ; "		     0\t"
		jmp	loc_8049D41
; ---------------------------------------------------------------------------

loc_8049EA0:				; CODE XREF: sub_80495B0+84Aj
		call	___errno_location
		mov	edx, [eax]
		cmp	edx, 19h
		jz	short loc_8049EC6
		cmp	edx, 5Fh
		nop
		jz	short loc_8049EC6
		cmp	edx, 16h
		jz	short loc_8049EC6
		cmp	edx, 13h
		jz	short loc_8049EC6
		cmp	edx, 26h
		nop
		jnz	loc_804A380

loc_8049EC6:				; CODE XREF: sub_80495B0+8FAj
					; sub_80495B0+900j ...
		mov	byte ptr [esp+73h], 0
		jmp	loc_8049E00
; ---------------------------------------------------------------------------

loc_8049ED0:				; CODE XREF: sub_80495B0+2F9j
		movzx	edx, byte ptr [eax+1]
		cmp	dl, ds:byte_80527F3
		jnz	loc_80498AF
		mov	ds:fd, 0
		xor	eax, eax
		mov	byte ptr [esp+4Ah], 1
		jmp	loc_80498CC
; ---------------------------------------------------------------------------

loc_8049EF6:				; CODE XREF: sub_80495B0+2E5j
		mov	edx, [esp+58h]
		mov	eax, [edx]
		mov	ds:dword_8055170, eax
		jmp	loc_80498A0
; ---------------------------------------------------------------------------

loc_8049F06:				; CODE XREF: sub_80495B0+363j
		mov	eax, [esp+7Ch]
		sub	eax, 1
		cmp	eax, 1FFFFFFFh
		jbe	loc_8049921
		mov	dword ptr [esp+7Ch], 200h
		jmp	loc_8049921
; ---------------------------------------------------------------------------

loc_8049F25:				; CODE XREF: sub_80495B0+763j
		mov	eax, dword_8055104
		jmp	loc_8049D56
; ---------------------------------------------------------------------------

loc_8049F2F:				; CODE XREF: sub_80495B0+585j
		call	___errno_location
		mov	dword ptr [esp+8], (offset format+4) ; format
		mov	edi, eax
		mov	eax, ds:dword_8055170
		mov	[esp+0Ch], eax
		mov	eax, [edi]
		mov	dword ptr [esp], 0 ; status
		mov	[esp+4], eax	; errnum
		call	_error
		sub	esi, [esp+90h]
		jnz	loc_804A0C1

loc_8049F66:				; CODE XREF: sub_80495B0+B2Ej
					; sub_80495B0+B66j
		mov	ecx, [esp+94h]
		mov	byte ptr [esp+53h], 0
		mov	ds:dword_805516C, ecx

loc_8049F78:				; CODE XREF: sub_80495B0+A62j
					; sub_80495B0+E28j
		mov	ecx, [esp+4Ch]
		mov	[esp], ecx	; ptr
		call	_free

loc_8049F84:				; CODE XREF: sub_80495B0+CFEj
		mov	eax, [esp+54h]
		mov	[esp], eax	; ptr
		call	_free

loc_8049F90:				; CODE XREF: sub_80495B0+A95j
					; sub_80495B0+B0Cj
		mov	eax, ds:dword_8055170
		movzx	edx, byte ptr [eax]
		cmp	dl, ds:byte_80527F2
		jz	short loc_8049FEA

loc_8049FA0:				; CODE XREF: sub_80495B0+A46j
		mov	eax, ds:fd
		mov	[esp], eax	; fd
		call	_close
		test	eax, eax
		js	loc_804A135

loc_8049FB5:				; CODE XREF: sub_80495B0+A44j
					; sub_80495B0+BB3j
		add	dword ptr [esp+60h], 1
		mov	edx, [esp+60h]
		add	dword ptr [esp+58h], 4
		cmp	[ebp+argc], edx
		jg	loc_804988E
		cmp	byte ptr [esp+4Ah], 0
		jnz	loc_804A2BA

loc_8049FD7:				; CODE XREF: sub_80495B0+D18j
					; sub_80495B0+D57j
		movzx	eax, byte ptr [esp+53h]
		xor	eax, 1
		movzx	eax, al
		mov	[esp], eax	; status
		call	_exit
; ---------------------------------------------------------------------------

loc_8049FEA:				; CODE XREF: sub_80495B0+9EEj
		movzx	eax, byte ptr [eax+1]
		cmp	al, ds:byte_80527F3
		jz	short loc_8049FB5
		jmp	short loc_8049FA0
; ---------------------------------------------------------------------------

loc_8049FF8:				; CODE XREF: sub_80495B0+58Dj
		sub	esi, [esp+90h]
		jnz	loc_804A168

loc_804A005:				; CODE XREF: sub_80495B0+BD5j
					; sub_80495B0+C14j
		mov	edx, [esp+94h]
		mov	ds:dword_805516C, edx
		jmp	loc_8049F78
; ---------------------------------------------------------------------------

loc_804A017:				; CODE XREF: sub_80495B0+339j
		call	___errno_location
		mov	edx, ds:dword_8055170
		mov	dword ptr [esp+8], (offset format+4) ; format
		mov	[esp+0Ch], edx
		mov	eax, [eax]
		mov	dword ptr [esp], 0 ; status
		mov	[esp+4], eax	; errnum
		call	_error
		mov	byte ptr [esp+53h], 0
		jmp	loc_8049F90
; ---------------------------------------------------------------------------

loc_804A04A:				; CODE XREF: sub_80495B0+390j
		mov	edx, [esp+34h]
		cmp	[esp+168h], edx
		jnz	loc_8049946
		mov	ecx, [esp+38h]
		cmp	[esp+164h], ecx
		jnz	loc_8049946
		cmp	ds:fd, 0
		jz	loc_8049946
		mov	esi, ds:dword_8055170
		mov	dword ptr [esp+8], 5 ; category
		mov	dword ptr [esp+4], offset aSInputFileIsOu ; "%s: input file is output file"
		mov	dword ptr [esp], 0 ; domainname
		call	_dcgettext
		mov	[esp+0Ch], esi
		mov	dword ptr [esp+4], 0 ; errnum
		mov	dword ptr [esp], 0 ; status
		mov	[esp+8], eax	; format
		call	_error
		mov	byte ptr [esp+53h], 0
		jmp	loc_8049F90
; ---------------------------------------------------------------------------

loc_804A0C1:				; CODE XREF: sub_80495B0+9B0j
		mov	edx, [esp+90h]
		mov	[esp+8], esi	; n
		mov	dword ptr [esp], 1 ; fd
		mov	[esp+4], edx	; buf
		call	sub_804A3E0
		cmp	esi, eax
		jz	loc_8049F66
		mov	dword ptr [esp+8], 5 ; category
		mov	dword ptr [esp+4], offset aWriteError ;	"write error"
		mov	dword ptr [esp], 0 ; domainname
		call	_dcgettext
		mov	[esp+8], eax	; format
		mov	eax, [edi]
		mov	dword ptr [esp], 1 ; status
		mov	[esp+4], eax	; errnum
		call	_error
		jmp	loc_8049F66
; ---------------------------------------------------------------------------

loc_804A11B:				; CODE XREF: sub_80495B0+271j
		lea	eax, [ebx-1]
		cmp	eax, 1FFFFFFFh
		jbe	loc_804982C
		mov	ebx, 200h
		db	66h
		nop
		jmp	loc_804982C
; ---------------------------------------------------------------------------

loc_804A135:				; CODE XREF: sub_80495B0+316j
					; sub_80495B0+9FFj
		call	___errno_location
		mov	edx, ds:dword_8055170
		mov	dword ptr [esp+8], (offset format+4) ; format
		mov	[esp+0Ch], edx
		mov	eax, [eax]
		mov	dword ptr [esp], 0 ; status
		mov	[esp+4], eax	; errnum
		call	_error
		mov	byte ptr [esp+53h], 0
		jmp	loc_8049FB5
; ---------------------------------------------------------------------------

loc_804A168:				; CODE XREF: sub_80495B0+A4Fj
		mov	eax, [esp+90h]
		mov	[esp+8], esi	; n
		mov	dword ptr [esp], 1 ; fd
		mov	[esp+4], eax	; buf
		call	sub_804A3E0
		cmp	esi, eax
		jz	loc_804A005
		mov	dword ptr [esp+8], 5 ; category
		mov	dword ptr [esp+4], offset aWriteError ;	"write error"
		mov	dword ptr [esp], 0 ; domainname
		call	_dcgettext
		mov	esi, eax
		call	___errno_location
		mov	[esp+8], esi	; format
		mov	eax, [eax]
		mov	dword ptr [esp], 1 ; status
		mov	[esp+4], eax	; errnum
		call	_error
		jmp	loc_804A005
; ---------------------------------------------------------------------------

loc_804A1C9:				; CODE XREF: sub_80495B0+3B7j
		cmp	byte ptr [esp+6Bh], 0
		jnz	loc_804996D
		mov	esi, [esp+7Ch]
		cmp	esi, [esp+74h]
		jnb	short loc_804A1E2
		mov	esi, [esp+74h]

loc_804A1E2:				; CODE XREF: sub_80495B0+C2Cj
		mov	edi, [esp+64h]
		mov	ebx, esi
		sub	edi, 1
		lea	eax, [edi+esi]
		mov	[esp], eax	; size
		call	sub_804D070
		xor	edx, edx
		add	edi, eax
		mov	[esp+54h], eax
		mov	eax, edi
		div	dword ptr [esp+64h]
		sub	edi, edx
		mov	esi, edi

loc_804A208:				; CODE XREF: sub_80495B0+C92j
					; sub_80495B0+CCDj
		mov	eax, ds:fd
		mov	[esp+8], ebx	; nbytes
		mov	[esp+4], esi	; buf
		mov	[esp], eax	; fd
		call	sub_804CE10
		cmp	eax, 0FFFFFFFFh
		mov	edi, eax
		jz	short loc_804A27F
		test	eax, eax
		jz	loc_804A2B3
		mov	[esp+8], eax	; n
		mov	[esp+4], esi	; buf
		mov	dword ptr [esp], 1 ; fd
		call	sub_804A3E0
		cmp	edi, eax
		jz	short loc_804A208
		mov	dword ptr [esp+8], 5 ; category
		mov	dword ptr [esp+4], offset aWriteError ;	"write error"
		mov	dword ptr [esp], 0 ; domainname
		call	_dcgettext
		mov	edi, eax
		call	___errno_location
		mov	[esp+8], edi	; format
		mov	eax, [eax]
		mov	dword ptr [esp], 1 ; status
		mov	[esp+4], eax	; errnum
		call	_error
		jmp	short loc_804A208
; ---------------------------------------------------------------------------

loc_804A27F:				; CODE XREF: sub_80495B0+C72j
		call	___errno_location
		mov	edx, ds:dword_8055170
		mov	dword ptr [esp+8], (offset format+4) ; format
		mov	[esp+0Ch], edx
		mov	eax, [eax]
		mov	dword ptr [esp], 0 ; status
		mov	[esp+4], eax	; errnum
		call	_error
		xor	eax, eax

loc_804A2AA:				; CODE XREF: sub_80495B0+D08j
		and	[esp+53h], al
		jmp	loc_8049F84
; ---------------------------------------------------------------------------

loc_804A2B3:				; CODE XREF: sub_80495B0+C76j
		mov	eax, 1
		jmp	short loc_804A2AA
; ---------------------------------------------------------------------------

loc_804A2BA:				; CODE XREF: sub_80495B0+A21j
		mov	dword ptr [esp], 0 ; fd
		call	_close
		test	eax, eax
		jns	loc_8049FD7
		mov	dword ptr [esp+8], 5 ; category
		mov	dword ptr [esp+4], offset aClosingStandar ; "closing standard input"
		mov	dword ptr [esp], 0 ; domainname
		call	_dcgettext
		mov	ebx, eax
		call	___errno_location
		mov	[esp+8], ebx	; format
		mov	eax, [eax]
		mov	dword ptr [esp], 1 ; status
		mov	[esp+4], eax	; errnum
		call	_error
		jmp	loc_8049FD7
; ---------------------------------------------------------------------------

loc_804A30C:				; CODE XREF: sub_80495B0+292j
		mov	edx, [esp+10Ch]
		mov	ecx, [esp+110h]
		mov	eax, [esp+164h]
		mov	byte ptr [esp+4Bh], 1
		mov	[esp+40h], edx
		mov	edx, [esp+168h]
		mov	[esp+3Ch], ecx
		mov	[esp+38h], eax
		mov	[esp+34h], edx
		jmp	loc_8049848
; ---------------------------------------------------------------------------

loc_804A342:				; CODE XREF: sub_80495B0+241j
		mov	dword ptr [esp+8], 5 ; category
		mov	dword ptr [esp+4], offset aStandardOutput ; "standard output"
		mov	dword ptr [esp], 0 ; domainname
		call	_dcgettext
		mov	ebx, eax
		call	___errno_location
		mov	[esp+8], ebx	; format
		mov	eax, [eax]
		mov	dword ptr [esp], 1 ; status
		mov	[esp+4], eax	; errnum
		call	_error
		jmp	loc_80497F7
; ---------------------------------------------------------------------------

loc_804A380:				; CODE XREF: sub_80495B0+910j
		mov	edi, eax
		mov	eax, ds:dword_8055170
		mov	[esp], eax
		call	sub_804BD40
		mov	dword ptr [esp+8], 5 ; category
		mov	dword ptr [esp+4], offset aCannotDoIoctlO ; "cannot do ioctl on	%s"
		mov	dword ptr [esp], 0 ; domainname
		mov	esi, eax
		call	_dcgettext
		mov	[esp+0Ch], esi
		mov	[esp+8], eax	; format
		mov	eax, [edi]
		mov	dword ptr [esp], 0 ; status
		mov	[esp+4], eax	; errnum
		call	_error
		mov	eax, [esp+94h]
		mov	byte ptr [esp+53h], 0
		mov	ds:dword_805516C, eax
		jmp	loc_8049F78
sub_80495B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_804A3E0(int fd, void *buf, size_t n)
sub_804A3E0	proc near		; CODE XREF: sub_80495B0+4B1p
					; sub_80495B0+896p ...

fd		= dword	ptr  8
buf		= dword	ptr  0Ch
n		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		xor	edi, edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	ebx, [ebp+n]
		test	ebx, ebx
		jz	short loc_804A41C
		mov	esi, [ebp+buf]
		jmp	short loc_804A404
; ---------------------------------------------------------------------------
		align 4

loc_804A3F8:				; CODE XREF: sub_804A3E0+3Aj
		test	eax, eax
		jz	short loc_804A428
		add	edi, eax
		sub	ebx, eax
		jz	short loc_804A41C
		add	esi, eax

loc_804A404:				; CODE XREF: sub_804A3E0+15j
		mov	[esp+8], ebx	; n
		mov	[esp+4], esi	; buf
		mov	eax, [ebp+fd]
		mov	[esp], eax	; fd
		call	sub_804CE70
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_804A3F8

loc_804A41C:				; CODE XREF: sub_804A3E0+10j
					; sub_804A3E0+20j
		add	esp, 1Ch
		mov	eax, edi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_804A428:				; CODE XREF: sub_804A3E0+1Aj
		call	___errno_location
		mov	dword ptr [eax], 1Ch
		add	esp, 1Ch
		mov	eax, edi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_804A3E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_804A440(char *s)
sub_804A440	proc near		; CODE XREF: sub_80495B0+20p

var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
s		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	[ebp+var_C], ebx
		mov	ebx, [ebp+s]
		mov	dword ptr [esp+4], 2Fh ; c
		mov	[ebp+var_8], esi
		mov	[ebp+var_4], edi
		mov	[esp], ebx	; s
		call	_strrchr
		test	eax, eax
		jz	short loc_804A4A9
		lea	edx, [eax+1]
		mov	ecx, edx
		sub	ecx, ebx
		cmp	ecx, 6
		mov	[ebp+var_1C], edx
		jle	short loc_804A4A9
		lea	esi, [eax-6]
		mov	edi, offset a_libs ; "/.libs/"
		mov	ecx, 7
		repe cmpsb
		jnz	short loc_804A4A9
		mov	esi, [ebp+var_1C]
		mov	ecx, 3
		mov	edi, offset byte_80527F0
		mov	ebx, [ebp+var_1C]
		repe cmpsb
		setnbe	cl
		mov	esi, ecx
		setb	cl
		mov	edx, esi
		cmp	dl, cl
		jnz	short loc_804A4A9
		lea	ebx, [eax+4]

loc_804A4A9:				; CODE XREF: sub_804A440+24j
					; sub_804A440+33j ...
		mov	ds:dword_8055178, ebx
		mov	esi, [ebp+var_8]
		mov	ebx, [ebp+var_C]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
sub_804A440	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_804A4C0	proc near		; CODE XREF: sub_804ADD0+B5p
					; sub_804ADD0+C6p ...

var_CC		= dword	ptr -0CCh
ptr		= dword	ptr -0C0h
var_B9		= byte ptr -0B9h
var_B4		= byte ptr -0B4h
p		= mbstate_t ptr	-0B0h
var_A8		= byte ptr -0A8h
s		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= byte ptr -9Ch
pwc		= dword	ptr -98h
var_7C		= byte ptr -7Ch
var_78		= byte ptr -78h
var_70		= byte ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
wc		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 0DCh
		mov	dword ptr [esp+4], 2
		lea	esi, [ebp+var_78]
		mov	eax, large gs:14h
		mov	[ebp+var_1C], eax
		xor	eax, eax
		mov	[esp], edx
		call	sub_804B150
		mov	[ebp+ptr], eax
		lea	esi, [esi+0]

loc_804A4F8:				; CODE XREF: sub_804A4C0+6C0j
		cmp	byte ptr [ebx],	0
		jz	loc_804A900

loc_804A501:				; CODE XREF: sub_804A4C0+439j
		mov	edx, [ebp+ptr]
		mov	[esp], ebx
		mov	[esp+4], edx
		call	sub_804E1D0
		test	eax, eax
		mov	edi, eax
		jz	loc_804A900
		call	___ctype_get_mb_cur_max
		cmp	eax, 1
		jbe	loc_804AB08
		cmp	edi, ebx
		mov	[ebp+var_6C], ebx
		mov	[ebp+var_7C], 0
		mov	dword ptr [esi], 0
		mov	dword ptr [esi+4], 0
		mov	[ebp+var_70], 0
		jbe	loc_804A607
		mov	[ebp+var_CC], edi

loc_804A551:				; CODE XREF: sub_804A4C0+124j
		cmp	[ebp+var_7C], 0
		jnz	loc_804AA4C
		mov	edx, [ebp+var_6C]
		movzx	eax, byte ptr [edx]
		mov	ecx, eax
		shr	cl, 5
		movzx	ecx, cl
		mov	ecx, ds:dword_8052FA0[ecx*4]
		bt	ecx, eax
		jnb	loc_804AA38
		mov	[ebp+var_68], 1
		movsx	eax, byte ptr [edx]
		mov	byte ptr [ebp+var_64], 1
		mov	[ebp+wc], eax

loc_804A58A:				; CODE XREF: sub_804A4C0+5FFj
					; sub_804A4C0+609j ...
		cmp	byte ptr [ebp+var_64], 0
		mov	[ebp+var_70], 1
		jnz	loc_804AA00

loc_804A598:				; CODE XREF: sub_804A4C0+54Bj
		mov	edi, [ebp+var_5C]
		mov	edx, [ebp+var_6C]
		mov	eax, [ebp+var_68]
		mov	ecx, [ebp+var_64]
		mov	[ebp+var_34], edi
		mov	edi, [ebp+var_58]
		mov	ebx, [ebp+wc]
		mov	[ebp+var_40], eax
		lea	eax, [edx+eax]
		cmp	[ebp+var_CC], eax
		mov	[ebp+var_30], edi
		mov	edi, [ebp+var_54]
		mov	[ebp+var_44], edx
		mov	[ebp+var_3C], ecx
		mov	[ebp+var_38], ebx
		mov	[ebp+var_2C], edi
		mov	edi, [ebp+var_50]
		mov	[ebp+var_6C], eax
		mov	[ebp+var_70], 0
		mov	[ebp+var_28], edi
		mov	edi, [ebp+var_4C]
		mov	[ebp+var_24], edi
		mov	edi, [ebp+var_48]
		mov	[ebp+var_20], edi
		ja	loc_804A551
		test	cl, cl
		mov	edi, [ebp+var_CC]
		jz	short loc_804A607
		mov	[esp], ebx	; wc
		call	_iswalnum
		mov	[ebp+var_B9], 0
		test	eax, eax
		jnz	short loc_804A60E

loc_804A607:				; CODE XREF: sub_804A4C0+85j
					; sub_804A4C0+132j
		mov	[ebp+var_B9], 1

loc_804A60E:				; CODE XREF: sub_804A4C0+145j
		mov	eax, [ebp+ptr]
		lea	ebx, [ebp+p]
		mov	[ebp+var_B4], 0
		cmp	[ebp+var_B4], 0
		mov	[ebp+var_6C], edi
		mov	[ebp+var_7C], 0
		mov	dword ptr [esi], 0
		mov	dword ptr [esi+4], 0
		mov	[ebp+var_70], 0
		mov	[ebp+s], eax
		mov	[ebp+p.__count], 0
		mov	dword ptr [ebp+p.__value], 0
		mov	[ebp+var_A8], 0
		jnz	loc_804A72E
		nop

loc_804A668:				; CODE XREF: sub_804A4C0+268j
		mov	edx, [ebp+s]
		movzx	eax, byte ptr [edx]
		mov	ecx, eax
		shr	cl, 5
		movzx	ecx, cl
		mov	ecx, ds:dword_8052FA0[ecx*4]
		bt	ecx, eax
		jnb	loc_804A9D8
		mov	[ebp+var_A0], 1
		movsx	eax, byte ptr [edx]
		mov	[ebp+var_9C], 1
		mov	[ebp+pwc], eax

loc_804A6A3:				; CODE XREF: sub_804A4C0+2F9j
					; sub_804A4C0+561j ...
		cmp	[ebp+var_9C], 0
		mov	[ebp+var_A8], 1
		jnz	loc_804A7E0

loc_804A6B7:				; CODE XREF: sub_804A4C0+314j
					; sub_804A4C0+328j
		cmp	[ebp+var_70], 0
		jnz	short loc_804A6FA
		cmp	[ebp+var_7C], 0
		jnz	loc_804A954
		mov	edx, [ebp+var_6C]
		movzx	eax, byte ptr [edx]
		mov	ecx, eax
		shr	cl, 5
		movzx	ecx, cl
		mov	ecx, ds:dword_8052FA0[ecx*4]
		bt	ecx, eax
		jnb	loc_804A940
		mov	[ebp+var_68], 1
		movsx	eax, byte ptr [edx]
		mov	byte ptr [ebp+var_64], 1
		mov	[ebp+wc], eax

loc_804A6F6:				; CODE XREF: sub_804A4C0+507j
					; sub_804A4C0+511j ...
		mov	[ebp+var_70], 1

loc_804A6FA:				; CODE XREF: sub_804A4C0+1FBj
		cmp	byte ptr [ebp+var_64], 0
		jnz	loc_804A930

loc_804A704:				; CODE XREF: sub_804A4C0+475j
		mov	eax, [ebp+var_68]
		add	[ebp+var_6C], eax
		mov	eax, [ebp+var_A0]
		add	[ebp+s], eax
		cmp	[ebp+var_B4], 0
		mov	[ebp+var_70], 0
		mov	[ebp+var_A8], 0
		jz	loc_804A668

loc_804A72E:				; CODE XREF: sub_804A4C0+1A1j
					; sub_804A4C0+534j
		call	___ctype_get_mb_cur_max
		mov	[esp+4], eax	; n
		mov	eax, [ebp+s]
		mov	[esp], eax	; s
		call	sub_804B110
		mov	[esp+0Ch], ebx	; p
		mov	[esp+8], eax	; n
		mov	eax, [ebp+s]
		mov	[esp+4], eax	; s
		lea	eax, [ebp+pwc]
		mov	[esp], eax	; pwc
		call	_mbrtowc
		cmp	eax, 0FFFFFFFFh
		mov	[ebp+var_A0], eax
		jz	loc_804AA10
		cmp	eax, 0FFFFFFFEh
		jz	loc_804AAD0
		test	eax, eax
		jnz	short loc_804A7A8
		mov	eax, [ebp+s]
		mov	[ebp+var_A0], 1
		cmp	byte ptr [eax],	0
		jnz	loc_804AD9E
		mov	edx, [ebp+pwc]
		test	edx, edx
		jnz	loc_804AD7A

loc_804A7A8:				; CODE XREF: sub_804A4C0+2BFj
		mov	[esp], ebx	; ps
		mov	[ebp+var_9C], 1
		call	_mbsinit
		test	eax, eax
		jz	loc_804A6A3
		cmp	[ebp+var_9C], 0
		mov	[ebp+var_B4], 0
		mov	[ebp+var_A8], 1
		jz	loc_804A6B7
		lea	esi, [esi+0]

loc_804A7E0:				; CODE XREF: sub_804A4C0+1F1j
		mov	eax, [ebp+pwc]
		test	eax, eax
		jnz	loc_804A6B7
		cmp	[ebp+var_70], 0
		jnz	short loc_804A831
		cmp	[ebp+var_7C], 0
		jnz	loc_804ABEC
		mov	edx, [ebp+var_6C]
		movzx	eax, byte ptr [edx]
		mov	ecx, eax
		shr	cl, 5
		movzx	ecx, cl
		mov	ecx, ds:dword_8052FA0[ecx*4]
		bt	ecx, eax
		jnb	loc_804ABD8
		mov	[ebp+var_68], 1
		movsx	eax, byte ptr [edx]
		mov	byte ptr [ebp+var_64], 1
		mov	[ebp+wc], eax

loc_804A82D:				; CODE XREF: sub_804A4C0+79Fj
					; sub_804A4C0+7A9j ...
		mov	[ebp+var_70], 1

loc_804A831:				; CODE XREF: sub_804A4C0+332j
		cmp	byte ptr [ebp+var_64], 0
		jnz	loc_804AB98

loc_804A83B:				; CODE XREF: sub_804A4C0+6E3j
		mov	ecx, [ebp+var_5C]
		mov	eax, [ebp+var_6C]
		mov	edx, [ebp+var_64]
		mov	[ebp+var_34], ecx
		mov	ecx, [ebp+var_58]
		mov	[ebp+var_44], eax
		mov	eax, [ebp+var_68]
		test	dl, dl
		mov	[ebp+var_3C], edx
		mov	[ebp+var_30], ecx
		mov	ecx, [ebp+var_54]
		mov	[ebp+var_40], eax
		mov	eax, [ebp+wc]
		mov	[ebp+var_2C], ecx
		mov	ecx, [ebp+var_50]
		mov	[ebp+var_38], eax
		mov	[ebp+var_28], ecx
		mov	ecx, [ebp+var_4C]
		mov	[ebp+var_24], ecx
		mov	ecx, [ebp+var_48]
		mov	[ebp+var_20], ecx
		jz	short loc_804A889
		mov	[esp], eax	; wc
		call	_iswalnum
		xor	edx, edx
		test	eax, eax
		jnz	short loc_804A88E

loc_804A889:				; CODE XREF: sub_804A4C0+3B9j
					; sub_804A4C0+6DDj
		mov	edx, 1

loc_804A88E:				; CODE XREF: sub_804A4C0+3C7j
		cmp	[ebp+var_B9], 0
		jz	short loc_804A89F
		test	dl, dl
		jnz	loc_804AD4C

loc_804A89F:				; CODE XREF: sub_804A4C0+3D5j
		mov	[ebp+var_6C], edi
		mov	[ebp+var_7C], 0
		mov	dword ptr [esi], 0
		mov	dword ptr [esi+4], 0
		mov	[ebp+var_70], 0
		movzx	eax, byte ptr [edi]
		mov	edx, eax
		shr	dl, 5
		movzx	edx, dl
		mov	edx, ds:dword_8052FA0[edx*4]
		bt	edx, eax
		jnb	loc_804AC70
		mov	[ebp+var_68], 1
		movsx	eax, byte ptr [edi]
		mov	byte ptr [ebp+var_64], 1
		mov	[ebp+wc], eax

loc_804A8E3:				; CODE XREF: sub_804A4C0+82Fj
					; sub_804A4C0+839j ...
		cmp	byte ptr [ebp+var_64], 0
		mov	[ebp+var_70], 1
		jnz	loc_804ABA8

loc_804A8F1:				; CODE XREF: sub_804A4C0+6F8j
		mov	ebx, [ebp+var_68]
		add	ebx, edi
		cmp	byte ptr [ebx],	0
		jnz	loc_804A501
		nop

loc_804A900:				; CODE XREF: sub_804A4C0+3Bj
					; sub_804A4C0+57j ...
		xor	ebx, ebx

loc_804A902:				; CODE XREF: sub_804A4C0+891j
		mov	edi, [ebp+ptr]
		mov	[esp], edi	; ptr
		call	_free
		mov	eax, ebx
		mov	edx, [ebp+var_1C]
		xor	edx, large gs:14h
		jnz	loc_804ADC2
		add	esp, 0DCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_804A930:				; CODE XREF: sub_804A4C0+23Ej
		mov	ecx, [ebp+wc]
		test	ecx, ecx
		jnz	loc_804A704

loc_804A93B:				; CODE XREF: sub_804A4C0+545j
		call	_abort
; ---------------------------------------------------------------------------

loc_804A940:				; CODE XREF: sub_804A4C0+21Fj
		mov	[esp], esi	; ps
		call	_mbsinit
		test	eax, eax
		jz	loc_804AD56
		mov	[ebp+var_7C], 1

loc_804A954:				; CODE XREF: sub_804A4C0+201j
		call	___ctype_get_mb_cur_max
		mov	[esp+4], eax	; n
		mov	eax, [ebp+var_6C]
		mov	[esp], eax	; s
		call	sub_804B110
		lea	edx, [ebp+wc]
		mov	[esp+0Ch], esi	; p
		mov	[esp], edx	; pwc
		mov	[esp+8], eax	; n
		mov	eax, [ebp+var_6C]
		mov	[esp+4], eax	; s
		call	_mbrtowc
		cmp	eax, 0FFFFFFFFh
		mov	[ebp+var_68], eax
		jz	loc_804AA28
		cmp	eax, 0FFFFFFFEh
		jz	loc_804AAF0
		test	eax, eax
		jnz	short loc_804A9B9
		mov	eax, [ebp+var_6C]
		mov	[ebp+var_68], 1
		cmp	byte ptr [eax],	0
		jnz	loc_804AD9E
		mov	eax, [ebp+wc]
		test	eax, eax
		jnz	loc_804AD7A

loc_804A9B9:				; CODE XREF: sub_804A4C0+4D9j
		mov	[esp], esi	; ps
		mov	byte ptr [ebp+var_64], 1
		call	_mbsinit
		test	eax, eax
		jz	loc_804A6F6
		mov	[ebp+var_7C], 0
		jmp	loc_804A6F6
; ---------------------------------------------------------------------------
		align 4

loc_804A9D8:				; CODE XREF: sub_804A4C0+1C3j
		mov	[esp], ebx	; ps
		nop
		lea	esi, [esi+0]
		call	_mbsinit
		test	eax, eax
		jz	loc_804AD56
		mov	[ebp+var_B4], 1
		jmp	loc_804A72E
; ---------------------------------------------------------------------------
		align 10h

loc_804AA00:				; CODE XREF: sub_804A4C0+D2j
		mov	edx, [ebp+wc]
		test	edx, edx
		jz	loc_804A93B
		jmp	loc_804A598
; ---------------------------------------------------------------------------

loc_804AA10:				; CODE XREF: sub_804A4C0+2AEj
		mov	[ebp+var_A0], 1
		mov	[ebp+var_9C], 0
		jmp	loc_804A6A3
; ---------------------------------------------------------------------------
		align 4

loc_804AA28:				; CODE XREF: sub_804A4C0+4C8j
		mov	[ebp+var_68], 1
		mov	byte ptr [ebp+var_64], 0
		jmp	loc_804A6F6
; ---------------------------------------------------------------------------

loc_804AA38:				; CODE XREF: sub_804A4C0+B3j
		mov	[esp], esi	; ps
		call	_mbsinit
		test	eax, eax
		jz	loc_804AD56
		mov	[ebp+var_7C], 1

loc_804AA4C:				; CODE XREF: sub_804A4C0+95j
		call	___ctype_get_mb_cur_max
		lea	edi, [ebp+wc]
		mov	[esp+4], eax	; n
		mov	eax, [ebp+var_6C]
		mov	[esp], eax	; s
		call	sub_804B110
		mov	[esp+0Ch], esi	; p
		mov	[esp], edi	; pwc
		mov	[esp+8], eax	; n
		mov	eax, [ebp+var_6C]
		mov	[esp+4], eax	; s
		call	_mbrtowc
		cmp	eax, 0FFFFFFFFh
		mov	[ebp+var_68], eax
		jz	loc_804AB88
		cmp	eax, 0FFFFFFFEh
		jz	loc_804ABC0
		test	eax, eax
		jnz	short loc_804AAB1
		mov	eax, [ebp+var_6C]
		mov	[ebp+var_68], 1
		cmp	byte ptr [eax],	0
		jnz	loc_804AD9E
		mov	ecx, [ebp+wc]
		test	ecx, ecx
		jnz	loc_804AD7A

loc_804AAB1:				; CODE XREF: sub_804A4C0+5D1j
		mov	[esp], esi	; ps
		mov	byte ptr [ebp+var_64], 1
		call	_mbsinit
		test	eax, eax
		jz	loc_804A58A
		mov	[ebp+var_7C], 0
		jmp	loc_804A58A
; ---------------------------------------------------------------------------
		align 10h

loc_804AAD0:				; CODE XREF: sub_804A4C0+2B7j
		mov	eax, [ebp+s]
		mov	[esp], eax	; s
		call	_strlen
		mov	[ebp+var_9C], 0
		mov	[ebp+var_A0], eax
		jmp	loc_804A6A3
; ---------------------------------------------------------------------------

loc_804AAF0:				; CODE XREF: sub_804A4C0+4D1j
		mov	eax, [ebp+var_6C]
		mov	[esp], eax	; s
		call	_strlen
		mov	byte ptr [ebp+var_64], 0
		mov	[ebp+var_68], eax
		jmp	loc_804A6F6
; ---------------------------------------------------------------------------
		align 4

loc_804AB08:				; CODE XREF: sub_804A4C0+65j
		cmp	ebx, edi
		mov	[ebp+var_B9], 1
		jnb	short loc_804AB31
		call	___ctype_b_loc
		movzx	edx, byte ptr [edi-1]
		mov	eax, [eax]
		movzx	eax, word ptr [eax+edx*2]
		shr	eax, 3
		xor	eax, 1
		and	eax, 1
		mov	[ebp+var_B9], al

loc_804AB31:				; CODE XREF: sub_804A4C0+651j
		mov	edx, [ebp+ptr]
		mov	[esp], edx	; s
		call	_strlen
		movzx	ebx, byte ptr [edi+eax]
		mov	eax, 1
		test	bl, bl
		jz	short loc_804AB63
		call	___ctype_b_loc
		movzx	ebx, bl
		mov	eax, [eax]
		movzx	eax, word ptr [eax+ebx*2]
		shr	eax, 3
		xor	eax, 1
		and	eax, 1

loc_804AB63:				; CODE XREF: sub_804A4C0+68Aj
		cmp	[ebp+var_B9], 0
		jz	short loc_804AB74
		test	al, al
		jnz	loc_804AD4C

loc_804AB74:				; CODE XREF: sub_804A4C0+6AAj
		cmp	byte ptr [edi],	0
		jz	loc_804A900
		lea	ebx, [edi+1]
		jmp	loc_804A4F8
; ---------------------------------------------------------------------------
		align 4

loc_804AB88:				; CODE XREF: sub_804A4C0+5C0j
		mov	[ebp+var_68], 1
		mov	byte ptr [ebp+var_64], 0
		jmp	loc_804A58A
; ---------------------------------------------------------------------------

loc_804AB98:				; CODE XREF: sub_804A4C0+375j
		mov	ecx, [ebp+wc]
		test	ecx, ecx
		jz	loc_804A889
		jmp	loc_804A83B
; ---------------------------------------------------------------------------

loc_804ABA8:				; CODE XREF: sub_804A4C0+42Bj
		mov	eax, [ebp+wc]
		test	eax, eax
		lea	esi, [esi+0]
		jz	loc_804A900
		db	66h
		nop
		jmp	loc_804A8F1
; ---------------------------------------------------------------------------
		align 10h

loc_804ABC0:				; CODE XREF: sub_804A4C0+5C9j
		mov	eax, [ebp+var_6C]
		mov	[esp], eax	; s
		call	_strlen
		mov	byte ptr [ebp+var_64], 0
		mov	[ebp+var_68], eax
		jmp	loc_804A58A
; ---------------------------------------------------------------------------
		align 4

loc_804ABD8:				; CODE XREF: sub_804A4C0+356j
		mov	[esp], esi	; ps
		call	_mbsinit
		test	eax, eax
		jz	loc_804AD56
		mov	[ebp+var_7C], 1

loc_804ABEC:				; CODE XREF: sub_804A4C0+338j
		call	___ctype_get_mb_cur_max
		mov	[esp+4], eax	; n
		mov	eax, [ebp+var_6C]
		mov	[esp], eax	; s
		call	sub_804B110
		lea	edx, [ebp+wc]
		mov	[esp+0Ch], esi	; p
		mov	[esp], edx	; pwc
		mov	[esp+8], eax	; n
		mov	eax, [ebp+var_6C]
		mov	[esp+4], eax	; s
		call	_mbrtowc
		cmp	eax, 0FFFFFFFFh
		mov	[ebp+var_68], eax
		jz	loc_804ACFE
		cmp	eax, 0FFFFFFFEh
		jz	loc_804AD1E
		test	eax, eax
		jnz	short loc_804AC51
		mov	eax, [ebp+var_6C]
		mov	[ebp+var_68], 1
		cmp	byte ptr [eax],	0
		jnz	loc_804AD9E
		mov	ebx, [ebp+wc]
		test	ebx, ebx
		jnz	loc_804AD7A

loc_804AC51:				; CODE XREF: sub_804A4C0+771j
		mov	[esp], esi	; ps
		mov	byte ptr [ebp+var_64], 1
		call	_mbsinit
		test	eax, eax
		jz	loc_804A82D
		mov	[ebp+var_7C], 0
		jmp	loc_804A82D
; ---------------------------------------------------------------------------
		align 10h

loc_804AC70:				; CODE XREF: sub_804A4C0+40Cj
		mov	[esp], esi	; ps
		call	_mbsinit
		test	eax, eax
		jz	loc_804AD56
		mov	[ebp+var_7C], 1
		call	___ctype_get_mb_cur_max
		mov	[esp+4], eax	; n
		mov	eax, [ebp+var_6C]
		mov	[esp], eax	; s
		call	sub_804B110
		mov	[esp+0Ch], esi	; p
		mov	[esp+8], eax	; n
		mov	eax, [ebp+var_6C]
		mov	[esp+4], eax	; s
		lea	eax, [ebp+wc]
		mov	[esp], eax	; pwc
		call	_mbrtowc
		cmp	eax, 0FFFFFFFFh
		mov	[ebp+var_68], eax
		jz	short loc_804AD0E
		cmp	eax, 0FFFFFFFEh
		jz	short loc_804AD35
		test	eax, eax
		jnz	short loc_804ACE1
		mov	eax, [ebp+var_6C]
		mov	[ebp+var_68], 1
		cmp	byte ptr [eax],	0
		jnz	loc_804AD9E
		mov	edx, [ebp+wc]
		test	edx, edx
		jnz	loc_804AD7A

loc_804ACE1:				; CODE XREF: sub_804A4C0+801j
		mov	[esp], esi	; ps
		mov	byte ptr [ebp+var_64], 1
		call	_mbsinit
		test	eax, eax
		jz	loc_804A8E3
		mov	[ebp+var_7C], 0
		jmp	loc_804A8E3
; ---------------------------------------------------------------------------

loc_804ACFE:				; CODE XREF: sub_804A4C0+760j
		mov	[ebp+var_68], 1
		mov	byte ptr [ebp+var_64], 0
		jmp	loc_804A82D
; ---------------------------------------------------------------------------

loc_804AD0E:				; CODE XREF: sub_804A4C0+7F8j
		mov	[ebp+var_68], 1
		mov	byte ptr [ebp+var_64], 0
		jmp	loc_804A8E3
; ---------------------------------------------------------------------------

loc_804AD1E:				; CODE XREF: sub_804A4C0+769j
		mov	eax, [ebp+var_6C]
		mov	[esp], eax	; s
		call	_strlen
		mov	byte ptr [ebp+var_64], 0
		mov	[ebp+var_68], eax
		jmp	loc_804A82D
; ---------------------------------------------------------------------------

loc_804AD35:				; CODE XREF: sub_804A4C0+7FDj
		mov	eax, [ebp+var_6C]
		mov	[esp], eax	; s
		call	_strlen
		mov	byte ptr [ebp+var_64], 0
		mov	[ebp+var_68], eax
		jmp	loc_804A8E3
; ---------------------------------------------------------------------------

loc_804AD4C:				; CODE XREF: sub_804A4C0+3D9j
					; sub_804A4C0+6AEj
		mov	ebx, 1
		jmp	loc_804A902
; ---------------------------------------------------------------------------

loc_804AD56:				; CODE XREF: sub_804A4C0+48Aj
					; sub_804A4C0+527j ...
		mov	dword ptr [esp+0Ch], offset function ; "mbuiter_multi_next"
		mov	dword ptr [esp+8], 8Eh ; line
		mov	dword ptr [esp+4], offset file ; "mbuiter.h"
		mov	dword ptr [esp], offset	assertion ; "mbsinit (&iter->state)"
		call	___assert_fail
; ---------------------------------------------------------------------------

loc_804AD7A:				; CODE XREF: sub_804A4C0+2E2j
					; sub_804A4C0+4F3j ...
		mov	dword ptr [esp+0Ch], offset function ; "mbuiter_multi_next"
		mov	dword ptr [esp+8], 0ABh	; line
		mov	dword ptr [esp+4], offset file ; "mbuiter.h"
		mov	dword ptr [esp], offset	aIterCur_wc0 ; "iter->cur.wc ==	0"
		call	___assert_fail
; ---------------------------------------------------------------------------

loc_804AD9E:				; CODE XREF: sub_804A4C0+2D4j
					; sub_804A4C0+4E8j ...
		mov	dword ptr [esp+0Ch], offset function ; "mbuiter_multi_next"
		mov	dword ptr [esp+8], 0AAh	; line
		mov	dword ptr [esp+4], offset file ; "mbuiter.h"
		mov	dword ptr [esp], offset	aIterCur_ptr0 ;	"*iter->cur.ptr	== '\\0'"
		call	___assert_fail
; ---------------------------------------------------------------------------

loc_804ADC2:				; CODE XREF: sub_804A4C0+45Cj
		call	___stack_chk_fail
sub_804A4C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_804ADD0(char *s2, char *s)
sub_804ADD0	proc near		; CODE XREF: sub_80495B0+1A1p

ptr		= dword	ptr -24h
n		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
s2		= dword	ptr  8
s		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	dword ptr [esp+8], 5 ; category
		mov	eax, [ebp+s2]
		mov	dword ptr [esp], 0 ; domainname
		mov	[esp+4], eax	; msgid
		call	_dcgettext
		mov	ebx, eax
		call	sub_804D1A0
		mov	dword ptr [esp+4], offset fromcode ; "UTF-8"
		mov	esi, eax
		mov	[esp], eax
		call	sub_804D130
		test	eax, eax
		jnz	loc_804AEF8
		mov	edx, [ebp+s]
		mov	[ebp+n], 0
		mov	[ebp+ptr], 0
		mov	[ebp+var_1C], edx
		mov	esi, edx

loc_804AE2B:				; CODE XREF: sub_804ADD0+22Cj
		test	esi, esi
		mov	edi, esi
		jz	loc_804AFB6

loc_804AE35:				; CODE XREF: sub_804ADD0+1E0j
					; sub_804ADD0+1EBj ...
		mov	eax, [ebp+s2]
		mov	[esp], ebx	; s1
		mov	[esp+4], eax	; s2
		call	_strcmp
		test	eax, eax
		jnz	short loc_804AE80
		cmp	edi, [ebp+ptr]
		jnz	loc_804AFD0

loc_804AE51:				; CODE XREF: sub_804ADD0+205j
					; sub_804ADD0+216j
		cmp	edi, [ebp+n]
		jnz	short loc_804AE68

loc_804AE56:				; CODE XREF: sub_804ADD0+9Dj
					; sub_804ADD0+AAj
		mov	ebx, edi

loc_804AE58:				; CODE XREF: sub_804ADD0+107j
		add	esp, 3Ch
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 8

loc_804AE68:				; CODE XREF: sub_804ADD0+84j
		mov	ebx, [ebp+n]
		test	ebx, ebx
		jz	short loc_804AE56
		mov	eax, [ebp+n]
		mov	[esp], eax	; ptr
		call	_free
		jmp	short loc_804AE56
; ---------------------------------------------------------------------------
		align 10h

loc_804AE80:				; CODE XREF: sub_804ADD0+76j
		mov	edx, [ebp+s2]
		mov	eax, ebx
		call	sub_804A4C0
		test	al, al
		jnz	short loc_804AEC0
		test	esi, esi
		jz	short loc_804AE9F
		mov	edx, esi
		mov	eax, ebx
		call	sub_804A4C0
		test	al, al
		jnz	short loc_804AEC0

loc_804AE9F:				; CODE XREF: sub_804ADD0+C0j
		mov	ecx, [ebp+var_1C]
		test	ecx, ecx
		jz	loc_804B008
		mov	edx, [ebp+var_1C]
		mov	eax, ebx
		call	sub_804A4C0
		test	al, al
		jz	loc_804B008
		lea	esi, [esi+0]

loc_804AEC0:				; CODE XREF: sub_804ADD0+BCj
					; sub_804ADD0+CDj
		mov	edx, [ebp+ptr]
		test	edx, edx
		jz	short loc_804AED2
		mov	edx, [ebp+ptr]
		mov	[esp], edx	; ptr
		call	_free

loc_804AED2:				; CODE XREF: sub_804ADD0+F5j
					; sub_804ADD0+294j
		mov	edi, [ebp+n]
		test	edi, edi
		jz	loc_804AE58
		mov	eax, [ebp+n]
		mov	[esp], eax	; ptr
		call	_free
		add	esp, 3Ch
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 8

loc_804AEF8:				; CODE XREF: sub_804ADD0+3Fj
		mov	[esp+8], esi	; tocode
		mov	dword ptr [esp+4], offset fromcode ; "UTF-8"
		mov	eax, [ebp+s]
		mov	[esp], eax	; s
		call	sub_804B960
		mov	[ebp+ptr], eax
		mov	[esp], esi	; s
		call	_strlen
		mov	[ebp+n], eax
		add	eax, 0Bh
		mov	[esp], eax	; size
		call	sub_804D070
		mov	edx, [ebp+n]
		mov	[esp+4], esi	; src
		mov	[esp+8], edx	; n
		mov	edi, eax
		mov	[esp], eax	; dest
		call	_memcpy
		mov	edx, [ebp+n]
		lea	eax, [edi+edx]
		mov	dword ptr [eax], 52542F2Fh
		mov	dword ptr [eax+4], 4C534E41h
		mov	word ptr [eax+8], 5449h
		mov	byte ptr [eax+0Ah], 0
		mov	[esp+8], edi	; tocode
		mov	dword ptr [esp+4], offset fromcode ; "UTF-8"
		mov	eax, [ebp+s]
		mov	[esp], eax	; s
		call	sub_804B960
		mov	[esp], edi	; ptr
		mov	esi, eax
		call	_free
		test	esi, esi
		jz	short loc_804AF9B
		mov	dword ptr [esp+4], 3Fh ; c
		mov	[esp], esi	; s
		call	_strchr
		test	eax, eax
		jz	short loc_804AFF0
		mov	[esp], esi	; ptr
		call	_free

loc_804AF9B:				; CODE XREF: sub_804ADD0+1ADj
		mov	esi, [ebp+ptr]
		mov	[ebp+var_1C], 0
		mov	[ebp+n], 0
		test	esi, esi
		mov	edi, esi
		jnz	loc_804AE35

loc_804AFB6:				; CODE XREF: sub_804ADD0+5Fj
		mov	edi, [ebp+var_1C]
		test	edi, edi
		jnz	loc_804AE35
		mov	edi, [ebp+s2]
		jmp	loc_804AE35
; ---------------------------------------------------------------------------
		align 10h

loc_804AFD0:				; CODE XREF: sub_804ADD0+7Bj
		mov	esi, [ebp+ptr]
		test	esi, esi
		jz	loc_804AE51
		mov	edx, [ebp+ptr]
		mov	[esp], edx	; ptr
		call	_free
		jmp	loc_804AE51
; ---------------------------------------------------------------------------
		align 10h

loc_804AFF0:				; CODE XREF: sub_804ADD0+1C1j
		mov	[ebp+var_1C], esi
		mov	edx, [ebp+var_1C]
		mov	esi, [ebp+ptr]
		mov	[ebp+n], edx
		jmp	loc_804AE2B
; ---------------------------------------------------------------------------
		align 8

loc_804B008:				; CODE XREF: sub_804ADD0+D4j
					; sub_804ADD0+E6j
		mov	[esp], ebx	; s
		call	_strlen
		mov	[esp], edi	; s
		mov	esi, eax
		call	_strlen
		lea	eax, [esi+eax+4]
		mov	[esp], eax	; size
		call	sub_804D070
		mov	[esp+14h], edi
		mov	[esp+10h], ebx
		mov	dword ptr [esp+0Ch], offset aSS	; "%s (%s)"
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], 1
		mov	esi, eax
		mov	[esp], eax
		call	___sprintf_chk
		mov	eax, [ebp+ptr]
		test	eax, eax
		jz	short loc_804B062
		mov	edx, [ebp+ptr]
		mov	[esp], edx	; ptr
		call	_free

loc_804B062:				; CODE XREF: sub_804ADD0+285j
		mov	ebx, esi
		jmp	loc_804AED2
sub_804ADD0	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	[ebp-8], esi
		mov	esi, [ebp+8]
		mov	[ebp-0Ch], ebx
		mov	[ebp-4], edi
		mov	dword ptr [esp+8], 5
		mov	[esp+4], esi
		mov	dword ptr [esp], 0
		call	_dcgettext
		cmp	esi, eax
		mov	ebx, eax
		jz	short loc_804B0AB
		mov	edx, esi
		call	sub_804A4C0
		test	al, al
		jz	short loc_804B0C0

loc_804B0AB:				; CODE XREF: .text:0804B09Ej
					; .text:0804B10Aj
		mov	eax, ebx
		mov	esi, [ebp-8]
		mov	ebx, [ebp-0Ch]
		mov	edi, [ebp-4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_804B0C0:				; CODE XREF: .text:0804B0A9j
		mov	[esp], ebx
		call	_strlen
		mov	[esp], esi
		mov	edi, eax
		call	_strlen
		lea	eax, [edi+eax+4]
		mov	[esp], eax
		call	sub_804D070
		mov	[esp+10h], ebx
		mov	[esp+14h], esi
		mov	dword ptr [esp+0Ch], offset aSS	; "%s (%s)"
		mov	dword ptr [esp+8], 0FFFFFFFFh
		mov	dword ptr [esp+4], 1
		mov	edi, eax
		mov	[esp], eax
		mov	ebx, edi
		call	___sprintf_chk
		jmp	short loc_804B0AB
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_804B110(void *s, size_t n)
sub_804B110	proc near		; CODE XREF: sub_804A4C0+280p
					; sub_804A4C0+4A3p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
s		= dword	ptr  8
n		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_8], ebx
		mov	ebx, [ebp+n]
		mov	[ebp+var_4], esi
		mov	esi, [ebp+s]
		mov	dword ptr [esp+4], 0 ; c
		mov	[esp+8], ebx	; n
		mov	[esp], esi	; s
		call	_memchr
		test	eax, eax
		jz	short loc_804B13F
		sub	eax, esi
		lea	ebx, [eax+1]

loc_804B13F:				; CODE XREF: sub_804B110+28j
		mov	eax, ebx
		mov	esi, [ebp+var_4]
		mov	ebx, [ebp+var_8]
		mov	esp, ebp
		pop	ebp
		retn
sub_804B110	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_804B150	proc near		; CODE XREF: sub_804A4C0+27p

var_60		= byte ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= byte ptr -54h
ps		= mbstate_t ptr	-50h
var_48		= byte ptr -48h
s		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
pwc		= dword	ptr -38h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	edi, [ebp+arg_4]
		mov	eax, large gs:14h
		mov	[ebp+var_1C], eax
		xor	eax, eax
		mov	eax, [ebp+arg_0]
		mov	[esp], eax
		call	___strdup
		test	eax, eax
		mov	esi, eax
		jz	loc_804B5E9
		call	___ctype_get_mb_cur_max
		cmp	eax, 1
		jbe	loc_804B3A0
		test	edi, edi
		lea	esi, [esi+0]
		jnz	loc_804B438

loc_804B196:				; CODE XREF: sub_804B150+464j
		mov	[esp], esi	; s
		mov	edi, esi
		mov	[ebp+s], esi
		call	_strlen
		mov	[ebp+var_54], 0
		mov	[ebp+ps.__count], 0
		mov	dword ptr [ebp+ps.__value], 0
		mov	[ebp+var_48], 0
		lea	eax, [esi+eax]
		cmp	esi, eax
		mov	[ebp+var_58], eax
		jnb	loc_804B261
		xor	ebx, ebx
		jmp	short loc_804B1F6
; ---------------------------------------------------------------------------
		align 10h

loc_804B1D0:				; CODE XREF: sub_804B150+E1j
		cmp	ebx, 1
		jz	loc_804B2F8
		cmp	ebx, 2
		lea	esi, [esi+0]
		jz	short loc_804B233

loc_804B1E2:				; CODE XREF: sub_804B150+E7j
					; sub_804B150+F6j
		mov	ebx, 1

loc_804B1E7:				; CODE XREF: sub_804B150+1B0j
					; sub_804B150+1C3j ...
		add	edi, [ebp+var_40]
		cmp	[ebp+var_58], edi
		mov	[ebp+var_48], 0
		mov	[ebp+s], edi
		jbe	short loc_804B258

loc_804B1F6:				; CODE XREF: sub_804B150+79j
					; sub_804B150+105j
		cmp	[ebp+var_54], 0
		jnz	loc_804B297
		movzx	eax, byte ptr [edi]
		mov	edx, eax
		shr	dl, 5
		movzx	edx, dl
		mov	edx, ds:dword_8052FA0[edx*4]
		bt	edx, eax
		jnb	short loc_804B280
		mov	edi, [ebp+s]
		mov	[ebp+var_40], 1
		movsx	eax, byte ptr [edi]
		mov	[ebp+var_3C], 1
		mov	[ebp+pwc], eax

loc_804B22B:				; CODE XREF: sub_804B150+192j
					; sub_804B150+19Cj ...
		test	ebx, ebx
		mov	[ebp+var_48], 1
		jnz	short loc_804B1D0

loc_804B233:				; CODE XREF: sub_804B150+90j
		cmp	[ebp+var_3C], 0
		jz	short loc_804B1E2
		mov	eax, [ebp+pwc]
		mov	[esp], eax	; wc
		call	_iswspace
		test	eax, eax
		jz	short loc_804B1E2
		add	edi, [ebp+var_40]
		cmp	[ebp+var_58], edi
		mov	[ebp+var_48], 0
		mov	[ebp+s], edi
		ja	short loc_804B1F6
		nop

loc_804B258:				; CODE XREF: sub_804B150+A4j
		cmp	ebx, 2
		jz	loc_804B5C0

loc_804B261:				; CODE XREF: sub_804B150+71j
					; sub_804B150+2A2j ...
		mov	edx, [ebp+var_1C]
		xor	edx, large gs:14h
		mov	eax, esi
		jnz	loc_804B5E4
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_804B280:				; CODE XREF: sub_804B150+C5j
		lea	edx, [ebp+ps]
		mov	[esp], edx	; ps
		call	_mbsinit
		test	eax, eax
		jz	loc_804B5EE
		mov	[ebp+var_54], 1

loc_804B297:				; CODE XREF: sub_804B150+AAj
		lea	eax, [ebp+ps]
		mov	edx, [ebp+s]
		mov	[esp+0Ch], eax	; p
		mov	eax, [ebp+var_58]
		mov	[esp+4], edx	; s
		sub	eax, edx
		lea	edx, [ebp+pwc]
		mov	[esp+8], eax	; n
		mov	[esp], edx	; pwc
		call	_mbrtowc
		cmp	eax, 0FFFFFFFFh
		mov	[ebp+var_40], eax
		jz	short loc_804B328
		cmp	eax, 0FFFFFFFEh
		jz	loc_804B388
		test	eax, eax
		jz	short loc_804B340
		mov	edi, [ebp+s]

loc_804B2D1:				; CODE XREF: sub_804B150+208j
		lea	eax, [ebp+ps]
		mov	[esp], eax	; ps
		mov	[ebp+var_3C], 1
		call	_mbsinit
		test	eax, eax
		jz	loc_804B22B
		mov	[ebp+var_54], 0
		jmp	loc_804B22B
; ---------------------------------------------------------------------------
		align 8

loc_804B2F8:				; CODE XREF: sub_804B150+83j
		cmp	[ebp+var_3C], 0
		lea	esi, [esi+0]
		jz	loc_804B1E7
		mov	eax, [ebp+pwc]
		mov	[esp], eax	; wc
		call	_iswspace
		test	eax, eax
		jz	loc_804B1E7
		mov	[ebp+var_5C], edi
		mov	bl, 2
		jmp	loc_804B1E7
; ---------------------------------------------------------------------------
		align 8

loc_804B328:				; CODE XREF: sub_804B150+16Fj
		mov	[ebp+var_40], 1
		mov	edi, [ebp+s]
		mov	[ebp+var_3C], 0
		jmp	loc_804B22B
; ---------------------------------------------------------------------------
		align 10h

loc_804B340:				; CODE XREF: sub_804B150+17Cj
		mov	edi, [ebp+s]
		mov	[ebp+var_40], 1
		cmp	byte ptr [edi],	0
		jnz	loc_804B612
		mov	eax, [ebp+pwc]
		test	eax, eax
		jz	loc_804B2D1

loc_804B35E:				; CODE XREF: sub_804B150+43Aj
		mov	dword ptr [esp+0Ch], offset aMbiter_multi_n ; "mbiter_multi_next"
		mov	dword ptr [esp+8], 0A2h	; line
		mov	dword ptr [esp+4], offset aMbiter_h ; "mbiter.h"
		mov	dword ptr [esp], offset	aIterCur_wc0 ; "iter->cur.wc ==	0"
		call	___assert_fail
; ---------------------------------------------------------------------------
		align 8

loc_804B388:				; CODE XREF: sub_804B150+174j
		mov	edi, [ebp+s]
		mov	eax, [ebp+var_58]
		mov	[ebp+var_3C], 0
		sub	eax, edi
		mov	[ebp+var_40], eax
		jmp	loc_804B22B
; ---------------------------------------------------------------------------
		align 10h

loc_804B3A0:				; CODE XREF: sub_804B150+34j
		test	edi, edi
		jz	short loc_804B3F8
		movzx	edx, byte ptr [esi]
		mov	ebx, esi
		test	dl, dl
		jz	short loc_804B3D4
		mov	[ebp+var_60], dl
		call	___ctype_b_loc
		movzx	edx, [ebp+var_60]
		mov	eax, [eax]
		jmp	short loc_804B3CA
; ---------------------------------------------------------------------------
		align 10h

loc_804B3C0:				; CODE XREF: sub_804B150+282j
		add	ebx, 1
		movzx	edx, byte ptr [ebx]
		test	dl, dl
		jz	short loc_804B3D4

loc_804B3CA:				; CODE XREF: sub_804B150+26Bj
		movzx	edx, dl
		test	byte ptr [eax+edx*2+1],	20h
		jnz	short loc_804B3C0

loc_804B3D4:				; CODE XREF: sub_804B150+25Bj
					; sub_804B150+278j
		mov	[esp], ebx	; s
		call	_strlen
		mov	[esp+4], ebx	; src
		mov	[esp], esi	; dest
		add	eax, 1
		mov	[esp+8], eax	; n
		call	_memmove
		cmp	edi, 1
		jz	loc_804B261

loc_804B3F8:				; CODE XREF: sub_804B150+252j
		mov	[esp], esi	; s
		call	_strlen
		lea	ebx, [esi+eax-1]
		cmp	esi, ebx
		ja	loc_804B261
		call	___ctype_b_loc
		jmp	short loc_804B426
; ---------------------------------------------------------------------------
		align 8

loc_804B418:				; CODE XREF: sub_804B150+2E0j
		mov	byte ptr [ebx],	0
		sub	ebx, 1
		cmp	esi, ebx
		ja	loc_804B261

loc_804B426:				; CODE XREF: sub_804B150+2C1j
		movzx	ecx, byte ptr [ebx]
		mov	edx, [eax]
		test	byte ptr [edx+ecx*2+1],	20h
		jnz	short loc_804B418
		jmp	loc_804B261
; ---------------------------------------------------------------------------
		align 4

loc_804B438:				; CODE XREF: sub_804B150+40j
		mov	[esp], esi	; s
		mov	ebx, esi
		mov	[ebp+s], esi
		call	_strlen
		mov	[ebp+var_54], 0
		mov	[ebp+ps.__count], 0
		mov	dword ptr [ebp+ps.__value], 0
		mov	[ebp+var_48], 0
		lea	eax, [esi+eax]
		cmp	esi, eax
		mov	[ebp+var_58], eax
		jb	short loc_804B4D3
		jmp	loc_804B590
; ---------------------------------------------------------------------------
		align 10h

loc_804B470:				; CODE XREF: sub_804B150+387j
		movzx	eax, byte ptr [ebx]
		mov	edx, eax
		shr	dl, 5
		movzx	edx, dl
		mov	edx, ds:dword_8052FA0[edx*4]
		bt	edx, eax
		jnb	loc_804B538
		mov	ebx, [ebp+s]
		mov	[ebp+var_40], 1
		movsx	eax, byte ptr [ebx]
		mov	[ebp+var_3C], 1
		mov	[ebp+pwc], eax

loc_804B49F:				; CODE XREF: sub_804B150+3D6j
					; sub_804B150+3E0j ...
		cmp	[ebp+var_3C], 0
		mov	[ebp+var_48], 1
		jz	loc_804B590
		mov	eax, [ebp+pwc]
		mov	[esp], eax	; wc
		call	_iswspace
		test	eax, eax
		jz	loc_804B590
		add	ebx, [ebp+var_40]
		cmp	[ebp+var_58], ebx
		mov	[ebp+var_48], 0
		mov	[ebp+s], ebx
		jbe	loc_804B590

loc_804B4D3:				; CODE XREF: sub_804B150+313j
		cmp	[ebp+var_54], 0
		jz	short loc_804B470

loc_804B4D9:				; CODE XREF: sub_804B150+3FFj
		lea	eax, [ebp+ps]
		mov	edx, [ebp+s]
		mov	[esp+0Ch], eax	; p
		mov	eax, [ebp+var_58]
		mov	[esp+4], edx	; s
		sub	eax, edx
		lea	edx, [ebp+pwc]
		mov	[esp+8], eax	; n
		mov	[esp], edx	; pwc
		call	_mbrtowc
		cmp	eax, 0FFFFFFFFh
		mov	[ebp+var_40], eax
		jz	short loc_804B558
		cmp	eax, 0FFFFFFFEh
		jz	loc_804B5D0
		test	eax, eax
		db	66h
		nop
		jz	short loc_804B570
		mov	ebx, [ebp+s]

loc_804B515:				; CODE XREF: sub_804B150+438j
		lea	eax, [ebp+ps]
		mov	[esp], eax	; ps
		mov	[ebp+var_3C], 1
		call	_mbsinit
		test	eax, eax
		jz	loc_804B49F
		mov	[ebp+var_54], 0
		jmp	loc_804B49F
; ---------------------------------------------------------------------------
		align 4

loc_804B538:				; CODE XREF: sub_804B150+335j
		lea	edx, [ebp+ps]
		mov	[esp], edx	; ps
		call	_mbsinit
		test	eax, eax
		jz	loc_804B5EE
		mov	[ebp+var_54], 1
		jmp	short loc_804B4D9
; ---------------------------------------------------------------------------
		align 8

loc_804B558:				; CODE XREF: sub_804B150+3B1j
		mov	[ebp+var_40], 1
		mov	ebx, [ebp+s]
		mov	[ebp+var_3C], 0
		jmp	loc_804B49F
; ---------------------------------------------------------------------------
		align 10h

loc_804B570:				; CODE XREF: sub_804B150+3C0j
		mov	ebx, [ebp+s]
		mov	[ebp+var_40], 1
		cmp	byte ptr [ebx],	0
		jnz	loc_804B612
		mov	edx, [ebp+pwc]
		test	edx, edx
		jz	short loc_804B515
		jmp	loc_804B35E
; ---------------------------------------------------------------------------
		align 10h

loc_804B590:				; CODE XREF: sub_804B150+315j
					; sub_804B150+357j ...
		mov	[esp], ebx	; s
		call	_strlen
		mov	[esp+4], ebx	; src
		mov	[esp], esi	; dest
		add	eax, 1
		mov	[esp+8], eax	; n
		call	_memmove
		cmp	edi, 1
		jz	loc_804B261
		jmp	loc_804B196
; ---------------------------------------------------------------------------
		align 10h

loc_804B5C0:				; CODE XREF: sub_804B150+10Bj
		mov	edx, [ebp+var_5C]
		mov	byte ptr [edx],	0
		jmp	loc_804B261
; ---------------------------------------------------------------------------
		align 10h

loc_804B5D0:				; CODE XREF: sub_804B150+3B6j
		mov	ebx, [ebp+s]
		mov	eax, [ebp+var_58]
		mov	[ebp+var_3C], 0
		sub	eax, ebx
		mov	[ebp+var_40], eax
		jmp	loc_804B49F
; ---------------------------------------------------------------------------

loc_804B5E4:				; CODE XREF: sub_804B150+11Dj
		call	___stack_chk_fail
; ---------------------------------------------------------------------------

loc_804B5E9:				; CODE XREF: sub_804B150+26j
		call	sub_804B910
; ---------------------------------------------------------------------------

loc_804B5EE:				; CODE XREF: sub_804B150+13Dj
					; sub_804B150+3F5j
		mov	dword ptr [esp+0Ch], offset aMbiter_multi_n ; "mbiter_multi_next"
		mov	dword ptr [esp+8], 86h ; line
		mov	dword ptr [esp+4], offset aMbiter_h ; "mbiter.h"
		mov	dword ptr [esp], offset	assertion ; "mbsinit (&iter->state)"
		call	___assert_fail
; ---------------------------------------------------------------------------

loc_804B612:				; CODE XREF: sub_804B150+1FDj
					; sub_804B150+42Dj
		mov	dword ptr [esp+0Ch], offset aMbiter_multi_n ; "mbiter_multi_next"
		mov	dword ptr [esp+8], 0A1h	; line
		mov	dword ptr [esp+4], offset aMbiter_h ; "mbiter.h"
		mov	dword ptr [esp], offset	aIterCur_ptr0 ;	"*iter->cur.ptr	== '\\0'"
		call	___assert_fail
sub_804B150	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	dword ptr [esp+8], 5
		mov	dword ptr [esp+4], offset aReportBugsToS_ ; "\nReport bugs to <%s>.\n"
		mov	dword ptr [esp], 0
		call	_dcgettext
		mov	dword ptr [esp+8], offset aBugCoreutils@g ; "bug-coreutils@gnu.org"
		mov	dword ptr [esp], 1
		mov	[esp+4], eax
		call	___printf_chk
		mov	dword ptr [esp+8], 5
		mov	dword ptr [esp+4], offset aSHomePageHtt_0 ; "%s	home page: <http://www.gnu.org/softw"...
		mov	dword ptr [esp], 0
		call	_dcgettext
		mov	dword ptr [esp+0Ch], offset domainname ; "coreutils"
		mov	dword ptr [esp+8], offset word_80525FA
		mov	dword ptr [esp], 1
		mov	[esp+4], eax
		call	___printf_chk
		mov	ebx, ds:stdout
		mov	dword ptr [esp+8], 5
		mov	dword ptr [esp+4], offset aGeneralHelpU_0 ; "General help using	GNU software: <http:"...
		mov	dword ptr [esp], 0
		call	_dcgettext
		mov	[esp+4], ebx
		mov	[esp], eax
		call	_fputs_unlocked
		add	esp, 14h
		pop	ebx
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_804B6F0	proc near		; CODE XREF: sub_804B8E0+28p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		xor	ebx, ebx
		sub	esp, 2Ch
		mov	esi, [ebp+arg_10]
		mov	edi, [ebp+arg_0]
		mov	eax, [ebp+arg_4]
		mov	edx, [ebp+arg_8]
		cmp	dword ptr [esi], 0
		mov	ecx, [ebp+arg_C]
		jz	short loc_804B719
		nop

loc_804B710:				; CODE XREF: sub_804B6F0+27j
		add	ebx, 1
		cmp	dword ptr [esi+ebx*4], 0
		jnz	short loc_804B710

loc_804B719:				; CODE XREF: sub_804B6F0+1Dj
		test	eax, eax
		jz	loc_804B8B0
		mov	[esp+14h], ecx
		mov	[esp+10h], edx
		mov	[esp+0Ch], eax
		mov	dword ptr [esp+8], offset aSSS ; "%s (%s) %s\n"
		mov	dword ptr [esp+4], 1
		mov	[esp], edi
		call	___fprintf_chk

loc_804B745:				; CODE XREF: sub_804B6F0+1E0j
		mov	dword ptr [esp+8], 5 ; category
		mov	dword ptr [esp+4], offset aC ; "(C)"
		mov	dword ptr [esp], 0 ; domainname
		call	_dcgettext
		mov	dword ptr [esp+10h], 7D9h
		mov	dword ptr [esp+8], offset aCopyrightSDFre ; "Copyright %s %d Free Software Foundatio"...
		mov	dword ptr [esp+4], 1
		mov	[esp], edi
		mov	[esp+0Ch], eax
		call	___fprintf_chk
		mov	dword ptr [esp+8], 5 ; category
		mov	dword ptr [esp+4], offset aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or l"...
		mov	dword ptr [esp], 0 ; domainname
		call	_dcgettext
		mov	[esp+4], edi
		mov	[esp], eax
		call	_fputs_unlocked
		cmp	ebx, 9		; switch 10 cases
		jbe	short loc_804B7F0
		mov	dword ptr [esp+8], 5 ; jumptable 0804B7F0 default case
		mov	dword ptr [esp+4], offset aWrittenBySSSSS ; "Written by	%s, %s,	%s,\n%s, %s, %s, %s,\n"...
		lea	esi, [esi+0]

loc_804B7C8:				; CODE XREF: sub_804B6F0+117j
					; sub_804B6F0+129j ...
		mov	dword ptr [esp], 0 ; domainname
		call	_dcgettext
		mov	[ebp+arg_8], esi
		mov	[ebp+arg_0], edi
		mov	[ebp+arg_4], eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	sub_804CED0
; ---------------------------------------------------------------------------
		align 10h

loc_804B7F0:				; CODE XREF: sub_804B6F0+C0j
		jmp	ds:off_8052B68[ebx*4] ;	switch jump

loc_804B7F7:				; DATA XREF: .rodata:off_8052B68o
		mov	dword ptr [esp+8], 5 ; jumptable 0804B7F0 case 8
		mov	dword ptr [esp+4], offset aWrittenBySSS_0 ; "Written by	%s, %s,	%s,\n%s, %s, %s, %s,\n"...
		jmp	short loc_804B7C8
; ---------------------------------------------------------------------------

loc_804B809:				; CODE XREF: sub_804B6F0:loc_804B7F0j
					; DATA XREF: .rodata:off_8052B68o
		mov	dword ptr [esp+8], 5 ; jumptable 0804B7F0 case 9
		mov	dword ptr [esp+4], offset aWrittenBySSS_1 ; "Written by	%s, %s,	%s,\n%s, %s, %s, %s,\n"...
		jmp	short loc_804B7C8
; ---------------------------------------------------------------------------

loc_804B81B:				; CODE XREF: sub_804B6F0:loc_804B7F0j
					; DATA XREF: .rodata:off_8052B68o
		call	_abort		; jumptable 0804B7F0 case 0
; ---------------------------------------------------------------------------

loc_804B820:				; CODE XREF: sub_804B6F0:loc_804B7F0j
					; DATA XREF: .rodata:off_8052B68o
		mov	dword ptr [esp+8], 5 ; jumptable 0804B7F0 case 1
		mov	dword ptr [esp+4], offset aWrittenByS_ ; "Written by %s.\n"
		jmp	short loc_804B7C8
; ---------------------------------------------------------------------------

loc_804B832:				; CODE XREF: sub_804B6F0:loc_804B7F0j
					; DATA XREF: .rodata:off_8052B68o
		mov	dword ptr [esp+8], 5 ; jumptable 0804B7F0 case 2
		mov	dword ptr [esp+4], offset aWrittenBySAndS ; "Written by	%s and %s.\n"
		jmp	short loc_804B7C8
; ---------------------------------------------------------------------------

loc_804B844:				; CODE XREF: sub_804B6F0:loc_804B7F0j
					; DATA XREF: .rodata:off_8052B68o
		mov	dword ptr [esp+8], 5 ; jumptable 0804B7F0 case 3
		mov	dword ptr [esp+4], offset aWrittenBySSAnd ; "Written by	%s, %s,	and %s.\n"
		jmp	loc_804B7C8
; ---------------------------------------------------------------------------

loc_804B859:				; CODE XREF: sub_804B6F0:loc_804B7F0j
					; DATA XREF: .rodata:off_8052B68o
		mov	dword ptr [esp+8], 5 ; jumptable 0804B7F0 case 4
		mov	dword ptr [esp+4], offset aWrittenBySSSAn ; "Written by	%s, %s,	%s,\nand %s.\n"
		jmp	loc_804B7C8
; ---------------------------------------------------------------------------

loc_804B86E:				; CODE XREF: sub_804B6F0:loc_804B7F0j
					; DATA XREF: .rodata:off_8052B68o
		mov	dword ptr [esp+8], 5 ; jumptable 0804B7F0 case 5
		mov	dword ptr [esp+4], offset aWrittenBySSSSA ; "Written by	%s, %s,	%s,\n%s, and %s.\n"
		jmp	loc_804B7C8
; ---------------------------------------------------------------------------

loc_804B883:				; CODE XREF: sub_804B6F0:loc_804B7F0j
					; DATA XREF: .rodata:off_8052B68o
		mov	dword ptr [esp+8], 5 ; jumptable 0804B7F0 case 6
		mov	dword ptr [esp+4], offset aWrittenBySSS_2 ; "Written by	%s, %s,	%s,\n%s, %s, and %s.\n"...
		jmp	loc_804B7C8
; ---------------------------------------------------------------------------

loc_804B898:				; CODE XREF: sub_804B6F0:loc_804B7F0j
					; DATA XREF: .rodata:off_8052B68o
		mov	dword ptr [esp+8], 5 ; jumptable 0804B7F0 case 7
		mov	dword ptr [esp+4], offset aWrittenBySSS_3 ; "Written by	%s, %s,	%s,\n%s, %s, %s, and "...
		jmp	loc_804B7C8
; ---------------------------------------------------------------------------
		align 10h

loc_804B8B0:				; CODE XREF: sub_804B6F0+2Bj
		mov	[esp+10h], ecx
		mov	[esp+0Ch], edx
		mov	dword ptr [esp+8], offset aSS_0	; "%s %s\n"
		mov	dword ptr [esp+4], 1
		mov	[esp], edi
		call	___fprintf_chk
		jmp	loc_804B745
sub_804B6F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_804B8E0	proc near		; CODE XREF: sub_80495B0+1DBp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		lea	eax, [ebp+arg_10]
		mov	[esp+10h], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+0Ch], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+8], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[esp], eax
		call	sub_804B6F0
		leave
		retn
sub_804B8E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

sub_804B910	proc near		; CODE XREF: sub_804B150:loc_804B5E9p
					; sub_804B960+40p ...
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	dword ptr [esp+8], 5 ; category
		mov	dword ptr [esp+4], offset aMemoryExhauste ; "memory exhausted"
		mov	dword ptr [esp], 0 ; domainname
		call	_dcgettext
		mov	edx, status
		mov	dword ptr [esp+8], (offset format+4) ; format
		mov	dword ptr [esp+4], 0 ; errnum
		mov	[esp], edx	; status
		mov	[esp+0Ch], eax
		call	_error
		call	_abort
sub_804B910	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_804B960(char *s, char	*fromcode, char	*tocode)
sub_804B960	proc near		; CODE XREF: sub_804ADD0+13Ap
					; sub_804ADD0+19Cp

s		= dword	ptr  8
fromcode	= dword	ptr  0Ch
tocode		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, [ebp+tocode]
		mov	[esp+8], eax	; tocode
		mov	eax, [ebp+fromcode]
		mov	[esp+4], eax	; fromcode
		mov	eax, [ebp+s]
		mov	[esp], eax	; s
		call	sub_804EE40
		test	eax, eax
		mov	ebx, eax
		jz	short loc_804B990

loc_804B986:				; CODE XREF: sub_804B960+38j
		mov	eax, ebx
		add	esp, 14h
		pop	ebx
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_804B990:				; CODE XREF: sub_804B960+24j
		call	___errno_location
		cmp	dword ptr [eax], 0Ch
		jnz	short loc_804B986
		lea	esi, [esi+0]
		call	sub_804B910
sub_804B960	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, [ebp+0Ch]
		mov	[esp+4], eax
		mov	eax, [ebp+8]
		mov	[esp], eax
		call	sub_804EC40
		test	eax, eax
		mov	ebx, eax
		jz	short loc_804B9D8

loc_804B9CF:				; CODE XREF: .text:0804B9E0j
		mov	eax, ebx
		add	esp, 14h
		pop	ebx
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_804B9D8:				; CODE XREF: .text:0804B9CDj
		call	___errno_location
		cmp	dword ptr [eax], 0Ch
		jnz	short loc_804B9CF
		call	sub_804B910
; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 24h
		mov	eax, [ebp+18h]
		mov	[esp+10h], eax
		mov	eax, [ebp+14h]
		mov	[esp+0Ch], eax
		mov	eax, [ebp+10h]
		mov	[esp+8], eax
		mov	eax, [ebp+0Ch]
		mov	[esp+4], eax
		mov	eax, [ebp+8]
		mov	[esp], eax
		call	sub_804EF10
		test	eax, eax
		mov	ebx, eax
		js	short loc_804BA30

loc_804BA24:				; CODE XREF: .text:0804BA38j
		mov	eax, ebx
		add	esp, 24h
		pop	ebx
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_804BA30:				; CODE XREF: .text:0804BA22j
		call	___errno_location
		cmp	dword ptr [eax], 0Ch
		jnz	short loc_804BA24
		lea	esi, [esi+0]
		call	sub_804B910
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_804BA50	proc near		; CODE XREF: sub_80492F0+1B6p
					; sub_80492F0+27Bp

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		push	ebx
		movzx	edx, byte ptr [eax]
		mov	ecx, eax
		cmp	dl, 2Fh
		jnz	short loc_804BA75
		lea	esi, [esi+0]

loc_804BA68:				; CODE XREF: sub_804BA50+21j
		add	eax, 1
		movzx	edx, byte ptr [eax]
		cmp	dl, 2Fh
		jz	short loc_804BA68
		mov	ecx, eax

loc_804BA75:				; CODE XREF: sub_804BA50+Fj
		test	dl, dl
		jz	short loc_804BAA6
		xor	ebx, ebx
		jmp	short loc_804BA92
; ---------------------------------------------------------------------------
		align 10h

loc_804BA80:				; CODE XREF: sub_804BA50+45j
		test	bl, bl
		jz	short loc_804BA88
		mov	eax, ecx
		xor	ebx, ebx

loc_804BA88:				; CODE XREF: sub_804BA50+32j
		add	ecx, 1
		movzx	edx, byte ptr [ecx]
		test	dl, dl
		jz	short loc_804BAA6

loc_804BA92:				; CODE XREF: sub_804BA50+2Bj
					; sub_804BA50+54j
		cmp	dl, 2Fh
		jnz	short loc_804BA80
		add	ecx, 1
		mov	ebx, 1
		movzx	edx, byte ptr [ecx]
		test	dl, dl
		jnz	short loc_804BA92

loc_804BAA6:				; CODE XREF: sub_804BA50+27j
					; sub_804BA50+40j
		pop	ebx
		pop	ebp
		retn
sub_804BA50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_804BAB0(char *s)
sub_804BAB0	proc near		; CODE XREF: .text:0804BB5Dp
					; .text:0804BB83p

s		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+s]
		mov	[esp], ebx	; s
		call	_strlen
		cmp	eax, 1
		jbe	short loc_804BACE
		cmp	byte ptr [ebx+eax-1], 2Fh
		jz	short loc_804BAD8

loc_804BACE:				; CODE XREF: sub_804BAB0+15j
					; sub_804BAB0+30j
		add	esp, 14h
		pop	ebx
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 8

loc_804BAD8:				; CODE XREF: sub_804BAB0+1Cj
		add	ebx, eax

loc_804BADA:				; CODE XREF: sub_804BAB0+3Cj
		sub	eax, 1
		cmp	eax, 1
		jbe	short loc_804BACE
		movzx	edx, byte ptr [ebx-2]
		sub	ebx, 1
		cmp	dl, 2Fh
		jz	short loc_804BADA
		add	esp, 14h
		pop	ebx
		pop	ebp
		retn
sub_804BAB0	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	esi, [ebp+8]
		movzx	eax, byte ptr [esi]
		mov	ecx, esi
		mov	edx, esi
		mov	ebx, esi
		cmp	al, 2Fh
		jnz	short loc_804BB26

loc_804BB18:				; CODE XREF: .text:0804BB20j
		add	ecx, 1
		movzx	eax, byte ptr [ecx]
		cmp	al, 2Fh
		jz	short loc_804BB18
		mov	edx, ecx
		mov	ebx, ecx

loc_804BB26:				; CODE XREF: .text:0804BB16j
		test	al, al
		jz	short loc_804BB80
		xor	ecx, ecx
		jmp	short loc_804BB42
; ---------------------------------------------------------------------------
		align 10h

loc_804BB30:				; CODE XREF: .text:0804BB44j
		test	cl, cl
		jz	short loc_804BB38
		mov	ebx, edx
		xor	ecx, ecx

loc_804BB38:				; CODE XREF: .text:0804BB32j
		add	edx, 1
		movzx	eax, byte ptr [edx]
		test	al, al
		jz	short loc_804BB55

loc_804BB42:				; CODE XREF: .text:0804BB2Cj
					; .text:0804BB53j
		cmp	al, 2Fh
		jnz	short loc_804BB30
		add	edx, 1
		mov	ecx, 1
		movzx	eax, byte ptr [edx]
		test	al, al
		jnz	short loc_804BB42

loc_804BB55:				; CODE XREF: .text:0804BB40j
		cmp	byte ptr [ebx],	0
		jz	short loc_804BB80
		mov	[esp], ebx
		call	sub_804BAB0
		xor	edx, edx
		cmp	byte ptr [ebx+eax], 2Fh
		mov	[esp], ebx
		setz	dl
		add	eax, edx
		mov	[esp+4], eax
		call	sub_804F290
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_804BB80:				; CODE XREF: .text:0804BB28j
					; .text:0804BB58j
		mov	[esp], esi
		call	sub_804BAB0
		mov	[esp], esi
		mov	[esp+4], eax
		call	sub_804F290
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+8]
		pop	ebp
		mov	ds:dword_805517C, eax
		retn
; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+8]
		pop	ebp
		mov	ds:byte_8055180, al
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_804BBC0	proc near		; DATA XREF: sub_80495B0+59o

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, ds:stdout
		mov	[ebp+var_8], ebx
		mov	[ebp+var_4], esi
		mov	[esp], eax	; stream
		call	sub_804F2C0
		test	eax, eax
		jz	short loc_804BBF2
		cmp	ds:byte_8055180, 0
		jz	short loc_804BC0D
		call	___errno_location
		cmp	dword ptr [eax], 20h
		mov	ebx, eax
		jnz	short loc_804BC14

loc_804BBF2:				; CODE XREF: sub_804BBC0+1Bj
		mov	eax, ds:stderr
		mov	[esp], eax	; stream
		call	sub_804F2C0
		test	eax, eax
		jnz	short loc_804BC65
		mov	ebx, [ebp+var_8]
		mov	esi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_804BC0D:				; CODE XREF: sub_804BBC0+24j
		call	___errno_location
		mov	ebx, eax

loc_804BC14:				; CODE XREF: sub_804BBC0+30j
		mov	dword ptr [esp+8], 5 ; category
		mov	dword ptr [esp+4], offset aWriteError ;	"write error"
		mov	dword ptr [esp], 0 ; domainname
		call	_dcgettext
		mov	esi, eax
		mov	eax, ds:dword_805517C
		test	eax, eax
		jz	short loc_804BC72
		mov	[esp], eax
		call	sub_804CB50
		mov	[esp+10h], esi
		mov	dword ptr [esp+8], offset format ; "%s:	%s"
		mov	[esp+0Ch], eax
		mov	eax, [ebx]
		mov	dword ptr [esp], 0 ; status
		mov	[esp+4], eax	; errnum
		call	_error

loc_804BC65:				; CODE XREF: sub_804BBC0+41j
					; sub_804BBC0+D0j
		mov	eax, status
		mov	[esp], eax	; status
		call	__exit
; ---------------------------------------------------------------------------

loc_804BC72:				; CODE XREF: sub_804BBC0+79j
		mov	[esp+0Ch], esi
		mov	dword ptr [esp+8], (offset format+4) ; format
		mov	eax, [ebx]
		mov	dword ptr [esp], 0 ; status
		mov	[esp+4], eax	; errnum
		call	_error
		jmp	short loc_804BC65
sub_804BBC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_804BCA0(int category)
sub_804BCA0	proc near		; CODE XREF: sub_80492F0+266p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
category	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_8], esi
		mov	[ebp+var_4], edi
		mov	dword ptr [esp+4], 0 ; locale
		mov	eax, [ebp+category]
		mov	[esp], eax	; category
		call	_setlocale
		mov	esi, eax
		mov	eax, 1
		test	esi, esi
		jz	short loc_804BCE3
		movzx	eax, byte ptr [esi]
		cmp	al, ds:byte_8052BE7
		jnz	short loc_804BCF0
		movzx	eax, byte ptr [esi+1]
		cmp	al, ds:byte_8052BE8
		jnz	short loc_804BCF0
		xor	eax, eax

loc_804BCE3:				; CODE XREF: sub_804BCA0+28j
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_804BCF0:				; CODE XREF: sub_804BCA0+33j
					; sub_804BCA0+3Fj
		mov	edi, offset aPosix ; "POSIX"
		mov	ecx, 6
		repe cmpsb
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		setnz	al
		mov	esp, ebp
		pop	ebp
		retn
sub_804BCA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_804BD10	proc near		; CODE XREF: sub_804BD40+14p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_4]
		mov	dword ptr [esp+4], 6
		mov	[esp+8], eax
		mov	eax, [ebp+arg_0]
		mov	[esp], eax
		call	sub_804CBD0
		leave
		retn
sub_804BD10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_804BD40	proc near		; CODE XREF: sub_80495B0+DDAp

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_0]
		mov	dword ptr [esp], 0
		mov	[esp+4], eax
		call	sub_804BD10
		leave
		retn
sub_804BD40	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+8]
		test	eax, eax
		jz	short loc_804BD70
		mov	eax, [eax]
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_804BD70:				; CODE XREF: .text:0804BD68j
		mov	eax, offset dword_80551A0
		mov	eax, [eax]
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+8]
		test	eax, eax
		jz	short loc_804BD98
		mov	edx, [ebp+0Ch]
		mov	[eax], edx
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 8

loc_804BD98:				; CODE XREF: .text:0804BD88j
		mov	edx, [ebp+0Ch]
		mov	eax, offset dword_80551A0
		mov	[eax], edx
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_804BDB0	proc near		; CODE XREF: sub_804CA50+77p

arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	[esp], ebx
		mov	ebx, [ebp+arg_0]
		mov	[esp+4], esi
		movzx	ecx, [ebp+arg_4]
		mov	[esp+8], edi
		test	ebx, ebx
		jz	short loc_804BE08

loc_804BDCC:				; CODE XREF: sub_804BDB0+5Dj
		mov	eax, ecx
		mov	edx, [ebp+arg_8]
		and	ecx, 1Fh
		shr	al, 5
		movzx	esi, al
		mov	edi, [ebx+esi*4+8]
		and	edx, 1
		mov	eax, edi
		shr	eax, cl
		and	eax, 1
		xor	edx, eax
		shl	edx, cl
		xor	edx, edi
		mov	[ebx+esi*4+8], edx
		mov	ebx, [esp]
		mov	esi, [esp+4]
		mov	edi, [esp+8]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 8

loc_804BE08:				; CODE XREF: sub_804BDB0+1Aj
		mov	ebx, offset dword_80551A0
		jmp	short loc_804BDCC
sub_804BDB0	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+8]
		test	edx, edx
		jz	short loc_804BE28
		mov	ecx, [ebp+0Ch]
		mov	eax, [edx+4]
		mov	[edx+4], ecx
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_804BE28:				; CODE XREF: .text:0804BE18j
		mov	ecx, [ebp+0Ch]
		mov	edx, offset dword_80551A0
		mov	eax, [edx+4]
		mov	[edx+4], ecx
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	esi, ptr
		cmp	dword_805512C, 1
		jbe	short loc_804BE77
		mov	ebx, 1
		lea	esi, [esi+0]

loc_804BE60:				; CODE XREF: .text:0804BE75j
		mov	eax, [esi+ebx*8+4]
		add	ebx, 1
		mov	[esp], eax
		call	_free
		cmp	dword_805512C, ebx
		ja	short loc_804BE60

loc_804BE77:				; CODE XREF: .text:0804BE55j
		mov	eax, [esi+4]
		cmp	eax, offset dword_80551E0
		jz	short loc_804BE9D
		mov	[esp], eax
		call	_free
		mov	dword_8055130, 100h
		mov	off_8055134, offset dword_80551E0

loc_804BE9D:				; CODE XREF: .text:0804BE7Fj
		cmp	esi, offset dword_8055130
		jz	short loc_804BEB7
		mov	[esp], esi
		call	_free
		mov	ptr, offset dword_8055130

loc_804BEB7:				; CODE XREF: .text:0804BEA3j
		mov	dword_805512C, 1
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp-0Ch], ebx
		mov	ebx, [ebp+8]
		mov	[ebp-8], esi
		mov	[ebp-4], edi
		call	___errno_location
		test	ebx, ebx
		mov	esi, eax
		mov	edi, [eax]
		jz	short loc_804BF10

loc_804BEEF:				; CODE XREF: .text:0804BF15j
		mov	[esp], ebx
		mov	dword ptr [esp+4], 28h
		call	sub_804D0A0
		mov	[esi], edi
		mov	ebx, [ebp-0Ch]
		mov	esi, [ebp-8]
		mov	edi, [ebp-4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_804BF10:				; CODE XREF: .text:0804BEEDj
		mov	ebx, offset dword_80551A0
		jmp	short loc_804BEEF
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_804BF20	proc near		; CODE XREF: sub_804CB70+Fp
					; sub_804CBD0+Fp

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 30h
		lea	ecx, [ebp+var_20]
		mov	[ebp+var_28], edx
		xor	edx, edx
		mov	[ebp+var_24], 0

loc_804BF35:				; CODE XREF: sub_804BF20+22j
		mov	dword ptr [ecx+edx], 0
		add	edx, 4
		cmp	edx, 20h
		jb	short loc_804BF35
		mov	edx, [ebp+var_28]
		mov	[eax], edx
		mov	edx, [ebp+var_24]
		mov	[eax+4], edx
		mov	edx, [ebp+var_20]
		mov	[eax+8], edx
		mov	edx, [ebp+var_1C]
		mov	[eax+0Ch], edx
		mov	edx, [ebp+var_18]
		mov	[eax+10h], edx
		mov	edx, [ebp+var_14]
		mov	[eax+14h], edx
		mov	edx, [ebp+var_10]
		mov	[eax+18h], edx
		mov	edx, [ebp+var_C]
		mov	[eax+1Ch], edx
		mov	edx, [ebp+var_8]
		mov	[eax+20h], edx
		mov	edx, [ebp+var_4]
		mov	[eax+24h], edx
		leave
		retn
sub_804BF20	endp

; ---------------------------------------------------------------------------
		jmp	short sub_804BF90
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_804BF90	proc near		; CODE XREF: .text:0804BF81j
					; sub_804BF90+4B8p ...

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_61		= byte ptr -61h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_41		= byte ptr -41h
var_40		= dword	ptr -40h
s		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_31		= byte ptr -31h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
p		= mbstate_t ptr	-24h
wc		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 7Ch
		mov	[ebp+var_40], eax
		mov	[ebp+var_38], edx
		mov	[ebp+s], ecx
		call	___ctype_get_mb_cur_max
		mov	[ebp+var_54], eax
		mov	eax, [ebp+arg_8]
		shr	eax, 1
		and	eax, 1
		cmp	[ebp+arg_4], 7	; switch 8 cases
		mov	[ebp+var_41], al
		jbe	short loc_804BFC0
		call	_abort		; jumptable 0804BFC3 default case
; ---------------------------------------------------------------------------

loc_804BFC0:				; CODE XREF: sub_804BF90+29j
		mov	eax, [ebp+arg_4]
		jmp	ds:off_8052C40[eax*4] ;	switch jump

loc_804BFCA:				; DATA XREF: .rodata:off_8052C40o
		mov	[ebp+var_41], 0	; jumptable 0804BFC3 case 5
		xor	ebx, ebx
		mov	[ebp+var_31], 1
		mov	[ebp+var_48], 0
		mov	[ebp+var_50], 0
		lea	esi, [esi+0]

loc_804BFE8:				; CODE XREF: sub_804BF90+2DCj
					; sub_804BF90+2F9j ...
		mov	esi, [ebp+arg_8]
		mov	edi, [ebp+arg_8]
		mov	[ebp+var_2C], 0
		and	esi, 4
		and	edi, 1
		mov	[ebp+var_5C], esi
		mov	[ebp+var_58], edi

loc_804C001:				; CODE XREF: sub_804BF90+830j
		cmp	[ebp+arg_0], 0FFFFFFFFh
		jz	loc_804C148
		nop
		lea	esi, [esi+0]

loc_804C010:				; CODE XREF: sub_804BF90+1B2j
		mov	eax, [ebp+arg_0]
		cmp	[ebp+var_2C], eax
		setnz	al
		test	al, al
		jz	loc_804C15D

loc_804C021:				; CODE XREF: sub_804BF90+1C7j
		cmp	[ebp+var_31], 0
		jnz	loc_804C3D8
		mov	eax, [ebp+s]
		add	eax, [ebp+var_2C]
		mov	[ebp+var_30], eax

loc_804C034:				; CODE XREF: sub_804BF90+71Cj
					; sub_804BF90+73Ej ...
		mov	ecx, [ebp+var_30]
		movzx	edx, byte ptr [ecx]
		cmp	dl, 7Eh
		jbe	loc_804C3FB

loc_804C043:				; CODE XREF: sub_804BF90+465j
					; sub_804BF90+46Ej
					; DATA XREF: ...
		cmp	[ebp+var_54], 1	; jumptable 0804C3FE default case
		jnz	loc_804C6F8
		mov	byte ptr [ebp+var_68], dl
		mov	esi, 1
		call	___ctype_b_loc
		movzx	edx, byte ptr [ebp+var_68]
		movzx	ecx, dl
		mov	eax, [eax]
		movzx	eax, word ptr [eax+ecx*2]
		shr	eax, 0Eh
		and	eax, 1
		mov	byte ptr [ebp+var_4C], al

loc_804C070:				; CODE XREF: sub_804BF90+818j
		cmp	[ebp+var_31], 0
		jz	loc_804C470
		cmp	byte ptr [ebp+var_4C], 0
		jnz	loc_804C390
		lea	esi, [esi+0]

loc_804C088:				; CODE XREF: sub_804BF90+812j
		mov	edi, [ebp+var_2C]
		mov	eax, [ebp+var_30]
		lea	ecx, [esi+edi]
		mov	esi, edi
		mov	[ebp+var_6C], ecx
		jmp	short loc_804C0AD
; ---------------------------------------------------------------------------

loc_804C098:				; CODE XREF: sub_804BF90+190j
		cmp	ebx, [ebp+var_38]
		jnb	short loc_804C0A3
		mov	edi, [ebp+var_40]
		mov	[edi+ebx], dl

loc_804C0A3:				; CODE XREF: sub_804BF90+10Bj
		movzx	edx, byte ptr [eax+1]
		add	ebx, 1
		add	eax, 1

loc_804C0AD:				; CODE XREF: sub_804BF90+106j
		cmp	[ebp+var_31], 0
		jz	short loc_804C11A
		cmp	byte ptr [ebp+var_4C], 0
		jnz	short loc_804C11A
		cmp	[ebp+var_41], 0
		jnz	loc_804C420	; jumptable 0804C807 cases 0,1,3,5,33
		cmp	ebx, [ebp+var_38]
		jnb	short loc_804C0CF
		mov	ecx, [ebp+var_40]
		mov	byte ptr [ecx+ebx], 5Ch

loc_804C0CF:				; CODE XREF: sub_804BF90+136j
		lea	edi, [ebx+1]
		cmp	[ebp+var_38], edi
		mov	[ebp+var_2C], edi
		jbe	short loc_804C0EB
		mov	ecx, edx
		shr	cl, 6
		mov	edi, ecx
		lea	ecx, [edi+30h]
		mov	edi, [ebp+var_40]
		mov	[edi+ebx+1], cl

loc_804C0EB:				; CODE XREF: sub_804BF90+148j
		mov	ecx, [ebp+var_2C]
		add	ecx, 1
		cmp	[ebp+var_38], ecx
		mov	[ebp+var_60], ecx
		jbe	short loc_804C10E
		mov	ebx, edx
		mov	ecx, [ebp+var_40]
		mov	edi, [ebp+var_2C]
		shr	bl, 3
		and	ebx, 7
		add	ebx, 30h
		mov	[ecx+edi+1], bl

loc_804C10E:				; CODE XREF: sub_804BF90+167j
		mov	ebx, [ebp+var_60]
		and	edx, 7
		add	edx, 30h
		add	ebx, 1

loc_804C11A:				; CODE XREF: sub_804BF90+121j
					; sub_804BF90+127j
		add	esi, 1
		cmp	[ebp+var_6C], esi
		ja	loc_804C098
		mov	[ebp+var_2C], esi
		lea	esi, [esi+0]

loc_804C130:				; CODE XREF: sub_804BF90+43Cj
					; sub_804BF90+4F3j
		cmp	ebx, [ebp+var_38]
		jnb	short loc_804C13B
		mov	ecx, [ebp+var_40]
		mov	[ecx+ebx], dl

loc_804C13B:				; CODE XREF: sub_804BF90+1A3j
		add	ebx, 1
		cmp	[ebp+arg_0], 0FFFFFFFFh
		jnz	loc_804C010

loc_804C148:				; CODE XREF: sub_804BF90+75j
		mov	edi, [ebp+s]
		mov	esi, [ebp+var_2C]
		cmp	byte ptr [edi+esi], 0
		setnz	al
		test	al, al
		jnz	loc_804C021

loc_804C15D:				; CODE XREF: sub_804BF90+8Bj
		test	ebx, ebx
		jnz	short loc_804C176
		cmp	[ebp+arg_4], 2
		jnz	short loc_804C176
		cmp	[ebp+var_41], 0
		nop
		lea	esi, [esi+0]
		jnz	loc_804C420	; jumptable 0804C807 cases 0,1,3,5,33

loc_804C176:				; CODE XREF: sub_804BF90+1CFj
					; sub_804BF90+1D5j
		mov	eax, [ebp+var_50]
		test	eax, eax
		jz	short loc_804C1AE
		cmp	[ebp+var_41], 0
		jnz	short loc_804C1AE
		mov	edx, [ebp+var_50]
		movzx	eax, byte ptr [edx]
		test	al, al
		jz	short loc_804C1AE
		mov	edx, [ebp+var_40]
		mov	ecx, [ebp+var_50]
		mov	esi, [ebp+var_38]
		add	edx, ebx

loc_804C198:				; CODE XREF: sub_804BF90+21Cj
		cmp	esi, ebx
		jbe	short loc_804C19E
		mov	[edx], al

loc_804C19E:				; CODE XREF: sub_804BF90+20Aj
		add	ecx, 1
		add	ebx, 1
		movzx	eax, byte ptr [ecx]
		add	edx, 1
		test	al, al
		jnz	short loc_804C198

loc_804C1AE:				; CODE XREF: sub_804BF90+1EBj
					; sub_804BF90+1F1j ...
		cmp	ebx, [ebp+var_38]
		jnb	loc_804C44F
		mov	ecx, [ebp+var_40]
		mov	eax, ebx
		mov	byte ptr [ecx+ebx], 0
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_804C1C8:				; CODE XREF: sub_804BF90+33j
					; DATA XREF: .rodata:off_8052C40o
		mov	dword ptr [esp+8], 5 ; jumptable 0804BFC3 cases	6,7
		mov	dword ptr [esp+4], offset asc_8052BF1 ;	"`"
		mov	dword ptr [esp], 0 ; domainname
		call	_dcgettext
		cmp	[ebp+arg_4], 7
		setz	bl
		cmp	eax, offset asc_8052BF1	; "`"
		mov	esi, eax
		jnz	short loc_804C1FC
		test	bl, bl
		jnz	loc_804C33C

loc_804C1FC:				; CODE XREF: sub_804BF90+262j
					; sub_804BF90+3B1j
		mov	dword ptr [esp+8], 5 ; category
		mov	dword ptr [esp+4], (offset aIterCur_ptr0+15h) ;	msgid
		mov	dword ptr [esp], 0 ; domainname
		call	_dcgettext
		cmp	eax, 805282Ah
		mov	edi, eax
		jnz	short loc_804C229
		test	bl, bl
		jnz	loc_804C346

loc_804C229:				; CODE XREF: sub_804BF90+28Fj
					; sub_804BF90+3BBj
		cmp	[ebp+var_41], 0
		jnz	loc_804C839
		movzx	eax, byte ptr [esi]
		test	al, al
		jz	loc_804C839
		mov	ecx, [ebp+var_40]
		xor	ebx, ebx
		mov	edx, [ebp+var_38]
		db	66h
		nop

loc_804C248:				; CODE XREF: sub_804BF90+2C8j
		cmp	edx, ebx
		jbe	short loc_804C24F
		mov	[ecx+ebx], al

loc_804C24F:				; CODE XREF: sub_804BF90+2BAj
		add	ebx, 1
		movzx	eax, byte ptr [esi+ebx]
		test	al, al
		jnz	short loc_804C248

loc_804C25A:				; CODE XREF: sub_804BF90+8ABj
		mov	[esp], edi	; s
		call	_strlen
		mov	[ebp+var_50], edi
		mov	[ebp+var_31], 1
		mov	[ebp+var_48], eax
		jmp	loc_804BFE8
; ---------------------------------------------------------------------------

loc_804C271:				; CODE XREF: sub_804BF90+33j
					; DATA XREF: .rodata:off_8052C40o
		mov	[ebp+var_41], 0	; jumptable 0804BFC3 case 0
		xor	ebx, ebx
		mov	[ebp+var_31], 0
		mov	[ebp+var_48], 0
		mov	[ebp+var_50], 0
		jmp	loc_804BFE8
; ---------------------------------------------------------------------------

loc_804C28E:				; CODE XREF: sub_804BF90+33j
					; DATA XREF: .rodata:off_8052C40o
		mov	[ebp+var_41], 1	; jumptable 0804BFC3 case 1
		xor	ebx, ebx
		mov	[ebp+var_31], 0
		mov	[ebp+var_48], 1
		mov	[ebp+var_50], 805282Ah
		mov	[ebp+arg_4], 2
		jmp	loc_804BFE8
; ---------------------------------------------------------------------------

loc_804C2B2:				; CODE XREF: sub_804BF90+33j
					; DATA XREF: .rodata:off_8052C40o
		cmp	[ebp+var_41], 0	; jumptable 0804BFC3 case 2
		jnz	loc_804C8B6
		mov	edi, [ebp+var_38]
		test	edi, edi
		jz	short loc_804C2C9
		mov	ecx, [ebp+var_40]
		mov	byte ptr [ecx],	27h

loc_804C2C9:				; CODE XREF: sub_804BF90+331j
		mov	[ebp+var_31], 0
		mov	ebx, 1
		mov	[ebp+var_48], 1
		mov	[ebp+var_50], 805282Ah
		jmp	loc_804BFE8
; ---------------------------------------------------------------------------

loc_804C2E5:				; CODE XREF: sub_804BF90+33j
					; DATA XREF: .rodata:off_8052C40o
		cmp	[ebp+var_41], 0	; jumptable 0804BFC3 case 3
		jnz	loc_804C89D
		mov	eax, [ebp+var_38]
		test	eax, eax
		jz	short loc_804C2FC
		mov	edx, [ebp+var_40]
		mov	byte ptr [edx],	22h

loc_804C2FC:				; CODE XREF: sub_804BF90+364j
		mov	[ebp+var_31], 1
		mov	ebx, 1
		mov	[ebp+var_48], 1
		mov	[ebp+var_50], offset asc_8052BEF ; "\""
		jmp	loc_804BFE8
; ---------------------------------------------------------------------------

loc_804C318:				; CODE XREF: sub_804BF90+33j
					; DATA XREF: .rodata:off_8052C40o
		mov	[ebp+var_41], 1	; jumptable 0804BFC3 case 4
		xor	ebx, ebx
		mov	[ebp+var_31], 1
		mov	[ebp+var_48], 1
		mov	[ebp+var_50], offset asc_8052BEF ; "\""
		mov	[ebp+arg_4], 3
		jmp	loc_804BFE8
; ---------------------------------------------------------------------------

loc_804C33C:				; CODE XREF: sub_804BF90+266j
		mov	esi, offset asc_8052BEF	; "\""
		jmp	loc_804C1FC
; ---------------------------------------------------------------------------

loc_804C346:				; CODE XREF: sub_804BF90+293j
		mov	edi, offset asc_8052BEF	; "\""
		jmp	loc_804C229
; ---------------------------------------------------------------------------

loc_804C350:				; CODE XREF: sub_804BF90+46Ej
					; DATA XREF: .rodata:off_8052C60o
		cmp	[ebp+arg_0], 0FFFFFFFFh	; jumptable 0804C3FE cases 123,125
		jz	loc_804C7D8
		cmp	[ebp+arg_0], 1
		setnz	al

loc_804C361:				; CODE XREF: sub_804BF90+852j
		test	al, al
		jnz	short loc_804C380 ; jumptable 0804C3FE cases 37,43-58,65-90,93,95,97-122

loc_804C365:				; CODE XREF: sub_804BF90+46Ej
					; DATA XREF: .rodata:off_8052C60o
		mov	esi, [ebp+var_2C] ; jumptable 0804C3FE cases 35,126
		test	esi, esi
		jnz	short loc_804C380 ; jumptable 0804C3FE cases 37,43-58,65-90,93,95,97-122

loc_804C36C:				; CODE XREF: sub_804BF90+46Ej
					; DATA XREF: .rodata:off_8052C60o
		cmp	[ebp+arg_4], 2	; jumptable 0804C3FE cases 32-34,36,38,40-42,59-62,91,94,96,124
		jnz	short loc_804C380 ; jumptable 0804C3FE cases 37,43-58,65-90,93,95,97-122

loc_804C372:				; CODE XREF: sub_804BF90+604j
		cmp	[ebp+var_41], 0
		jnz	loc_804C420	; jumptable 0804C807 cases 0,1,3,5,33
		lea	esi, [esi+0]

loc_804C380:				; CODE XREF: sub_804BF90+3D3j
					; sub_804BF90+3DAj ...
		mov	eax, [ebp+var_2C] ; jumptable 0804C3FE cases 37,43-58,65-90,93,95,97-122

loc_804C383:				; CODE XREF: sub_804BF90+6B1j
					; sub_804BF90+6FFj
		cmp	[ebp+var_31], 0
		jz	loc_804C473

loc_804C38D:				; CODE XREF: sub_804BF90+4E7j
		mov	[ebp+var_2C], eax

loc_804C390:				; CODE XREF: sub_804BF90+EEj
					; sub_804BF90+5CDj ...
		mov	ecx, [ebp+arg_C]
		test	ecx, ecx
		jz	short loc_804C3C8
		mov	edi, [ebp+arg_C]
		mov	eax, edx
		mov	ecx, edx
		shr	al, 5
		and	ecx, 1Fh
		movzx	eax, al
		mov	esi, 1
		shl	esi, cl
		test	[edi+eax*4], esi
		jz	short loc_804C3C8
		cmp	[ebp+var_41], 0
		jnz	short loc_804C420 ; jumptable 0804C807 cases 0,1,3,5,33

loc_804C3B9:				; CODE XREF: sub_804BF90+48Cj
		cmp	ebx, [ebp+var_38]
		jnb	short loc_804C3C5
		mov	eax, [ebp+var_40]
		mov	byte ptr [eax+ebx], 5Ch

loc_804C3C5:				; CODE XREF: sub_804BF90+42Cj
		add	ebx, 1

loc_804C3C8:				; CODE XREF: sub_804BF90+405j
					; sub_804BF90+421j ...
		add	[ebp+var_2C], 1
		jmp	loc_804C130
; ---------------------------------------------------------------------------
		align 8

loc_804C3D8:				; CODE XREF: sub_804BF90+95j
		mov	esi, [ebp+var_48]
		test	esi, esi
		jnz	loc_804C698
		mov	edx, [ebp+s]
		add	edx, [ebp+var_2C]
		mov	[ebp+var_30], edx
		mov	ecx, [ebp+var_30]
		movzx	edx, byte ptr [ecx]
		cmp	dl, 7Eh		; switch 127 cases
		ja	loc_804C043	; jumptable 0804C3FE default case

loc_804C3FB:				; CODE XREF: sub_804BF90+ADj
		movzx	eax, dl
		jmp	ds:off_8052C60[eax*4] ;	switch jump
; ---------------------------------------------------------------------------
		align 4

loc_804C408:				; CODE XREF: sub_804BF90+46Ej
					; DATA XREF: .rodata:off_8052C60o
		mov	eax, 66h	; jumptable 0804C3FE case 12
		lea	esi, [esi+0]

loc_804C410:				; CODE XREF: sub_804BF90+501j
					; sub_804BF90+50Bj ...
		cmp	[ebp+var_31], 0
		jz	short loc_804C470

loc_804C416:				; CODE XREF: sub_804BF90+4D9j
		cmp	[ebp+var_41], 0
		mov	edx, eax
		jz	short loc_804C3B9
		db	66h
		nop

loc_804C420:				; CODE XREF: sub_804BF90+12Dj
					; sub_804BF90+1E0j ...
		mov	dword ptr [esp+0Ch], 0 ; jumptable 0804C807 cases 0,1,3,5,33
		mov	eax, [ebp+arg_8]
		and	eax, 0FFFFFFFDh
		mov	[esp+8], eax
		mov	ebx, [ebp+arg_4]
		mov	[esp+4], ebx
		mov	esi, [ebp+arg_0]
		mov	[esp], esi
		mov	ecx, [ebp+s]
		mov	edx, [ebp+var_38]
		mov	eax, [ebp+var_40]
		call	sub_804BF90
		mov	ebx, eax

loc_804C44F:				; CODE XREF: sub_804BF90+221j
		add	esp, 7Ch
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_804C460:				; CODE XREF: sub_804BF90+46Ej
					; DATA XREF: .rodata:off_8052C60o
		cmp	[ebp+var_31], 0	; jumptable 0804C3FE case 11
		mov	eax, 76h
		jnz	short loc_804C416
		nop
		lea	esi, [esi+0]

loc_804C470:				; CODE XREF: sub_804BF90+E4j
					; sub_804BF90+484j ...
		mov	eax, [ebp+var_2C]

loc_804C473:				; CODE XREF: sub_804BF90+3F7j
		cmp	[ebp+var_41], 0
		jnz	loc_804C38D
		add	eax, 1
		mov	[ebp+var_2C], eax
		jmp	loc_804C130
; ---------------------------------------------------------------------------

loc_804C488:				; CODE XREF: sub_804BF90+46Ej
					; DATA XREF: .rodata:off_8052C60o
		mov	eax, 72h	; jumptable 0804C3FE case 13

loc_804C48D:				; CODE XREF: sub_804BF90+520j
					; sub_804BF90+530j ...
		cmp	[ebp+arg_4], 2
		jnz	loc_804C410
		cmp	[ebp+var_41], 0
		jz	loc_804C410
		jmp	loc_804C420	; jumptable 0804C807 cases 0,1,3,5,33
; ---------------------------------------------------------------------------
		align 4

loc_804C4A8:				; CODE XREF: sub_804BF90+46Ej
					; DATA XREF: .rodata:off_8052C60o
		mov	eax, 6Eh	; jumptable 0804C3FE case 10
		lea	esi, [esi+0]
		jmp	short loc_804C48D
; ---------------------------------------------------------------------------
		align 8

loc_804C4B8:				; CODE XREF: sub_804BF90+46Ej
					; DATA XREF: .rodata:off_8052C60o
		mov	eax, 74h	; jumptable 0804C3FE case 9
		lea	esi, [esi+0]
		jmp	short loc_804C48D
; ---------------------------------------------------------------------------
		align 8

loc_804C4C8:				; CODE XREF: sub_804BF90+46Ej
					; DATA XREF: .rodata:off_8052C60o
		mov	eax, 62h	; jumptable 0804C3FE case 8
		lea	esi, [esi+0]
		jmp	loc_804C410
; ---------------------------------------------------------------------------
		align 4

loc_804C4D8:				; CODE XREF: sub_804BF90+46Ej
					; DATA XREF: .rodata:off_8052C60o
		mov	eax, 61h	; jumptable 0804C3FE case 7
		lea	esi, [esi+0]
		jmp	loc_804C410
; ---------------------------------------------------------------------------
		align 4

loc_804C4E8:				; CODE XREF: sub_804BF90+46Ej
					; DATA XREF: .rodata:off_8052C60o
		cmp	[ebp+var_31], 0	; jumptable 0804C3FE case 0
		lea	esi, [esi+0]
		jz	loc_804C7B0
		cmp	[ebp+var_41], 0
		jnz	loc_804C420	; jumptable 0804C807 cases 0,1,3,5,33
		cmp	ebx, [ebp+var_38]
		jnb	short loc_804C50C
		mov	esi, [ebp+var_40]
		mov	byte ptr [esi+ebx], 5Ch

loc_804C50C:				; CODE XREF: sub_804BF90+573j
		mov	eax, [ebp+var_2C]
		add	ebx, 1
		add	eax, 1
		cmp	[ebp+arg_0], eax
		jbe	loc_804C7C8
		mov	edx, [ebp+s]
		mov	edi, [ebp+var_2C]
		movzx	eax, byte ptr [edx+edi+1]
		cmp	al, 2Fh
		jle	loc_804C7C8
		cmp	al, 39h
		jg	loc_804C7C8
		cmp	[ebp+var_38], ebx
		jbe	short loc_804C545
		mov	ecx, [ebp+var_40]
		mov	byte ptr [ecx+ebx], 30h

loc_804C545:				; CODE XREF: sub_804BF90+5ACj
		lea	eax, [ebx+1]
		cmp	[ebp+var_38], eax
		jbe	short loc_804C555
		mov	esi, [ebp+var_40]
		mov	byte ptr [esi+ebx+1], 30h

loc_804C555:				; CODE XREF: sub_804BF90+5BBj
		lea	ebx, [eax+1]
		mov	edx, 30h
		jmp	loc_804C390
; ---------------------------------------------------------------------------
		align 8

loc_804C568:				; CODE XREF: sub_804BF90+46Ej
					; DATA XREF: .rodata:off_8052C60o
		cmp	[ebp+var_31], 0	; jumptable 0804C3FE case 92
		jz	short loc_804C580
		cmp	[ebp+var_41], 0
		jz	short loc_804C580
		mov	edi, [ebp+var_48]
		test	edi, edi
		jnz	loc_804C3C8
		nop

loc_804C580:				; CODE XREF: sub_804BF90+5DCj
					; sub_804BF90+5E2j
		mov	eax, 5Ch
		jmp	loc_804C48D
; ---------------------------------------------------------------------------
		align 10h

loc_804C590:				; CODE XREF: sub_804BF90+46Ej
					; DATA XREF: .rodata:off_8052C60o
		cmp	[ebp+arg_4], 2	; jumptable 0804C3FE case 63
		jz	loc_804C372
		cmp	[ebp+arg_4], 3
		db	66h
		nop
		jnz	loc_804C380	; jumptable 0804C3FE cases 37,43-58,65-90,93,95,97-122
		mov	eax, [ebp+var_5C]
		test	eax, eax
		jz	loc_804C380	; jumptable 0804C3FE cases 37,43-58,65-90,93,95,97-122
		mov	eax, [ebp+var_2C]
		add	eax, 2
		cmp	[ebp+arg_0], eax
		jbe	loc_804C380	; jumptable 0804C3FE cases 37,43-58,65-90,93,95,97-122
		mov	ecx, [ebp+s]
		mov	edi, [ebp+var_2C]
		cmp	byte ptr [ecx+edi+1], 3Fh
		jnz	loc_804C380	; jumptable 0804C3FE cases 37,43-58,65-90,93,95,97-122
		movzx	esi, byte ptr [ecx+eax]
		lea	ecx, [esi-21h]
		cmp	cl, 1Dh
		ja	loc_804C380	; jumptable 0804C3FE cases 37,43-58,65-90,93,95,97-122
		mov	edi, 1
		shl	edi, cl
		mov	ecx, edi
		and	ecx, 380051C1h
		jz	loc_804C380	; jumptable 0804C3FE cases 37,43-58,65-90,93,95,97-122
		cmp	[ebp+var_41], 0
		jnz	loc_804C420	; jumptable 0804C807 cases 0,1,3,5,33
		cmp	ebx, [ebp+var_38]
		jnb	short loc_804C60C
		mov	edx, [ebp+var_40]
		mov	byte ptr [edx+ebx], 3Fh

loc_804C60C:				; CODE XREF: sub_804BF90+673j
		lea	ecx, [ebx+1]
		cmp	[ebp+var_38], ecx
		jbe	short loc_804C61C
		mov	edi, [ebp+var_40]
		mov	byte ptr [edi+ebx+1], 22h

loc_804C61C:				; CODE XREF: sub_804BF90+682j
		lea	edx, [ecx+1]
		cmp	[ebp+var_38], edx
		jbe	short loc_804C62C
		mov	ebx, [ebp+var_40]
		mov	byte ptr [ebx+ecx+1], 22h

loc_804C62C:				; CODE XREF: sub_804BF90+692j
		lea	ebx, [edx+1]
		cmp	[ebp+var_38], ebx
		jbe	short loc_804C63C
		mov	edi, [ebp+var_40]
		mov	byte ptr [edi+edx+1], 3Fh

loc_804C63C:				; CODE XREF: sub_804BF90+6A2j
		mov	edx, esi
		add	ebx, 1
		jmp	loc_804C383
; ---------------------------------------------------------------------------
		align 4

loc_804C648:				; CODE XREF: sub_804BF90+46Ej
					; DATA XREF: .rodata:off_8052C60o
		cmp	[ebp+arg_4], 2	; jumptable 0804C3FE case 39
		jnz	loc_804C380	; jumptable 0804C3FE cases 37,43-58,65-90,93,95,97-122
		cmp	[ebp+var_41], 0
		jnz	loc_804C420	; jumptable 0804C807 cases 0,1,3,5,33
		cmp	ebx, [ebp+var_38]
		nop
		jnb	short loc_804C669
		mov	ecx, [ebp+var_40]
		mov	byte ptr [ecx+ebx], 27h

loc_804C669:				; CODE XREF: sub_804BF90+6D0j
		lea	eax, [ebx+1]
		cmp	[ebp+var_38], eax
		jbe	short loc_804C679
		mov	esi, [ebp+var_40]
		mov	byte ptr [esi+ebx+1], 5Ch

loc_804C679:				; CODE XREF: sub_804BF90+6DFj
		lea	ebx, [eax+1]
		cmp	[ebp+var_38], ebx
		jbe	short loc_804C689
		mov	edi, [ebp+var_40]
		mov	byte ptr [edi+eax+1], 27h

loc_804C689:				; CODE XREF: sub_804BF90+6EFj
		add	ebx, 1
		mov	eax, [ebp+var_2C]
		jmp	loc_804C383
; ---------------------------------------------------------------------------
		align 8

loc_804C698:				; CODE XREF: sub_804BF90+44Dj
		mov	eax, [ebp+var_2C]
		add	eax, [ebp+var_48]
		cmp	[ebp+arg_0], eax
		jnb	short loc_804C6B8
		mov	ecx, [ebp+s]
		add	ecx, [ebp+var_2C]
		mov	[ebp+var_30], ecx
		jmp	loc_804C034
; ---------------------------------------------------------------------------
		align 8

loc_804C6B8:				; CODE XREF: sub_804BF90+711j
		mov	edi, [ebp+var_48]
		mov	esi, [ebp+s]
		add	esi, [ebp+var_2C]
		mov	ecx, [ebp+var_48]
		cmp	edi, edi
		mov	edi, [ebp+var_50]
		mov	[ebp+var_30], esi
		repe cmpsb
		jnz	loc_804C034
		cmp	[ebp+var_41], 0
		jnz	loc_804C420	; jumptable 0804C807 cases 0,1,3,5,33
		cmp	ebx, [ebp+var_38]
		jnb	short loc_804C6EA
		mov	eax, [ebp+var_40]
		mov	byte ptr [eax+ebx], 5Ch

loc_804C6EA:				; CODE XREF: sub_804BF90+751j
		add	ebx, 1
		jmp	loc_804C034
; ---------------------------------------------------------------------------
		align 8

loc_804C6F8:				; CODE XREF: sub_804BF90+B7j
		cmp	[ebp+arg_0], 0FFFFFFFFh
		mov	[ebp+p.__count], 0
		mov	dword ptr [ebp+p.__value], 0
		jz	loc_804C81F

loc_804C710:				; CODE XREF: sub_804BF90+8A4j
		mov	byte ptr [ebp+var_4C], 1
		xor	esi, esi
		mov	[ebp+var_60], ebx
		mov	[ebp+var_61], dl

loc_804C71C:				; CODE XREF: sub_804BF90+806j
		mov	edx, [ebp+var_2C]
		lea	ebx, [ebp+p]
		mov	ecx, [ebp+s]
		mov	[esp+0Ch], ebx	; p
		mov	eax, [ebp+arg_0]
		lea	edi, [esi+edx]
		add	ecx, edi
		sub	eax, edi
		mov	[esp+8], eax	; n
		lea	eax, [ebp+wc]
		mov	[esp+4], ecx	; s
		mov	[esp], eax	; pwc
		mov	[ebp+var_68], ecx
		call	_mbrtowc
		mov	ecx, [ebp+var_68]
		test	eax, eax
		mov	ebx, eax
		jz	short loc_804C798
		cmp	eax, 0FFFFFFFFh
		jz	loc_804C840
		cmp	eax, 0FFFFFFFEh
		jz	loc_804C850
		cmp	[ebp+var_41], 0
		jz	short loc_804C772
		cmp	[ebp+arg_4], 2
		db	66h
		nop
		jz	short loc_804C7E8

loc_804C772:				; CODE XREF: sub_804BF90+7D8j
					; sub_804BF90+85Bj ...
		mov	eax, [ebp+wc]
		mov	[esp], eax	; wc
		call	_iswprint
		cmp	eax, 1
		sbb	eax, eax
		add	esi, ebx
		not	eax
		and	byte ptr [ebp+var_4C], al
		lea	eax, [ebp+p]
		mov	[esp], eax	; ps
		call	_mbsinit
		test	eax, eax
		jz	short loc_804C71C

loc_804C798:				; CODE XREF: sub_804BF90+7C0j
		mov	ebx, [ebp+var_60]
		movzx	edx, [ebp+var_61]

loc_804C79F:				; CODE XREF: sub_804BF90+8BBj
		cmp	esi, 1
		ja	loc_804C088
		jmp	loc_804C070
; ---------------------------------------------------------------------------
		align 10h

loc_804C7B0:				; CODE XREF: sub_804BF90+560j
		mov	ecx, [ebp+var_58]
		test	ecx, ecx
		jz	loc_804C470
		add	[ebp+var_2C], 1
		nop
		jmp	loc_804C001
; ---------------------------------------------------------------------------
		align 4

loc_804C7C8:				; CODE XREF: sub_804BF90+588j
					; sub_804BF90+59Bj ...
		mov	edx, 30h
		lea	esi, [esi+0]
		jmp	loc_804C390
; ---------------------------------------------------------------------------
		align 4

loc_804C7D8:				; CODE XREF: sub_804BF90+3C4j
		mov	eax, [ebp+s]
		cmp	byte ptr [eax+1], 0
		setnz	al
		jmp	loc_804C361
; ---------------------------------------------------------------------------
		align 4

loc_804C7E8:				; CODE XREF: sub_804BF90+7E0j
		cmp	eax, 1
		jbe	short loc_804C772
		mov	eax, 1
		lea	esi, [esi+0]

loc_804C7F8:				; CODE XREF: sub_804BF90+888j
		movzx	edx, byte ptr [ecx+1]
		sub	edx, 5Bh
		cmp	dl, 21h		; switch 34 cases
		ja	short loc_804C810 ; jumptable 0804C807 default case
		movzx	edx, dl
		jmp	ds:off_8052E5C[edx*4] ;	switch jump
; ---------------------------------------------------------------------------
		align 10h

loc_804C810:				; CODE XREF: sub_804BF90+872j
					; sub_804BF90+877j
					; DATA XREF: ...
		add	eax, 1		; jumptable 0804C807 default case
		add	ecx, 1
		cmp	ebx, eax
		ja	short loc_804C7F8
		jmp	loc_804C772
; ---------------------------------------------------------------------------

loc_804C81F:				; CODE XREF: sub_804BF90+77Aj
		mov	eax, [ebp+s]
		mov	[esp], eax	; s
		mov	byte ptr [ebp+var_68], dl
		call	_strlen
		movzx	edx, byte ptr [ebp+var_68]
		mov	[ebp+arg_0], eax
		jmp	loc_804C710
; ---------------------------------------------------------------------------

loc_804C839:				; CODE XREF: sub_804BF90+29Dj
					; sub_804BF90+2A8j
		xor	ebx, ebx
		jmp	loc_804C25A
; ---------------------------------------------------------------------------

loc_804C840:				; CODE XREF: sub_804BF90+7C5j
		mov	ebx, [ebp+var_60]
		movzx	edx, [ebp+var_61]

loc_804C847:				; CODE XREF: sub_804BF90+8CAj
					; sub_804BF90+8CFj ...
		mov	byte ptr [ebp+var_4C], 0
		jmp	loc_804C79F
; ---------------------------------------------------------------------------

loc_804C850:				; CODE XREF: sub_804BF90+7CEj
		cmp	[ebp+arg_0], edi
		mov	ebx, [ebp+var_60]
		movzx	edx, [ebp+var_61]
		jbe	short loc_804C847
		cmp	byte ptr [ecx],	0
		jz	short loc_804C847
		mov	edi, [ebp+var_2C]
		mov	eax, [ebp+s]
		mov	[ebp+var_4C], ebx
		mov	ebx, esi
		lea	ecx, [edi+esi+1]
		mov	edi, edx
		mov	esi, [ebp+arg_0]
		add	eax, ecx
		jmp	short loc_804C88D
; ---------------------------------------------------------------------------
		align 10h

loc_804C880:				; CODE XREF: sub_804BF90+902j
		movzx	edx, byte ptr [eax]
		add	ecx, 1
		add	eax, 1
		test	dl, dl
		jz	short loc_804C894

loc_804C88D:				; CODE XREF: sub_804BF90+8E7j
		add	ebx, 1
		cmp	ecx, esi
		jb	short loc_804C880

loc_804C894:				; CODE XREF: sub_804BF90+8FBj
		mov	esi, ebx
		mov	edx, edi
		mov	ebx, [ebp+var_4C]
		jmp	short loc_804C847
; ---------------------------------------------------------------------------

loc_804C89D:				; CODE XREF: sub_804BF90+359j
		mov	[ebp+var_31], 1
		xor	ebx, ebx
		mov	[ebp+var_48], 1
		mov	[ebp+var_50], offset asc_8052BEF ; "\""
		jmp	loc_804BFE8
; ---------------------------------------------------------------------------

loc_804C8B6:				; CODE XREF: sub_804BF90+326j
		mov	[ebp+var_31], 0
		xor	ebx, ebx
		mov	[ebp+var_48], 1
		mov	[ebp+var_50], 805282Ah
		jmp	loc_804BFE8
sub_804BF90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_804C8D0	proc near		; CODE XREF: sub_804CA50+87p
					; sub_804CB70+20p ...

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 3Ch
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_28], edx
		mov	[ebp+var_2C], ecx
		call	___errno_location
		test	ebx, ebx
		mov	edi, ptr
		mov	[ebp+var_20], eax
		mov	eax, [eax]
		mov	[ebp+var_34], eax
		js	loc_804CA3C
		cmp	ebx, dword_805512C
		jb	short loc_804C96B
		lea	edx, [ebx+1]
		cmp	edx, 1FFFFFFFh
		mov	[ebp+var_1C], edx
		ja	loc_804CA41
		mov	eax, [ebp+var_1C]
		shl	eax, 3
		cmp	edi, offset dword_8055130
		jz	loc_804CA10
		mov	[esp], edi	; ptr
		mov	[esp+4], eax	; size
		call	sub_804CFF0
		mov	edi, eax
		mov	ptr, eax

loc_804C93E:				; CODE XREF: sub_804C8D0+167j
		mov	eax, dword_805512C
		mov	ecx, [ebp+var_1C]
		mov	dword ptr [esp+4], 0 ; c
		sub	ecx, eax
		shl	ecx, 3
		lea	eax, [edi+eax*8]
		mov	[esp+8], ecx	; n
		mov	[esp], eax	; s
		call	_memset
		mov	edx, [ebp+var_1C]
		mov	dword_805512C, edx

loc_804C96B:				; CODE XREF: sub_804C8D0+35j
		mov	edx, [esi+4]
		lea	edi, [edi+ebx*8]
		mov	eax, [edi]
		mov	ebx, [edi+4]
		mov	ecx, [ebp+var_28]
		or	edx, 1
		mov	[esp+8], edx
		mov	[ebp+var_1C], edx
		mov	edx, [ebp+var_2C]
		mov	[ebp+var_24], eax
		lea	eax, [esi+8]
		mov	[ebp+var_30], eax
		mov	[esp+0Ch], eax
		mov	eax, [esi]
		mov	[esp], edx
		mov	edx, [ebp+var_24]
		mov	[esp+4], eax
		mov	eax, ebx
		call	sub_804BF90
		cmp	[ebp+var_24], eax
		ja	short loc_804C9FD
		lea	edx, [eax+1]
		cmp	ebx, offset dword_80551E0
		mov	[edi], edx
		jz	short loc_804C9C6
		mov	[ebp+var_38], edx
		mov	[esp], ebx	; ptr
		call	_free
		mov	edx, [ebp+var_38]

loc_804C9C6:				; CODE XREF: sub_804C8D0+E6j
		mov	[esp], edx	; size
		mov	[ebp+var_38], edx
		call	sub_804D070
		mov	ecx, [ebp+var_28]
		mov	edx, [ebp+var_38]
		mov	[edi+4], eax
		mov	ebx, eax
		mov	eax, [ebp+var_30]
		mov	[esp+0Ch], eax
		mov	eax, [ebp+var_1C]
		mov	[esp+8], eax
		mov	eax, [esi]
		mov	[esp+4], eax
		mov	eax, [ebp+var_2C]
		mov	[esp], eax
		mov	eax, ebx
		call	sub_804BF90

loc_804C9FD:				; CODE XREF: sub_804C8D0+D9j
		mov	eax, [ebp+var_34]
		mov	edx, [ebp+var_20]
		mov	[edx], eax
		add	esp, 3Ch
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_804CA10:				; CODE XREF: sub_804C8D0+55j
		mov	[esp+4], eax	; size
		mov	dword ptr [esp], 0 ; ptr
		call	sub_804CFF0
		mov	edx, off_8055134
		mov	edi, eax
		mov	ptr, eax
		mov	eax, dword_8055130
		mov	[edi+4], edx
		mov	[edi], eax
		jmp	loc_804C93E
; ---------------------------------------------------------------------------

loc_804CA3C:				; CODE XREF: sub_804C8D0+29j
		call	_abort
; ---------------------------------------------------------------------------

loc_804CA41:				; CODE XREF: sub_804C8D0+43j
		call	sub_804B910
sub_804C8D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_804CA50	proc near		; CODE XREF: .text:0804CB0Bp
					; sub_804CB20+1Cp

var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 44h
		mov	edx, ds:dword_80551A0
		movsx	eax, [ebp+arg_8]
		lea	ebx, [ebp+var_30]
		mov	[esp], ebx
		mov	dword ptr [esp+8], 1
		mov	[ebp+var_30], edx
		mov	edx, ds:dword_80551A4
		mov	[esp+4], eax
		mov	[ebp+var_2C], edx
		mov	edx, ds:dword_80551A8
		mov	[ebp+var_28], edx
		mov	edx, ds:dword_80551AC
		mov	[ebp+var_24], edx
		mov	edx, ds:dword_80551B0
		mov	[ebp+var_20], edx
		mov	edx, ds:dword_80551B4
		mov	[ebp+var_1C], edx
		mov	edx, ds:dword_80551B8
		mov	[ebp+var_18], edx
		mov	edx, ds:dword_80551BC
		mov	[ebp+var_14], edx
		mov	edx, ds:dword_80551C0
		mov	[ebp+var_10], edx
		mov	edx, ds:dword_80551C4
		mov	[ebp+var_C], edx
		call	sub_804BDB0
		mov	ecx, [ebp+arg_4]
		xor	eax, eax
		mov	edx, [ebp+arg_0]
		mov	[esp], ebx
		call	sub_804C8D0
		add	esp, 44h
		pop	ebx
		pop	ebp
		retn
sub_804CA50	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+0Ch]
		mov	dword ptr [esp+8], 3Ah
		mov	[esp+4], eax
		mov	eax, [ebp+8]
		mov	[esp], eax
		call	sub_804CA50
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_804CB20	proc near		; CODE XREF: sub_804CB50+14p

arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		movsx	eax, [ebp+arg_4]
		mov	dword ptr [esp+4], 0FFFFFFFFh
		mov	[esp+8], eax
		mov	eax, [ebp+arg_0]
		mov	[esp], eax
		call	sub_804CA50
		leave
		retn
sub_804CB20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_804CB50	proc near		; CODE XREF: sub_804BBC0+7Ep

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_0]
		mov	dword ptr [esp+4], 3Ah
		mov	[esp], eax
		call	sub_804CB20
		leave
		retn
sub_804CB50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_804CB70	proc near		; CODE XREF: .text:0804CBC2p

var_30		= byte ptr -30h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 44h
		mov	edx, [ebp+arg_4]
		lea	ebx, [ebp+var_30]
		mov	eax, ebx
		call	sub_804BF20
		mov	ecx, [ebp+arg_C]
		mov	edx, [ebp+arg_8]
		mov	eax, [ebp+arg_0]
		mov	[esp], ebx
		call	sub_804C8D0
		add	esp, 44h
		pop	ebx
		pop	ebp
		retn
sub_804CB70	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+10h]
		mov	dword ptr [esp], 0
		mov	[esp+0Ch], eax
		mov	eax, [ebp+0Ch]
		mov	[esp+8], eax
		mov	eax, [ebp+8]
		mov	[esp+4], eax
		call	sub_804CB70
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_804CBD0	proc near		; CODE XREF: sub_804BD10+1Bp
					; .text:0804CC1Bp

var_30		= byte ptr -30h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 44h
		mov	edx, [ebp+arg_4]
		lea	ebx, [ebp+var_30]
		mov	eax, ebx
		call	sub_804BF20
		mov	edx, [ebp+arg_8]
		mov	ecx, 0FFFFFFFFh
		mov	eax, [ebp+arg_0]
		mov	[esp], ebx
		call	sub_804C8D0
		add	esp, 44h
		pop	ebx
		pop	ebp
		retn
sub_804CBD0	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+0Ch]
		mov	dword ptr [esp], 0
		mov	[esp+8], eax
		mov	eax, [ebp+8]
		mov	[esp+4], eax
		call	sub_804CBD0
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_804CC30	proc near		; CODE XREF: .text:0804CC6Bp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_8]
		mov	[ebp+arg_0], offset dword_80551A0
		mov	edx, [ebp+arg_4]
		leave
		jmp	sub_804C8D0
sub_804CC30	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+0Ch]
		mov	dword ptr [esp], 0
		mov	[esp+8], eax
		mov	eax, [ebp+8]
		mov	[esp+4], eax
		call	sub_804CC30
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_804CC80	proc near		; CODE XREF: .text:0804CCB4p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ecx, 0FFFFFFFFh
		mov	ebp, esp
		sub	esp, 8
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+arg_4]
		mov	[ebp+arg_0], offset dword_80551A0
		leave
		jmp	sub_804C8D0
sub_804CC80	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+8]
		mov	dword ptr [esp], 0
		mov	[esp+4], eax
		call	sub_804CC80
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_804CCC0	proc near		; CODE XREF: .text:0804CDA2p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		mov	ebx, offset dword_80551A0
		sub	esp, 3Ch
		mov	eax, [ebp+arg_C]
		test	eax, eax
		jz	short loc_804CCD7
		mov	ebx, eax

loc_804CCD7:				; CODE XREF: sub_804CCC0+13j
		call	___errno_location
		mov	ecx, [ebp+arg_8]
		lea	edx, [ebx+8]
		mov	[ebp+var_1C], edx
		test	ecx, ecx
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_20], eax
		mov	eax, [eax]
		mov	[ebp+var_2C], eax
		setz	al
		movzx	esi, al
		or	esi, [ebx+4]
		mov	[esp+0Ch], edx
		xor	edx, edx
		mov	[esp+8], esi
		mov	eax, [ebx]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_4]
		mov	[esp], eax
		xor	eax, eax
		call	sub_804BF90
		mov	edi, eax
		add	edi, 1
		mov	[ebp+var_28], eax
		mov	[esp], edi	; size
		call	sub_804D070
		mov	edx, [ebp+var_1C]
		mov	[esp+8], esi
		mov	ecx, [ebp+arg_0]
		mov	[esp+0Ch], edx
		mov	edx, edi
		mov	[ebp+var_24], eax
		mov	eax, [ebx]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_4]
		mov	[esp], eax
		mov	eax, [ebp+var_24]
		call	sub_804BF90
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_2C]
		mov	[edx], eax
		mov	edx, [ebp+arg_8]
		test	edx, edx
		jz	short loc_804CD66
		mov	eax, [ebp+var_28]
		mov	edx, [ebp+arg_8]
		mov	[edx], eax

loc_804CD66:				; CODE XREF: sub_804CCC0+9Cj
		mov	eax, [ebp+var_24]
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_804CCC0	endp

; ---------------------------------------------------------------------------
		jmp	short loc_804CD80
; ---------------------------------------------------------------------------
		align 10h

loc_804CD80:				; CODE XREF: .text:0804CD71j
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+10h]
		mov	dword ptr [esp+8], 0
		mov	[esp+0Ch], eax
		mov	eax, [ebp+0Ch]
		mov	[esp+4], eax
		mov	eax, [ebp+8]
		mov	[esp], eax
		call	sub_804CCC0
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+18h]
		mov	[ebp-4], edi
		mov	edi, offset dword_80551A0
		mov	[ebp-0Ch], ebx
		mov	[ebp-8], esi
		test	eax, eax
		jz	short loc_804CDCD
		mov	edi, eax

loc_804CDCD:				; CODE XREF: .text:0804CDC9j
		call	___errno_location
		mov	ecx, [ebp+10h]
		mov	edx, [ebp+0Ch]
		mov	esi, [eax]
		mov	ebx, eax
		lea	eax, [edi+8]
		mov	[esp+0Ch], eax
		mov	eax, [edi+4]
		mov	[esp+8], eax
		mov	eax, [edi]
		mov	[esp+4], eax
		mov	eax, [ebp+14h]
		mov	[esp], eax
		mov	eax, [ebp+8]
		call	sub_804BF90
		mov	[ebx], esi
		mov	ebx, [ebp-0Ch]
		mov	esi, [ebp-8]
		mov	edi, [ebp-4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_804CE10(int fd, void *buf, size_t nbytes)
sub_804CE10	proc near		; CODE XREF: sub_80495B0+57Dp
					; sub_80495B0+C68p

fd		= dword	ptr  8
buf		= dword	ptr  0Ch
nbytes		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	edi, [ebp+buf]
		mov	ebx, [ebp+nbytes]
		nop

loc_804CE20:				; CODE XREF: sub_804CE10+33j
					; sub_804CE10+47j
		mov	eax, [ebp+fd]
		mov	[esp+8], ebx	; nbytes
		mov	[esp+4], edi	; buf
		mov	[esp], eax	; fd
		call	_read
		test	eax, eax
		mov	esi, eax
		jns	short loc_804CE60
		call	___errno_location
		mov	eax, [eax]
		cmp	eax, 4
		jz	short loc_804CE20
		cmp	eax, 16h
		jnz	short loc_804CE60
		cmp	ebx, 7FFFE000h
		jbe	short loc_804CE60
		mov	ebx, 7FFFE000h
		jmp	short loc_804CE20
; ---------------------------------------------------------------------------
		align 10h

loc_804CE60:				; CODE XREF: sub_804CE10+27j
					; sub_804CE10+38j ...
		add	esp, 1Ch
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_804CE10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_804CE70(int fd, void *buf, size_t n)
sub_804CE70	proc near		; CODE XREF: sub_804A3E0+32p

fd		= dword	ptr  8
buf		= dword	ptr  0Ch
n		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	edi, [ebp+buf]
		mov	ebx, [ebp+n]
		nop

loc_804CE80:				; CODE XREF: sub_804CE70+33j
					; sub_804CE70+47j
		mov	eax, [ebp+fd]
		mov	[esp+8], ebx	; n
		mov	[esp+4], edi	; buf
		mov	[esp], eax	; fd
		call	_write
		test	eax, eax
		mov	esi, eax
		jns	short loc_804CEC0
		call	___errno_location
		mov	eax, [eax]
		cmp	eax, 4
		jz	short loc_804CE80
		cmp	eax, 16h
		jnz	short loc_804CEC0
		cmp	ebx, 7FFFE000h
		jbe	short loc_804CEC0
		mov	ebx, 7FFFE000h
		jmp	short loc_804CE80
; ---------------------------------------------------------------------------
		align 10h

loc_804CEC0:				; CODE XREF: sub_804CE70+27j
					; sub_804CE70+38j ...
		add	esp, 1Ch
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_804CE70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_804CED0	proc near		; CODE XREF: sub_804B6F0+F4j

s		= dword	ptr -7FCh
n		= dword	ptr -7F0h
var_7EC		= byte ptr -7ECh
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 818h
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_4], edi
		lea	edi, [ebp+var_7EC]
		mov	[ebp+var_C], ebx
		mov	[ebp+var_8], esi
		mov	[ebp+s], eax
		mov	eax, [ebp+arg_8]
		mov	edx, large gs:14h
		mov	[ebp+var_1C], edx
		xor	edx, edx
		mov	[ebp+n], 7D0h
		mov	[esp], edi
		mov	[esp+0Ch], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+8], eax
		lea	eax, [ebp+n]
		mov	[esp+4], eax
		call	sub_804F350
		mov	ebx, [ebp+n]
		test	eax, eax
		mov	esi, eax
		jz	short loc_804CFA6
		mov	edx, [ebp+s]
		mov	[esp+8], ebx	; n
		mov	dword ptr [esp+4], 1 ; size
		mov	[esp], eax	; ptr
		mov	[esp+0Ch], edx	; s
		call	_fwrite
		cmp	ebx, eax
		ja	short loc_804CF78
		test	ebx, ebx
		mov	eax, ebx
		js	short loc_804CF9B

loc_804CF5B:				; CODE XREF: sub_804CED0+AFj
					; sub_804CED0+C9j ...
		mov	edx, [ebp+var_1C]
		xor	edx, large gs:14h
		jnz	short loc_804CFBB
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 8

loc_804CF78:				; CODE XREF: sub_804CED0+83j
		cmp	esi, edi
		mov	eax, 0FFFFFFFFh
		jz	short loc_804CF5B
		call	___errno_location
		mov	edi, [eax]
		mov	ebx, eax
		mov	[esp], esi	; ptr
		call	_free
		mov	eax, 0FFFFFFFFh
		mov	[ebx], edi
		jmp	short loc_804CF5B
; ---------------------------------------------------------------------------

loc_804CF9B:				; CODE XREF: sub_804CED0+89j
		call	___errno_location
		mov	dword ptr [eax], 4Bh

loc_804CFA6:				; CODE XREF: sub_804CED0+61j
		mov	eax, [ebp+s]
		mov	[esp], eax
		call	sub_804D190
		mov	eax, 0FFFFFFFFh
		jmp	short loc_804CF5B
; ---------------------------------------------------------------------------

loc_804CFBB:				; CODE XREF: sub_804CED0+95j
		call	___stack_chk_fail
sub_804CED0	endp

; ---------------------------------------------------------------------------
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+0Ch]
		mov	[esp+4], eax
		mov	eax, [ebp+8]
		mov	[esp], eax
		call	_calloc
		test	eax, eax
		jz	short loc_804CFDE
		leave
		retn
; ---------------------------------------------------------------------------

loc_804CFDE:				; CODE XREF: .text:0804CFDAj
		db	66h
		nop
		call	sub_804B910
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_804CFF0(void *ptr, size_t size)
sub_804CFF0	proc near		; CODE XREF: sub_804C8D0+62p
					; sub_804C8D0+14Bp ...

ptr		= dword	ptr  8
size		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+size]
		mov	eax, [ebp+ptr]
		mov	[esp+4], ebx	; size
		mov	[esp], eax	; ptr
		call	_realloc
		test	eax, eax
		jz	short loc_804D013

loc_804D00D:				; CODE XREF: sub_804CFF0+25j
		add	esp, 14h
		pop	ebx
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_804D013:				; CODE XREF: sub_804CFF0+1Bj
		test	ebx, ebx
		jz	short loc_804D00D
		call	sub_804B910
sub_804CFF0	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		mov	ecx, [ebp+8]
		mov	ebx, [ebp+0Ch]
		test	ecx, ecx
		mov	eax, [ebx]
		jz	short loc_804D058
		cmp	eax, 0AAAAAAA9h
		ja	short loc_804D060
		lea	edx, [eax+1]
		shr	edx, 1
		add	eax, edx

loc_804D041:				; CODE XREF: .text:0804D05Aj
					; .text:0804D05Ej
		mov	[ebx], eax
		mov	[ebp+0Ch], eax
		mov	[ebp+8], ecx
		add	esp, 4
		pop	ebx
		pop	ebp
		jmp	sub_804CFF0
; ---------------------------------------------------------------------------
		align 8

loc_804D058:				; CODE XREF: .text:0804D031j
		test	eax, eax
		jnz	short loc_804D041
		mov	al, 40h
		jmp	short loc_804D041
; ---------------------------------------------------------------------------

loc_804D060:				; CODE XREF: .text:0804D038j
		call	sub_804B910
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_804D070(size_t size)
sub_804D070	proc near		; CODE XREF: sub_80495B0+3C8p
					; sub_80495B0+3E7p ...

size		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+size]
		mov	[esp], ebx	; size
		call	_malloc
		test	eax, eax
		jz	short loc_804D08C

loc_804D086:				; CODE XREF: sub_804D070+20j
		add	esp, 14h
		pop	ebx
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_804D08C:				; CODE XREF: sub_804D070+14j
		test	ebx, ebx
		db	66h
		nop
		jz	short loc_804D086
		call	sub_804B910
sub_804D070	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_804D0A0(void *src, size_t size)
sub_804D0A0	proc near		; CODE XREF: .text:0804BEFAp
					; .text:0804D0ECp

src		= dword	ptr  8
size		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+size]
		mov	[esp], ebx	; size
		call	sub_804D070
		mov	edx, [ebp+src]
		mov	[esp+8], ebx	; n
		mov	[esp+4], edx	; src
		mov	[esp], eax	; dest
		call	_memcpy
		add	esp, 14h
		pop	ebx
		pop	ebp
		retn
sub_804D0A0	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+8]
		mov	[esp], ebx
		call	_strlen
		mov	[esp], ebx
		add	eax, 1
		mov	[esp+4], eax
		call	sub_804D0A0
		add	esp, 14h
		pop	ebx
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+8]
		mov	[esp], ebx
		call	sub_804D070
		mov	[esp+8], ebx
		mov	dword ptr [esp+4], 0
		mov	[esp], eax
		call	_memset
		add	esp, 14h
		pop	ebx
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_804D130	proc near		; CODE XREF: sub_804ADD0+38p
					; sub_804EE40+24p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		xor	edx, edx
		mov	ebp, esp
		xor	eax, eax
		push	edi
		push	esi
		mov	esi, [ebp+arg_0]
		push	ebx
		mov	ebx, [ebp+arg_4]
		cmp	esi, ebx
		jz	short loc_804D179
		lea	esi, [esi+0]

loc_804D148:				; CODE XREF: sub_804D130+3Fj
		movzx	eax, byte ptr [esi+edx]
		lea	ecx, [eax-41h]
		cmp	ecx, 19h
		ja	short loc_804D157
		add	eax, 20h

loc_804D157:				; CODE XREF: sub_804D130+22j
		movzx	ecx, byte ptr [ebx+edx]
		lea	edi, [ecx-41h]
		cmp	edi, 19h
		ja	short loc_804D166
		add	ecx, 20h

loc_804D166:				; CODE XREF: sub_804D130+31j
		test	al, al
		jz	short loc_804D180
		add	edx, 1
		cmp	al, cl
		jz	short loc_804D148
		movzx	eax, al

loc_804D174:				; CODE XREF: sub_804D130+52j
		movzx	ecx, cl
		sub	eax, ecx

loc_804D179:				; CODE XREF: sub_804D130+12j
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_804D180:				; CODE XREF: sub_804D130+38j
		xor	eax, eax
		jmp	short loc_804D174
sub_804D130	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_804D190	proc near		; CODE XREF: sub_804CED0+DFp

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		or	dword ptr [eax], 20h
		pop	ebp
		retn
sub_804D190	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_804D1A0	proc near		; CODE XREF: sub_804ADD0+26p

var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
ptr		= dword	ptr -94h
var_90		= dword	ptr -90h
n		= dword	ptr -8Ch
var_82		= byte ptr -82h
src		= byte ptr -4Fh
var_1C		= dword	ptr -1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0ACh
		mov	dword ptr [esp], 0Eh ; item
		mov	eax, large gs:14h
		mov	[ebp+var_1C], eax
		xor	eax, eax
		call	_nl_langinfo
		test	eax, eax
		mov	esi, eax
		jz	loc_804D260
		mov	edx, ds:s
		test	edx, edx
		mov	ebx, edx
		jz	loc_804D275

loc_804D1DD:				; CODE XREF: sub_804D1A0+CFj
					; sub_804D1A0+35Dj
		movzx	edi, byte ptr [ebx]
		mov	eax, edi
		test	al, al
		jnz	short loc_804D209
		jmp	short loc_804D232
; ---------------------------------------------------------------------------

loc_804D1E8:				; CODE XREF: sub_804D1A0+7Ej
					; sub_804D1A0+84j
		mov	[esp], ebx	; s
		call	_strlen
		lea	ebx, [ebx+eax+1]
		mov	[esp], ebx	; s
		call	_strlen
		lea	ebx, [ebx+eax+1]
		movzx	edi, byte ptr [ebx]
		mov	ecx, edi
		test	cl, cl
		jz	short loc_804D232

loc_804D209:				; CODE XREF: sub_804D1A0+44j
		mov	[esp+4], ebx	; s2
		mov	[esp], esi	; s1
		call	_strcmp
		test	eax, eax
		jz	short loc_804D226
		mov	edx, edi
		cmp	dl, 2Ah
		jnz	short loc_804D1E8
		cmp	byte ptr [ebx+1], 0
		jnz	short loc_804D1E8

loc_804D226:				; CODE XREF: sub_804D1A0+77j
		mov	[esp], ebx	; s
		call	_strlen
		lea	esi, [ebx+eax+1]

loc_804D232:				; CODE XREF: sub_804D1A0+46j
					; sub_804D1A0+67j
		cmp	byte ptr [esi],	0
		jnz	short loc_804D23C
		mov	esi, offset aAscii ; "ASCII"

loc_804D23C:				; CODE XREF: sub_804D1A0+95j
		mov	ebx, [ebp+var_1C]
		xor	ebx, large gs:14h
		mov	eax, esi
		jnz	loc_804D5BB
		add	esp, 0ACh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_804D260:				; CODE XREF: sub_804D1A0+27j
		mov	edx, ds:s
		mov	esi, 8052890h
		test	edx, edx
		mov	ebx, edx
		jnz	loc_804D1DD

loc_804D275:				; CODE XREF: sub_804D1A0+37j
		mov	[ebp+var_9C], edx
		mov	dword ptr [esp], offset	name ; "CHARSETALIASDIR"
		call	_getenv
		mov	edx, [ebp+var_9C]
		test	eax, eax
		mov	edi, eax
		jz	short loc_804D29C
		cmp	byte ptr [eax],	0
		jnz	loc_804D55B

loc_804D29C:				; CODE XREF: sub_804D1A0+F1j
		mov	ecx, 7
		mov	edi, offset aUsrLib ; "/usr/lib"
		mov	[ebp+n], 8

loc_804D2B0:				; CODE XREF: sub_804D1A0+3D8j
		mov	[ebp+var_98], 1
		mov	eax, 1
		cmp	byte ptr [edi+ecx], 2Fh
		jz	loc_804D502

loc_804D2C9:				; CODE XREF: sub_804D1A0+36Ej
		add	eax, [ebp+n]
		mov	ebx, 8052890h
		mov	[ebp+var_9C], edx
		mov	[ebp+var_90], eax
		add	eax, 0Eh
		mov	[esp], eax	; size
		call	_malloc
		test	eax, eax
		mov	[ebp+ptr], eax
		jz	loc_804D4F7
		mov	ecx, [ebp+n]
		mov	[esp+4], edi	; src
		mov	[esp], eax	; dest
		mov	[esp+8], ecx	; n
		call	_memcpy
		mov	ebx, [ebp+var_98]
		mov	edx, [ebp+var_9C]
		test	ebx, ebx
		jnz	loc_804D580

loc_804D323:				; CODE XREF: sub_804D1A0+3F0j
		mov	eax, [ebp+ptr]
		mov	ebx, 8052890h
		add	eax, [ebp+var_90]
		mov	dword ptr [eax], 72616863h
		mov	dword ptr [eax+4], 2E746573h
		mov	dword ptr [eax+8], 61696C61h
		mov	word ptr [eax+0Ch], 73h
		mov	ecx, [ebp+ptr]
		mov	[ebp+var_9C], edx
		mov	dword ptr [esp+4], (offset aNumber+5)
		mov	[esp], ecx
		call	_fopen64
		mov	edx, [ebp+var_9C]
		mov	[ebp+n], 0
		test	eax, eax
		mov	edi, eax
		jz	loc_804D4E9
		mov	[ebp+var_98], esi
		mov	esi, edx
		lea	esi, [esi+0]

loc_804D390:				; CODE XREF: sub_804D1A0+2F5j
					; sub_804D1A0+37Cj
		mov	edx, [edi+4]
		cmp	edx, [edi+8]
		jnb	loc_804D5CD
		movzx	eax, byte ptr [edx]
		add	edx, 1
		mov	[edi+4], edx

loc_804D3A5:				; CODE XREF: sub_804D1A0+440j
		cmp	eax, 20h
		jz	loc_804D518
		cmp	eax, 0Ah
		jz	loc_804D518
		cmp	eax, 9
		jz	loc_804D518
		cmp	eax, 23h
		jz	loc_804D4A0
		mov	[esp+4], edi	; stream
		lea	ebx, [ebp+var_82]
		mov	[esp], eax	; c
		call	_ungetc
		lea	eax, [ebp+src]
		mov	[esp+0Ch], ebx
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset a50s50s ; "%50s %50s"
		mov	[esp], edi	; stream
		call	_fscanf
		cmp	eax, 1
		jle	loc_804D4BF
		lea	edx, [ebp+src]
		mov	[esp], edx	; s
		call	_strlen
		mov	[esp], ebx	; s
		mov	[ebp+var_90], eax
		call	_strlen
		mov	ecx, [ebp+n]
		test	ecx, ecx
		mov	edx, eax
		jnz	loc_804D521
		mov	eax, [ebp+var_90]
		mov	[ebp+var_9C], edx
		add	eax, edx
		lea	ebx, [eax+2]
		add	eax, 3
		mov	[ebp+n], ebx
		mov	[esp], eax	; size
		call	_malloc
		mov	edx, [ebp+var_9C]
		mov	ebx, eax

loc_804D452:				; CODE XREF: sub_804D1A0+3B6j
		test	ebx, ebx
		jz	loc_804D595
		mov	esi, [ebp+n]
		lea	eax, [ebp+src]
		mov	[esp+4], eax	; src
		sub	esi, edx
		mov	eax, esi
		sub	eax, [ebp+var_90]
		lea	eax, [ebx+eax-2]
		mov	[esp], eax	; dest
		call	_strcpy
		lea	eax, [ebx+esi-1]
		mov	esi, ebx
		lea	edx, [ebp+var_82]
		mov	[esp+4], edx	; src
		mov	[esp], eax	; dest
		call	_strcpy
		jmp	loc_804D390
; ---------------------------------------------------------------------------
		align 10h

loc_804D4A0:				; CODE XREF: sub_804D1A0+223j
					; sub_804D1A0+31Dj
		mov	edx, [edi+4]
		cmp	edx, [edi+8]
		jnb	loc_804D5C0
		movzx	eax, byte ptr [edx]
		add	edx, 1
		mov	[edi+4], edx

loc_804D4B5:				; CODE XREF: sub_804D1A0+428j
		cmp	eax, 0Ah
		jz	short loc_804D518
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_804D4A0

loc_804D4BF:				; CODE XREF: sub_804D1A0+259j
					; sub_804D1A0+438j
		mov	edx, esi
		mov	esi, [ebp+var_98]
		mov	ebx, edx
		mov	[esp], edi	; stream
		call	_fclose
		mov	eax, [ebp+n]
		test	eax, eax
		jz	loc_804D5B1
		mov	ecx, [ebp+n]
		mov	byte ptr [ebx+ecx], 0

loc_804D4E9:				; CODE XREF: sub_804D1A0+1DEj
					; sub_804D1A0+416j
		mov	eax, [ebp+ptr]
		mov	[esp], eax	; ptr
		call	_free

loc_804D4F7:				; CODE XREF: sub_804D1A0+153j
		mov	ds:s, ebx
		jmp	loc_804D1DD
; ---------------------------------------------------------------------------

loc_804D502:				; CODE XREF: sub_804D1A0+123j
					; sub_804D1A0+3D1j
		xor	eax, eax
		mov	[ebp+var_98], 0
		jmp	loc_804D2C9
; ---------------------------------------------------------------------------
		align 8

loc_804D518:				; CODE XREF: sub_804D1A0+208j
					; sub_804D1A0+211j ...
		mov	ebx, esi
		mov	esi, ebx
		jmp	loc_804D390
; ---------------------------------------------------------------------------

loc_804D521:				; CODE XREF: sub_804D1A0+282j
		mov	ebx, [ebp+n]
		mov	ecx, [ebp+var_90]
		mov	[ebp+var_9C], edx
		mov	[esp], esi	; ptr
		lea	eax, [ebx+ecx+2]
		add	eax, edx
		mov	[ebp+n], eax
		add	eax, 1
		mov	[esp+4], eax	; size
		call	_realloc
		mov	edx, [ebp+var_9C]
		mov	ebx, eax
		jmp	loc_804D452
; ---------------------------------------------------------------------------

loc_804D55B:				; CODE XREF: sub_804D1A0+F6j
		mov	[esp], eax	; s
		call	_strlen
		mov	edx, [ebp+var_9C]
		test	eax, eax
		mov	[ebp+n], eax
		jz	short loc_804D502
		mov	ecx, eax
		sub	ecx, 1
		jmp	loc_804D2B0
; ---------------------------------------------------------------------------
		align 10h

loc_804D580:				; CODE XREF: sub_804D1A0+17Dj
		mov	eax, [ebp+ptr]
		mov	ebx, [ebp+n]
		mov	byte ptr [eax+ebx], 2Fh
		jmp	loc_804D323
; ---------------------------------------------------------------------------

loc_804D595:				; CODE XREF: sub_804D1A0+2B4j
		mov	edx, esi
		mov	esi, [ebp+var_98]
		test	edx, edx
		jz	short loc_804D5A9
		mov	[esp], edx	; ptr
		call	_free

loc_804D5A9:				; CODE XREF: sub_804D1A0+3FFj
		mov	[esp], edi	; stream
		call	_fclose

loc_804D5B1:				; CODE XREF: sub_804D1A0+339j
		mov	ebx, 8052890h
		jmp	loc_804D4E9
; ---------------------------------------------------------------------------

loc_804D5BB:				; CODE XREF: sub_804D1A0+A8j
		call	___stack_chk_fail
; ---------------------------------------------------------------------------

loc_804D5C0:				; CODE XREF: sub_804D1A0+306j
		mov	[esp], edi	; _IO_FILE *
		call	___uflow
		jmp	loc_804D4B5
; ---------------------------------------------------------------------------

loc_804D5CD:				; CODE XREF: sub_804D1A0+1F6j
		mov	[esp], edi	; _IO_FILE *
		call	___uflow
		cmp	eax, 0FFFFFFFFh
		jz	loc_804D4BF
		db	66h
		nop
		jmp	loc_804D3A5
sub_804D1A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_804D5F0	proc near		; CODE XREF: sub_804E1D0+18Fp
					; sub_804E1D0+1E1p ...
		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		mov	ebx, eax
		sub	esp, 10h
		cmp	byte ptr [eax+0Ch], 0
		jnz	short loc_804D637
		cmp	byte ptr [eax],	0
		lea	esi, [eax+4]
		jnz	short loc_804D656
		mov	edx, [eax+10h]
		movzx	eax, byte ptr [edx]
		mov	ecx, eax
		shr	cl, 5
		movzx	ecx, cl
		mov	ecx, ds:dword_8052FA0[ecx*4]
		bt	ecx, eax
		jnb	short loc_804D640
		mov	dword ptr [ebx+14h], 1
		movsx	eax, byte ptr [edx]
		mov	byte ptr [ebx+18h], 1
		mov	[ebx+1Ch], eax

loc_804D633:				; CODE XREF: sub_804D5F0+CDj
					; sub_804D5F0+D6j ...
		mov	byte ptr [ebx+0Ch], 1

loc_804D637:				; CODE XREF: sub_804D5F0+Ej
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_804D640:				; CODE XREF: sub_804D5F0+30j
		lea	esi, [ebx+4]
		mov	[esp], esi	; ps
		call	_mbsinit
		test	eax, eax
		jz	loc_804D6F7
		mov	byte ptr [ebx],	1

loc_804D656:				; CODE XREF: sub_804D5F0+16j
		call	___ctype_get_mb_cur_max
		mov	[esp+4], eax	; n
		mov	eax, [ebx+10h]
		mov	[esp], eax	; s
		call	sub_804B110
		mov	[esp+0Ch], esi	; p
		mov	[esp+8], eax	; n
		mov	eax, [ebx+10h]
		mov	[esp+4], eax	; s
		lea	eax, [ebx+1Ch]
		mov	[esp], eax	; pwc
		call	_mbrtowc
		cmp	eax, 0FFFFFFFFh
		mov	[ebx+14h], eax
		jz	short loc_804D6D0
		cmp	eax, 0FFFFFFFEh
		jz	short loc_804D6E0
		test	eax, eax
		jnz	short loc_804D6AF
		mov	eax, [ebx+10h]
		mov	dword ptr [ebx+14h], 1
		cmp	byte ptr [eax],	0
		jnz	loc_804D73F
		mov	eax, [ebx+1Ch]
		test	eax, eax
		jnz	short loc_804D71B

loc_804D6AF:				; CODE XREF: sub_804D5F0+A3j
		mov	byte ptr [ebx+18h], 1
		mov	[esp], esi	; ps
		call	_mbsinit
		test	eax, eax
		jz	loc_804D633
		mov	byte ptr [ebx],	0
		jmp	loc_804D633
; ---------------------------------------------------------------------------
		align 10h

loc_804D6D0:				; CODE XREF: sub_804D5F0+9Aj
		mov	dword ptr [ebx+14h], 1
		mov	byte ptr [ebx+18h], 0
		jmp	loc_804D633
; ---------------------------------------------------------------------------

loc_804D6E0:				; CODE XREF: sub_804D5F0+9Fj
		mov	eax, [ebx+10h]
		mov	[esp], eax	; s
		call	_strlen
		mov	byte ptr [ebx+18h], 0
		mov	[ebx+14h], eax
		jmp	loc_804D633
; ---------------------------------------------------------------------------

loc_804D6F7:				; CODE XREF: sub_804D5F0+5Dj
		mov	dword ptr [esp+0Ch], offset aMbuiter_mult_0 ; "mbuiter_multi_next"
		mov	dword ptr [esp+8], 8Eh ; line
		mov	dword ptr [esp+4], offset file ; "mbuiter.h"
		mov	dword ptr [esp], offset	assertion ; "mbsinit (&iter->state)"
		call	___assert_fail
; ---------------------------------------------------------------------------

loc_804D71B:				; CODE XREF: sub_804D5F0+BDj
		mov	dword ptr [esp+0Ch], offset aMbuiter_mult_0 ; "mbuiter_multi_next"
		mov	dword ptr [esp+8], 0ABh	; line
		mov	dword ptr [esp+4], offset file ; "mbuiter.h"
		mov	dword ptr [esp], offset	aIterCur_wc0 ; "iter->cur.wc ==	0"
		call	___assert_fail
; ---------------------------------------------------------------------------

loc_804D73F:				; CODE XREF: sub_804D5F0+B2j
		mov	dword ptr [esp+0Ch], offset aMbuiter_mult_0 ; "mbuiter_multi_next"
		mov	dword ptr [esp+8], 0AAh	; line
		mov	dword ptr [esp+4], offset file ; "mbuiter.h"
		mov	dword ptr [esp], offset	aIterCur_ptr0 ;	"*iter->cur.ptr	== '\\0'"
		call	___assert_fail
sub_804D5F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_804D770	proc near		; CODE XREF: sub_804E1D0+966p

var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_1C		= dword	ptr -1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		mov	edi, eax
		push	esi
		push	ebx
		mov	ebx, edx
		sub	esp, 4Ch
		mov	[esp], edx	; s
		mov	eax, large gs:14h
		mov	[ebp+var_1C], eax
		xor	eax, eax
		mov	[ebp+var_34], ecx
		call	_strlen
		cmp	eax, 3FFFFFFFh
		mov	[ebp+var_30], eax
		ja	loc_804D8BA
		shl	eax, 2
		cmp	eax, 0FB7h
		jbe	loc_804D867
		mov	[esp], eax
		call	sub_80511B0

loc_804D7B7:				; CODE XREF: sub_804D770+110j
		test	eax, eax
		jz	loc_804D8BA
		cmp	[ebp+var_30], 2
		mov	dword ptr [eax+4], 1
		jbe	short loc_804D811
		mov	[ebp+var_2C], edi
		mov	edi, [ebp+var_30]
		xor	edx, edx
		mov	esi, 2
		lea	esi, [esi+0]

loc_804D7E0:				; CODE XREF: sub_804D770+9Cj
		movzx	ecx, byte ptr [ebx+esi-1]
		cmp	cl, [ebx+edx]
		jnz	short loc_804D7FC
		jmp	loc_804D898
; ---------------------------------------------------------------------------
		align 10h

loc_804D7F0:				; CODE XREF: sub_804D770+90j
		sub	edx, [eax+edx*4]
		cmp	cl, [ebx+edx]
		jz	loc_804D898

loc_804D7FC:				; CODE XREF: sub_804D770+78j
		test	edx, edx
		db	66h
		nop
		jnz	short loc_804D7F0
		mov	[eax+esi*4], esi
		xor	edx, edx

loc_804D807:				; CODE XREF: sub_804D770+132j
		add	esi, 1
		cmp	esi, edi
		jnz	short loc_804D7E0
		mov	edi, [ebp+var_2C]

loc_804D811:				; CODE XREF: sub_804D770+5Aj
		mov	edx, [ebp+var_34]
		mov	esi, edi
		mov	dword ptr [edx], 0
		xor	edx, edx
		movzx	ecx, byte ptr [edi]
		mov	[ebp+var_2C], eax
		lea	esi, [esi+0]

loc_804D828:				; CODE XREF: sub_804D770+121j
		test	cl, cl
		jz	short loc_804D843

loc_804D82C:				; CODE XREF: sub_804D770+D1j
		cmp	[ebx+edx], cl
		jz	short loc_804D8A8
		test	edx, edx
		jz	short loc_804D888
		mov	eax, [ebp+var_2C]
		mov	eax, [eax+edx*4]
		add	edi, eax
		sub	edx, eax
		test	cl, cl
		jnz	short loc_804D82C

loc_804D843:				; CODE XREF: sub_804D770+BAj
		mov	eax, [ebp+var_2C]

loc_804D846:				; CODE XREF: sub_804D770+148j
		mov	[esp], eax
		call	sub_8051140
		mov	eax, 1

loc_804D853:				; CODE XREF: sub_804D770+14Cj
		mov	edx, [ebp+var_1C]
		xor	edx, large gs:14h
		jnz	short loc_804D8BE
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_804D867:				; CODE XREF: sub_804D770+39j
		mov	edx, [ebp+var_30]
		lea	eax, ds:26h[edx*4]
		and	eax, 0FFFFFFF0h
		sub	esp, eax
		lea	eax, [esp+13h]
		and	eax, 0FFFFFFF0h
		add	eax, 8
		jmp	loc_804D7B7
; ---------------------------------------------------------------------------
		align 4

loc_804D888:				; CODE XREF: sub_804D770+C3j
		add	edi, 1

loc_804D88B:				; CODE XREF: sub_804D770+13Ej
		add	esi, 1
		movzx	ecx, byte ptr [esi]
		jmp	short loc_804D828
; ---------------------------------------------------------------------------
		align 8

loc_804D898:				; CODE XREF: sub_804D770+7Aj
					; sub_804D770+86j
		add	edx, 1
		mov	ecx, esi
		sub	ecx, edx
		mov	[eax+esi*4], ecx
		jmp	loc_804D807
; ---------------------------------------------------------------------------
		align 4

loc_804D8A8:				; CODE XREF: sub_804D770+BFj
		add	edx, 1
		cmp	edx, [ebp+var_30]
		jnz	short loc_804D88B
		mov	edx, [ebp+var_34]
		mov	eax, [ebp+var_2C]
		mov	[edx], edi
		jmp	short loc_804D846
; ---------------------------------------------------------------------------

loc_804D8BA:				; CODE XREF: sub_804D770+2Bj
					; sub_804D770+49j
		xor	eax, eax
		jmp	short loc_804D853
; ---------------------------------------------------------------------------

loc_804D8BE:				; CODE XREF: sub_804D770+EDj
		call	___stack_chk_fail
sub_804D770	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_804D8D0	proc near		; CODE XREF: sub_804E1D0+9BAp

var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C4		= byte ptr -0C4h
ps		= mbstate_t ptr	-0C0h
var_B8		= byte ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= byte ptr -0ACh
var_A8		= dword	ptr -0A8h
var_8C		= byte ptr -8Ch
p		= mbstate_t ptr	-88h
var_80		= byte ptr -80h
s		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= byte ptr -74h
pwc		= dword	ptr -70h
var_54		= byte ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_44		= dword	ptr -44h
n		= dword	ptr -40h
var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
src		= byte ptr -34h
var_1C		= dword	ptr -1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		mov	ebx, edx
		sub	esp, 0FCh
		mov	[esp], edx
		mov	[ebp+var_E0], eax
		mov	[ebp+var_E4], ecx
		mov	eax, large gs:14h
		mov	[ebp+var_1C], eax
		xor	eax, eax
		call	sub_8051210
		cmp	eax, 5D1745Dh
		mov	[ebp+var_D8], eax
		jbe	short loc_804D924

loc_804D90A:				; CODE XREF: sub_804D8D0+78j
		xor	eax, eax

loc_804D90C:				; CODE XREF: sub_804D8D0+36Ej
		mov	edx, [ebp+var_1C]
		xor	edx, large gs:14h
		jnz	loc_804E180
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_804D924:				; CODE XREF: sub_804D8D0+38j
		imul	eax, 2Ch
		cmp	eax, 0FB7h
		jbe	loc_804DC43
		mov	[esp], eax
		call	sub_80511B0
		mov	[ebp+var_DC], eax

loc_804D940:				; CODE XREF: sub_804D8D0+38Bj
		mov	ecx, [ebp+var_DC]
		test	ecx, ecx
		jz	short loc_804D90A
		mov	[ebp+var_44], ebx
		mov	ebx, [ebp+var_DC]
		lea	edx, [ebp+src]
		mov	[ebp+var_54], 0
		lea	edi, [ebp+var_50]
		mov	[ebp+var_50], 0
		mov	[ebp+var_4C], 0
		mov	[ebp+var_48], 0
		mov	esi, ebx
		mov	[ebp+var_EC], edx
		jmp	short loc_804D9B5
; ---------------------------------------------------------------------------
		align 10h

loc_804D980:				; CODE XREF: sub_804D8D0+126j
					; sub_804D8D0+12Dj
		mov	eax, [ebp+var_44]
		cmp	eax, [ebp+var_EC]
		jz	loc_804E0F9
		mov	[esi], eax

loc_804D991:				; CODE XREF: sub_804D8D0+850j
		mov	eax, [ebp+n]
		mov	[esi+4], eax
		movzx	eax, [ebp+var_3C]
		test	al, al
		mov	[esi+8], al
		jz	short loc_804D9A8
		mov	eax, [ebp+var_38]
		mov	[esi+0Ch], eax

loc_804D9A8:				; CODE XREF: sub_804D8D0+D0j
		mov	eax, [ebp+n]
		add	esi, 28h
		add	[ebp+var_44], eax
		mov	[ebp+var_48], 0

loc_804D9B5:				; CODE XREF: sub_804D8D0+A7j
		cmp	[ebp+var_54], 0
		jnz	loc_804DEFC
		mov	edx, [ebp+var_44]
		movzx	eax, byte ptr [edx]
		mov	ecx, eax
		shr	cl, 5
		movzx	ecx, cl
		mov	ecx, ds:dword_8052FA0[ecx*4]
		bt	ecx, eax
		jnb	loc_804DEE8
		mov	[ebp+n], 1
		movsx	eax, byte ptr [edx]
		mov	[ebp+var_3C], 1
		mov	[ebp+var_38], eax

loc_804D9EE:				; CODE XREF: sub_804D8D0+69Fj
					; sub_804D8D0+6A9j ...
		cmp	[ebp+var_3C], 0
		mov	[ebp+var_48], 1
		jz	short loc_804D980
		mov	eax, [ebp+var_38]
		test	eax, eax
		jnz	short loc_804D980
		mov	ecx, [ebp+var_D8]
		mov	esi, [ebp+var_DC]
		mov	[ebp+var_D4], 2
		lea	eax, [ecx+ecx*4]
		lea	eax, [esi+eax*8]
		mov	[ebp+var_D0], eax
		mov	dword ptr [eax+4], 1
		xor	eax, eax
		cmp	ecx, 2
		jbe	loc_804DADF
		mov	edx, [ebp+var_DC]

loc_804DA39:				; CODE XREF: sub_804D8D0+209j
		movzx	ecx, byte ptr [ebx+30h]
		mov	[ebp+var_DC], edx
		mov	byte ptr [ebp+var_CC], cl
		jmp	short loc_804DA74
; ---------------------------------------------------------------------------
		align 10h

loc_804DA50:				; CODE XREF: sub_804D8D0+1B7j
		cmp	byte ptr [esi+8], 0
		jz	short loc_804DA89
		mov	ecx, [ebx+34h]
		cmp	ecx, [esi+0Ch]
		setz	cl
		test	cl, cl
		jnz	short loc_804DAA3

loc_804DA63:				; CODE XREF: sub_804D8D0+1BFj
					; sub_804D8D0+1D1j
		test	eax, eax
		jz	loc_804DEC8
		mov	esi, [ebp+var_D0]
		sub	eax, [esi+eax*4]

loc_804DA74:				; CODE XREF: sub_804D8D0+179j
		mov	edi, [ebp+var_DC]
		lea	ecx, [eax+eax*4]
		cmp	byte ptr [ebp+var_CC], 0
		lea	esi, [edi+ecx*8]
		jnz	short loc_804DA50

loc_804DA89:				; CODE XREF: sub_804D8D0+184j
		mov	ecx, [ebx+2Ch]
		cmp	ecx, [esi+4]
		jnz	short loc_804DA63
		mov	edx, [ebx+28h]
		cmp	ecx, ecx
		mov	edi, [esi]
		mov	esi, edx
		repe cmpsb
		setz	cl
		test	cl, cl
		jz	short loc_804DA63

loc_804DAA3:				; CODE XREF: sub_804D8D0+191j
		mov	ecx, [ebp+var_D4]
		add	eax, 1
		mov	esi, [ebp+var_D4]
		mov	edi, [ebp+var_D0]
		mov	edx, [ebp+var_DC]
		sub	ecx, eax
		mov	[edi+esi*4], ecx

loc_804DAC3:				; CODE XREF: sub_804D8D0+60Dj
		add	[ebp+var_D4], 1
		add	ebx, 28h
		mov	edi, [ebp+var_D8]
		cmp	[ebp+var_D4], edi
		jnz	loc_804DA39

loc_804DADF:				; CODE XREF: sub_804D8D0+15Dj
		mov	eax, [ebp+var_E4]
		lea	ebx, [ebp+p]
		mov	edx, [ebp+var_E0]
		mov	[ebp+var_8C], 0
		mov	[ebp+var_80], 0
		mov	dword ptr [eax], 0
		xor	eax, eax
		mov	[ebp+s], edx
		mov	[ebp+p.__count], 0
		mov	dword ptr [ebp+p.__value], 0
		mov	[ebp+var_B4], edx
		mov	[ebp+var_C4], 0
		mov	[ebp+ps.__count], 0
		mov	dword ptr [ebp+ps.__value], 0
		mov	[ebp+var_B8], 0
		mov	[ebp+var_CC], 0
		jmp	short loc_804DBBB
; ---------------------------------------------------------------------------
		align 10h

loc_804DB50:				; CODE XREF: sub_804D8D0+347j
					; sub_804D8D0+355j
		mov	ecx, [ebp+var_CC]
		mov	esi, [ebp+var_DC]
		lea	eax, [ecx+ecx*4]
		lea	eax, [esi+eax*8]
		cmp	byte ptr [eax+8], 0
		jz	loc_804DC60
		test	dl, dl
		jz	loc_804DC60
		mov	eax, [eax+0Ch]
		cmp	eax, [ebp+var_A8]
		setz	al

loc_804DB80:				; CODE XREF: sub_804D8D0+5EFj
		test	al, al
		jz	loc_804DC6F
		add	[ebp+var_CC], 1
		mov	eax, [ebp+var_B0]
		mov	ecx, [ebp+var_CC]
		add	[ebp+var_B4], eax
		cmp	[ebp+var_D8], ecx
		mov	[ebp+var_B8], 0
		jz	loc_804E14C

loc_804DBB4:				; CODE XREF: sub_804D8D0+3C6j
					; sub_804D8D0+425j ...
		movzx	eax, [ebp+var_B8]

loc_804DBBB:				; CODE XREF: sub_804D8D0+27Dj
		test	al, al
		jnz	short loc_804DC0E
		cmp	[ebp+var_C4], 0
		jnz	loc_804DE05
		mov	edx, [ebp+var_B4]
		movzx	eax, byte ptr [edx]
		mov	ecx, eax
		shr	cl, 5
		movzx	ecx, cl
		mov	ecx, ds:dword_8052FA0[ecx*4]
		bt	ecx, eax
		jnb	loc_804DDE8
		mov	[ebp+var_B0], 1
		movsx	eax, byte ptr [edx]
		mov	[ebp+var_AC], 1
		mov	[ebp+var_A8], eax

loc_804DC07:				; CODE XREF: sub_804D8D0+5CCj
					; sub_804D8D0+5D9j ...
		mov	[ebp+var_B8], 1

loc_804DC0E:				; CODE XREF: sub_804D8D0+2EDj
		movzx	edx, [ebp+var_AC]
		test	dl, dl
		jz	loc_804DB50
		mov	ecx, [ebp+var_A8]
		test	ecx, ecx
		jnz	loc_804DB50

loc_804DC2B:				; CODE XREF: sub_804D8D0+887j
		mov	edi, [ebp+var_DC]
		mov	[esp], edi
		call	sub_8051140
		mov	eax, 1
		jmp	loc_804D90C
; ---------------------------------------------------------------------------

loc_804DC43:				; CODE XREF: sub_804D8D0+5Cj
		add	eax, 26h
		and	eax, 0FFFFFFF0h
		sub	esp, eax
		lea	eax, [esp+1Fh]
		and	eax, 0FFFFFFF0h
		add	eax, 8
		mov	[ebp+var_DC], eax
		jmp	loc_804D940
; ---------------------------------------------------------------------------

loc_804DC60:				; CODE XREF: sub_804D8D0+296j
					; sub_804D8D0+29Ej
		mov	ecx, [eax+4]
		cmp	ecx, [ebp+var_B0]
		jz	loc_804DEB0

loc_804DC6F:				; CODE XREF: sub_804D8D0+2B2j
		mov	esi, [ebp+var_CC]
		test	esi, esi
		jz	loc_804DF80
		mov	edi, [ebp+var_CC]
		mov	eax, [ebp+var_D0]
		mov	esi, [eax+edi*4]
		sub	edi, esi
		test	esi, esi
		mov	[ebp+var_CC], edi
		jz	loc_804DBB4
		cmp	[ebp+var_80], 0
		jnz	short loc_804DCDE
		cmp	[ebp+var_8C], 0
		jnz	short loc_804DD08

loc_804DCAB:				; CODE XREF: sub_804D8D0+432j
		mov	edx, [ebp+s]
		movzx	eax, byte ptr [edx]
		mov	ecx, eax
		shr	cl, 5
		movzx	ecx, cl
		mov	ecx, ds:dword_8052FA0[ecx*4]
		bt	ecx, eax
		jnb	loc_804DDA0
		mov	[ebp+var_78], 1
		movsx	eax, byte ptr [edx]
		mov	[ebp+var_74], 1
		mov	[ebp+pwc], eax

loc_804DCDA:				; CODE XREF: sub_804D8D0+4AEj
					; sub_804D8D0+4BBj ...
		mov	[ebp+var_80], 1

loc_804DCDE:				; CODE XREF: sub_804D8D0+3D0j
		cmp	[ebp+var_74], 0
		jnz	loc_804DD90

loc_804DCE8:				; CODE XREF: sub_804D8D0+4C5j
		mov	eax, [ebp+var_78]
		add	[ebp+s], eax
		sub	esi, 1
		mov	[ebp+var_80], 0
		jz	loc_804DBB4
		cmp	[ebp+var_8C], 0
		jz	short loc_804DCAB
		lea	esi, [esi+0]

loc_804DD08:				; CODE XREF: sub_804D8D0+3D9j
					; sub_804D8D0+4E7j
		call	___ctype_get_mb_cur_max
		mov	[esp+4], eax	; n
		mov	eax, [ebp+s]
		mov	[esp], eax	; s
		call	sub_804B110
		lea	edx, [ebp+pwc]
		mov	[esp+0Ch], ebx	; p
		mov	[esp], edx	; pwc
		mov	[esp+8], eax	; n
		mov	eax, [ebp+s]
		mov	[esp+4], eax	; s
		call	_mbrtowc
		cmp	eax, 0FFFFFFFFh
		mov	[ebp+var_78], eax
		jz	loc_804DDC0
		cmp	eax, 0FFFFFFFEh
		jz	loc_804DDD0
		test	eax, eax
		lea	esi, [esi+0]
		jnz	short loc_804DD70
		mov	eax, [ebp+s]
		mov	[ebp+var_78], 1
		cmp	byte ptr [eax],	0
		jnz	loc_804E185
		mov	ecx, [ebp+pwc]
		test	ecx, ecx
		jnz	loc_804E1A9

loc_804DD70:				; CODE XREF: sub_804D8D0+480j
		mov	[esp], ebx	; ps
		mov	[ebp+var_74], 1
		call	_mbsinit
		test	eax, eax
		jz	loc_804DCDA
		mov	[ebp+var_8C], 0
		jmp	loc_804DCDA
; ---------------------------------------------------------------------------

loc_804DD90:				; CODE XREF: sub_804D8D0+412j
		mov	edx, [ebp+pwc]
		test	edx, edx
		jnz	loc_804DCE8

loc_804DD9B:				; CODE XREF: sub_804D8D0+75Dj
		call	_abort
; ---------------------------------------------------------------------------

loc_804DDA0:				; CODE XREF: sub_804D8D0+3F3j
		mov	[esp], ebx	; ps
		call	_mbsinit
		test	eax, eax
		jz	loc_804E15C
		mov	[ebp+var_8C], 1
		jmp	loc_804DD08
; ---------------------------------------------------------------------------
		align 10h

loc_804DDC0:				; CODE XREF: sub_804D8D0+46Cj
		mov	[ebp+var_78], 1
		mov	[ebp+var_74], 0
		jmp	loc_804DCDA
; ---------------------------------------------------------------------------

loc_804DDD0:				; CODE XREF: sub_804D8D0+475j
		mov	eax, [ebp+s]
		mov	[esp], eax	; s
		call	_strlen
		mov	[ebp+var_74], 0
		mov	[ebp+var_78], eax
		jmp	loc_804DCDA
; ---------------------------------------------------------------------------
		align 4

loc_804DDE8:				; CODE XREF: sub_804D8D0+317j
		lea	esi, [ebp+ps]
		mov	[esp], esi	; ps
		call	_mbsinit
		test	eax, eax
		jz	loc_804E15C
		mov	[ebp+var_C4], 1

loc_804DE05:				; CODE XREF: sub_804D8D0+2F6j
		call	___ctype_get_mb_cur_max
		lea	edi, [ebp+ps]
		mov	[esp+4], eax	; n
		mov	eax, [ebp+var_B4]
		mov	[esp], eax	; s
		call	sub_804B110
		mov	[esp+0Ch], edi	; p
		mov	[esp+8], eax	; n
		mov	eax, [ebp+var_B4]
		mov	[esp+4], eax	; s
		lea	eax, [ebp+var_A8]
		mov	[esp], eax	; pwc
		call	_mbrtowc
		cmp	eax, 0FFFFFFFFh
		mov	[ebp+var_B0], eax
		jz	loc_804DFF0
		cmp	eax, 0FFFFFFFEh
		jz	loc_804E008
		test	eax, eax
		jnz	short loc_804DE85
		mov	eax, [ebp+var_B4]
		mov	[ebp+var_B0], 1
		cmp	byte ptr [eax],	0
		jnz	loc_804E185
		mov	esi, [ebp+var_A8]
		test	esi, esi
		jnz	loc_804E1A9

loc_804DE85:				; CODE XREF: sub_804D8D0+58Cj
		lea	edx, [ebp+ps]
		mov	[esp], edx	; ps
		mov	[ebp+var_AC], 1
		call	_mbsinit
		test	eax, eax
		jz	loc_804DC07
		mov	[ebp+var_C4], 0
		jmp	loc_804DC07
; ---------------------------------------------------------------------------
		align 10h

loc_804DEB0:				; CODE XREF: sub_804D8D0+399j
		mov	esi, [eax]
		cmp	ecx, ecx
		mov	edi, [ebp+var_B4]
		repe cmpsb
		setz	al
		jmp	loc_804DB80
; ---------------------------------------------------------------------------
		align 8

loc_804DEC8:				; CODE XREF: sub_804D8D0+195j
		mov	ecx, [ebp+var_D4]
		mov	esi, [ebp+var_D0]
		mov	edx, [ebp+var_DC]
		mov	[esi+ecx*4], ecx
		jmp	loc_804DAC3
; ---------------------------------------------------------------------------
		align 8

loc_804DEE8:				; CODE XREF: sub_804D8D0+107j
		mov	[esp], edi	; ps
		call	_mbsinit
		test	eax, eax
		jz	loc_804E15C
		mov	[ebp+var_54], 1

loc_804DEFC:				; CODE XREF: sub_804D8D0+E9j
		call	___ctype_get_mb_cur_max
		mov	[esp+4], eax	; n
		mov	eax, [ebp+var_44]
		mov	[esp], eax	; s
		call	sub_804B110
		mov	[esp+0Ch], edi	; p
		mov	[esp+8], eax	; n
		mov	eax, [ebp+var_44]
		mov	[esp+4], eax	; s
		lea	eax, [ebp+var_38]
		mov	[esp], eax	; pwc
		call	_mbrtowc
		cmp	eax, 0FFFFFFFFh
		mov	[ebp+n], eax
		jz	loc_804E0D2
		cmp	eax, 0FFFFFFFEh
		jz	loc_804E0E2
		test	eax, eax
		jnz	short loc_804DF61
		mov	eax, [ebp+var_44]
		mov	[ebp+n], 1
		cmp	byte ptr [eax],	0
		jnz	loc_804E185
		mov	edx, [ebp+var_38]
		test	edx, edx
		jnz	loc_804E1A9

loc_804DF61:				; CODE XREF: sub_804D8D0+671j
		mov	[esp], edi	; ps
		mov	[ebp+var_3C], 1
		call	_mbsinit
		test	eax, eax
		jz	loc_804D9EE
		mov	[ebp+var_54], 0
		jmp	loc_804D9EE
; ---------------------------------------------------------------------------
		align 10h

loc_804DF80:				; CODE XREF: sub_804D8D0+3A7j
		cmp	[ebp+var_80], 0
		jnz	short loc_804DFC6
		cmp	[ebp+var_8C], 0
		jnz	loc_804E04D
		mov	edx, [ebp+s]
		movzx	eax, byte ptr [edx]
		mov	ecx, eax
		shr	cl, 5
		movzx	ecx, cl
		mov	ecx, ds:dword_8052FA0[ecx*4]
		bt	ecx, eax
		jnb	loc_804E035
		mov	[ebp+var_78], 1
		movsx	eax, byte ptr [edx]
		mov	[ebp+var_74], 1
		mov	[ebp+pwc], eax

loc_804DFC2:				; CODE XREF: sub_804D8D0+7F0j
					; sub_804D8D0+7FDj ...
		mov	[ebp+var_80], 1

loc_804DFC6:				; CODE XREF: sub_804D8D0+6B4j
		cmp	[ebp+var_74], 0
		jnz	short loc_804E028

loc_804DFCC:				; CODE XREF: sub_804D8D0+763j
		mov	eax, [ebp+var_78]
		add	[ebp+s], eax
		mov	eax, [ebp+var_B0]
		mov	[ebp+var_80], 0
		add	[ebp+var_B4], eax
		mov	[ebp+var_B8], 0
		jmp	loc_804DBB4
; ---------------------------------------------------------------------------
		align 10h

loc_804DFF0:				; CODE XREF: sub_804D8D0+57Bj
		mov	[ebp+var_B0], 1
		mov	[ebp+var_AC], 0
		jmp	loc_804DC07
; ---------------------------------------------------------------------------
		align 4

loc_804E008:				; CODE XREF: sub_804D8D0+584j
		mov	eax, [ebp+var_B4]
		mov	[esp], eax	; s
		call	_strlen
		mov	[ebp+var_AC], 0
		mov	[ebp+var_B0], eax
		jmp	loc_804DC07
; ---------------------------------------------------------------------------

loc_804E028:				; CODE XREF: sub_804D8D0+6FAj
		mov	edi, [ebp+pwc]
		test	edi, edi
		jz	loc_804DD9B
		jmp	short loc_804DFCC
; ---------------------------------------------------------------------------

loc_804E035:				; CODE XREF: sub_804D8D0+6DBj
		mov	[esp], ebx	; ps
		call	_mbsinit
		test	eax, eax
		nop
		jz	loc_804E15C
		mov	[ebp+var_8C], 1

loc_804E04D:				; CODE XREF: sub_804D8D0+6BDj
		call	___ctype_get_mb_cur_max
		mov	[esp+4], eax	; n
		mov	eax, [ebp+s]
		mov	[esp], eax	; s
		call	sub_804B110
		lea	ecx, [ebp+pwc]
		mov	[esp+0Ch], ebx	; p
		mov	[esp], ecx	; pwc
		mov	[esp+8], eax	; n
		mov	eax, [ebp+s]
		mov	[esp+4], eax	; s
		call	_mbrtowc
		cmp	eax, 0FFFFFFFFh
		mov	[ebp+var_78], eax
		jz	loc_804E125
		cmp	eax, 0FFFFFFFEh
		jz	loc_804E135
		test	eax, eax
		jnz	short loc_804E0B2
		mov	eax, [ebp+s]
		mov	[ebp+var_78], 1
		cmp	byte ptr [eax],	0
		jnz	loc_804E185
		mov	eax, [ebp+pwc]
		test	eax, eax
		jnz	loc_804E1A9

loc_804E0B2:				; CODE XREF: sub_804D8D0+7C2j
		mov	[esp], ebx	; ps
		mov	[ebp+var_74], 1
		call	_mbsinit
		test	eax, eax
		jz	loc_804DFC2
		mov	[ebp+var_8C], 0
		jmp	loc_804DFC2
; ---------------------------------------------------------------------------

loc_804E0D2:				; CODE XREF: sub_804D8D0+660j
		mov	[ebp+n], 1
		mov	[ebp+var_3C], 0
		jmp	loc_804D9EE
; ---------------------------------------------------------------------------

loc_804E0E2:				; CODE XREF: sub_804D8D0+669j
		mov	eax, [ebp+var_44]
		mov	[esp], eax	; s
		call	_strlen
		mov	[ebp+var_3C], 0
		mov	[ebp+n], eax
		jmp	loc_804D9EE
; ---------------------------------------------------------------------------

loc_804E0F9:				; CODE XREF: sub_804D8D0+B9j
		mov	eax, [ebp+n]
		lea	edx, [esi+10h]
		lea	ecx, [ebp+src]
		mov	[esp], edx	; dest
		mov	[ebp+var_E8], edx
		mov	[esp+8], eax	; n
		mov	[esp+4], ecx	; src
		call	_memcpy
		mov	edx, [ebp+var_E8]
		mov	[esi], edx
		jmp	loc_804D991
; ---------------------------------------------------------------------------

loc_804E125:				; CODE XREF: sub_804D8D0+7B1j
		mov	[ebp+var_78], 1
		mov	[ebp+var_74], 0
		jmp	loc_804DFC2
; ---------------------------------------------------------------------------

loc_804E135:				; CODE XREF: sub_804D8D0+7BAj
		mov	eax, [ebp+s]
		mov	[esp], eax	; s
		call	_strlen
		mov	[ebp+var_74], 0
		mov	[ebp+var_78], eax
		jmp	loc_804DFC2
; ---------------------------------------------------------------------------

loc_804E14C:				; CODE XREF: sub_804D8D0+2DEj
		mov	eax, [ebp+s]
		mov	esi, [ebp+var_E4]
		mov	[esi], eax
		jmp	loc_804DC2B
; ---------------------------------------------------------------------------

loc_804E15C:				; CODE XREF: sub_804D8D0+4DAj
					; sub_804D8D0+528j ...
		mov	dword ptr [esp+0Ch], offset aMbuiter_mult_0 ; "mbuiter_multi_next"
		mov	dword ptr [esp+8], 8Eh ; line
		mov	dword ptr [esp+4], offset file ; "mbuiter.h"
		mov	dword ptr [esp], offset	assertion ; "mbsinit (&iter->state)"
		call	___assert_fail
; ---------------------------------------------------------------------------

loc_804E180:				; CODE XREF: sub_804D8D0+46j
		call	___stack_chk_fail
; ---------------------------------------------------------------------------

loc_804E185:				; CODE XREF: sub_804D8D0+48Fj
					; sub_804D8D0+5A1j ...
		mov	dword ptr [esp+0Ch], offset aMbuiter_mult_0 ; "mbuiter_multi_next"
		mov	dword ptr [esp+8], 0AAh	; line
		mov	dword ptr [esp+4], offset file ; "mbuiter.h"
		mov	dword ptr [esp], offset	aIterCur_ptr0 ;	"*iter->cur.ptr	== '\\0'"
		call	___assert_fail
; ---------------------------------------------------------------------------

loc_804E1A9:				; CODE XREF: sub_804D8D0+49Aj
					; sub_804D8D0+5AFj ...
		mov	dword ptr [esp+0Ch], offset aMbuiter_mult_0 ; "mbuiter_multi_next"
		mov	dword ptr [esp+8], 0ABh	; line
		mov	dword ptr [esp+4], offset file ; "mbuiter.h"
		mov	dword ptr [esp], offset	aIterCur_wc0 ; "iter->cur.wc ==	0"
		call	___assert_fail
sub_804D8D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_804E1D0	proc near		; CODE XREF: sub_804A4C0+4Ep

var_16C		= dword	ptr -16Ch
var_15C		= dword	ptr -15Ch
var_158		= dword	ptr -158h
var_154		= dword	ptr -154h
var_150		= dword	ptr -150h
var_14C		= dword	ptr -14Ch
var_148		= dword	ptr -148h
var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_138		= dword	ptr -138h
var_134		= byte ptr -134h
p		= mbstate_t ptr	-130h
var_128		= byte ptr -128h
var_124		= dword	ptr -124h
var_120		= dword	ptr -120h
var_11C		= byte ptr -11Ch
var_118		= dword	ptr -118h
var_FC		= dword	ptr -0FCh
var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= byte ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= byte ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= byte ptr -74h
var_70		= dword	ptr -70h
var_54		= byte ptr -54h
ps		= mbstate_t ptr	-50h
var_48		= byte ptr -48h
s		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
pwc		= dword	ptr -38h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 17Ch
		mov	eax, [ebp+arg_0]
		mov	edx, large gs:14h
		mov	[ebp+var_1C], edx
		xor	edx, edx
		mov	ebx, [ebp+arg_4]
		mov	[ebp+var_13C], eax
		call	___ctype_get_mb_cur_max
		cmp	eax, 1
		jbe	loc_804E688
		mov	[ebp+s], ebx
		lea	esi, [ebp+ps]
		mov	[ebp+var_54], 0
		mov	[ebp+ps.__count], 0
		mov	dword ptr [ebp+ps.__value], 0
		mov	[ebp+var_48], 0
		movzx	eax, byte ptr [ebx]
		mov	edx, eax
		shr	dl, 5
		movzx	edx, dl
		mov	edx, ds:dword_8052FA0[edx*4]
		bt	edx, eax
		jb	loc_804E6C0
		mov	[esp], esi	; ps
		call	_mbsinit
		test	eax, eax
		jz	loc_804EC03
		mov	[ebp+var_54], 1
		call	___ctype_get_mb_cur_max
		mov	[esp+4], eax	; n
		mov	eax, [ebp+s]
		mov	[esp], eax	; s
		call	sub_804B110
		mov	[esp+0Ch], esi	; p
		mov	[esp+8], eax	; n
		mov	eax, [ebp+s]
		mov	[esp+4], eax	; s
		lea	eax, [ebp+pwc]
		mov	[esp], eax	; pwc
		call	_mbrtowc
		cmp	eax, 0FFFFFFFFh
		mov	[ebp+var_40], eax
		jz	loc_804E6F0
		cmp	eax, 0FFFFFFFEh
		jz	loc_804EA18
		test	eax, eax
		jnz	short loc_804E2B2
		mov	eax, [ebp+s]
		mov	[ebp+var_40], 1
		cmp	byte ptr [eax],	0
		jnz	loc_804EBDF
		mov	edx, [ebp+pwc]
		test	edx, edx
		jnz	loc_804EBBB

loc_804E2B2:				; CODE XREF: sub_804E1D0+C2j
		mov	[esp], esi	; ps
		mov	[ebp+var_3C], 1
		call	_mbsinit
		test	eax, eax
		jz	short loc_804E2C6
		mov	[ebp+var_54], 0

loc_804E2C6:				; CODE XREF: sub_804E1D0+F0j
					; sub_804E1D0+52Bj ...
		cmp	[ebp+var_3C], 0
		mov	[ebp+var_48], 1
		jnz	loc_804E6DF

loc_804E2D4:				; CODE XREF: sub_804E1D0+509j
					; sub_804E1D0+516j
		mov	ecx, [ebp+var_13C]
		mov	[ebp+var_7C], ebx
		mov	[ebp+var_8C], 0
		mov	[ebp+var_88], 0
		mov	[ebp+var_84], 0
		mov	[ebp+var_80], 0
		mov	[ebp+var_B4], ecx
		mov	byte ptr [ebp+var_C4], 0
		mov	[ebp+var_C0], 0
		mov	[ebp+var_BC], 0
		mov	byte ptr [ebp+var_B8], 0
		mov	[ebp+var_148], 0
		mov	[ebp+var_150], 0
		mov	[ebp+var_140], 0
		mov	[ebp+var_144], 0
		mov	byte ptr [ebp+var_154],	1
		mov	[ebp+var_14C], ebx

loc_804E359:				; CODE XREF: sub_804E1D0+8D6j
		lea	eax, [ebp+var_C4]
		call	sub_804D5F0
		movzx	eax, byte ptr [ebp+var_AC]
		test	al, al
		jz	short loc_804E37D
		mov	edi, [ebp+var_A8]
		test	edi, edi
		jz	loc_804E718

loc_804E37D:				; CODE XREF: sub_804E1D0+19Dj
		cmp	byte ptr [ebp+var_154],	0
		jz	short loc_804E3F8
		cmp	[ebp+var_144], 9
		jbe	short loc_804E3F8
		mov	esi, [ebp+var_148]
		cmp	[ebp+var_140], esi
		jb	short loc_804E3F8
		mov	ebx, [ebp+var_140]
		sub	ebx, [ebp+var_150]
		jz	short loc_804E3CF

loc_804E3AB:				; CODE XREF: sub_804E1D0+1FDj
		lea	eax, [ebp+var_8C]
		call	sub_804D5F0
		cmp	[ebp+var_74], 0
		jnz	loc_804EAF0

loc_804E3C0:				; CODE XREF: sub_804E1D0+92Bj
		mov	eax, [ebp+var_78]
		add	[ebp+var_7C], eax
		sub	ebx, 1
		mov	[ebp+var_80], 0
		jnz	short loc_804E3AB

loc_804E3CF:				; CODE XREF: sub_804E1D0+1D9j
					; sub_804E1D0+925j
		lea	eax, [ebp+var_8C]
		call	sub_804D5F0
		cmp	[ebp+var_74], 0
		jnz	loc_804EB59
		mov	edx, [ebp+var_140]
		movzx	eax, byte ptr [ebp+var_AC]
		mov	[ebp+var_150], edx
		nop

loc_804E3F8:				; CODE XREF: sub_804E1D0+1B4j
					; sub_804E1D0+1BDj ...
		mov	ebx, [ebp+var_140]
		add	ebx, 1
		test	al, al
		jz	loc_804EA70
		cmp	[ebp+var_3C], 0
		jz	loc_804EA70
		mov	eax, [ebp+var_A8]
		cmp	eax, [ebp+pwc]
		setz	al

loc_804E41F:				; CODE XREF: sub_804E1D0+953j
		test	al, al
		jz	loc_804EA7F
		mov	edx, [ebp+var_AC]
		mov	eax, [ebp+var_C4]
		mov	esi, [ebp+var_14C]
		mov	[ebp+var_E4], edx
		mov	edx, [ebp+var_A8]
		mov	[ebp+var_FC], eax
		mov	eax, [ebp+var_C0]
		mov	[ebp+var_124], esi
		mov	[ebp+var_E0], edx
		mov	edx, [ebp+var_A4]
		mov	[ebp+var_F8], eax
		mov	eax, [ebp+var_BC]
		mov	[ebp+var_DC], edx
		mov	edx, [ebp+var_A0]
		mov	[ebp+var_F4], eax
		mov	eax, [ebp+var_B8]
		mov	[ebp+var_D8], edx
		mov	edx, [ebp+var_9C]
		mov	[ebp+var_F0], eax
		mov	eax, [ebp+var_B4]
		mov	byte ptr [ebp+var_F0], 0
		mov	[ebp+var_D4], edx
		mov	edx, [ebp+var_98]
		mov	[ebp+var_EC], eax
		mov	eax, [ebp+var_B0]
		add	[ebp+var_EC], eax
		mov	[ebp+var_D0], edx
		mov	edx, [ebp+var_94]
		mov	[ebp+var_E8], eax
		lea	eax, [ebp+var_134]
		mov	[ebp+var_CC], edx
		mov	edx, [ebp+var_90]
		mov	[ebp+var_C8], edx
		mov	[ebp+var_134], 0
		mov	[ebp+p.__count], 0
		mov	dword ptr [ebp+p.__value], 0
		mov	[ebp+var_128], 0
		call	sub_804D5F0
		cmp	[ebp+var_11C], 0
		jnz	loc_804EB00

loc_804E522:				; CODE XREF: sub_804E1D0+938j
		mov	ebx, [ebp+var_140]
		mov	eax, [ebp+var_120]
		add	[ebp+var_124], eax
		mov	[ebp+var_128], 0
		add	ebx, 2
		jmp	short loc_804E597
; ---------------------------------------------------------------------------

loc_804E540:				; CODE XREF: sub_804E1D0+482j
		mov	eax, [ebp+var_E0]
		test	eax, eax
		jz	loc_804E718
		cmp	[ebp+var_11C], 0
		jz	loc_804E658
		cmp	eax, [ebp+var_118]
		setnz	al

loc_804E564:				; CODE XREF: sub_804E1D0+499j
					; sub_804E1D0+4B2j
		test	al, al
		lea	edx, [ebx+1]
		jnz	loc_804EA7F
		mov	eax, [ebp+var_E8]
		mov	ebx, edx
		add	[ebp+var_EC], eax
		mov	eax, [ebp+var_120]
		add	[ebp+var_124], eax
		mov	byte ptr [ebp+var_F0], 0
		mov	[ebp+var_128], 0

loc_804E597:				; CODE XREF: sub_804E1D0+36Ej
		cmp	[ebp+var_134], 0
		jnz	loc_804E75D
		mov	edx, [ebp+var_124]
		movzx	eax, byte ptr [edx]
		mov	ecx, eax
		shr	cl, 5
		movzx	ecx, cl
		mov	ecx, ds:dword_8052FA0[ecx*4]
		bt	ecx, eax
		jnb	loc_804E740
		mov	[ebp+var_120], 1
		movsx	eax, byte ptr [edx]
		mov	[ebp+var_11C], 1
		mov	[ebp+var_118], eax

loc_804E5DF:				; CODE XREF: sub_804E1D0+624j
					; sub_804E1D0+631j ...
		cmp	[ebp+var_11C], 0
		mov	[ebp+var_128], 1
		jnz	loc_804E720

loc_804E5F3:				; CODE XREF: sub_804E1D0+558j
		cmp	byte ptr [ebp+var_F0], 0
		jnz	short loc_804E64B
		cmp	byte ptr [ebp+var_FC], 0
		jnz	loc_804E825
		mov	edx, [ebp+var_EC]
		movzx	eax, byte ptr [edx]
		mov	ecx, eax
		shr	cl, 5
		movzx	ecx, cl
		mov	ecx, ds:dword_8052FA0[ecx*4]
		bt	ecx, eax
		jnb	loc_804E808
		mov	[ebp+var_E8], 1
		movsx	eax, byte ptr [edx]
		mov	byte ptr [ebp+var_E4], 1
		mov	[ebp+var_E0], eax

loc_804E644:				; CODE XREF: sub_804E1D0+6ECj
					; sub_804E1D0+6F9j ...
		mov	byte ptr [ebp+var_F0], 1

loc_804E64B:				; CODE XREF: sub_804E1D0+42Aj
		cmp	byte ptr [ebp+var_E4], 0
		jnz	loc_804E540

loc_804E658:				; CODE XREF: sub_804E1D0+385j
		mov	ecx, [ebp+var_E8]
		mov	eax, 1
		cmp	ecx, [ebp+var_120]
		jnz	loc_804E564
		mov	edi, [ebp+var_124]
		cmp	ecx, ecx
		mov	esi, [ebp+var_EC]
		repe cmpsb
		setnz	al
		jmp	loc_804E564
; ---------------------------------------------------------------------------
		align 4

loc_804E688:				; CODE XREF: sub_804E1D0+2Cj
		movzx	eax, byte ptr [ebx]
		test	al, al
		mov	byte ptr [ebp+var_140],	al
		jnz	loc_804E8D0

loc_804E699:				; CODE XREF: sub_804E1D0+514j
		mov	esi, [ebp+var_13C]

loc_804E69F:				; CODE XREF: sub_804E1D0+54Aj
					; sub_804E1D0+564j ...
		mov	ecx, [ebp+var_1C]
		xor	ecx, large gs:14h
		mov	eax, esi
		jnz	loc_804EBB6
		add	esp, 17Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_804E6C0:				; CODE XREF: sub_804E1D0+63j
		mov	[ebp+var_40], 1
		movsx	eax, byte ptr [ebx]
		mov	[ebp+var_3C], 1
		cmp	[ebp+var_3C], 0
		mov	[ebp+var_48], 1
		mov	[ebp+pwc], eax
		jz	loc_804E2D4

loc_804E6DF:				; CODE XREF: sub_804E1D0+FEj
		mov	eax, [ebp+pwc]
		test	eax, eax
		jz	short loc_804E699
		jmp	loc_804E2D4
; ---------------------------------------------------------------------------
		align 10h

loc_804E6F0:				; CODE XREF: sub_804E1D0+B1j
		mov	[ebp+var_40], 1
		mov	[ebp+var_3C], 0
		jmp	loc_804E2C6
; ---------------------------------------------------------------------------

loc_804E700:				; CODE XREF: sub_804E1D0+7E1j
		mov	edx, [ebp+var_13C]
		mov	eax, [ebp+var_144]
		cmp	byte ptr [edx+eax], 0
		jnz	loc_804EA4C
		db	66h
		nop

loc_804E718:				; CODE XREF: sub_804E1D0+1A7j
					; sub_804E1D0+378j ...
		xor	esi, esi
		jmp	short loc_804E69F
; ---------------------------------------------------------------------------
		align 10h

loc_804E720:				; CODE XREF: sub_804E1D0+41Dj
		mov	eax, [ebp+var_118]
		test	eax, eax
		jnz	loc_804E5F3
		mov	esi, [ebp+var_B4]
		jmp	loc_804E69F
; ---------------------------------------------------------------------------
		align 10h

loc_804E740:				; CODE XREF: sub_804E1D0+3EFj
		lea	eax, [ebp+p]
		mov	[esp], eax	; ps
		call	_mbsinit
		test	eax, eax
		jz	loc_804EC03
		mov	[ebp+var_134], 1

loc_804E75D:				; CODE XREF: sub_804E1D0+3CEj
		call	___ctype_get_mb_cur_max
		mov	[esp+4], eax	; n
		mov	eax, [ebp+var_124]
		mov	[esp], eax	; s
		call	sub_804B110
		lea	edx, [ebp+p]
		lea	ecx, [ebp+var_118]
		mov	[esp+0Ch], edx	; p
		mov	[esp], ecx	; pwc
		mov	[esp+8], eax	; n
		mov	eax, [ebp+var_124]
		mov	[esp+4], eax	; s
		call	_mbrtowc
		cmp	eax, 0FFFFFFFFh
		mov	[ebp+var_120], eax
		jz	loc_804EA30
		cmp	eax, 0FFFFFFFEh
		jz	loc_804EAB0
		test	eax, eax
		jnz	short loc_804E7DD
		mov	eax, [ebp+var_124]
		mov	[ebp+var_120], 1
		cmp	byte ptr [eax],	0
		jnz	loc_804EBDF
		mov	edx, [ebp+var_118]
		test	edx, edx
		jnz	loc_804EBBB

loc_804E7DD:				; CODE XREF: sub_804E1D0+5E4j
		lea	esi, [ebp+p]
		mov	[esp], esi	; ps
		mov	[ebp+var_11C], 1
		call	_mbsinit
		test	eax, eax
		jz	loc_804E5DF
		mov	[ebp+var_134], 0
		jmp	loc_804E5DF
; ---------------------------------------------------------------------------
		align 4

loc_804E808:				; CODE XREF: sub_804E1D0+454j
		lea	eax, [ebp+var_F8]
		mov	[esp], eax	; ps
		call	_mbsinit
		test	eax, eax
		jz	loc_804EC03
		mov	byte ptr [ebp+var_FC], 1

loc_804E825:				; CODE XREF: sub_804E1D0+433j
		call	___ctype_get_mb_cur_max
		mov	[esp+4], eax	; n
		mov	eax, [ebp+var_EC]
		mov	[esp], eax	; s
		call	sub_804B110
		lea	edx, [ebp+var_F8]
		lea	ecx, [ebp+var_E0]
		mov	[esp+0Ch], edx	; p
		mov	[esp], ecx	; pwc
		mov	[esp+8], eax	; n
		mov	eax, [ebp+var_EC]
		mov	[esp+4], eax	; s
		call	_mbrtowc
		cmp	eax, 0FFFFFFFFh
		mov	[ebp+var_E8], eax
		jz	loc_804EA58
		cmp	eax, 0FFFFFFFEh
		jz	loc_804EAD0
		test	eax, eax
		jnz	short loc_804E8A5
		mov	eax, [ebp+var_EC]
		mov	[ebp+var_E8], 1
		cmp	byte ptr [eax],	0
		jnz	loc_804EBDF
		mov	edi, [ebp+var_E0]
		test	edi, edi
		jnz	loc_804EBBB

loc_804E8A5:				; CODE XREF: sub_804E1D0+6ACj
		lea	esi, [ebp+var_F8]
		mov	[esp], esi	; ps
		mov	byte ptr [ebp+var_E4], 1
		call	_mbsinit
		test	eax, eax
		jz	loc_804E644
		mov	byte ptr [ebp+var_FC], 0
		jmp	loc_804E644
; ---------------------------------------------------------------------------
		align 10h

loc_804E8D0:				; CODE XREF: sub_804E1D0+4C3j
		mov	ecx, [ebp+var_13C]
		lea	edx, [ebx+1]
		mov	[ebp+var_150], edx
		cmp	byte ptr [ecx],	0
		jz	loc_804E718
		mov	[ebp+var_158], ebx
		xor	edi, edi
		mov	[ebp+var_148], 0
		mov	byte ptr [ebp+var_14C],	1
		mov	[ebp+var_144], 0
		mov	[ebp+var_15C], 0
		mov	[ebp+var_16C], ebx

loc_804E91B:				; CODE XREF: sub_804E1D0+883j
		mov	ebx, [ebp+var_13C]
		add	ebx, [ebp+var_144]
		cmp	byte ptr [ebp+var_14C],	0
		mov	[ebp+var_154], ebx
		jz	short loc_804E990
		cmp	[ebp+var_144], 9
		jbe	short loc_804E990
		cmp	edi, [ebp+var_148]
		jb	short loc_804E990
		mov	esi, [ebp+var_158]
		test	esi, esi
		jz	loc_804EB28
		mov	esi, [ebp+var_158]
		mov	eax, edi
		sub	eax, [ebp+var_15C]
		mov	[esp], esi
		mov	[esp+4], eax
		call	_strnlen
		mov	[ebp+var_15C], edi
		add	esi, eax
		mov	[ebp+var_158], esi
		cmp	byte ptr [esi],	0
		jz	loc_804EB28
		mov	[ebp+var_15C], edi
		lea	esi, [esi+0]

loc_804E990:				; CODE XREF: sub_804E1D0+764j
					; sub_804E1D0+76Dj ...
		add	[ebp+var_144], 1
		add	edi, 1
		mov	ecx, [ebp+var_13C]
		mov	edx, [ebp+var_144]
		movzx	eax, byte ptr [ebp+var_140]
		cmp	al, [ecx+edx-1]
		jnz	loc_804E700
		mov	esi, [ebp+var_150]
		movzx	edx, byte ptr [esi]
		test	dl, dl
		jz	short loc_804EA08
		mov	eax, [ebp+var_144]
		movzx	ecx, byte ptr [ecx+eax]
		test	cl, cl
		jz	loc_804E718
		add	edi, 1
		xor	eax, eax
		cmp	dl, cl
		jnz	short loc_804EA4C
		mov	esi, [ebp+var_16C]
		jmp	short loc_804E9FF
; ---------------------------------------------------------------------------
		align 4

loc_804E9E8:				; CODE XREF: sub_804E1D0+836j
		movzx	ecx, byte ptr [ebx+eax+2]
		test	cl, cl
		jz	loc_804E718
		add	edi, 1
		add	eax, 1
		cmp	dl, cl
		jnz	short loc_804EA46

loc_804E9FF:				; CODE XREF: sub_804E1D0+815j
		movzx	edx, byte ptr [esi+eax+2]
		test	dl, dl
		jnz	short loc_804E9E8

loc_804EA08:				; CODE XREF: sub_804E1D0+7F2j
		mov	esi, [ebp+var_154]
		jmp	loc_804E69F
; ---------------------------------------------------------------------------
		align 8

loc_804EA18:				; CODE XREF: sub_804E1D0+BAj
		mov	eax, [ebp+s]
		mov	[esp], eax	; s
		call	_strlen
		mov	[ebp+var_3C], 0
		mov	[ebp+var_40], eax
		jmp	loc_804E2C6
; ---------------------------------------------------------------------------
		align 10h

loc_804EA30:				; CODE XREF: sub_804E1D0+5D3j
		mov	[ebp+var_120], 1
		mov	[ebp+var_11C], 0
		jmp	loc_804E5DF
; ---------------------------------------------------------------------------

loc_804EA46:				; CODE XREF: sub_804E1D0+82Dj
		mov	[ebp+var_16C], esi

loc_804EA4C:				; CODE XREF: sub_804E1D0+540j
					; sub_804E1D0+80Dj
		add	[ebp+var_148], 5
		jmp	loc_804E91B
; ---------------------------------------------------------------------------

loc_804EA58:				; CODE XREF: sub_804E1D0+69Bj
		mov	[ebp+var_E8], 1
		mov	byte ptr [ebp+var_E4], 0
		jmp	loc_804E644
; ---------------------------------------------------------------------------
		align 10h

loc_804EA70:				; CODE XREF: sub_804E1D0+233j
					; sub_804E1D0+23Dj
		mov	ecx, [ebp+var_B0]
		cmp	ecx, [ebp+var_40]
		jz	loc_804EB13

loc_804EA7F:				; CODE XREF: sub_804E1D0+251j
					; sub_804E1D0+399j
		mov	eax, [ebp+var_B0]
		add	[ebp+var_144], 1
		add	[ebp+var_B4], eax
		add	[ebp+var_148], 5
		mov	byte ptr [ebp+var_B8], 0
		mov	[ebp+var_140], ebx
		jmp	loc_804E359
; ---------------------------------------------------------------------------
		align 10h

loc_804EAB0:				; CODE XREF: sub_804E1D0+5DCj
		mov	eax, [ebp+var_124]
		mov	[esp], eax	; s
		call	_strlen
		mov	[ebp+var_11C], 0
		mov	[ebp+var_120], eax
		jmp	loc_804E5DF
; ---------------------------------------------------------------------------

loc_804EAD0:				; CODE XREF: sub_804E1D0+6A4j
		mov	eax, [ebp+var_EC]
		mov	[esp], eax	; s
		call	_strlen
		mov	byte ptr [ebp+var_E4], 0
		mov	[ebp+var_E8], eax
		jmp	loc_804E644
; ---------------------------------------------------------------------------

loc_804EAF0:				; CODE XREF: sub_804E1D0+1EAj
		mov	esi, [ebp+var_70]
		test	esi, esi
		jz	loc_804E3CF
		jmp	loc_804E3C0
; ---------------------------------------------------------------------------

loc_804EB00:				; CODE XREF: sub_804E1D0+34Cj
		mov	ecx, [ebp+var_118]
		test	ecx, ecx
		jnz	loc_804E522
		call	_abort
; ---------------------------------------------------------------------------

loc_804EB13:				; CODE XREF: sub_804E1D0+8A9j
		mov	edi, [ebp+s]
		cmp	ecx, ecx
		mov	esi, [ebp+var_B4]
		repe cmpsb
		setz	al
		jmp	loc_804E41F
; ---------------------------------------------------------------------------

loc_804EB28:				; CODE XREF: sub_804E1D0+77Fj
					; sub_804E1D0+7B0j
		mov	edx, [ebp+var_16C]
		lea	ecx, [ebp+var_138]
		mov	eax, ebx
		call	sub_804D770
		test	al, al
		jnz	loc_804EC27
		mov	byte ptr [ebp+var_14C],	0
		mov	[ebp+var_158], 0
		jmp	loc_804E990
; ---------------------------------------------------------------------------

loc_804EB59:				; CODE XREF: sub_804E1D0+20Ej
		mov	ebx, [ebp+var_70]
		test	ebx, ebx
		jz	short loc_804EB78
		mov	ecx, [ebp+var_140]
		movzx	eax, byte ptr [ebp+var_AC]
		mov	[ebp+var_150], ecx
		jmp	loc_804E3F8
; ---------------------------------------------------------------------------

loc_804EB78:				; CODE XREF: sub_804E1D0+98Ej
		mov	edx, [ebp+var_14C]
		lea	ecx, [ebp+var_138]
		mov	eax, [ebp+var_13C]
		call	sub_804D8D0
		test	al, al
		jnz	loc_804EC27
		mov	esi, [ebp+var_140]
		movzx	eax, byte ptr [ebp+var_AC]
		mov	byte ptr [ebp+var_154],	0
		mov	[ebp+var_150], esi
		jmp	loc_804E3F8
; ---------------------------------------------------------------------------

loc_804EBB6:				; CODE XREF: sub_804E1D0+4DBj
		call	___stack_chk_fail
; ---------------------------------------------------------------------------

loc_804EBBB:				; CODE XREF: sub_804E1D0+DCj
					; sub_804E1D0+607j ...
		mov	dword ptr [esp+0Ch], offset aMbuiter_mult_0 ; "mbuiter_multi_next"
		mov	dword ptr [esp+8], 0ABh	; line
		mov	dword ptr [esp+4], offset file ; "mbuiter.h"
		mov	dword ptr [esp], offset	aIterCur_wc0 ; "iter->cur.wc ==	0"
		call	___assert_fail
; ---------------------------------------------------------------------------

loc_804EBDF:				; CODE XREF: sub_804E1D0+D1j
					; sub_804E1D0+5F9j ...
		mov	dword ptr [esp+0Ch], offset aMbuiter_mult_0 ; "mbuiter_multi_next"
		mov	dword ptr [esp+8], 0AAh	; line
		mov	dword ptr [esp+4], offset file ; "mbuiter.h"
		mov	dword ptr [esp], offset	aIterCur_ptr0 ;	"*iter->cur.ptr	== '\\0'"
		call	___assert_fail
; ---------------------------------------------------------------------------

loc_804EC03:				; CODE XREF: sub_804E1D0+73j
					; sub_804E1D0+580j ...
		mov	dword ptr [esp+0Ch], offset aMbuiter_mult_0 ; "mbuiter_multi_next"
		mov	dword ptr [esp+8], 8Eh ; line
		mov	dword ptr [esp+4], offset file ; "mbuiter.h"
		mov	dword ptr [esp], offset	assertion ; "mbsinit (&iter->state)"
		call	___assert_fail
; ---------------------------------------------------------------------------

loc_804EC27:				; CODE XREF: sub_804E1D0+96Dj
					; sub_804E1D0+9C1j
		mov	esi, [ebp+var_138]
		jmp	loc_804E69F
sub_804E1D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_804EC40(char *s, iconv_t cd)
sub_804EC40	proc near		; CODE XREF: .text:0804B9C4p
					; sub_804EE40+7Cp

var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
outbytesleft	= dword	ptr -28h
outbuf		= dword	ptr -24h
inbytesleft	= dword	ptr -20h
inbuf		= dword	ptr -1Ch
s		= dword	ptr  8
cd		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	eax, [ebp+s]
		mov	[esp], eax	; s
		mov	[ebp+inbuf], eax
		call	_strlen
		cmp	eax, 0FFFh
		mov	ebx, eax
		ja	short loc_804EC63
		shl	ebx, 4

loc_804EC63:				; CODE XREF: sub_804EC40+1Ej
		lea	edi, [ebx+1]
		mov	[ebp+inbytesleft], eax
		mov	[esp], edi	; size
		call	_malloc
		test	eax, eax
		mov	esi, eax
		jz	loc_804EE27
		mov	eax, [ebp+cd]
		mov	dword ptr [esp+10h], 0 ; outbytesleft
		mov	dword ptr [esp+0Ch], 0 ; outbuf
		mov	dword ptr [esp+8], 0 ; inbytesleft
		mov	dword ptr [esp+4], 0 ; inbuf
		mov	[esp], eax	; cd
		call	_iconv
		mov	[ebp+outbuf], esi
		mov	[ebp+outbytesleft], ebx
		jmp	short loc_804ED0F
; ---------------------------------------------------------------------------
		align 10h

loc_804ECB0:				; CODE XREF: sub_804EC40+F9j
		call	___errno_location
		mov	ebx, [eax]
		mov	edx, eax
		cmp	ebx, 16h
		jz	loc_804EDA2
		cmp	ebx, 7
		jnz	loc_804EE0B
		mov	eax, [ebp+outbuf]
		lea	ebx, [edi+edi]
		cmp	edi, ebx
		mov	[ebp+var_2C], eax
		jnb	loc_804EE00
		mov	[ebp+var_30], edx
		mov	[esp+4], ebx	; size
		mov	[esp], esi	; ptr
		call	_realloc
		mov	edx, [ebp+var_30]
		test	eax, eax
		jz	loc_804EE00
		mov	edx, [ebp+var_2C]
		mov	edi, ebx
		sub	edx, esi
		mov	esi, edx
		lea	edx, [eax+edx]
		mov	[ebp+outbuf], edx
		lea	edx, [ebx-1]
		sub	edx, esi
		mov	esi, eax
		mov	[ebp+outbytesleft], edx

loc_804ED0F:				; CODE XREF: sub_804EC40+6Cj
		lea	edx, [ebp+outbytesleft]
		mov	[esp+10h], edx	; outbytesleft
		lea	edx, [ebp+inbytesleft]
		mov	[esp+8], edx	; inbytesleft
		mov	edx, [ebp+cd]
		lea	eax, [ebp+outbuf]
		mov	[esp+0Ch], eax	; outbuf
		lea	eax, [ebp+inbuf]
		mov	[esp+4], eax	; inbuf
		mov	[esp], edx	; cd
		call	_iconv
		cmp	eax, 0FFFFFFFFh
		jz	loc_804ECB0
		jmp	short loc_804EDA2
; ---------------------------------------------------------------------------
		align 8

loc_804ED48:				; CODE XREF: sub_804EC40+18Ej
		nop
		lea	esi, [esi+0]
		call	___errno_location
		mov	ebx, [eax]
		mov	edx, eax
		cmp	ebx, 7
		jnz	loc_804EE0B
		mov	eax, [ebp+outbuf]
		lea	ebx, [edi+edi]
		cmp	edi, ebx
		mov	[ebp+var_2C], eax
		jnb	loc_804EE00
		mov	[ebp+var_30], edx
		mov	[esp+4], ebx	; size
		mov	[esp], esi	; ptr
		call	_realloc
		mov	edx, [ebp+var_30]
		test	eax, eax
		jz	short loc_804EE00
		mov	edx, [ebp+var_2C]
		mov	edi, ebx
		sub	edx, esi
		mov	esi, edx
		lea	edx, [eax+edx]
		mov	[ebp+outbuf], edx
		lea	edx, [ebx-1]
		sub	edx, esi
		mov	esi, eax
		mov	[ebp+outbytesleft], edx

loc_804EDA2:				; CODE XREF: sub_804EC40+7Cj
					; sub_804EC40+FFj
		lea	eax, [ebp+outbytesleft]
		mov	[esp+10h], eax	; outbytesleft
		mov	eax, [ebp+cd]
		lea	edx, [ebp+outbuf]
		mov	[esp+0Ch], edx	; outbuf
		mov	dword ptr [esp+8], 0 ; inbytesleft
		mov	dword ptr [esp+4], 0 ; inbuf
		mov	[esp], eax	; cd
		call	_iconv
		cmp	eax, 0FFFFFFFFh
		jz	loc_804ED48
		mov	eax, [ebp+outbuf]
		mov	byte ptr [eax],	0
		add	eax, 1
		mov	edx, eax
		sub	edx, esi
		cmp	edx, edi
		jnb	short loc_804EE1D
		mov	[ebp+outbuf], eax
		mov	[esp+4], edx	; size
		mov	[esp], esi	; ptr
		call	_realloc
		test	eax, eax
		jz	short loc_804EE1D
		mov	esi, eax
		jmp	short loc_804EE1D
; ---------------------------------------------------------------------------
		align 10h

loc_804EE00:				; CODE XREF: sub_804EC40+96j
					; sub_804EC40+B0j ...
		mov	dword ptr [edx], 0Ch
		mov	ebx, 0Ch

loc_804EE0B:				; CODE XREF: sub_804EC40+85j
					; sub_804EC40+11Cj
		mov	[esp], esi	; ptr
		xor	esi, esi
		mov	[ebp+var_30], edx
		call	_free
		mov	edx, [ebp+var_30]
		mov	[edx], ebx

loc_804EE1D:				; CODE XREF: sub_804EC40+1A3j
					; sub_804EC40+1B6j ...
		add	esp, 4Ch
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_804EE27:				; CODE XREF: sub_804EC40+35j
		call	___errno_location
		mov	dword ptr [eax], 0Ch
		jmp	short loc_804EE1D
sub_804EC40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_804EE40(char *s, char	*fromcode, char	*tocode)
sub_804EE40	proc near		; CODE XREF: sub_804B960+1Bp

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
s		= dword	ptr  8
fromcode	= dword	ptr  0Ch
tocode		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], ebx
		mov	ebx, [ebp+s]
		mov	[ebp+var_8], esi
		mov	esi, [ebp+tocode]
		mov	[ebp+var_4], edi
		mov	edi, [ebp+fromcode]
		cmp	byte ptr [ebx],	0
		jz	short loc_804EE6D
		mov	[esp+4], esi
		mov	[esp], edi
		call	sub_804D130
		test	eax, eax
		jnz	short loc_804EEA0

loc_804EE6D:				; CODE XREF: sub_804EE40+1Bj
		mov	[esp], ebx
		call	___strdup
		test	eax, eax
		mov	esi, eax
		jz	short loc_804EE90

loc_804EE7B:				; CODE XREF: sub_804EE40+5Bj
					; sub_804EE40+73j ...
		mov	eax, esi
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_804EE90:				; CODE XREF: sub_804EE40+39j
		call	___errno_location
		mov	dword ptr [eax], 0Ch
		jmp	short loc_804EE7B
; ---------------------------------------------------------------------------
		align 10h

loc_804EEA0:				; CODE XREF: sub_804EE40+2Bj
		mov	[esp+4], edi	; fromcode
		mov	[esp], esi	; tocode
		xor	esi, esi
		call	_iconv_open
		cmp	eax, 0FFFFFFFFh
		mov	edi, eax
		jz	short loc_804EE7B
		mov	[esp+4], eax	; cd
		mov	[esp], ebx	; s
		call	sub_804EC40
		test	eax, eax
		mov	esi, eax
		jz	short loc_804EEEA
		mov	[esp], edi	; cd
		call	_iconv_close
		test	eax, eax
		jns	short loc_804EE7B
		call	___errno_location
		mov	edi, [eax]
		mov	ebx, eax
		mov	[esp], esi	; ptr
		xor	esi, esi
		call	_free
		mov	[ebx], edi
		jmp	short loc_804EE7B
; ---------------------------------------------------------------------------

loc_804EEEA:				; CODE XREF: sub_804EE40+85j
		call	___errno_location
		mov	esi, [eax]
		mov	ebx, eax
		mov	[esp], edi	; cd
		call	_iconv_close
		mov	[ebx], esi
		xor	esi, esi
		jmp	loc_804EE7B
sub_804EE40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_804EF10(int, int, iconv_t cd,	int, int)
sub_804EF10	proc near		; CODE XREF: .text:0804BA19p

var_1054	= dword	ptr -1054h
var_1050	= dword	ptr -1050h
ptr		= dword	ptr -104Ch
outbuf		= dword	ptr -1048h
inbuf		= dword	ptr -1044h
inbytesleft	= dword	ptr -1040h
outbytesleft	= dword	ptr -103Ch
var_102C	= dword	ptr -102Ch
var_1028	= dword	ptr -1028h
var_1024	= dword	ptr -1024h
var_1020	= dword	ptr -1020h
var_101C	= byte ptr -101Ch
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
cd		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 106Ch
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+arg_C]
		mov	edi, [ebp+cd]
		mov	dword ptr [esp+10h], 0 ; outbytesleft
		mov	[ebp+ptr], eax
		mov	eax, [ebp+arg_10]
		mov	[ebp+var_1054],	edx
		mov	dword ptr [esp+0Ch], 0 ; outbuf
		mov	edx, large gs:14h
		mov	[ebp+var_1C], edx
		xor	edx, edx
		mov	[ebp+var_1050],	eax
		mov	dword ptr [esp+8], 0 ; inbytesleft
		mov	dword ptr [esp+4], 0 ; inbuf
		mov	[esp], edi	; cd
		call	_iconv
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+ptr]
		test	edx, edx
		mov	[ebp+var_1028],	eax
		mov	[ebp+var_102C],	edx
		jz	loc_804F041
		lea	eax, [ebp+var_1024]
		xor	esi, esi
		lea	edx, [ebp+var_1020]
		mov	[ebp+outbytesleft], eax
		lea	eax, [ebp+var_102C]
		mov	[ebp+outbuf], edx
		lea	edx, [ebp+var_1028]
		lea	ebx, [ebp+var_101C]
		mov	[ebp+inbytesleft], eax
		mov	[ebp+inbuf], edx
		jmp	short loc_804EFE0
; ---------------------------------------------------------------------------
		align 4

loc_804EFC8:				; CODE XREF: sub_804EF10+113j
					; sub_804EF10+120j
		mov	eax, [ebp+var_1020]
		mov	edx, [ebp+var_102C]
		sub	eax, ebx
		add	esi, eax
		test	edx, edx
		jz	loc_804F068

loc_804EFE0:				; CODE XREF: sub_804EF10+B3j
		mov	eax, [ebp+outbytesleft]
		mov	edx, [ebp+outbuf]
		mov	[ebp+var_1020],	ebx
		mov	[ebp+var_1024],	1000h
		mov	[esp+10h], eax	; outbytesleft
		mov	eax, [ebp+inbytesleft]
		mov	[esp+0Ch], edx	; outbuf
		mov	edx, [ebp+inbuf]
		mov	[esp], edi	; cd
		mov	[esp+8], eax	; inbytesleft
		mov	[esp+4], edx	; inbuf
		call	_iconv
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_804EFC8
		call	___errno_location
		mov	eax, [eax]
		cmp	eax, 7
		nop
		jz	short loc_804EFC8
		cmp	eax, 16h
		jz	short loc_804F068

loc_804F037:				; CODE XREF: sub_804EF10+197j
					; sub_804EF10+34Bj
		mov	eax, 0FFFFFFFFh
		jmp	loc_804F206
; ---------------------------------------------------------------------------

loc_804F041:				; CODE XREF: sub_804EF10+75j
		lea	eax, [ebp+var_1024]
		xor	esi, esi
		lea	edx, [ebp+var_1020]
		lea	ebx, [ebp+var_101C]
		mov	[ebp+outbytesleft], eax
		mov	[ebp+outbuf], edx
		lea	esi, [esi+0]

loc_804F068:				; CODE XREF: sub_804EF10+CAj
					; sub_804EF10+125j
		mov	eax, [ebp+outbytesleft]
		mov	edx, [ebp+outbuf]
		mov	[ebp+var_1020],	ebx
		mov	[ebp+var_1024],	1000h
		mov	[esp+10h], eax	; outbytesleft
		mov	[esp+0Ch], edx	; outbuf
		mov	dword ptr [esp+8], 0 ; inbytesleft
		mov	dword ptr [esp+4], 0 ; inbuf
		mov	[esp], edi	; cd
		call	_iconv
		cmp	eax, 0FFFFFFFFh
		jz	short loc_804F037
		mov	eax, [ebp+var_1020]
		sub	eax, ebx
		add	esi, eax
		jz	loc_804F1F8
		mov	edx, [ebp+var_1054]
		mov	ebx, [edx]
		test	ebx, ebx
		jz	loc_804F220
		mov	eax, [ebp+var_1050]
		cmp	esi, [eax]
		ja	loc_804F220

loc_804F0D7:				; CODE XREF: sub_804EF10+31Cj
		mov	dword ptr [esp+10h], 0 ; outbytesleft
		mov	dword ptr [esp+0Ch], 0 ; outbuf
		mov	dword ptr [esp+8], 0 ; inbytesleft
		mov	dword ptr [esp+4], 0 ; inbuf
		mov	[esp], edi	; cd
		call	_iconv
		mov	edx, [ebp+ptr]
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_1028],	ebx
		mov	[ebp+ptr], ebx
		mov	ebx, [ebp+outbuf]
		mov	[ebp+var_1020],	edx
		lea	edx, [ebp+var_102C]
		mov	[ebp+var_1024],	eax
		lea	eax, [ebp+var_1028]
		mov	[ebp+inbuf], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_102C],	esi
		mov	[ebp+inbytesleft], edx
		jmp	short loc_804F156
; ---------------------------------------------------------------------------
		align 10h

loc_804F150:				; CODE XREF: sub_804EF10+27Bj
		mov	eax, [ebp+var_1024]

loc_804F156:				; CODE XREF: sub_804EF10+237j
		test	eax, eax
		jz	loc_804F248
		mov	edx, [ebp+inbytesleft]
		mov	eax, [ebp+inbuf]
		mov	[esp+4], ebx	; inbuf
		mov	[esp], edi	; cd
		mov	[esp+10h], edx	; outbytesleft
		mov	edx, [ebp+outbytesleft]
		mov	[esp+0Ch], eax	; outbuf
		mov	[esp+8], edx	; inbytesleft
		call	_iconv
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_804F150
		call	___errno_location
		mov	ebx, [ebp+ptr]
		cmp	dword ptr [eax], 16h
		jnz	loc_804F253

loc_804F1A1:				; CODE XREF: sub_804EF10+33Ej
		mov	eax, [ebp+inbytesleft]
		mov	edx, [ebp+inbuf]
		mov	dword ptr [esp+8], 0 ; inbytesleft
		mov	dword ptr [esp+4], 0 ; inbuf
		mov	[esp+10h], eax	; outbytesleft
		mov	[esp+0Ch], edx	; outbuf
		mov	[esp], edi	; cd
		call	_iconv
		cmp	eax, 0FFFFFFFFh
		jz	loc_804F253
		mov	eax, [ebp+var_102C]
		test	eax, eax
		jnz	loc_804F279
		mov	eax, [ebp+var_1054]
		mov	edx, [ebp+var_1050]
		mov	[eax], ebx
		xor	eax, eax
		mov	[edx], esi
		jmp	short loc_804F206
; ---------------------------------------------------------------------------

loc_804F1F8:				; CODE XREF: sub_804EF10+1A3j
		mov	eax, [ebp+var_1050]
		mov	dword ptr [eax], 0
		xor	eax, eax

loc_804F206:				; CODE XREF: sub_804EF10+12Cj
					; sub_804EF10+2E6j ...
		mov	edx, [ebp+var_1C]
		xor	edx, large gs:14h
		jnz	short loc_804F27E
		add	esp, 106Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_804F220:				; CODE XREF: sub_804EF10+1B3j
					; sub_804EF10+1C1j
		mov	[esp], esi	; size
		call	_malloc
		test	eax, eax
		mov	ebx, eax
		jnz	loc_804F0D7
		call	___errno_location
		mov	dword ptr [eax], 0Ch
		or	eax, 0FFFFFFFFh
		jmp	short loc_804F206
; ---------------------------------------------------------------------------
		align 8

loc_804F248:				; CODE XREF: sub_804EF10+248j
		mov	ebx, [ebp+ptr]
		jmp	loc_804F1A1
; ---------------------------------------------------------------------------

loc_804F253:				; CODE XREF: sub_804EF10+28Bj
					; sub_804EF10+2C0j
		mov	eax, [ebp+var_1054]
		cmp	[eax], ebx
		jz	loc_804F037
		call	___errno_location
		mov	edi, [eax]
		mov	esi, eax
		mov	[esp], ebx	; ptr
		call	_free
		or	eax, 0FFFFFFFFh
		mov	[esi], edi
		jmp	short loc_804F206
; ---------------------------------------------------------------------------

loc_804F279:				; CODE XREF: sub_804EF10+2CEj
		call	_abort
; ---------------------------------------------------------------------------

loc_804F27E:				; CODE XREF: sub_804EF10+300j
		call	___stack_chk_fail
sub_804EF10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_804F290	proc near		; CODE XREF: .text:0804BB74p
					; .text:0804BB8Fp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_4]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[esp], eax
		call	___strndup
		test	eax, eax
		jz	short loc_804F2AE
		leave
		retn
; ---------------------------------------------------------------------------

loc_804F2AE:				; CODE XREF: sub_804F290+1Aj
		db	66h
		nop
		call	sub_804B910
sub_804F290	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_804F2C0(FILE *stream)
sub_804F2C0	proc near		; CODE XREF: sub_804BBC0+14p
					; sub_804BBC0+3Ap

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
stream		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_8], esi
		mov	esi, [ebp+stream]
		mov	[ebp+var_C], ebx
		mov	[ebp+var_4], edi
		mov	[esp], esi	; fp
		call	___fpending
		mov	ebx, [esi]
		mov	[esp], esi	; stream
		and	ebx, 20h
		mov	edi, eax
		call	_fclose
		test	eax, eax
		setnz	al
		test	ebx, ebx
		jnz	short loc_804F328
		test	al, al
		jz	short loc_804F30A
		test	edi, edi
		jnz	short loc_804F320
		lea	esi, [esi+0]
		call	___errno_location
		cmp	dword ptr [eax], 9
		jnz	short loc_804F320

loc_804F30A:				; CODE XREF: sub_804F2C0+34j
		xor	eax, eax

loc_804F30C:				; CODE XREF: sub_804F2C0+65j
					; sub_804F2C0+80j
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_804F320:				; CODE XREF: sub_804F2C0+38j
					; sub_804F2C0+48j ...
		mov	eax, 0FFFFFFFFh
		jmp	short loc_804F30C
; ---------------------------------------------------------------------------
		align 4

loc_804F328:				; CODE XREF: sub_804F2C0+30j
		test	al, al
		jnz	short loc_804F320
		lea	esi, [esi+0]
		call	___errno_location
		mov	dword ptr [eax], 0
		mov	eax, 0FFFFFFFFh
		jmp	short loc_804F30C
sub_804F2C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_804F350	proc near		; CODE XREF: sub_804CED0+52p

var_38C		= dword	ptr -38Ch
var_37D		= byte ptr -37Dh
var_37C		= dword	ptr -37Ch
var_378		= tbyte	ptr -378h
src		= dword	ptr -368h
var_364		= dword	ptr -364h
var_360		= dword	ptr -360h
var_35C		= dword	ptr -35Ch
var_358		= dword	ptr -358h
var_354		= dword	ptr -354h
var_350		= dword	ptr -350h
var_34C		= dword	ptr -34Ch
var_348		= dword	ptr -348h
var_344		= dword	ptr -344h
var_340		= dword	ptr -340h
var_33C		= dword	ptr -33Ch
var_338		= dword	ptr -338h
var_334		= dword	ptr -334h
var_330		= dword	ptr -330h
var_32C		= dword	ptr -32Ch
size		= tbyte	ptr -328h
n		= dword	ptr -310h
dest		= dword	ptr -30Ch
var_300		= dword	ptr -300h
ptr		= dword	ptr -2FCh
var_2F8		= dword	ptr -2F8h
var_2F4		= dword	ptr -2F4h
var_2F0		= dword	ptr -2F0h
var_2EC		= dword	ptr -2ECh
var_2E8		= byte ptr -2E8h
var_2E4		= dword	ptr -2E4h
var_2E0		= dword	ptr -2E0h
var_2DA		= word ptr -2DAh
var_2D8		= byte ptr -2D8h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		xor	edi, edi
		push	esi
		push	ebx
		sub	esp, 3BCh
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_8]
		lea	ebx, [ebp+var_2E8]
		mov	edx, [ebp+arg_4]
		mov	esi, [ebp+arg_C]
		mov	[ebp+var_334], eax
		mov	eax, large gs:14h
		mov	[ebp+var_1C], eax
		xor	eax, eax
		lea	eax, [ebp+var_300]
		mov	[ebp+var_344], edx
		mov	[ebp+dest], ecx
		mov	[esp+8], ebx
		mov	[esp+4], eax
		mov	[esp], ecx
		call	sub_80515A0
		test	eax, eax
		js	short loc_804F3FD
		mov	[esp+4], ebx
		mov	[esp], esi
		call	sub_8051480
		test	eax, eax
		js	loc_80509ED
		mov	eax, [ebp+var_2F8]
		add	eax, 7
		sbb	edx, edx
		or	eax, edx
		add	eax, [ebp+var_2F4]
		jnb	short loc_804F418

loc_804F3D0:				; CODE XREF: sub_804F350+CDj
					; sub_804F350+2A3j ...
		mov	eax, [ebp+ptr]
		mov	[esp], eax	; ptr
		call	_free
		mov	eax, [ebp+var_2E4]
		test	eax, eax
		jz	short loc_804F3F0
		mov	[esp], eax	; ptr
		call	_free

loc_804F3F0:				; CODE XREF: sub_804F350+96j
		call	___errno_location
		xor	edi, edi
		mov	dword ptr [eax], 0Ch

loc_804F3FD:				; CODE XREF: sub_804F350+55j
					; sub_804F350+135Ej ...
		mov	ecx, [ebp+var_1C]
		xor	ecx, large gs:14h
		mov	eax, edi
		jnz	loc_805110E
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 4

loc_804F418:				; CODE XREF: sub_804F350+7Ej
		mov	edx, eax
		add	edx, 6
		jb	short loc_804F3D0
		cmp	edx, 0F9Fh
		ja	loc_804F5F0
		add	eax, 24h
		and	eax, 0FFFFFFF0h
		sub	esp, eax
		lea	edx, [esp+3Bh]
		and	edx, 0FFFFFFF0h
		mov	[ebp+var_32C], edx
		mov	[ebp+var_35C], 0

loc_804F44A:				; CODE XREF: sub_804F350+2C5j
		mov	edx, [ebp+var_334]
		xor	ebx, ebx
		xor	edi, edi
		test	edx, edx
		jz	short loc_804F466
		mov	ecx, [ebp+var_344]
		mov	edi, [ebp+var_334]
		mov	ebx, [ecx]

loc_804F466:				; CODE XREF: sub_804F350+106j
		mov	eax, [ebp+var_32C]
		xor	edx, edx
		mov	ecx, [ebp+var_32C]
		mov	esi, [ebp+ptr]
		mov	[ebp+var_33C], 0
		add	eax, 1
		mov	[ebp+var_348], eax
		lea	eax, [ebp+var_2D8]
		add	ecx, 2
		mov	[ebp+var_37C], eax
		mov	eax, edi
		mov	edi, edx
		mov	[ebp+var_358], ecx
		mov	edx, eax

loc_804F4A8:				; CODE XREF: sub_804F350+C8Ej
		mov	eax, [esi]
		cmp	eax, [ebp+dest]
		jz	loc_804F581
		sub	eax, [ebp+dest]
		mov	ecx, eax
		add	ecx, edi
		mov	[ebp+n], eax
		sbb	eax, eax
		or	ecx, eax
		cmp	ebx, ecx
		jnb	short loc_804F548
		cmp	ebx, 0
		jnz	loc_804FEF8
		mov	bl, 0Ch

loc_804F4D9:				; CODE XREF: sub_804F350+BB0j
		cmp	ebx, ecx
		jnb	short loc_804F4DF
		mov	ebx, ecx

loc_804F4DF:				; CODE XREF: sub_804F350+18Bj
		cmp	ebx, 0FFFFFFFFh
		jz	loc_8050048
		cmp	edx, [ebp+var_334]
		setz	byte ptr [ebp+var_330]
		test	edx, edx
		jz	short loc_804F506
		cmp	byte ptr [ebp+var_330],	0
		jz	loc_804FF08

loc_804F506:				; CODE XREF: sub_804F350+1A7j
		mov	[ebp+src], edx
		mov	[ebp+var_364], ecx
		mov	[esp], ebx	; size
		call	_malloc
		mov	edx, [ebp+src]
		mov	ecx, [ebp+var_364]
		mov	dword ptr [ebp+size], eax

loc_804F52C:				; CODE XREF: sub_804F350+BE2j
		mov	eax, dword ptr [ebp+size]
		test	eax, eax
		jz	loc_8050048
		test	edi, edi
		jnz	loc_80500D8

loc_804F542:				; CODE XREF: sub_804F350+D90j
		mov	edx, dword ptr [ebp+size]

loc_804F548:				; CODE XREF: sub_804F350+17Cj
					; sub_804F350+DBEj
		mov	eax, [ebp+n]
		lea	edi, [edx+edi]
		mov	[esp], edi	; dest
		mov	[ebp+src], edx
		mov	[ebp+var_364], ecx
		mov	[esp+8], eax	; n
		mov	eax, [ebp+dest]
		mov	[esp+4], eax	; src
		call	_memcpy
		mov	ecx, [ebp+var_364]
		mov	edx, [ebp+src]
		mov	edi, ecx

loc_804F581:				; CODE XREF: sub_804F350+160j
		mov	ecx, [ebp+var_33C]
		cmp	[ebp+var_300], ecx
		jz	loc_80505C0
		movzx	eax, byte ptr [esi+24h]
		cmp	al, 25h
		jz	loc_804FF38
		mov	ecx, [esi+28h]
		cmp	ecx, 0FFFFFFFFh
		jz	loc_804F8F0	; jumptable 0804F956 case 0
		cmp	al, 6Eh
		jz	loc_8050078
		cmp	al, 46h
		jz	short loc_804F620
		cmp	al, 66h
		jz	short loc_804F620
		cmp	al, 65h
		lea	esi, [esi+0]
		jz	short loc_804F620
		cmp	al, 45h
		jz	short loc_804F620
		cmp	al, 67h
		jz	short loc_804F620
		cmp	al, 47h
		lea	esi, [esi+0]
		jz	short loc_804F620
		cmp	al, 61h
		jz	short loc_804F620
		cmp	al, 41h
		jz	short loc_804F620
		mov	eax, [ebp+var_2E4]
		shl	ecx, 4
		mov	ecx, [ecx+eax]
		mov	[ebp+n], ecx
		jmp	short loc_804F63A
; ---------------------------------------------------------------------------
		align 10h

loc_804F5F0:				; CODE XREF: sub_804F350+D5j
		cmp	edx, 0FFFFFFFFh
		jz	loc_804F3D0
		mov	[esp], edx	; size
		call	_malloc
		test	eax, eax
		mov	[ebp+var_32C], eax
		jz	loc_804F3D0
		mov	[ebp+var_35C], eax
		jmp	loc_804F44A
; ---------------------------------------------------------------------------
		align 10h

loc_804F620:				; CODE XREF: sub_804F350+265j
					; sub_804F350+269j ...
		shl	ecx, 4
		add	ecx, [ebp+var_2E4]
		mov	eax, [ecx]
		cmp	eax, 0Ch
		mov	[ebp+n], eax
		jz	loc_80501C0

loc_804F63A:				; CODE XREF: sub_804F350+29Cj
					; sub_804F350+1150j
		mov	ecx, [ebp+var_32C]
		mov	eax, [esi+8]
		mov	byte ptr [ecx],	25h
		mov	ecx, [ebp+var_348]
		test	al, 1
		mov	[ebp+dest], ecx
		jz	short loc_804F665
		mov	byte ptr [ecx],	27h
		mov	ecx, [ebp+var_358]
		mov	[ebp+dest], ecx

loc_804F665:				; CODE XREF: sub_804F350+304j
		test	al, 2
		jz	short loc_804F67B
		mov	ecx, [ebp+dest]
		mov	byte ptr [ecx],	2Dh
		add	ecx, 1
		mov	[ebp+dest], ecx

loc_804F67B:				; CODE XREF: sub_804F350+317j
		test	al, 4
		jz	short loc_804F691
		mov	ecx, [ebp+dest]
		mov	byte ptr [ecx],	2Bh
		add	ecx, 1
		mov	[ebp+dest], ecx

loc_804F691:				; CODE XREF: sub_804F350+32Dj
		test	al, 8
		jz	short loc_804F6A7
		mov	ecx, [ebp+dest]
		mov	byte ptr [ecx],	20h
		add	ecx, 1
		mov	[ebp+dest], ecx

loc_804F6A7:				; CODE XREF: sub_804F350+343j
		test	al, 10h
		jz	short loc_804F6BD
		mov	ecx, [ebp+dest]
		mov	byte ptr [ecx],	23h
		add	ecx, 1
		mov	[ebp+dest], ecx

loc_804F6BD:				; CODE XREF: sub_804F350+359j
		test	al, 20h
		jz	short loc_804F6D3
		mov	eax, [ebp+dest]
		mov	byte ptr [eax],	30h
		add	eax, 1
		mov	[ebp+dest], eax

loc_804F6D3:				; CODE XREF: sub_804F350+36Fj
		mov	eax, [esi+0Ch]
		mov	ecx, [esi+10h]
		cmp	eax, ecx
		jz	short loc_804F713
		sub	ecx, eax
		mov	[esp+4], eax	; src
		mov	eax, [ebp+dest]
		mov	[esp+8], ecx	; n
		mov	[ebp+src], edx
		mov	[ebp+var_364], ecx
		mov	[esp], eax	; dest
		call	_memcpy
		mov	ecx, [ebp+var_364]
		add	[ebp+dest], ecx
		mov	edx, [ebp+src]

loc_804F713:				; CODE XREF: sub_804F350+38Bj
		mov	eax, [esi+18h]
		mov	ecx, [esi+1Ch]
		cmp	eax, ecx
		jz	short loc_804F753
		sub	ecx, eax
		mov	[esp+4], eax	; src
		mov	eax, [ebp+dest]
		mov	[esp+8], ecx	; n
		mov	[ebp+src], edx
		mov	[ebp+var_364], ecx
		mov	[esp], eax	; dest
		call	_memcpy
		mov	ecx, [ebp+var_364]
		add	[ebp+dest], ecx
		mov	edx, [ebp+src]

loc_804F753:				; CODE XREF: sub_804F350+3CBj
		cmp	[ebp+n], 10h
		ja	short loc_804F788
		movzx	ecx, byte ptr [ebp+n]
		mov	eax, 1
		shl	eax, cl
		test	eax, 14180h
		jnz	loc_804F932
		test	ah, 10h
		jnz	loc_8050160
		test	ah, 6
		jnz	loc_804F920
		nop

loc_804F788:				; CODE XREF: sub_804F350+40Aj
					; sub_804F350+5F4j ...
		movzx	eax, byte ptr [esi+24h]
		mov	ecx, [ebp+dest]
		mov	[ecx], al
		mov	eax, [ebp+dest]
		add	ecx, 1
		mov	[ebp+var_350], ecx
		mov	byte ptr [eax+1], 0
		mov	eax, [esi+14h]
		mov	[ebp+dest], 0
		cmp	eax, 0FFFFFFFFh
		jz	short loc_804F7DE
		shl	eax, 4
		add	eax, [ebp+var_2E4]
		cmp	dword ptr [eax], 5
		jnz	loc_804F8F0	; jumptable 0804F956 case 0
		mov	eax, [eax+4]
		mov	[ebp+dest], 1
		mov	[ebp+var_2F0], eax

loc_804F7DE:				; CODE XREF: sub_804F350+467j
		mov	eax, [esi+20h]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_804F811
		shl	eax, 4
		add	eax, [ebp+var_2E4]
		cmp	dword ptr [eax], 5
		jnz	loc_804F8F0	; jumptable 0804F956 case 0
		mov	ecx, [ebp+dest]
		mov	eax, [eax+4]
		mov	[ebp+ecx*4+var_2F0], eax
		add	ecx, 1
		mov	[ebp+dest], ecx

loc_804F811:				; CODE XREF: sub_804F350+494j
		mov	eax, edi
		add	eax, 2
		mov	[ebp+var_338], eax
		sbb	eax, eax
		or	eax, [ebp+var_338]
		cmp	ebx, eax
		jnb	short loc_804F8A1
		test	ebx, ebx
		jnz	loc_8050178
		mov	bl, 0Ch

loc_804F832:				; CODE XREF: sub_804F350+E30j
		cmp	[ebp+var_338], edi
		sbb	eax, eax
		or	eax, [ebp+var_338]
		cmp	ebx, eax
		jnb	short loc_804F856
		cmp	edi, [ebp+var_338]
		ja	loc_8050048
		mov	ebx, [ebp+var_338]

loc_804F856:				; CODE XREF: sub_804F350+4F2j
		cmp	ebx, 0FFFFFFFFh
		jz	loc_8050048
		cmp	edx, [ebp+var_334]
		setz	byte ptr [ebp+size]
		test	edx, edx
		jz	short loc_804F87D
		cmp	byte ptr [ebp+size], 0
		jz	loc_8050188

loc_804F87D:				; CODE XREF: sub_804F350+51Ej
		mov	[ebp+src], edx
		mov	[esp], ebx	; size
		call	_malloc
		mov	edx, [ebp+src]
		mov	ecx, eax

loc_804F893:				; CODE XREF: sub_804F350+E52j
		test	ecx, ecx
		jz	loc_8050048
		test	edi, edi
		jnz	short loc_804F8F8

loc_804F89F:				; CODE XREF: sub_804F350+5AFj
					; sub_804F350+5CDj
		mov	edx, ecx

loc_804F8A1:				; CODE XREF: sub_804F350+4D6j
		mov	byte ptr [edx+edi], 0
		mov	ecx, [ebp+var_2F0]
		mov	eax, [ebp+var_2EC]
		mov	[ebp+var_340], esi
		mov	esi, edx
		mov	[ebp+var_34C], ecx
		mov	[ebp+var_354], eax

loc_804F8C5:				; CODE XREF: sub_804F350+707j
					; sub_804F350+82Bj ...
		mov	ecx, ebx
		sub	ecx, edi
		mov	[ebp+var_2E0], 0FFFFFFFFh
		js	loc_804FAD0

loc_804F8D9:				; CODE XREF: sub_804F350+773j
					; sub_804F350+785j
		cmp	[ebp+n], 11h	; switch 18 cases
		jbe	short loc_804F950
		jmp	short loc_804F8F0 ; jumptable 0804F956 default case
; ---------------------------------------------------------------------------
		align 8

loc_804F8E8:				; CODE XREF: sub_804F350+A58j
		fstp	st
		lea	esi, [esi+0]

loc_804F8F0:				; CODE XREF: sub_804F350+255j
					; sub_804F350+475j ...
		call	_abort		; jumptable 0804F956 case 0
; ---------------------------------------------------------------------------
		align 4

loc_804F8F8:				; CODE XREF: sub_804F350+54Dj
		cmp	byte ptr [ebp+size], 0
		jz	short loc_804F89F
		mov	[esp], ecx	; dest
		mov	[ebp+var_364], ecx
		mov	[esp+8], edi	; n
		mov	[esp+4], edx	; src
		call	_memcpy
		mov	ecx, [ebp+var_364]
		jmp	short loc_804F89F
; ---------------------------------------------------------------------------
		align 10h

loc_804F920:				; CODE XREF: sub_804F350+431j
		mov	eax, [ebp+dest]
		mov	byte ptr [eax],	6Ch
		add	eax, 1
		mov	[ebp+dest], eax

loc_804F932:				; CODE XREF: sub_804F350+41Fj
		mov	ecx, [ebp+dest]
		mov	byte ptr [ecx],	6Ch
		add	ecx, 1
		mov	[ebp+dest], ecx
		jmp	loc_804F788
; ---------------------------------------------------------------------------
		align 10h

loc_804F950:				; CODE XREF: sub_804F350+590j
		mov	edx, [ebp+n]
		jmp	ds:off_8052FD4[edx*4] ;	switch jump
; ---------------------------------------------------------------------------
		align 10h

loc_804F960:				; CODE XREF: sub_804F350+606j
					; DATA XREF: .rodata:off_8052FD4o
		mov	eax, [ebp+var_340] ; jumptable 0804F956	cases 5-8,13-17
		mov	edx, [eax+28h]
		mov	eax, [ebp+var_2E4]
		shl	edx, 4
		cmp	[ebp+dest], 1
		mov	eax, [edx+eax+4]
		jz	loc_804FB08

loc_804F983:				; CODE XREF: sub_804F350+7AEj
					; sub_804F350+91Ej ...
		jnb	loc_804FBE0

loc_804F989:				; CODE XREF: sub_804F350+884j
		mov	[esp+14h], eax
		mov	eax, [ebp+var_32C]
		lea	edx, [ebp+var_2E0]
		mov	[esp+4], ecx
		mov	[ebp+var_364], ecx
		mov	[esp+18h], edx
		mov	[esp+10h], eax
		lea	eax, [esi+edi]
		mov	dword ptr [esp+0Ch], 0FFFFFFFFh
		mov	dword ptr [esp+8], 1
		mov	[esp], eax
		call	___snprintf_chk
		mov	ecx, [ebp+var_364]
		mov	[ebp+var_330], eax

loc_804F9D2:				; CODE XREF: sub_804F350+8FAj
					; sub_804F350+ABBj ...
		mov	eax, [ebp+var_2E0]
		test	eax, eax
		js	loc_804FB69

loc_804F9E0:				; CODE XREF: sub_804F350+813j
		cmp	ecx, eax
		mov	dword ptr [ebp+size], eax
		jbe	short loc_804F9F7
		lea	edx, [esi+eax]
		cmp	byte ptr [edx+edi], 0
		jnz	loc_804F8F0	; jumptable 0804F956 case 0

loc_804F9F7:				; CODE XREF: sub_804F350+698j
		cmp	[ebp+var_330], eax
		jle	short loc_804FA11

loc_804F9FF:				; CODE XREF: sub_804F350+DD0j
		mov	edx, [ebp+var_330]
		mov	[ebp+var_2E0], edx
		mov	dword ptr [ebp+size], edx

loc_804FA11:				; CODE XREF: sub_804F350+6ADj
		mov	eax, dword ptr [ebp+size]
		add	eax, 1
		cmp	ecx, eax
		ja	loc_8050748
		cmp	ecx, 7FFFFFFFh
		jz	loc_80508C0
		mov	ecx, dword ptr [ebp+size]
		mov	edx, ebx
		add	ecx, [ebp+var_338]
		sar	edx, 1Fh
		lea	eax, [ebx+ebx]
		or	eax, edx
		cmp	edi, ecx
		mov	edx, 0FFFFFFFFh
		ja	short loc_804FA55
		cmp	eax, ecx
		mov	edx, eax
		jnb	short loc_804FA55
		mov	edx, ecx

loc_804FA55:				; CODE XREF: sub_804F350+6FBj
					; sub_804F350+701j
		cmp	ebx, edx
		jnb	loc_804F8C5
		cmp	ebx, 0
		jnz	loc_80500C8
		mov	bl, 0Ch

loc_804FA68:				; CODE XREF: sub_804F350+D80j
		cmp	ebx, edx
		jnb	short loc_804FA6E
		mov	ebx, edx

loc_804FA6E:				; CODE XREF: sub_804F350+71Aj
					; sub_804F350+E00j ...
		cmp	ebx, 0FFFFFFFFh
		jz	loc_80501A8
		cmp	esi, [ebp+var_334]
		setz	cl
		test	esi, esi
		jz	short loc_804FA8C
		test	cl, cl
		jz	loc_80500A8

loc_804FA8C:				; CODE XREF: sub_804F350+732j
		mov	byte ptr [ebp+var_364],	cl
		mov	[esp], ebx	; size
		call	_malloc
		movzx	ecx, byte ptr [ebp+var_364]
		mov	edx, eax

loc_804FAA3:				; CODE XREF: sub_804F350+D73j
		test	edx, edx
		jz	loc_80501A8
		test	cl, cl
		jnz	loc_804FB80

loc_804FAB3:				; CODE XREF: sub_804F350+832j
		mov	ecx, ebx
		mov	esi, edx
		sub	ecx, edi
		mov	[ebp+var_2E0], 0FFFFFFFFh
		jns	loc_804F8D9
		lea	esi, [esi+0]

loc_804FAD0:				; CODE XREF: sub_804F350+583j
		mov	ecx, 7FFFFFFFh
		jmp	loc_804F8D9
; ---------------------------------------------------------------------------
		align 10h

loc_804FAE0:				; CODE XREF: sub_804F350+606j
					; DATA XREF: .rodata:off_8052FD4o
		mov	eax, [ebp+var_340] ; jumptable 0804F956	case 2
		mov	edx, [eax+28h]
		mov	eax, [ebp+var_2E4]
		shl	edx, 4
		cmp	[ebp+dest], 1
		movzx	eax, byte ptr [edx+eax+4]
		jnz	loc_804F983
		lea	esi, [esi+0]

loc_804FB08:				; CODE XREF: sub_804F350+62Dj
					; sub_804F350+87Ej ...
		mov	[esp+18h], eax
		mov	eax, [ebp+var_34C]
		lea	edx, [ebp+var_2E0]
		mov	[esp+1Ch], edx
		mov	[esp+14h], eax

loc_804FB20:				; CODE XREF: sub_804F350+9BAj
		mov	edx, [ebp+var_32C]
		mov	[esp+10h], edx

loc_804FB2A:				; CODE XREF: sub_804F350+A22j
					; sub_804F350+1170j
		lea	eax, [esi+edi]
		mov	[esp+4], ecx
		mov	[ebp+var_364], ecx
		mov	dword ptr [esp+0Ch], 0FFFFFFFFh
		mov	dword ptr [esp+8], 1
		mov	[esp], eax
		call	___snprintf_chk
		mov	ecx, [ebp+var_364]
		mov	[ebp+var_330], eax
		mov	eax, [ebp+var_2E0]
		test	eax, eax
		jns	loc_804F9E0

loc_804FB69:				; CODE XREF: sub_804F350+68Aj
		mov	eax, [ebp+var_350]
		cmp	byte ptr [eax],	0
		jz	loc_8050118
		mov	byte ptr [eax],	0
		jmp	loc_804F8C5
; ---------------------------------------------------------------------------

loc_804FB80:				; CODE XREF: sub_804F350+75Dj
		test	edi, edi
		jz	loc_804FAB3
		mov	[esp+4], esi	; src
		mov	[esp], edx	; dest
		mov	[ebp+src], edx
		mov	[esp+8], edi	; n
		call	_memcpy
		mov	edx, [ebp+src]
		mov	esi, edx
		jmp	loc_804F8C5
; ---------------------------------------------------------------------------
		align 10h

loc_804FBB0:				; CODE XREF: sub_804F350+606j
					; DATA XREF: .rodata:off_8052FD4o
		mov	eax, [ebp+var_340] ; jumptable 0804F956	case 4
		mov	edx, [eax+28h]
		mov	eax, [ebp+var_2E4]
		shl	edx, 4
		cmp	[ebp+dest], 1
		movzx	eax, word ptr [edx+eax+4]
		jz	loc_804FB08
		jb	loc_804F989
		lea	esi, [esi+0]

loc_804FBE0:				; CODE XREF: sub_804F350:loc_804F983j
		cmp	[ebp+dest], 2
		jnz	loc_804F8F0	; jumptable 0804F956 case 0
		mov	[esp+1Ch], eax
		mov	eax, [ebp+var_354]
		lea	edx, [ebp+var_2E0]
		mov	[esp+20h], edx
		mov	edx, [ebp+var_34C]
		mov	[esp+18h], eax
		mov	eax, [ebp+var_32C]
		mov	[esp+14h], edx
		mov	[esp+10h], eax

loc_804FC19:				; CODE XREF: sub_804F350+1196j
					; sub_804F350+122Aj ...
		lea	eax, [esi+edi]
		mov	[esp+4], ecx
		mov	[ebp+var_364], ecx
		mov	dword ptr [esp+0Ch], 0FFFFFFFFh
		mov	dword ptr [esp+8], 1
		mov	[esp], eax
		call	___snprintf_chk
		mov	ecx, [ebp+var_364]
		mov	[ebp+var_330], eax
		jmp	loc_804F9D2
; ---------------------------------------------------------------------------
		align 10h

loc_804FC50:				; CODE XREF: sub_804F350+606j
					; DATA XREF: .rodata:off_8052FD4o
		mov	eax, [ebp+var_340] ; jumptable 0804F956	case 3
		mov	edx, [eax+28h]
		mov	eax, [ebp+var_2E4]
		shl	edx, 4
		cmp	[ebp+dest], 1
		movsx	eax, word ptr [edx+eax+4]
		jnz	loc_804F983
		jmp	loc_804FB08
; ---------------------------------------------------------------------------
		align 10h

loc_804FC80:				; CODE XREF: sub_804F350+606j
					; DATA XREF: .rodata:off_8052FD4o
		mov	eax, [ebp+var_340] ; jumptable 0804F956	case 1
		mov	edx, [eax+28h]
		mov	eax, [ebp+var_2E4]
		shl	edx, 4
		cmp	[ebp+dest], 1
		movsx	eax, byte ptr [edx+eax+4]
		jnz	loc_804F983
		jmp	loc_804FB08
; ---------------------------------------------------------------------------
		align 10h

loc_804FCB0:				; CODE XREF: sub_804F350+606j
					; DATA XREF: .rodata:off_8052FD4o
		mov	edx, [ebp+var_340] ; jumptable 0804F956	case 9
		mov	edx, [edx+28h]
		shl	edx, 4
		mov	eax, edx
		mov	edx, [ebp+var_2E4]
		cmp	[ebp+dest], 1
		lea	edx, [eax+edx+4]
		mov	eax, [edx]
		mov	edx, [edx+4]
		mov	dword ptr [ebp+size], eax
		mov	dword ptr [ebp+size+4],	edx
		jz	loc_8050548
		jnb	loc_804FEB8
		lea	edx, [ebp+var_2E0]
		mov	eax, dword ptr [ebp+size]
		mov	[esp+1Ch], edx
		mov	edx, dword ptr [ebp+size+4]
		mov	[esp+14h], eax
		mov	[esp+18h], edx
		jmp	loc_804FB20
; ---------------------------------------------------------------------------
		align 10h

loc_804FD10:				; CODE XREF: sub_804F350+606j
					; DATA XREF: .rodata:off_8052FD4o
		mov	eax, [ebp+var_340] ; jumptable 0804F956	case 10
		mov	edx, [ebp+var_2E4]
		mov	eax, [eax+28h]
		shl	eax, 4
		lea	edx, [eax+edx+4]
		mov	eax, [edx]
		mov	edx, [edx+4]
		cmp	[ebp+dest], 1
		mov	dword ptr [ebp+size], eax
		mov	dword ptr [ebp+size+4],	edx
		jz	loc_8050548
		jnb	loc_804FEB8
		lea	edx, [ebp+var_2E0]
		mov	eax, dword ptr [ebp+size]
		mov	[esp+1Ch], edx
		mov	edx, dword ptr [ebp+size+4]
		mov	[esp+14h], eax
		mov	[esp+18h], edx
		mov	edx, [ebp+var_32C]
		mov	[esp+10h], edx
		jmp	loc_804FB2A
; ---------------------------------------------------------------------------
		align 4

loc_804FD78:				; CODE XREF: sub_804F350+606j
					; DATA XREF: .rodata:off_8052FD4o
		mov	eax, [ebp+var_340] ; jumptable 0804F956	case 11
		mov	edx, [eax+28h]
		mov	eax, [ebp+var_2E4]
		shl	edx, 4
		cmp	[ebp+dest], 1
		fld	qword ptr [edx+eax+4]
		jz	loc_8050710
		jb	loc_80504A8
		cmp	[ebp+dest], 2
		jnz	loc_804F8E8
		mov	edx, [ebp+var_354]
		lea	eax, [ebp+var_2E0]
		mov	[esp+24h], eax
		fstp	qword ptr [esp+1Ch]
		mov	[esp+18h], edx

loc_804FDC6:				; CODE XREF: sub_804F350+B9Dj
					; sub_804F350+13B4j
		mov	eax, [ebp+var_34C]
		mov	edx, [ebp+var_32C]
		mov	[esp+4], ecx
		mov	[ebp+var_364], ecx
		mov	[esp+14h], eax
		lea	eax, [esi+edi]
		mov	[esp+10h], edx
		mov	dword ptr [esp+0Ch], 0FFFFFFFFh
		mov	dword ptr [esp+8], 1
		mov	[esp], eax
		call	___snprintf_chk
		mov	ecx, [ebp+var_364]
		mov	[ebp+var_330], eax
		jmp	loc_804F9D2
; ---------------------------------------------------------------------------

loc_804FE10:				; CODE XREF: sub_804F350+606j
					; DATA XREF: .rodata:off_8052FD4o
		mov	eax, [ebp+var_340] ; jumptable 0804F956	case 12
		mov	edx, [eax+28h]
		mov	eax, [ebp+var_2E4]
		shl	edx, 4
		fld	tbyte ptr [edx+eax+4]
		cmp	[ebp+dest], 1
		fstp	[ebp+size]
		jz	loc_80506F0
		jb	loc_80504C8
		cmp	[ebp+dest], 2
		jnz	loc_804F8F0	; jumptable 0804F956 case 0
		lea	eax, [ebp+var_2E0]
		mov	edx, [ebp+var_34C]
		mov	[esp+28h], eax
		mov	eax, [ebp+var_354]
		fld	[ebp+size]
		mov	[esp+4], ecx
		mov	[ebp+var_364], ecx
		mov	[esp+18h], eax
		mov	eax, [ebp+var_32C]
		fstp	tbyte ptr [esp+1Ch]
		mov	[esp+14h], edx
		mov	[esp+10h], eax
		lea	eax, [esi+edi]
		mov	dword ptr [esp+0Ch], 0FFFFFFFFh
		mov	dword ptr [esp+8], 1
		mov	[esp], eax
		call	___snprintf_chk
		mov	ecx, [ebp+var_364]
		mov	[ebp+var_330], eax
		jmp	loc_804F9D2
; ---------------------------------------------------------------------------
		align 8

loc_804FEB8:				; CODE XREF: sub_804F350+996j
					; sub_804F350+9F4j
		cmp	[ebp+dest], 2
		jnz	loc_804F8F0	; jumptable 0804F956 case 0
		lea	edx, [ebp+var_2E0]
		mov	eax, dword ptr [ebp+size]
		mov	[esp+24h], edx
		mov	edx, dword ptr [ebp+size+4]
		mov	[esp+1Ch], eax
		mov	[esp+20h], edx
		mov	edx, [ebp+var_354]
		mov	[esp+18h], edx
		jmp	loc_804FDC6
; ---------------------------------------------------------------------------
		align 8

loc_804FEF8:				; CODE XREF: sub_804F350+181j
		jl	loc_8050048
		add	ebx, ebx
		jmp	loc_804F4D9
; ---------------------------------------------------------------------------
		align 4

loc_804FF08:				; CODE XREF: sub_804F350+1B0j
		mov	[esp], edx	; ptr
		mov	[ebp+src], edx
		mov	[ebp+var_364], ecx
		mov	[esp+4], ebx	; size
		call	_realloc
		mov	ecx, [ebp+var_364]
		mov	edx, [ebp+src]
		mov	dword ptr [ebp+size], eax
		jmp	loc_804F52C
; ---------------------------------------------------------------------------
		align 4

loc_804FF38:				; CODE XREF: sub_804F350+249j
		cmp	dword ptr [esi+28h], 0FFFFFFFFh
		jnz	loc_804F8F0	; jumptable 0804F956 case 0
		mov	ecx, edi
		add	ecx, 1
		sbb	eax, eax
		or	ecx, eax
		cmp	ebx, ecx
		jnb	short loc_804FFC5
		cmp	ebx, 0
		jnz	loc_80501B0
		mov	bl, 0Ch

loc_804FF5A:				; CODE XREF: sub_804F350+E68j
		cmp	ebx, ecx
		jnb	short loc_804FF60
		mov	ebx, ecx

loc_804FF60:				; CODE XREF: sub_804F350+C0Cj
		cmp	ebx, 0FFFFFFFFh
		jz	loc_8050048
		cmp	edx, [ebp+var_334]
		setz	byte ptr [ebp+n]
		test	edx, edx
		jz	short loc_804FF83
		cmp	byte ptr [ebp+n], 0
		jz	short loc_804FFE8

loc_804FF83:				; CODE XREF: sub_804F350+C28j
		mov	[ebp+src], edx
		mov	[ebp+var_364], ecx
		mov	[esp], ebx	; size
		call	_malloc
		mov	edx, [ebp+src]
		mov	ecx, [ebp+var_364]
		mov	[ebp+dest], eax

loc_804FFA9:				; CODE XREF: sub_804F350+CC2j
		mov	eax, [ebp+dest]
		test	eax, eax
		jz	loc_8050048
		test	edi, edi
		jnz	loc_8050580

loc_804FFBF:				; CODE XREF: sub_804F350+1237j
		mov	edx, [ebp+dest]

loc_804FFC5:				; CODE XREF: sub_804F350+BFDj
					; sub_804F350+1265j
		mov	byte ptr [edx+edi], 25h
		mov	edi, ecx

loc_804FFCB:				; CODE XREF: sub_804F350+D4Dj
					; sub_804F350+1122j ...
		mov	ecx, [esi+4]
		add	esi, 2Ch
		add	[ebp+var_33C], 1
		mov	[ebp+dest], ecx
		jmp	loc_804F4A8
; ---------------------------------------------------------------------------
		align 8

loc_804FFE8:				; CODE XREF: sub_804F350+C31j
		mov	[esp], edx	; ptr
		mov	[ebp+src], edx
		mov	[ebp+var_364], ecx
		mov	[esp+4], ebx	; size
		call	_realloc
		mov	ecx, [ebp+var_364]
		mov	edx, [ebp+src]
		mov	[ebp+dest], eax
		jmp	short loc_804FFA9
; ---------------------------------------------------------------------------

loc_8050014:				; CODE XREF: sub_804F350+F9Ej
		cmp	dword ptr [ebp+size], 0FFFFFFFFh
		jz	short loc_8050048
		mov	eax, dword ptr [ebp+size]
		mov	[ebp+src], edx
		mov	[esp], eax	; size
		call	_malloc
		mov	edx, [ebp+src]
		test	eax, eax
		mov	[ebp+dest], eax
		jnz	loc_80502F4
		lea	esi, [esi+0]

loc_8050048:				; CODE XREF: sub_804F350+192j
					; sub_804F350+1E4j ...
		mov	edi, edx

loc_805004A:				; CODE XREF: sub_804F350+E5Aj
					; sub_804F350+1299j ...
		test	edi, edi
		jnz	loc_8050528

loc_8050052:				; CODE XREF: sub_804F350+11DEj
					; sub_804F350+11ECj
		mov	edx, [ebp+var_35C]
		test	edx, edx
		jz	loc_804F3D0
		mov	edx, [ebp+var_35C]
		mov	[esp], edx	; ptr
		call	_free
		jmp	loc_804F3D0
; ---------------------------------------------------------------------------
		align 8

loc_8050078:				; CODE XREF: sub_804F350+25Dj
		shl	ecx, 4
		add	ecx, [ebp+var_2E4]
		mov	eax, [ecx]
		sub	eax, 12h	; switch 5 cases
		cmp	eax, 4
		ja	loc_804F8F0	; jumptable 0804F956 case 0
		jmp	ds:off_805301C[eax*4] ;	switch jump
; ---------------------------------------------------------------------------
		align 4

loc_8050098:				; CODE XREF: sub_804F350+D3Fj
					; DATA XREF: .rodata:off_805301Co
		mov	eax, [ecx+4]	; jumptable 0805008F cases 20,21
		mov	[eax], edi
		jmp	loc_804FFCB
; ---------------------------------------------------------------------------
		align 8

loc_80500A8:				; CODE XREF: sub_804F350+736j
		mov	byte ptr [ebp+var_364],	cl
		mov	[esp+4], ebx	; size
		mov	[esp], esi	; ptr
		call	_realloc
		movzx	ecx, byte ptr [ebp+var_364]
		mov	edx, eax
		jmp	loc_804FAA3
; ---------------------------------------------------------------------------

loc_80500C8:				; CODE XREF: sub_804F350+710j
		jl	loc_80501A8
		add	ebx, ebx
		jmp	loc_804FA68
; ---------------------------------------------------------------------------
		align 4

loc_80500D8:				; CODE XREF: sub_804F350+1ECj
		cmp	byte ptr [ebp+var_330],	0
		nop
		jz	loc_804F542
		mov	[esp+4], edx	; src
		mov	edx, dword ptr [ebp+size]
		mov	[ebp+var_364], ecx
		mov	[esp+8], edi	; n
		mov	[esp], edx	; dest
		call	_memcpy
		mov	edx, dword ptr [ebp+size]
		mov	ecx, [ebp+var_364]
		jmp	loc_804F548
; ---------------------------------------------------------------------------
		align 8

loc_8050118:				; CODE XREF: sub_804F350+822j
		mov	eax, [ebp+var_330]
		test	eax, eax
		jns	loc_804F9FF
		test	ebx, ebx
		js	loc_8050738
		lea	eax, [ebx+ebx]
		add	eax, 0Ch
		jb	loc_8050738

loc_805013A:				; CODE XREF: sub_804F350+13EDj
		cmp	ebx, eax
		jnb	loc_804F8C5
		cmp	ebx, 0
		jnz	loc_8050A2D
		mov	bl, 0Ch

loc_805014D:				; CODE XREF: sub_804F350+16E5j
		cmp	ebx, eax
		nop
		jnb	loc_804FA6E
		mov	ebx, eax
		jmp	loc_804FA6E
; ---------------------------------------------------------------------------
		align 10h

loc_8050160:				; CODE XREF: sub_804F350+428j
		mov	eax, [ebp+dest]
		mov	byte ptr [eax],	4Ch
		add	eax, 1
		mov	[ebp+dest], eax
		jmp	loc_804F788
; ---------------------------------------------------------------------------
		align 4

loc_8050178:				; CODE XREF: sub_804F350+4DAj
		lea	eax, [ebx+ebx]
		sar	ebx, 1Fh
		or	ebx, eax
		jmp	loc_804F832
; ---------------------------------------------------------------------------
		align 4

loc_8050188:				; CODE XREF: sub_804F350+527j
		mov	[esp], edx	; ptr
		mov	[ebp+src], edx
		mov	[esp+4], ebx	; size
		call	_realloc
		mov	edx, [ebp+src]
		mov	ecx, eax
		jmp	loc_804F893
; ---------------------------------------------------------------------------
		align 4

loc_80501A8:				; CODE XREF: sub_804F350+721j
					; sub_804F350+755j ...
		mov	edi, esi
		jmp	loc_805004A
; ---------------------------------------------------------------------------
		align 10h

loc_80501B0:				; CODE XREF: sub_804F350+C02j
		jl	loc_8050048
		add	ebx, ebx
		jmp	loc_804FF5A
; ---------------------------------------------------------------------------
		align 10h

loc_80501C0:				; CODE XREF: sub_804F350+2E4j
		fld	tbyte ptr [ecx+4]
		mov	[ebp+src], edx
		fld	st
		fstp	tbyte ptr [esp]
		fstp	[ebp+var_378]
		call	sub_8051420
		mov	edx, [ebp+src]
		test	eax, eax
		fld	[ebp+var_378]
		jz	loc_8050478
		fstp	st

loc_80501EF:				; CODE XREF: sub_804F350+1135j
		mov	ecx, [esi+8]
		mov	eax, [esi+0Ch]
		mov	[ebp+n], 0
		mov	[ebp+var_340], 0
		mov	[ebp+var_34C], ecx
		mov	ecx, [esi+10h]
		cmp	eax, ecx
		mov	[ebp+dest], ecx
		jz	short loc_8050255
		mov	ecx, [esi+14h]
		cmp	ecx, 0FFFFFFFFh
		jz	loc_8050B26
		shl	ecx, 4
		add	ecx, [ebp+var_2E4]
		cmp	dword ptr [ecx], 5
		jnz	loc_804F8F0	; jumptable 0804F956 case 0
		mov	ecx, [ecx+4]
		mov	[ebp+var_340], 1
		test	ecx, ecx
		mov	[ebp+n], ecx
		js	loc_8050C5E

loc_8050255:				; CODE XREF: sub_804F350+ECAj
					; sub_804F350+183Bj ...
		mov	ecx, [esi+1Ch]
		mov	eax, [esi+18h]
		mov	[ebp+dest], ecx
		cmp	eax, ecx
		jz	loc_8050CA6
		mov	ecx, [esi+20h]
		cmp	ecx, 0FFFFFFFFh
		jz	loc_8050AAA
		shl	ecx, 4
		add	ecx, [ebp+var_2E4]
		cmp	dword ptr [ecx], 5
		jnz	loc_804F8F0	; jumptable 0804F956 case 0
		mov	ecx, [ecx+4]
		test	ecx, ecx
		mov	[ebp+var_38C], ecx
		js	loc_8050CA6

loc_8050298:				; CODE XREF: sub_804F350+17D1j
		mov	eax, [ebp+var_38C]
		mov	ecx, 0Ch
		test	eax, eax
		jnz	loc_8050A3A

loc_80502AB:				; CODE XREF: sub_804F350+16F3j
					; sub_804F350+1977j ...
		cmp	[ebp+n], ecx
		jbe	loc_8051125
		mov	ecx, [ebp+n]
		add	ecx, 1
		mov	dword ptr [ebp+size], ecx
		mov	ecx, [ebp+n]

loc_80502CC:				; CODE XREF: sub_804F350+1708j
					; sub_804F350+1DE0j
		cmp	ecx, dword ptr [ebp+size]
		ja	loc_8050048
		cmp	dword ptr [ebp+size], 2BCh
		lea	ecx, [ebp+var_2D8]
		mov	[ebp+dest], ecx
		ja	loc_8050014

loc_80502F4:				; CODE XREF: sub_804F350+CEFj
		mov	ecx, [esi+28h]
		mov	eax, [ebp+var_2E4]
		shl	ecx, 4
		fld	tbyte ptr [ecx+eax+4]
		mov	[ebp+src], edx
		fld	st
		fstp	tbyte ptr [esp]
		fstp	[ebp+var_378]
		call	sub_8051420
		mov	edx, [ebp+src]
		test	eax, eax
		fld	[ebp+var_378]
		jz	loc_80507F8
		fstp	st
		movzx	eax, byte ptr [esi+24h]
		sub	eax, 41h
		cmp	al, 19h
		ja	loc_8050A81
		mov	ecx, [ebp+dest]
		mov	byte ptr [ecx],	4Eh
		mov	byte ptr [ecx+1], 41h
		mov	byte ptr [ecx+2], 4Eh
		add	ecx, 3
		mov	[ebp+var_338], ecx
		mov	[ebp+var_330], 0

loc_8050363:				; CODE XREF: sub_804F350+1564j
					; sub_804F350+1755j
		mov	eax, [ebp+var_340]
		test	eax, eax
		jnz	loc_8050760
		mov	ecx, [ebp+var_338]
		sub	ecx, [ebp+dest]

loc_805037D:				; CODE XREF: sub_804F350+1422j
					; sub_804F350+149Dj ...
		cmp	dword ptr [ebp+size], ecx
		jbe	loc_804F8F0	; jumptable 0804F956 case 0
		mov	eax, ebx
		sub	eax, edi
		cmp	eax, ecx
		ja	loc_8050A1F
		mov	eax, ecx
		add	eax, edi
		mov	[ebp+n], eax
		sbb	eax, eax
		or	eax, [ebp+n]
		cmp	ebx, eax
		jnb	short loc_8050425
		cmp	ebx, 0
		jnz	loc_8050C51
		mov	bl, 0Ch

loc_80503B6:				; CODE XREF: sub_804F350+1909j
		cmp	ebx, eax
		jnb	short loc_80503BC
		mov	ebx, eax

loc_80503BC:				; CODE XREF: sub_804F350+1068j
		cmp	ebx, 0FFFFFFFFh
		jz	loc_8050048
		cmp	edx, [ebp+var_334]
		setz	byte ptr [ebp+var_330]
		test	edx, edx
		jz	short loc_80503E3
		cmp	byte ptr [ebp+var_330],	0
		jz	loc_8050C22

loc_80503E3:				; CODE XREF: sub_804F350+1084j
		mov	[ebp+src], edx
		mov	[ebp+var_364], ecx
		mov	[esp], ebx	; size
		call	_malloc
		mov	edx, [ebp+src]
		mov	ecx, [ebp+var_364]
		mov	dword ptr [ebp+size], eax

loc_8050409:				; CODE XREF: sub_804F350+18FCj
		mov	eax, dword ptr [ebp+size]
		test	eax, eax
		jz	loc_8050048
		test	edi, edi
		jnz	loc_8050DC2

loc_805041F:				; CODE XREF: sub_804F350+1A79j
		mov	edx, dword ptr [ebp+size]

loc_8050425:				; CODE XREF: sub_804F350+1059j
					; sub_804F350+16D8j ...
		mov	[esp+8], ecx	; n
		mov	ecx, [ebp+dest]
		lea	edi, [edx+edi]
		mov	[ebp+src], edx
		mov	[esp], edi	; dest
		mov	[esp+4], ecx	; src
		call	_memcpy
		mov	eax, [ebp+var_37C]
		cmp	[ebp+dest], eax
		mov	edx, [ebp+src]
		jz	short loc_805046C
		mov	ecx, [ebp+dest]
		mov	[esp], ecx	; ptr
		call	_free
		mov	edx, [ebp+src]

loc_805046C:				; CODE XREF: sub_804F350+1106j
		mov	edi, [ebp+n]
		jmp	loc_804FFCB
; ---------------------------------------------------------------------------
		align 4

loc_8050478:				; CODE XREF: sub_804F350+E97j
		fld	st
		fadd	st, st(1)
		fxch	st(1)
		fucompp
		fnstsw	ax
		sahf
		jp	short loc_805048B
		jz	loc_80501EF

loc_805048B:				; CODE XREF: sub_804F350+1133j
		mov	eax, [esi+28h]
		mov	ecx, [ebp+var_2E4]
		shl	eax, 4
		mov	eax, [eax+ecx]
		mov	[ebp+n], eax
		jmp	loc_804F63A
; ---------------------------------------------------------------------------
		align 4

loc_80504A8:				; CODE XREF: sub_804F350+A4Bj
		mov	eax, [ebp+var_32C]
		lea	edx, [ebp+var_2E0]
		mov	[esp+1Ch], edx
		fstp	qword ptr [esp+14h]
		mov	[esp+10h], eax
		jmp	loc_804FB2A
; ---------------------------------------------------------------------------
		align 4

loc_80504C8:				; CODE XREF: sub_804F350+AE9j
		lea	eax, [ebp+var_2E0]
		mov	[esp+20h], eax
		mov	eax, [ebp+var_32C]
		fld	[ebp+size]
		mov	[esp+10h], eax
		fstp	tbyte ptr [esp+14h]
		jmp	loc_804FC19
; ---------------------------------------------------------------------------
		align 10h

loc_80504F0:				; CODE XREF: sub_804F350+D3Fj
					; DATA XREF: .rodata:off_805301Co
		mov	eax, [ecx+4]	; jumptable 0805008F case 18
		mov	ecx, edi
		mov	[eax], cl
		jmp	loc_804FFCB
; ---------------------------------------------------------------------------
		align 10h

loc_8050500:				; CODE XREF: sub_804F350+D3Fj
					; DATA XREF: .rodata:off_805301Co
		mov	eax, [ecx+4]	; jumptable 0805008F case 22
		mov	[eax], edi
		mov	dword ptr [eax+4], 0
		jmp	loc_804FFCB
; ---------------------------------------------------------------------------
		align 8

loc_8050518:				; CODE XREF: sub_804F350+D3Fj
					; DATA XREF: .rodata:off_805301Co
		mov	eax, [ecx+4]	; jumptable 0805008F case 19
		mov	[eax], di
		jmp	loc_804FFCB
; ---------------------------------------------------------------------------
		align 8

loc_8050528:				; CODE XREF: sub_804F350+CFCj
		cmp	edi, [ebp+var_334]
		jz	loc_8050052
		mov	[esp], edi	; ptr
		call	_free
		jmp	loc_8050052
; ---------------------------------------------------------------------------
		align 8

loc_8050548:				; CODE XREF: sub_804F350+990j
					; sub_804F350+9EEj
		lea	eax, [ebp+var_2E0]
		mov	edx, dword ptr [ebp+size+4]
		mov	[esp+20h], eax
		mov	eax, dword ptr [ebp+size]
		mov	[esp+1Ch], edx
		mov	edx, [ebp+var_34C]
		mov	[esp+18h], eax
		mov	eax, [ebp+var_32C]
		mov	[esp+14h], edx
		mov	[esp+10h], eax
		jmp	loc_804FC19
; ---------------------------------------------------------------------------
		align 10h

loc_8050580:				; CODE XREF: sub_804F350+C69j
		cmp	byte ptr [ebp+n], 0
		jz	loc_804FFBF
		mov	eax, [ebp+dest]
		mov	[esp+4], edx	; src
		mov	[ebp+var_364], ecx
		mov	[esp+8], edi	; n
		mov	[esp], eax	; dest
		call	_memcpy
		mov	edx, [ebp+dest]
		mov	ecx, [ebp+var_364]
		jmp	loc_804FFC5
; ---------------------------------------------------------------------------
		align 10h

loc_80505C0:				; CODE XREF: sub_804F350+23Dj
		mov	eax, edx
		mov	edx, edi
		mov	esi, edx
		mov	edi, eax
		add	esi, 1
		sbb	eax, eax
		or	eax, esi
		cmp	eax, ebx
		jbe	short loc_805063C
		test	ebx, ebx
		jnz	loc_8050C72
		mov	bl, 0Ch

loc_80505DD:				; CODE XREF: sub_804F350+192Aj
		cmp	esi, edx
		sbb	eax, eax
		or	eax, esi
		cmp	ebx, eax
		jnb	short loc_80505F1
		cmp	edx, esi
		ja	loc_805004A
		mov	ebx, esi

loc_80505F1:				; CODE XREF: sub_804F350+1295j
		cmp	ebx, 0FFFFFFFFh
		jz	loc_805004A
		cmp	edi, [ebp+var_334]
		setz	byte ptr [ebp+dest]
		test	edi, edi
		jz	short loc_8050618
		cmp	byte ptr [ebp+dest], 0
		jz	loc_8050CD0

loc_8050618:				; CODE XREF: sub_804F350+12B9j
		mov	[ebp+src], edx
		mov	[esp], ebx	; size
		call	_malloc
		mov	edx, [ebp+src]
		mov	ecx, eax

loc_805062E:				; CODE XREF: sub_804F350+199Aj
		test	ecx, ecx
		jz	loc_805004A
		test	edx, edx
		jnz	short loc_80506B3

loc_805063A:				; CODE XREF: sub_804F350+136Aj
		mov	edi, ecx

loc_805063C:				; CODE XREF: sub_804F350+1281j
					; sub_804F350+139Aj
		mov	byte ptr [edi+edx], 0
		cmp	edi, [ebp+var_334]
		jz	short loc_8050650
		cmp	ebx, esi
		ja	loc_8050C7F

loc_8050650:				; CODE XREF: sub_804F350+12F6j
					; sub_804F350+1949j ...
		mov	ebx, [ebp+var_35C]
		test	ebx, ebx
		jz	short loc_8050674
		mov	eax, [ebp+var_35C]
		mov	[ebp+src], edx
		mov	[esp], eax	; ptr
		call	_free
		mov	edx, [ebp+src]

loc_8050674:				; CODE XREF: sub_804F350+1308j
		mov	eax, [ebp+ptr]
		mov	[ebp+src], edx
		mov	[esp], eax	; ptr
		call	_free
		mov	eax, [ebp+var_2E4]
		mov	edx, [ebp+src]
		test	eax, eax
		jz	short loc_80506A6
		mov	[esp], eax	; ptr
		call	_free
		mov	edx, [ebp+src]

loc_80506A6:				; CODE XREF: sub_804F350+1346j
		mov	ecx, [ebp+var_344]
		mov	[ecx], edx
		jmp	loc_804F3FD
; ---------------------------------------------------------------------------

loc_80506B3:				; CODE XREF: sub_804F350+12E8j
		cmp	byte ptr [ebp+dest], 0
		jz	loc_805063A
		mov	[esp+8], edx	; n
		mov	[esp+4], edi	; src
		mov	[esp], ecx	; dest
		mov	[ebp+src], edx
		mov	[ebp+var_364], ecx
		call	_memcpy
		mov	ecx, [ebp+var_364]
		mov	edx, [ebp+src]
		mov	edi, ecx
		jmp	loc_805063C
; ---------------------------------------------------------------------------
		align 10h

loc_80506F0:				; CODE XREF: sub_804F350+AE3j
		fld	[ebp+size]
		lea	edx, [ebp+var_2E0]
		mov	[esp+24h], edx
		fstp	tbyte ptr [esp+18h]
		jmp	loc_804FDC6
; ---------------------------------------------------------------------------
		align 10h

loc_8050710:				; CODE XREF: sub_804F350+A45j
		lea	edx, [ebp+var_2E0]
		mov	eax, [ebp+var_34C]
		mov	[esp+20h], edx
		mov	edx, [ebp+var_32C]
		fstp	qword ptr [esp+18h]
		mov	[esp+14h], eax
		mov	[esp+10h], edx
		jmp	loc_804FC19
; ---------------------------------------------------------------------------
		align 4

loc_8050738:				; CODE XREF: sub_804F350+DD8j
					; sub_804F350+DE4j
		mov	eax, 0FFFFFFFFh
		jmp	loc_805013A
; ---------------------------------------------------------------------------
		align 8

loc_8050748:				; CODE XREF: sub_804F350+6CCj
		mov	edx, esi
		mov	esi, [ebp+var_340]
		add	edi, dword ptr [ebp+size]
		jmp	loc_804FFCB
; ---------------------------------------------------------------------------
		align 10h

loc_8050760:				; CODE XREF: sub_804F350+101Bj
		mov	ecx, [ebp+var_338]
		sub	ecx, [ebp+dest]
		cmp	[ebp+n], ecx
		jbe	loc_805037D
		mov	eax, [ebp+dest]
		mov	ecx, [ebp+var_338]
		sub	eax, [ebp+var_338]
		add	eax, [ebp+n]
		add	ecx, eax
		test	byte ptr [ebp+var_34C],	2
		mov	[ebp+n], eax
		mov	[ebp+var_340], ecx
		jz	loc_8050D08
		xor	eax, eax
		cmp	[ebp+n], 0
		jz	loc_8050DB7
		mov	[ebp+var_330], edi
		mov	ecx, [ebp+var_338]
		mov	edi, [ebp+n]
		lea	esi, [esi+0]

loc_80507D0:				; CODE XREF: sub_804F350+1489j
		mov	byte ptr [ecx+eax], 20h
		add	eax, 1
		cmp	eax, edi
		jnz	short loc_80507D0
		mov	ecx, [ebp+var_340]
		mov	edi, [ebp+var_330]
		sub	ecx, [ebp+dest]
		jmp	loc_805037D
; ---------------------------------------------------------------------------
		align 8

loc_80507F8:				; CODE XREF: sub_804F350+FD8j
		fnstcw	[ebp+var_2DA]
		movzx	ecx, [ebp+var_2DA]
		mov	eax, ecx
		or	ah, 3
		mov	word ptr [ebp+var_350],	cx
		mov	[ebp+var_2DA], ax
		fldcw	[ebp+var_2DA]
		fxam
		fnstsw	ax
		test	ah, 2
		jz	loc_8050A5D
		mov	eax, [ebp+dest]
		fchs
		mov	byte ptr [eax],	2Dh
		add	eax, 1
		mov	[ebp+var_330], eax

loc_805083F:				; CODE XREF: sub_804F350+172Cj
					; sub_804F350+18B9j ...
		fldz
		fxch	st(1)
		fucom	st(1)
		fnstsw	ax
		fstp	st(1)
		sahf
		jbe	loc_8050912
		fld	st
		fadd	st, st(1)
		fucomp	st(1)
		fnstsw	ax
		sahf
		jnz	loc_8050912
		jp	loc_8050912
		fstp	st
		movzx	eax, byte ptr [esi+24h]
		sub	eax, 41h
		cmp	al, 19h
		ja	loc_8050ECA
		mov	ecx, [ebp+var_330]
		mov	byte ptr [ecx],	49h
		mov	byte ptr [ecx+1], 4Eh
		mov	byte ptr [ecx+2], 46h
		add	ecx, 3
		mov	[ebp+var_338], ecx
		mov	[ebp+var_330], 0
		lea	esi, [esi+0]

loc_80508A0:				; CODE XREF: sub_804F350+1611j
					; sub_804F350+1662j ...
		movzx	ecx, word ptr [ebp+var_350]
		mov	[ebp+var_2DA], cx
		fldcw	[ebp+var_2DA]
		jmp	loc_8050363
; ---------------------------------------------------------------------------
		align 10h

loc_80508C0:				; CODE XREF: sub_804F350+6D8j
		test	esi, esi
		jnz	loc_8050CEF

loc_80508C8:				; CODE XREF: sub_804F350+19A5j
					; sub_804F350+19B3j
		mov	ecx, [ebp+var_35C]
		test	ecx, ecx
		jz	short loc_80508E0
		mov	eax, [ebp+var_35C]
		mov	[esp], eax	; ptr
		call	_free

loc_80508E0:				; CODE XREF: sub_804F350+1580j
		mov	eax, [ebp+ptr]
		mov	[esp], eax	; ptr
		call	_free
		mov	eax, [ebp+var_2E4]
		test	eax, eax
		jz	short loc_8050900
		mov	[esp], eax	; ptr
		call	_free

loc_8050900:				; CODE XREF: sub_804F350+15A6j
		call	___errno_location
		xor	edi, edi
		mov	dword ptr [eax], 4Bh
		jmp	loc_804F3FD
; ---------------------------------------------------------------------------

loc_8050912:				; CODE XREF: sub_804F350+14FAj
					; sub_804F350+1509j ...
		fldz
		fxch	st(1)
		fucompp
		fnstsw	ax
		sahf
		jp	loc_804F8F0	; jumptable 0804F956 case 0
		jnz	loc_804F8F0	; jumptable 0804F956 case 0
		movzx	eax, byte ptr [esi+24h]
		cmp	al, 46h
		jz	short loc_8050937
		cmp	al, 66h
		jnz	loc_8050B90

loc_8050937:				; CODE XREF: sub_804F350+15DDj
		mov	ecx, [ebp+var_330]
		mov	byte ptr [ecx],	30h
		add	ecx, 1
		mov	[ebp+var_338], ecx
		mov	ecx, [ebp+var_38C]
		test	ecx, ecx
		setnz	byte ptr [ebp+var_354]
		jnz	short loc_8050967
		test	byte ptr [ebp+var_34C],	10h
		jz	loc_80508A0

loc_8050967:				; CODE XREF: sub_804F350+1608j
		mov	[ebp+src], edx
		mov	dword ptr [esp], 10000h	; item
		call	_nl_langinfo
		mov	edx, [ebp+src]
		movzx	eax, byte ptr [eax]
		test	al, al
		mov	byte ptr [ebp+var_360],	al
		jnz	short loc_8050993
		mov	byte ptr [ebp+var_360],	2Eh

loc_8050993:				; CODE XREF: sub_804F350+163Aj
		mov	ecx, [ebp+var_338]
		movzx	eax, byte ptr [ebp+var_360]
		mov	[ecx], al
		add	ecx, 1
		cmp	byte ptr [ebp+var_354],	0
		mov	[ebp+var_338], ecx
		jz	loc_80508A0
		mov	[ebp+var_354], edi
		mov	ecx, [ebp+var_38C]
		xor	eax, eax
		mov	edi, [ebp+var_330]
		lea	esi, [esi+0]

loc_80509D0:				; CODE XREF: sub_804F350+168Aj
		mov	byte ptr [edi+eax+2], 30h
		add	eax, 1
		cmp	eax, ecx
		jnz	short loc_80509D0
		mov	edi, [ebp+var_354]
		add	[ebp+var_338], eax
		jmp	loc_80508A0
; ---------------------------------------------------------------------------

loc_80509ED:				; CODE XREF: sub_804F350+65j
		mov	eax, [ebp+ptr]
		mov	[esp], eax	; ptr
		call	_free
		mov	eax, [ebp+var_2E4]
		test	eax, eax
		jz	short loc_8050A0D
		mov	[esp], eax	; ptr
		call	_free

loc_8050A0D:				; CODE XREF: sub_804F350+16B3j
		call	___errno_location
		xor	edi, edi
		mov	dword ptr [eax], 16h
		jmp	loc_804F3FD
; ---------------------------------------------------------------------------

loc_8050A1F:				; CODE XREF: sub_804F350+103Fj
		lea	eax, [ecx+edi]
		mov	[ebp+n], eax
		jmp	loc_8050425
; ---------------------------------------------------------------------------

loc_8050A2D:				; CODE XREF: sub_804F350+DF5j
		jl	loc_80501A8
		add	ebx, ebx
		jmp	loc_805014D
; ---------------------------------------------------------------------------

loc_8050A3A:				; CODE XREF: sub_804F350+F55j
		mov	ecx, [ebp+var_38C]
		add	ecx, 0Ch
		jnb	loc_80502AB
		mov	dword ptr [ebp+size], 0
		mov	ecx, 0FFFFFFFFh
		jmp	loc_80502CC
; ---------------------------------------------------------------------------

loc_8050A5D:				; CODE XREF: sub_804F350+14D5j
		test	byte ptr [ebp+var_34C],	4
		jz	loc_8050BF6
		mov	ecx, [ebp+dest]
		mov	byte ptr [ecx],	2Bh
		add	ecx, 1
		mov	[ebp+var_330], ecx
		jmp	loc_805083F
; ---------------------------------------------------------------------------

loc_8050A81:				; CODE XREF: sub_804F350+FE9j
		mov	eax, [ebp+dest]
		mov	byte ptr [eax],	6Eh
		mov	byte ptr [eax+1], 61h
		mov	byte ptr [eax+2], 6Eh
		add	eax, 3
		mov	[ebp+var_338], eax
		mov	[ebp+var_330], 0
		jmp	loc_8050363
; ---------------------------------------------------------------------------

loc_8050AAA:				; CODE XREF: sub_804F350+F1Fj
		add	eax, 1
		cmp	[ebp+dest], eax
		jz	loc_8050CB8
		mov	dword ptr [ebp+size], edi
		mov	edi, [ebp+dest]
		xor	ecx, ecx
		mov	[ebp+var_38C], 0
		mov	[ebp+var_330], ebx
		mov	[ebp+var_338], edx
		lea	esi, [esi+0]

loc_8050AE0:				; CODE XREF: sub_804F350+17B7j
		movzx	ebx, byte ptr [eax]
		add	eax, 1
		cmp	ecx, 19999999h
		mov	edx, 0FFFFFFFFh
		ja	short loc_8050AF8
		lea	edx, [ecx+ecx*4]
		add	edx, edx

loc_8050AF8:				; CODE XREF: sub_804F350+17A1j
		movsx	ebx, bl
		lea	ecx, [edx+ebx-30h]
		cmp	ecx, edx
		sbb	edx, edx
		or	ecx, edx
		cmp	eax, edi
		jnz	short loc_8050AE0
		mov	[ebp+var_38C], ecx
		mov	edi, dword ptr [ebp+size]
		mov	ebx, [ebp+var_330]
		mov	edx, [ebp+var_338]
		jmp	loc_8050298
; ---------------------------------------------------------------------------

loc_8050B26:				; CODE XREF: sub_804F350+ED2j
		mov	dword ptr [ebp+size], edi
		xor	ecx, ecx
		mov	edi, edx
		mov	[ebp+n], 0
		mov	[ebp+var_330], ebx

loc_8050B40:				; CODE XREF: sub_804F350+181Bj
		movzx	edx, byte ptr [eax]
		add	eax, 1
		cmp	ecx, 19999999h
		mov	ebx, 0FFFFFFFFh
		ja	short loc_8050B58
		lea	ebx, [ecx+ecx*4]
		add	ebx, ebx

loc_8050B58:				; CODE XREF: sub_804F350+1801j
		movsx	edx, dl
		lea	ecx, [ebx+edx-30h]
		cmp	ecx, ebx
		sbb	edx, edx
		or	ecx, edx
		cmp	[ebp+dest], eax
		jnz	short loc_8050B40
		mov	edx, edi
		mov	ebx, [ebp+var_330]
		mov	[ebp+n], ecx
		mov	edi, dword ptr [ebp+size]
		mov	[ebp+var_340], 1
		jmp	loc_8050255
; ---------------------------------------------------------------------------

loc_8050B90:				; CODE XREF: sub_804F350+15E1j
		cmp	al, 45h
		jz	short loc_8050B9C
		cmp	al, 65h
		jnz	loc_8050DFC

loc_8050B9C:				; CODE XREF: sub_804F350+1842j
		mov	eax, [ebp+var_330]
		mov	byte ptr [eax],	30h
		add	eax, 1
		mov	[ebp+var_338], eax
		mov	eax, [ebp+var_38C]
		test	eax, eax
		setnz	byte ptr [ebp+var_354]
		jnz	loc_805100A
		test	byte ptr [ebp+var_34C],	10h
		jnz	loc_805100A

loc_8050BD0:				; CODE XREF: sub_804F350+1D05j
					; sub_804F350+1D37j
		mov	ecx, [ebp+var_338]
		movzx	eax, byte ptr [esi+24h]
		mov	byte ptr [ecx+1], 2Bh
		mov	[ecx], al
		mov	byte ptr [ecx+2], 30h
		mov	byte ptr [ecx+3], 30h
		add	ecx, 4
		mov	[ebp+var_338], ecx
		jmp	loc_80508A0
; ---------------------------------------------------------------------------

loc_8050BF6:				; CODE XREF: sub_804F350+1714j
		mov	eax, [ebp+dest]
		test	byte ptr [ebp+var_34C],	8
		mov	[ebp+var_330], eax
		jz	loc_805083F
		mov	ecx, eax
		add	ecx, 1
		mov	byte ptr [eax],	20h
		mov	[ebp+var_330], ecx
		jmp	loc_805083F
; ---------------------------------------------------------------------------

loc_8050C22:				; CODE XREF: sub_804F350+108Dj
		mov	[esp], edx	; ptr
		mov	[ebp+src], edx
		mov	[ebp+var_364], ecx
		mov	[esp+4], ebx	; size
		call	_realloc
		mov	ecx, [ebp+var_364]
		mov	edx, [ebp+src]
		mov	dword ptr [ebp+size], eax
		jmp	loc_8050409
; ---------------------------------------------------------------------------

loc_8050C51:				; CODE XREF: sub_804F350+105Ej
		jl	loc_8050048
		add	ebx, ebx
		jmp	loc_80503B6
; ---------------------------------------------------------------------------

loc_8050C5E:				; CODE XREF: sub_804F350+EFFj
		neg	ecx
		or	[ebp+var_34C], 2
		mov	[ebp+n], ecx
		jmp	loc_8050255
; ---------------------------------------------------------------------------

loc_8050C72:				; CODE XREF: sub_804F350+1285j
		lea	eax, [ebx+ebx]
		sar	ebx, 1Fh
		or	ebx, eax
		jmp	loc_80505DD
; ---------------------------------------------------------------------------

loc_8050C7F:				; CODE XREF: sub_804F350+12FAj
		mov	[ebp+src], edx
		mov	[esp+4], esi	; size
		mov	[esp], edi	; ptr
		call	_realloc
		mov	edx, [ebp+src]
		test	eax, eax
		jz	loc_8050650
		mov	edi, eax
		jmp	loc_8050650
; ---------------------------------------------------------------------------

loc_8050CA6:				; CODE XREF: sub_804F350+F13j
					; sub_804F350+F42j
		movzx	eax, byte ptr [esi+24h]
		cmp	al, 41h
		mov	byte ptr [ebp+dest], al
		jnz	loc_8050EAE

loc_8050CB8:				; CODE XREF: sub_804F350+1763j
					; sub_804F350+1B75j
		mov	[ebp+var_38C], 0
		mov	ecx, 0Ch
		jmp	loc_80502AB
; ---------------------------------------------------------------------------
		align 10h

loc_8050CD0:				; CODE XREF: sub_804F350+12C2j
		mov	[ebp+src], edx
		mov	[esp+4], ebx	; size
		mov	[esp], edi	; ptr
		call	_realloc
		mov	edx, [ebp+src]
		mov	ecx, eax
		jmp	loc_805062E
; ---------------------------------------------------------------------------

loc_8050CEF:				; CODE XREF: sub_804F350+1572j
		cmp	esi, [ebp+var_334]
		jz	loc_80508C8
		mov	[esp], esi	; ptr
		call	_free
		jmp	loc_80508C8
; ---------------------------------------------------------------------------

loc_8050D08:				; CODE XREF: sub_804F350+1455j
		mov	eax, [ebp+var_330]
		test	eax, eax
		jz	short loc_8050D1F
		test	byte ptr [ebp+var_34C],	20h
		jnz	loc_8050EF3

loc_8050D1F:				; CODE XREF: sub_804F350+19C0j
		mov	eax, [ebp+var_340]
		mov	ecx, [ebp+dest]
		mov	[ebp+var_330], eax
		mov	eax, [ebp+var_338]
		cmp	eax, ecx
		jbe	short loc_8050D7F
		mov	ecx, [ebp+var_330]
		mov	[ebp+var_330], edi
		mov	edi, [ebp+dest]
		mov	[ebp+var_338], ebx
		nop
		lea	esi, [esi+0]

loc_8050D58:				; CODE XREF: sub_804F350+1A15j
		sub	eax, 1
		sub	ecx, 1
		movzx	ebx, byte ptr [eax]
		cmp	edi, eax
		mov	[ecx], bl
		jb	short loc_8050D58
		mov	eax, [ebp+dest]
		mov	edi, [ebp+var_330]
		mov	ebx, [ebp+var_338]
		mov	[ebp+var_338], eax

loc_8050D7F:				; CODE XREF: sub_804F350+19E9j
		mov	ecx, [ebp+n]
		xor	eax, eax
		test	ecx, ecx
		jz	short loc_8050DB1
		mov	[ebp+var_330], edi
		mov	ecx, [ebp+var_338]
		mov	edi, [ebp+n]
		lea	esi, [esi+0]

loc_8050DA0:				; CODE XREF: sub_804F350+1A59j
		mov	byte ptr [ecx+eax], 20h
		add	eax, 1
		cmp	edi, eax
		jnz	short loc_8050DA0

loc_8050DAB:				; CODE XREF: sub_804F350+1C2Bj
		mov	edi, [ebp+var_330]

loc_8050DB1:				; CODE XREF: sub_804F350+1A39j
					; sub_804F350+1C01j
		mov	ecx, [ebp+var_340]

loc_8050DB7:				; CODE XREF: sub_804F350+1464j
		sub	ecx, [ebp+dest]
		jmp	loc_805037D
; ---------------------------------------------------------------------------

loc_8050DC2:				; CODE XREF: sub_804F350+10C9j
		cmp	byte ptr [ebp+var_330],	0
		jz	loc_805041F
		mov	[esp+4], edx	; src
		mov	edx, dword ptr [ebp+size]
		mov	[ebp+var_364], ecx
		mov	[esp+8], edi	; n
		mov	[esp], edx	; dest
		call	_memcpy
		mov	edx, dword ptr [ebp+size]
		mov	ecx, [ebp+var_364]
		jmp	loc_8050425
; ---------------------------------------------------------------------------

loc_8050DFC:				; CODE XREF: sub_804F350+1846j
		cmp	al, 47h
		jz	short loc_8050E08
		cmp	al, 67h
		jnz	loc_8050F80

loc_8050E08:				; CODE XREF: sub_804F350+1AAEj
		mov	eax, [ebp+var_330]
		mov	byte ptr [eax],	30h
		add	eax, 1
		test	byte ptr [ebp+var_34C],	10h
		mov	[ebp+var_338], eax
		jz	loc_80508A0
		mov	ecx, [ebp+var_38C]
		mov	[ebp+src], edx
		mov	dword ptr [esp], 10000h	; item
		sub	ecx, 1
		cmp	[ebp+var_38C], 1
		sbb	eax, eax
		not	eax
		and	ecx, eax
		mov	[ebp+var_354], ecx
		call	_nl_langinfo
		mov	edx, [ebp+src]
		movzx	eax, byte ptr [eax]
		test	al, al
		jnz	short loc_8050E67
		mov	eax, 2Eh

loc_8050E67:				; CODE XREF: sub_804F350+1B10j
		mov	ecx, [ebp+var_338]
		mov	[ecx], al
		add	ecx, 1
		cmp	[ebp+var_354], 0
		mov	[ebp+var_338], ecx
		jz	loc_80508A0
		mov	ecx, [ebp+var_330]
		xor	eax, eax

loc_8050E8D:				; CODE XREF: sub_804F350+1B4Bj
		mov	byte ptr [ecx+eax+2], 30h
		add	eax, 1
		cmp	[ebp+var_354], eax
		jnz	short loc_8050E8D
		mov	eax, [ebp+var_354]
		add	[ebp+var_338], eax
		jmp	loc_80508A0
; ---------------------------------------------------------------------------

loc_8050EAE:				; CODE XREF: sub_804F350+1962j
		cmp	al, 61h
		mov	ecx, 12h
		mov	[ebp+var_38C], 6
		jnz	loc_80502AB
		jmp	loc_8050CB8
; ---------------------------------------------------------------------------

loc_8050ECA:				; CODE XREF: sub_804F350+1520j
		mov	eax, [ebp+var_330]
		mov	byte ptr [eax],	69h
		mov	byte ptr [eax+1], 6Eh
		mov	byte ptr [eax+2], 66h
		add	eax, 3
		mov	[ebp+var_338], eax
		mov	[ebp+var_330], 0
		jmp	loc_80508A0
; ---------------------------------------------------------------------------

loc_8050EF3:				; CODE XREF: sub_804F350+19C9j
		mov	eax, [ebp+var_330]
		cmp	[ebp+var_338], eax
		jbe	short loc_8050F47
		mov	eax, [ebp+var_338]
		mov	ecx, [ebp+var_340]
		mov	[ebp+var_338], edi
		mov	edi, [ebp+var_330]
		mov	[ebp+var_34C], ebx
		nop

loc_8050F20:				; CODE XREF: sub_804F350+1BDDj
		sub	eax, 1
		sub	ecx, 1
		movzx	ebx, byte ptr [eax]
		cmp	edi, eax
		mov	[ecx], bl
		jb	short loc_8050F20
		mov	ecx, [ebp+var_330]
		mov	ebx, [ebp+var_34C]
		mov	edi, [ebp+var_338]
		mov	[ebp+var_338], ecx

loc_8050F47:				; CODE XREF: sub_804F350+1BAFj
		mov	ecx, [ebp+n]
		xor	eax, eax
		test	ecx, ecx
		jz	loc_8050DB1
		mov	[ebp+var_330], edi
		mov	ecx, [ebp+var_338]
		mov	edi, [ebp+n]
		lea	esi, [esi+0]

loc_8050F70:				; CODE XREF: sub_804F350+1C29j
		mov	byte ptr [ecx+eax], 30h
		add	eax, 1
		cmp	edi, eax
		jnz	short loc_8050F70
		jmp	loc_8050DAB
; ---------------------------------------------------------------------------

loc_8050F80:				; CODE XREF: sub_804F350+1AB2j
		cmp	al, 41h
		jnz	loc_8051113

loc_8050F88:				; CODE XREF: sub_804F350+1DC5j
		mov	ecx, [ebp+var_330]
		mov	byte ptr [ecx],	30h
		movzx	eax, byte ptr [esi+24h]
		add	eax, 17h
		mov	[ecx+1], al
		mov	eax, [ebp+var_330]
		add	ecx, 2
		mov	[ebp+var_360], ecx
		mov	byte ptr [eax+2], 30h
		mov	ecx, [ebp+var_38C]
		add	eax, 3
		mov	[ebp+var_338], eax
		test	ecx, ecx
		setnz	byte ptr [ebp+var_354]
		jnz	loc_805108C
		test	byte ptr [ebp+var_34C],	10h
		jnz	loc_805108C

loc_8050FD9:				; CODE XREF: sub_804F350+1D87j
					; sub_804F350+1DB9j
		movzx	eax, byte ptr [esi+24h]
		mov	ecx, [ebp+var_338]
		add	eax, 0Fh
		mov	[ecx], al
		mov	byte ptr [ecx+1], 2Bh
		mov	byte ptr [ecx+2], 30h
		mov	eax, [ebp+var_360]
		add	ecx, 3
		mov	[ebp+var_338], ecx
		mov	[ebp+var_330], eax
		jmp	loc_80508A0
; ---------------------------------------------------------------------------

loc_805100A:				; CODE XREF: sub_804F350+186Dj
					; sub_804F350+187Aj
		mov	[ebp+src], edx
		mov	dword ptr [esp], 10000h	; item
		call	_nl_langinfo
		mov	edx, [ebp+src]
		movzx	eax, byte ptr [eax]
		test	al, al
		mov	byte ptr [ebp+var_360],	al
		jnz	short loc_8051036
		mov	byte ptr [ebp+var_360],	2Eh

loc_8051036:				; CODE XREF: sub_804F350+1CDDj
		mov	eax, [ebp+var_338]
		movzx	ecx, byte ptr [ebp+var_360]
		mov	[eax], cl
		add	eax, 1
		cmp	byte ptr [ebp+var_354],	0
		mov	[ebp+var_338], eax
		jz	loc_8050BD0
		mov	[ebp+var_354], edi
		mov	ecx, [ebp+var_38C]
		xor	eax, eax
		mov	edi, [ebp+var_330]

loc_805106F:				; CODE XREF: sub_804F350+1D29j
		mov	byte ptr [edi+eax+2], 30h
		add	eax, 1
		cmp	ecx, eax
		jnz	short loc_805106F
		mov	edi, [ebp+var_354]
		add	[ebp+var_338], ecx
		jmp	loc_8050BD0
; ---------------------------------------------------------------------------

loc_805108C:				; CODE XREF: sub_804F350+1C76j
					; sub_804F350+1C83j
		mov	[ebp+src], edx
		mov	dword ptr [esp], 10000h	; item
		call	_nl_langinfo
		mov	edx, [ebp+src]
		movzx	eax, byte ptr [eax]
		test	al, al
		mov	[ebp+var_37D], al
		jnz	short loc_80510B8
		mov	[ebp+var_37D], 2Eh

loc_80510B8:				; CODE XREF: sub_804F350+1D5Fj
		mov	eax, [ebp+var_338]
		movzx	ecx, [ebp+var_37D]
		mov	[eax], cl
		add	eax, 1
		cmp	byte ptr [ebp+var_354],	0
		mov	[ebp+var_338], eax
		jz	loc_8050FD9
		mov	[ebp+var_354], edi
		mov	ecx, [ebp+var_38C]
		xor	eax, eax
		mov	edi, [ebp+var_330]

loc_80510F1:				; CODE XREF: sub_804F350+1DABj
		mov	byte ptr [edi+eax+4], 30h
		add	eax, 1
		cmp	ecx, eax
		jnz	short loc_80510F1
		mov	edi, [ebp+var_354]
		add	[ebp+var_338], ecx
		jmp	loc_8050FD9
; ---------------------------------------------------------------------------

loc_805110E:				; CODE XREF: sub_804F350+B9j
		call	___stack_chk_fail
; ---------------------------------------------------------------------------

loc_8051113:				; CODE XREF: sub_804F350+1C32j
		cmp	al, 61h
		jz	loc_8050F88
		nop
		lea	esi, [esi+0]
		jmp	loc_804F8F0	; jumptable 0804F956 case 0
; ---------------------------------------------------------------------------

loc_8051125:				; CODE XREF: sub_804F350+F61j
		lea	eax, [ecx+1]
		mov	dword ptr [ebp+size], eax
		db	66h
		nop
		jmp	loc_80502CC
sub_804F350	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_8051140	proc near		; CODE XREF: sub_804D770+D9p
					; sub_804D8D0+364p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	ecx, [ebp+arg_0]
		test	ecx, ecx
		jz	short locret_8051156
		cmp	dword ptr [ecx-4], 1415FB4Ah
		jz	short loc_8051158

locret_8051156:				; CODE XREF: sub_8051140+Bj
					; sub_8051140+42j ...
		leave
		retn
; ---------------------------------------------------------------------------

loc_8051158:				; CODE XREF: sub_8051140+14j
		mov	eax, ecx
		mov	edx, 0FF00FF01h
		mul	edx
		shr	edx, 8
		mov	eax, edx
		shl	eax, 8
		lea	edx, [eax+edx]
		mov	eax, ecx
		sub	eax, edx
		lea	edx, ds:8055300h[eax*4]
		mov	eax, ds:dword_8055300[eax*4]
		test	eax, eax
		jnz	short loc_8051192
		jmp	short locret_8051156
; ---------------------------------------------------------------------------
		align 8

loc_8051188:				; CODE XREF: sub_8051140+54j
		lea	edx, [eax-8]
		mov	eax, [eax-8]
		test	eax, eax
		jz	short locret_8051156

loc_8051192:				; CODE XREF: sub_8051140+40j
		cmp	ecx, eax
		jnz	short loc_8051188
		lea	eax, [ecx-8]
		mov	ecx, [ecx-8]
		mov	[edx], ecx
		mov	[ebp+arg_0], eax
		leave
		jmp	_free
sub_8051140	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_80511B0	proc near		; CODE XREF: sub_804D770+42p
					; sub_804D8D0+65p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_0]
		add	eax, 8
		jnb	short loc_80511C8

loc_80511BE:				; CODE XREF: sub_80511B0+22j
		xor	eax, eax
		leave
		retn
; ---------------------------------------------------------------------------
		align 8

loc_80511C8:				; CODE XREF: sub_80511B0+Cj
		mov	[esp], eax	; size
		call	_malloc
		test	eax, eax
		jz	short loc_80511BE
		lea	ecx, [eax+8]
		mov	edx, 0FF00FF01h
		mov	eax, ecx
		mul	edx
		mov	dword ptr [ecx-4], 1415FB4Ah
		shr	edx, 8
		mov	eax, edx
		shl	eax, 8
		lea	edx, [eax+edx]
		mov	eax, ecx
		sub	eax, edx
		mov	edx, eax
		mov	eax, ds:dword_8055300[eax*4]
		mov	[ecx-8], eax
		mov	eax, ecx
		mov	ds:dword_8055300[edx*4], ecx
		leave
		retn
sub_80511B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_8051210	proc near		; CODE XREF: sub_804D8D0+28p

var_54		= byte ptr -54h
p		= mbstate_t ptr	-50h
var_48		= byte ptr -48h
s		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
pwc		= dword	ptr -38h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	ebx, [ebp+arg_0]
		mov	eax, large gs:14h
		mov	[ebp+var_1C], eax
		xor	eax, eax
		call	___ctype_get_mb_cur_max
		cmp	eax, 1
		jbe	loc_80513A0
		mov	[ebp+var_54], 0
		xor	esi, esi
		cmp	[ebp+var_54], 0
		mov	[ebp+s], ebx
		lea	edi, [ebp+pwc]
		mov	[ebp+p.__count], 0
		lea	ebx, [ebp+p]
		mov	dword ptr [ebp+p.__value], 0
		mov	[ebp+var_48], 0
		jnz	short loc_80512B0
		lea	esi, [esi+0]

loc_8051260:				; CODE XREF: sub_8051210+9Ej
		mov	edx, [ebp+s]
		movzx	eax, byte ptr [edx]
		mov	ecx, eax
		shr	cl, 5
		movzx	ecx, cl
		mov	ecx, ds:dword_8052FA0[ecx*4]
		bt	ecx, eax
		jnb	loc_8051360
		mov	[ebp+var_40], 1
		movsx	eax, byte ptr [edx]
		mov	[ebp+var_3C], 1
		mov	[ebp+pwc], eax

loc_805128F:				; CODE XREF: sub_8051210+110j
					; sub_8051210+173j ...
		cmp	[ebp+var_3C], 0
		mov	[ebp+var_48], 1
		jnz	loc_8051338

loc_805129D:				; CODE XREF: sub_8051210+122j
					; sub_8051210+12Dj
		mov	eax, [ebp+var_40]
		add	esi, 1
		add	[ebp+s], eax
		cmp	[ebp+var_54], 0
		mov	[ebp+var_48], 0
		jz	short loc_8051260

loc_80512B0:				; CODE XREF: sub_8051210+4Aj
					; sub_8051210+160j
		call	___ctype_get_mb_cur_max
		mov	[esp+4], eax	; n
		mov	eax, [ebp+s]
		mov	[esp], eax	; s
		call	sub_804B110
		mov	[esp+0Ch], ebx	; p
		mov	[esp], edi	; pwc
		mov	[esp+8], eax	; n
		mov	eax, [ebp+s]
		mov	[esp+4], eax	; s
		call	_mbrtowc
		cmp	eax, 0FFFFFFFFh
		mov	[ebp+var_40], eax
		jz	loc_8051378
		cmp	eax, 0FFFFFFFEh
		jz	loc_8051388
		test	eax, eax
		jnz	short loc_8051312
		mov	eax, [ebp+s]
		mov	[ebp+var_40], 1
		cmp	byte ptr [eax],	0
		jnz	loc_80513F9
		mov	edx, [ebp+pwc]
		test	edx, edx
		jnz	loc_80513D5

loc_8051312:				; CODE XREF: sub_8051210+E2j
		mov	[esp], ebx	; ps
		mov	[ebp+var_3C], 1
		call	_mbsinit
		test	eax, eax
		jz	loc_805128F
		cmp	[ebp+var_3C], 0
		mov	[ebp+var_54], 0
		mov	[ebp+var_48], 1
		jz	loc_805129D

loc_8051338:				; CODE XREF: sub_8051210+87j
		mov	eax, [ebp+pwc]
		test	eax, eax
		jnz	loc_805129D

loc_8051343:				; CODE XREF: sub_8051210+19Aj
		mov	edx, [ebp+var_1C]
		xor	edx, large gs:14h
		mov	eax, esi
		jnz	short loc_80513D0
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_8051360:				; CODE XREF: sub_8051210+68j
		mov	[esp], ebx	; ps
		call	_mbsinit
		test	eax, eax
		jz	short loc_80513AC
		mov	[ebp+var_54], 1
		jmp	loc_80512B0
; ---------------------------------------------------------------------------
		align 4

loc_8051378:				; CODE XREF: sub_8051210+D1j
		mov	[ebp+var_40], 1
		mov	[ebp+var_3C], 0
		jmp	loc_805128F
; ---------------------------------------------------------------------------

loc_8051388:				; CODE XREF: sub_8051210+DAj
		mov	eax, [ebp+s]
		mov	[esp], eax	; s
		call	_strlen
		mov	[ebp+var_3C], 0
		mov	[ebp+var_40], eax
		jmp	loc_805128F
; ---------------------------------------------------------------------------
		align 10h

loc_80513A0:				; CODE XREF: sub_8051210+1Fj
		mov	[esp], ebx	; s
		call	_strlen
		mov	esi, eax
		jmp	short loc_8051343
; ---------------------------------------------------------------------------

loc_80513AC:				; CODE XREF: sub_8051210+15Aj
		mov	dword ptr [esp+0Ch], offset aMbuiter_mult_1 ; "mbuiter_multi_next"
		mov	dword ptr [esp+8], 8Eh ; line
		mov	dword ptr [esp+4], offset file ; "mbuiter.h"
		mov	dword ptr [esp], offset	assertion ; "mbsinit (&iter->state)"
		call	___assert_fail
; ---------------------------------------------------------------------------

loc_80513D0:				; CODE XREF: sub_8051210+13Fj
		call	___stack_chk_fail
; ---------------------------------------------------------------------------

loc_80513D5:				; CODE XREF: sub_8051210+FCj
		mov	dword ptr [esp+0Ch], offset aMbuiter_mult_1 ; "mbuiter_multi_next"
		mov	dword ptr [esp+8], 0ABh	; line
		mov	dword ptr [esp+4], offset file ; "mbuiter.h"
		mov	dword ptr [esp], offset	aIterCur_wc0 ; "iter->cur.wc ==	0"
		call	___assert_fail
; ---------------------------------------------------------------------------

loc_80513F9:				; CODE XREF: sub_8051210+F1j
		mov	dword ptr [esp+0Ch], offset aMbuiter_mult_1 ; "mbuiter_multi_next"
		mov	dword ptr [esp+8], 0AAh	; line
		mov	dword ptr [esp+4], offset file ; "mbuiter.h"
		mov	dword ptr [esp], offset	aIterCur_ptr0 ;	"*iter->cur.ptr	== '\\0'"
		call	___assert_fail
sub_8051210	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_8051420	proc near		; CODE XREF: sub_804F350+E84p
					; sub_804F350+FC5p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_8]
		mov	edx, [ebp+arg_4]
		mov	[ebp+var_18], eax
		mov	[ebp+var_10], ecx
		mov	eax, [ebp+var_10]
		mov	[ebp+var_14], edx
		and	eax, 7FFFh
		jz	short loc_8051458
		cmp	eax, 7FFFh
		jz	short loc_8051460
		mov	eax, [ebp+var_14]
		leave
		shr	eax, 1Fh
		xor	eax, 1
		retn
; ---------------------------------------------------------------------------
		align 8

loc_8051458:				; CODE XREF: sub_8051420+20j
		mov	eax, [ebp+var_14]
		leave
		shr	eax, 1Fh
		retn
; ---------------------------------------------------------------------------

loc_8051460:				; CODE XREF: sub_8051420+27j
		mov	eax, [ebp+var_14]
		sub	eax, 80000000h
		or	eax, [ebp+var_18]
		leave
		setnz	al
		movzx	eax, al
		retn
sub_8051420	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_8051480	proc near		; CODE XREF: sub_804F350+5Ep

var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_0]
		mov	edx, [ebx]
		mov	eax, [ebx+4]
		test	edx, edx
		jz	short loc_8051500
		xor	edx, edx
		mov	[ebp+var_10], ebx
		lea	esi, [esi+0]

loc_80514A0:				; CODE XREF: sub_8051480+5Fj
		cmp	dword ptr [eax], 16h
		jbe	short loc_80514B8

loc_80514A5:				; CODE XREF: sub_8051480+3Aj
					; DATA XREF: .rodata:off_805304Co
		add	esp, 4
		mov	eax, 0FFFFFFFFh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 8

loc_80514B8:				; CODE XREF: sub_8051480+23j
		mov	ecx, [eax]
		jmp	ds:off_805304C[ecx*4]
; ---------------------------------------------------------------------------
		align 8

loc_80514C8:				; CODE XREF: sub_8051480+3Aj
					; DATA XREF: .rodata:08053060o	...
		lea	ecx, [esi+4]
		mov	esi, [esi]
		mov	[eax+4], esi

loc_80514D0:				; CODE XREF: sub_8051480+99j
					; sub_8051480+AAj ...
		mov	ebx, [ebp+var_10]
		add	edx, 1
		cmp	[ebx], edx
		jbe	short loc_8051500

loc_80514DA:				; CODE XREF: sub_8051480+7Ej
		add	eax, 10h
		mov	esi, ecx
		jmp	short loc_80514A0
; ---------------------------------------------------------------------------
		align 8

loc_80514E8:				; CODE XREF: sub_8051480+3Aj
					; DATA XREF: .rodata:08053070o	...
		mov	edi, [esi+4]
		lea	ecx, [esi+8]
		add	edx, 1
		mov	esi, [esi]
		mov	[eax+8], edi
		mov	[eax+4], esi
		mov	ebx, [ebp+var_10]
		cmp	[ebx], edx
		ja	short loc_80514DA

loc_8051500:				; CODE XREF: sub_8051480+16j
					; sub_8051480+58j
		add	esp, 4
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_8051510:				; CODE XREF: sub_8051480+3Aj
					; DATA XREF: .rodata:08053058o	...
		lea	ecx, [esi+4]
		mov	esi, [esi]
		mov	[eax+4], si
		jmp	short loc_80514D0
; ---------------------------------------------------------------------------
		align 10h

loc_8051520:				; CODE XREF: sub_8051480+3Aj
					; DATA XREF: .rodata:08053050o	...
		lea	ecx, [esi+4]
		mov	esi, [esi]
		mov	ebx, esi
		mov	[eax+4], bl
		jmp	short loc_80514D0
; ---------------------------------------------------------------------------
		align 10h

loc_8051530:				; CODE XREF: sub_8051480+3Aj
					; DATA XREF: .rodata:08053078o
		fld	qword ptr [esi]
		lea	ecx, [esi+8]
		fstp	qword ptr [eax+4]
		jmp	short loc_80514D0
; ---------------------------------------------------------------------------
		align 10h

loc_8051540:				; CODE XREF: sub_8051480+3Aj
					; DATA XREF: .rodata:0805307Co
		mov	ebx, [esi]
		lea	ecx, [esi+0Ch]
		mov	edi, [esi+8]
		mov	esi, [esi+4]
		mov	[eax+4], ebx
		mov	[eax+0Ch], edi
		mov	[eax+8], esi
		jmp	loc_80514D0
; ---------------------------------------------------------------------------
		align 10h

loc_8051560:				; CODE XREF: sub_8051480+3Aj
					; DATA XREF: .rodata:08053088o
		lea	ecx, [esi+4]
		mov	esi, [esi]
		test	esi, esi
		mov	[eax+4], esi
		jnz	loc_80514D0
		mov	dword ptr [eax+4], offset aNull	; "(NULL)"
		jmp	loc_80514D0
; ---------------------------------------------------------------------------
		align 10h

loc_8051580:				; CODE XREF: sub_8051480+3Aj
					; DATA XREF: .rodata:0805308Co
		lea	ecx, [esi+4]
		mov	esi, [esi]
		test	esi, esi
		mov	[eax+4], esi
		jnz	loc_80514D0
		mov	dword ptr [eax+4], offset dword_80530A8
		jmp	loc_80514D0
sub_8051480	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_80515A0	proc near		; CODE XREF: sub_804F350+4Ep

var_44		= byte ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 0
		mov	dword ptr [esp], 2Ch ; size
		call	_malloc
		mov	edx, [ebp+arg_4]
		test	eax, eax
		mov	[edx+4], eax
		jz	loc_8051CB4
		mov	ecx, [ebp+arg_8]
		mov	edi, [ebp+arg_0]
		mov	[ebp+var_3C], 0
		mov	[ebp+var_2C], 0
		mov	dword ptr [ecx], 0
		mov	esi, [edx]
		mov	edx, eax
		mov	dword ptr [ecx+4], 0
		mov	[ebp+var_28], 0
		mov	[ebp+var_34], 1
		mov	[ebp+var_24], 0
		jmp	short loc_805160A
; ---------------------------------------------------------------------------

loc_8051608:				; CODE XREF: sub_80515A0+7Bj
		mov	edi, eax

loc_805160A:				; CODE XREF: sub_80515A0+66j
		movzx	ecx, byte ptr [edi]
		test	cl, cl
		jz	loc_8051916

loc_8051615:				; CODE XREF: sub_80515A0+370j
		cmp	cl, 25h
		lea	eax, [edi+1]
		jnz	short loc_8051608
		imul	ebx, esi, 2Ch
		lea	ebx, [edx+ebx]
		mov	[ebx], edi
		mov	dword ptr [ebx+8], 0
		mov	dword ptr [ebx+0Ch], 0
		mov	dword ptr [ebx+10h], 0
		mov	dword ptr [ebx+14h], 0FFFFFFFFh
		mov	dword ptr [ebx+18h], 0
		mov	dword ptr [ebx+1Ch], 0
		mov	dword ptr [ebx+20h], 0FFFFFFFFh
		mov	dword ptr [ebx+28h], 0FFFFFFFFh
		movzx	edx, byte ptr [edi+1]
		lea	ecx, [edx-30h]
		cmp	cl, 9
		ja	short loc_805168D
		mov	ecx, eax
		mov	esi, eax
		mov	edi, edx
		nop

loc_8051670:				; CODE XREF: sub_80515A0+DCj
		add	ecx, 1
		movzx	eax, byte ptr [ecx]
		lea	edx, [eax-30h]
		cmp	dl, 9
		jbe	short loc_8051670
		mov	ecx, eax
		mov	edx, edi
		cmp	cl, 24h
		mov	eax, esi
		jz	loc_8051D03

loc_805168D:				; CODE XREF: sub_80515A0+C7j
		mov	[ebp+var_30], 0FFFFFFFFh
		jmp	short loc_80516BB
; ---------------------------------------------------------------------------
		align 4

loc_8051698:				; CODE XREF: sub_80515A0+124j
		cmp	dl, 2Dh
		jz	short loc_80516D0
		cmp	dl, 2Bh
		jz	short loc_80516D8
		cmp	dl, 20h
		jz	short loc_80516E8
		cmp	dl, 23h
		jz	short loc_80516F8
		cmp	dl, 30h
		nop
		jnz	short loc_8051708
		or	dword ptr [ebx+8], 20h
		db	66h
		nop

loc_80516B8:				; CODE XREF: sub_80515A0+12Aj
					; sub_80515A0+134j ...
		movzx	edx, byte ptr [eax]

loc_80516BB:				; CODE XREF: sub_80515A0+F4j
					; sub_80515A0+7BEj
		add	eax, 1
		cmp	dl, 27h
		lea	ecx, [eax-1]
		jnz	short loc_8051698
		or	dword ptr [ebx+8], 1
		jmp	short loc_80516B8
; ---------------------------------------------------------------------------
		align 10h

loc_80516D0:				; CODE XREF: sub_80515A0+FBj
		or	dword ptr [ebx+8], 2
		jmp	short loc_80516B8
; ---------------------------------------------------------------------------
		align 4

loc_80516D8:				; CODE XREF: sub_80515A0+100j
		or	dword ptr [ebx+8], 4
		lea	esi, [esi+0]
		jmp	short loc_80516B8
; ---------------------------------------------------------------------------
		align 8

loc_80516E8:				; CODE XREF: sub_80515A0+105j
		or	dword ptr [ebx+8], 8
		lea	esi, [esi+0]
		jmp	short loc_80516B8
; ---------------------------------------------------------------------------
		align 8

loc_80516F8:				; CODE XREF: sub_80515A0+10Aj
		or	dword ptr [ebx+8], 10h
		lea	esi, [esi+0]
		jmp	short loc_80516B8
; ---------------------------------------------------------------------------
		align 8

loc_8051708:				; CODE XREF: sub_80515A0+110j
		cmp	dl, 2Ah
		nop
		lea	esi, [esi+0]
		jz	loc_80519CE
		lea	eax, [edx-30h]
		cmp	al, 9
		jbe	loc_8051935
		mov	esi, [ebp+var_24]
		mov	eax, [ebp+var_2C]
		mov	[ebp+var_1C], esi
		mov	esi, ecx
		mov	[ebp+var_38], eax

loc_805172F:				; CODE XREF: sub_80515A0+4DEj
					; sub_80515A0+569j ...
		mov	eax, [ebp+var_1C]
		cmp	dl, 2Eh
		mov	edi, esi
		mov	[ebp+var_24], eax
		jz	loc_8051984

loc_8051740:				; CODE XREF: sub_80515A0+3DEj
					; sub_80515A0+429j ...
		lea	eax, [edi+1]
		xor	esi, esi
		jmp	short loc_805176E
; ---------------------------------------------------------------------------
		align 4

loc_8051748:				; CODE XREF: sub_80515A0+1D4j
		cmp	dl, 4Ch
		jz	short loc_8051788
		cmp	dl, 6Ch
		jz	short loc_8051790
		cmp	dl, 6Ah
		jz	short loc_8051798
		cmp	dl, 5Ah
		jz	short loc_8051768
		cmp	dl, 7Ah
		nop
		jz	short loc_8051768
		cmp	dl, 74h
		jnz	short loc_80517A8
		nop

loc_8051768:				; CODE XREF: sub_80515A0+1BAj
					; sub_80515A0+1C0j ...
		movzx	edx, byte ptr [eax]
		add	eax, 1

loc_805176E:				; CODE XREF: sub_80515A0+1A5j
		cmp	dl, 68h
		lea	edi, [eax-1]
		jnz	short loc_8051748
		mov	ecx, esi
		mov	edx, 1
		and	ecx, 1
		shl	edx, cl
		or	esi, edx
		jmp	short loc_8051768
; ---------------------------------------------------------------------------
		align 4

loc_8051788:				; CODE XREF: sub_80515A0+1ABj
		or	esi, 4
		jmp	short loc_8051768
; ---------------------------------------------------------------------------
		align 10h

loc_8051790:				; CODE XREF: sub_80515A0+1B0j
		add	esi, 8
		jmp	short loc_8051768
; ---------------------------------------------------------------------------
		align 4

loc_8051798:				; CODE XREF: sub_80515A0+1B5j
		add	esi, 10h
		nop
		lea	esi, [esi+0]
		jmp	short loc_8051768
; ---------------------------------------------------------------------------
		align 8

loc_80517A8:				; CODE XREF: sub_80515A0+1C5j
		lea	eax, [edx-25h]
		cmp	al, 53h		; switch 84 cases
		lea	esi, [esi+0]
		jbe	short loc_80517EE

loc_80517B2:				; CODE XREF: sub_80515A0+251j
					; sub_80515A0+539j ...
		mov	ebx, [ebp+arg_8] ; jumptable 080517F1 default case
		mov	ecx, [ebx+4]

loc_80517B8:				; CODE XREF: sub_80515A0+6B3j
					; sub_80515A0+6C0j ...
		test	ecx, ecx
		jz	short loc_80517C4
		mov	[esp], ecx	; ptr
		call	_free

loc_80517C4:				; CODE XREF: sub_80515A0+21Aj
		mov	esi, [ebp+arg_4]
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_80517D6
		mov	[esp], eax	; ptr
		call	_free

loc_80517D6:				; CODE XREF: sub_80515A0+22Cj
		call	___errno_location
		mov	dword ptr [eax], 16h
		add	esp, 4Ch
		mov	eax, 0FFFFFFFFh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_80517EE:				; CODE XREF: sub_80515A0+210j
		movzx	eax, al
		jmp	ds:off_80530C4[eax*4] ;	switch jump

loc_80517F8:				; DATA XREF: .rodata:off_80530C4o
		xor	eax, eax	; jumptable 080517F1 case 78
		cmp	esi, 7
		setnle	al
		add	eax, 0Fh
		mov	[ebp+var_1C], eax

loc_8051806:				; CODE XREF: sub_80515A0+586j
					; sub_80515A0+59Cj ...
		mov	ecx, [ebp+var_30]
		cmp	ecx, 0FFFFFFFFh
		mov	[ebx+28h], ecx
		jnz	short loc_805182E
		mov	esi, [ebp+var_24]
		cmp	esi, 0FFFFFFFFh
		mov	[ebx+28h], esi
		jz	loc_8052012
		mov	eax, [ebp+var_24]
		mov	ecx, eax
		add	ecx, 1
		mov	[ebp+var_30], eax
		mov	[ebp+var_24], ecx

loc_805182E:				; CODE XREF: sub_80515A0+26Fj
		mov	esi, [ebp+var_30]
		cmp	[ebp+var_28], esi
		jbe	loc_8051BE3
		mov	eax, [ebp+arg_8]
		mov	esi, [eax+4]

loc_8051840:				; CODE XREF: sub_80515A0+6A3j
		mov	ecx, [ebp+arg_8]
		mov	eax, [ecx]
		cmp	eax, [ebp+var_30]
		ja	short loc_8051891
		mov	ecx, eax
		shl	ecx, 4
		mov	[ebp+var_40], ecx
		mov	ecx, [ebp+arg_8]
		mov	[ebp+var_2C], edi
		mov	ecx, [ecx+4]
		mov	[ebp+var_20], ecx
		mov	ecx, [ebp+var_40]
		mov	edi, [ebp+var_20]
		mov	[ebp+var_40], ebx
		mov	ebx, [ebp+var_30]
		jmp	short loc_8051872
; ---------------------------------------------------------------------------
		align 10h

loc_8051870:				; CODE XREF: sub_80515A0+2E1j
		mov	esi, edi

loc_8051872:				; CODE XREF: sub_80515A0+2CAj
		add	eax, 1
		mov	dword ptr [esi+ecx], 0
		add	ecx, 10h
		cmp	eax, ebx
		jbe	short loc_8051870
		mov	esi, [ebp+arg_8]
		mov	edi, [ebp+var_2C]
		mov	ebx, [ebp+var_40]
		mov	[esi], eax
		mov	esi, [ebp+var_20]

loc_8051891:				; CODE XREF: sub_80515A0+2A8j
		mov	ecx, [ebp+var_30]
		shl	ecx, 4
		lea	ecx, [esi+ecx]
		mov	eax, [ecx]
		test	eax, eax
		jnz	loc_8051C48
		mov	eax, [ebp+var_1C]
		mov	[ecx], eax

loc_80518A9:				; CODE XREF: sub_80515A0+251j
					; sub_80515A0+6ABj
					; DATA XREF: ...
		mov	[ebx+24h], dl	; jumptable 080517F1 case 0
		mov	edx, [ebp+arg_4]
		add	edi, 1
		mov	[ebx+4], edi
		mov	esi, [edx]
		add	esi, 1
		cmp	[ebp+var_34], esi
		mov	[edx], esi
		ja	short loc_80518FF
		mov	eax, [ebp+var_34]
		test	eax, eax
		js	loc_8051C90
		shl	[ebp+var_34], 1
		cmp	[ebp+var_34], 5D1745Dh
		ja	loc_8051C90
		imul	eax, [ebp+var_34], 2Ch
		mov	[esp+4], eax	; size
		mov	eax, [edx+4]
		mov	[esp], eax	; ptr
		call	_realloc
		test	eax, eax
		jz	loc_8051C90
		mov	ecx, [ebp+arg_4]
		mov	esi, [ecx]
		mov	[ecx+4], eax

loc_80518FF:				; CODE XREF: sub_80515A0+31Fj
		mov	eax, [ebp+var_38]
		mov	ebx, [ebp+arg_4]
		mov	[ebp+var_2C], eax
		movzx	ecx, byte ptr [edi]
		mov	edx, [ebx+4]
		test	cl, cl
		jnz	loc_8051615

loc_8051916:				; CODE XREF: sub_80515A0+6Fj
		imul	esi, 2Ch
		mov	ecx, [ebp+var_2C]
		xor	eax, eax
		mov	ebx, [ebp+var_3C]
		mov	[esi+edx], edi
		mov	edx, [ebp+arg_4]
		mov	[edx+8], ecx
		mov	[edx+0Ch], ebx

loc_805192D:				; CODE XREF: sub_80515A0+722j
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_8051935:				; CODE XREF: sub_80515A0+17Bj
		mov	[ebx+0Ch], ecx
		movzx	eax, byte ptr [ecx]
		sub	eax, 30h
		cmp	al, 9
		ja	loc_8051F1B
		mov	esi, ecx

loc_8051948:				; CODE XREF: sub_80515A0+3B3j
		add	esi, 1
		movzx	eax, byte ptr [esi]
		sub	eax, 30h
		cmp	al, 9
		jbe	short loc_8051948
		mov	eax, [ebp+var_2C]
		mov	edi, esi
		sub	edi, ecx
		mov	[ebp+var_38], edi
		mov	[ebx+10h], esi
		cmp	edi, eax
		jbe	loc_8051AF6
		mov	ecx, [ebp+var_24]
		mov	edi, esi
		movzx	edx, byte ptr [esi]
		mov	[ebp+var_1C], ecx
		mov	eax, [ebp+var_1C]
		cmp	dl, 2Eh
		mov	[ebp+var_24], eax
		jnz	loc_8051740

loc_8051984:				; CODE XREF: sub_80515A0+19Aj
		cmp	byte ptr [esi+1], 2Ah
		lea	edi, [esi+1]
		jz	loc_8051D8E
		mov	[ebx+18h], esi
		movzx	eax, byte ptr [esi+1]
		sub	eax, 30h
		cmp	al, 9
		ja	short loc_80519AD
		nop

loc_80519A0:				; CODE XREF: sub_80515A0+40Bj
		add	edi, 1
		movzx	eax, byte ptr [edi]
		sub	eax, 30h
		cmp	al, 9
		jbe	short loc_80519A0

loc_80519AD:				; CODE XREF: sub_80515A0+3FDj
		mov	ecx, edi
		sub	ecx, esi
		cmp	ecx, [ebp+var_3C]
		mov	[ebx+1Ch], edi
		jbe	loc_8051D63
		mov	esi, [ebp+var_1C]
		movzx	edx, byte ptr [edi]
		mov	[ebp+var_3C], ecx
		mov	[ebp+var_24], esi
		jmp	loc_8051740
; ---------------------------------------------------------------------------

loc_80519CE:				; CODE XREF: sub_80515A0+170j
		mov	edx, [ebp+var_2C]
		mov	esi, eax
		mov	[ebx+0Ch], ecx
		mov	[ebx+10h], eax
		test	edx, edx
		jnz	short loc_80519E4
		mov	[ebp+var_2C], 1

loc_80519E4:				; CODE XREF: sub_80515A0+43Bj
		movzx	edx, byte ptr [eax]
		mov	edi, eax
		mov	ecx, edx
		sub	ecx, 30h
		cmp	cl, 9
		mov	byte ptr [ebp+var_20], dl
		mov	edx, eax
		jbe	loc_8051A88

loc_80519FC:				; CODE XREF: sub_80515A0+4FAj
		mov	edx, [ebx+14h]

loc_80519FF:				; CODE XREF: sub_80515A0+551j
		cmp	edx, 0FFFFFFFFh
		jz	loc_8051D71
		mov	edi, [ebp+var_24]
		mov	[ebp+var_24], edx
		mov	[ebp+var_1C], edi

loc_8051A11:				; CODE XREF: sub_80515A0+7E9j
		mov	edi, [ebp+var_24]
		cmp	[ebp+var_28], edi
		jbe	loc_8051C74
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax+4]

loc_8051A23:				; CODE XREF: sub_80515A0+75Ej
		mov	edx, [ebp+arg_8]
		mov	eax, [edx]
		cmp	eax, [ebp+var_24]
		ja	short loc_8051A5C
		mov	edi, [ebp+arg_8]
		mov	edx, eax
		shl	edx, 4
		mov	edi, [edi+4]
		mov	[ebp+var_20], edi
		mov	edi, [ebp+var_24]
		jmp	short loc_8051A43
; ---------------------------------------------------------------------------

loc_8051A40:				; CODE XREF: sub_80515A0+4B2j
		mov	ecx, [ebp+var_20]

loc_8051A43:				; CODE XREF: sub_80515A0+49Ej
		add	eax, 1
		mov	dword ptr [ecx+edx], 0
		add	edx, 10h
		cmp	eax, edi
		jbe	short loc_8051A40
		mov	edx, [ebp+arg_8]
		mov	ecx, [ebp+var_20]
		mov	[edx], eax

loc_8051A5C:				; CODE XREF: sub_80515A0+48Bj
		mov	edx, [ebp+var_24]
		shl	edx, 4
		lea	edx, [ecx+edx]
		mov	eax, [edx]
		test	eax, eax
		jnz	loc_8051C58
		mov	ecx, [ebp+var_2C]
		mov	dword ptr [edx], 5
		movzx	edx, byte ptr [esi]
		mov	[ebp+var_38], ecx
		jmp	loc_805172F
; ---------------------------------------------------------------------------
		align 8

loc_8051A88:				; CODE XREF: sub_80515A0+456j
					; sub_80515A0+4F3j
		add	edx, 1
		movzx	ecx, byte ptr [edx]
		lea	eax, [ecx-30h]
		cmp	al, 9
		jbe	short loc_8051A88
		cmp	cl, 24h
		mov	eax, edi
		jnz	loc_80519FC
		mov	esi, ebx
		movzx	ebx, byte ptr [ebp+var_20]
		xor	edx, edx

loc_8051AA8:				; CODE XREF: sub_80515A0+533j
		cmp	edx, 19999999h
		mov	ecx, 0FFFFFFFFh
		ja	short loc_8051ABA
		lea	ecx, [edx+edx*4]
		add	ecx, ecx

loc_8051ABA:				; CODE XREF: sub_80515A0+513j
		movsx	ebx, bl
		lea	edx, [ecx+ebx-30h]
		cmp	edx, ecx
		sbb	ecx, ecx
		add	eax, 1
		movzx	ebx, byte ptr [eax]
		or	edx, ecx
		lea	ecx, [ebx-30h]
		cmp	cl, 9
		jbe	short loc_8051AA8
		test	edx, edx
		mov	ebx, esi
		jz	loc_80517B2	; jumptable 080517F1 default case
		cmp	edx, 0FFFFFFFFh
		jz	loc_805201D
		sub	edx, 1
		mov	[esi+14h], edx
		lea	esi, [eax+1]
		jmp	loc_80519FF
; ---------------------------------------------------------------------------

loc_8051AF6:				; CODE XREF: sub_80515A0+3C4j
		mov	ecx, esi

loc_8051AF8:				; CODE XREF: sub_80515A0+97Ej
		mov	esi, [ebp+var_2C]
		mov	edi, [ebp+var_24]
		movzx	edx, byte ptr [ecx]
		mov	[ebp+var_38], esi
		mov	esi, ecx
		mov	[ebp+var_1C], edi
		jmp	loc_805172F
; ---------------------------------------------------------------------------

loc_8051B0E:				; CODE XREF: sub_80515A0+251j
					; DATA XREF: .rodata:off_80530C4o
		cmp	esi, 0Fh	; jumptable 080517F1 cases 51,74,80,83
		jg	short loc_8051B1F
		test	esi, 4
		jz	loc_8051F2F

loc_8051B1F:				; CODE XREF: sub_80515A0+571j
		mov	[ebp+var_1C], 0Ah
		jmp	loc_8051806
; ---------------------------------------------------------------------------
		align 10h

loc_8051B30:				; CODE XREF: sub_80515A0+251j
					; DATA XREF: .rodata:off_80530C4o
		mov	[ebp+var_1C], 10h ; jumptable 080517F1 case 46
		mov	edx, 73h
		jmp	loc_8051806
; ---------------------------------------------------------------------------

loc_8051B41:				; CODE XREF: sub_80515A0+251j
					; DATA XREF: .rodata:off_80530C4o
		mov	[ebp+var_1C], 0Eh ; jumptable 080517F1 case 30
		mov	edx, 63h
		jmp	loc_8051806
; ---------------------------------------------------------------------------

loc_8051B52:				; CODE XREF: sub_80515A0+251j
					; DATA XREF: .rodata:off_80530C4o
		cmp	esi, 0Fh	; jumptable 080517F1 cases 28,32-34,60,64-66
		jg	short loc_8051B67
		and	esi, 4
		mov	[ebp+var_1C], 0Bh
		jz	loc_8051806

loc_8051B67:				; CODE XREF: sub_80515A0+5B5j
		mov	[ebp+var_1C], 0Ch
		db	66h
		nop
		jmp	loc_8051806
; ---------------------------------------------------------------------------
		align 4

loc_8051B78:				; CODE XREF: sub_80515A0+251j
					; DATA XREF: .rodata:off_80530C4o
		mov	[ebp+var_1C], 11h ; jumptable 080517F1 case 75
		nop
		jmp	loc_8051806
; ---------------------------------------------------------------------------

loc_8051B85:				; CODE XREF: sub_80515A0+251j
					; DATA XREF: .rodata:off_80530C4o
		cmp	esi, 0Fh	; jumptable 080517F1 case 73
		jg	short loc_8051B96
		test	esi, 4
		jz	loc_8051F68

loc_8051B96:				; CODE XREF: sub_80515A0+5E8j
		mov	[ebp+var_1C], 16h
		lea	esi, [esi+0]
		jmp	loc_8051806
; ---------------------------------------------------------------------------
		align 4

loc_8051BA8:				; CODE XREF: sub_80515A0+251j
					; DATA XREF: .rodata:off_80530C4o
		cmp	esi, 0Fh	; jumptable 080517F1 cases 63,68
		nop
		lea	esi, [esi+0]
		jg	short loc_8051BBE
		test	esi, 4
		jz	loc_8051FB4

loc_8051BBE:				; CODE XREF: sub_80515A0+610j
		mov	[ebp+var_1C], 9
		jmp	loc_8051806
; ---------------------------------------------------------------------------
		align 10h

loc_8051BD0:				; CODE XREF: sub_80515A0+251j
					; DATA XREF: .rodata:off_80530C4o
		xor	eax, eax	; jumptable 080517F1 case 62
		cmp	esi, 7
		setnle	al
		add	eax, 0Dh
		mov	[ebp+var_1C], eax
		jmp	loc_8051806
; ---------------------------------------------------------------------------

loc_8051BE3:				; CODE XREF: sub_80515A0+294j
		mov	eax, [ebp+var_28]
		sar	[ebp+var_28], 1Fh
		mov	ecx, [ebp+var_30]
		add	eax, eax
		or	[ebp+var_28], eax
		cmp	[ebp+var_28], ecx
		ja	short loc_8051C03
		add	ecx, 1
		mov	[ebp+var_28], ecx
		jb	loc_8051C90

loc_8051C03:				; CODE XREF: sub_80515A0+655j
		cmp	[ebp+var_28], 0FFFFFFFh
		ja	loc_8051C90
		mov	esi, [ebp+arg_8]
		mov	ecx, [ebp+var_28]
		mov	eax, [esi+4]
		shl	ecx, 4
		test	eax, eax
		jz	loc_8051F07
		mov	[esp+4], ecx	; size
		mov	[esp], eax	; ptr
		mov	[ebp+var_44], dl
		call	_realloc
		movzx	edx, [ebp+var_44]

loc_8051C37:				; CODE XREF: sub_80515A0+976j
		test	eax, eax
		mov	esi, eax
		jz	short loc_8051C90
		mov	eax, [ebp+arg_8]
		mov	[eax+4], esi
		jmp	loc_8051840
; ---------------------------------------------------------------------------

loc_8051C48:				; CODE XREF: sub_80515A0+2FEj
		cmp	[ebp+var_1C], eax
		jz	loc_80518A9	; jumptable 080517F1 case 0
		mov	ecx, esi
		jmp	loc_80517B8
; ---------------------------------------------------------------------------

loc_8051C58:				; CODE XREF: sub_80515A0+4C9j
		cmp	eax, 5
		nop
		lea	esi, [esi+0]
		jnz	loc_80517B8
		mov	edi, [ebp+var_2C]
		movzx	edx, byte ptr [esi]
		mov	[ebp+var_38], edi
		jmp	loc_805172F
; ---------------------------------------------------------------------------

loc_8051C74:				; CODE XREF: sub_80515A0+477j
		mov	eax, [ebp+var_28]
		sar	[ebp+var_28], 1Fh
		mov	edx, [ebp+var_24]
		add	eax, eax
		or	[ebp+var_28], eax
		cmp	[ebp+var_28], edx
		ja	short loc_8051CC7
		add	edx, 1
		mov	[ebp+var_28], edx
		jnb	short loc_8051CC7

loc_8051C90:				; CODE XREF: sub_80515A0+326j
					; sub_80515A0+336j ...
		mov	edi, [ebp+arg_8]
		mov	eax, [edi+4]
		test	eax, eax
		jz	short loc_8051CA2
		mov	[esp], eax	; ptr
		call	_free

loc_8051CA2:				; CODE XREF: sub_80515A0+6F8j
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+4]
		test	eax, eax
		jz	short loc_8051CB4
		mov	[esp], eax	; ptr
		call	_free

loc_8051CB4:				; CODE XREF: sub_80515A0+26j
					; sub_80515A0+70Aj
		call	___errno_location
		mov	dword ptr [eax], 0Ch
		or	eax, 0FFFFFFFFh
		jmp	loc_805192D
; ---------------------------------------------------------------------------

loc_8051CC7:				; CODE XREF: sub_80515A0+6E6j
					; sub_80515A0+6EEj
		cmp	[ebp+var_28], 0FFFFFFFh
		db	66h
		nop
		ja	short loc_8051C90
		mov	ecx, [ebp+arg_8]
		mov	eax, [ebp+var_28]
		mov	edx, [ecx+4]
		shl	eax, 4
		test	edx, edx
		jz	loc_8051FED
		mov	[esp+4], eax	; size
		mov	[esp], edx	; ptr
		call	_realloc

loc_8051CF2:				; CODE XREF: sub_80515A0+A55j
		test	eax, eax
		mov	ecx, eax
		jz	short loc_8051C90
		mov	edi, [ebp+arg_8]
		mov	[edi+4], eax
		jmp	loc_8051A23
; ---------------------------------------------------------------------------

loc_8051D03:				; CODE XREF: sub_80515A0+E7j
		mov	ecx, esi
		xor	eax, eax
		mov	edi, ebx
		lea	esi, [esi+0]

loc_8051D10:				; CODE XREF: sub_80515A0+79Cj
		cmp	eax, 19999999h
		mov	esi, 0FFFFFFFFh
		ja	short loc_8051D21
		lea	esi, [eax+eax*4]
		add	esi, esi

loc_8051D21:				; CODE XREF: sub_80515A0+77Aj
		movsx	edx, dl
		lea	eax, [esi+edx-30h]
		cmp	eax, esi
		sbb	edx, edx
		add	ecx, 1
		or	eax, edx
		movzx	edx, byte ptr [ecx]
		lea	esi, [edx-30h]
		mov	ebx, esi
		cmp	bl, 9
		jbe	short loc_8051D10
		test	eax, eax
		mov	ebx, edi
		jz	loc_805201D
		cmp	eax, 0FFFFFFFFh
		jz	loc_8052012
		sub	eax, 1
		mov	[ebp+var_30], eax
		lea	eax, [ecx+1]
		movzx	edx, byte ptr [ecx+1]
		jmp	loc_80516BB
; ---------------------------------------------------------------------------

loc_8051D63:				; CODE XREF: sub_80515A0+417j
		mov	eax, [ebp+var_1C]
		movzx	edx, byte ptr [edi]
		mov	[ebp+var_24], eax
		jmp	loc_8051740
; ---------------------------------------------------------------------------

loc_8051D71:				; CODE XREF: sub_80515A0+462j
		mov	eax, [ebp+var_24]
		cmp	eax, 0FFFFFFFFh
		mov	[ebx+14h], eax
		jz	loc_8052007
		mov	ecx, [ebp+var_24]
		add	ecx, 1
		mov	[ebp+var_1C], ecx
		jmp	loc_8051A11
; ---------------------------------------------------------------------------

loc_8051D8E:				; CODE XREF: sub_80515A0+3EBj
		cmp	[ebp+var_3C], 1
		lea	edi, [esi+2]
		mov	[ebx+18h], esi
		mov	[ebx+1Ch], edi
		jbe	loc_8051F23

loc_8051DA1:				; CODE XREF: sub_80515A0+98Aj
		movzx	esi, byte ptr [edi]
		mov	eax, edi
		lea	edx, [esi-30h]
		cmp	dl, 9
		jbe	loc_8051E31

loc_8051DB2:				; CODE XREF: sub_80515A0+8A2j
		mov	eax, [ebx+20h]

loc_8051DB5:				; CODE XREF: sub_80515A0+8EFj
		cmp	eax, 0FFFFFFFFh
		jz	loc_8051F9B
		mov	esi, [ebp+var_1C]
		mov	[ebp+var_1C], eax
		mov	[ebp+var_24], esi

loc_8051DC7:				; CODE XREF: sub_80515A0+A0Fj
		mov	esi, [ebp+var_1C]
		cmp	[ebp+var_28], esi
		jbe	loc_8051EA5
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax+4]

loc_8051DD9:				; CODE XREF: sub_80515A0+962j
		mov	edx, [ebp+arg_8]
		mov	eax, [edx]
		cmp	eax, [ebp+var_1C]
		ja	short loc_8051E14
		mov	esi, [ebp+arg_8]
		mov	edx, eax
		shl	edx, 4
		mov	esi, [esi+4]
		mov	[ebp+var_20], esi
		mov	esi, [ebp+var_1C]
		jmp	short loc_8051DFB
; ---------------------------------------------------------------------------
		align 4

loc_8051DF8:				; CODE XREF: sub_80515A0+86Aj
		mov	ecx, [ebp+var_20]

loc_8051DFB:				; CODE XREF: sub_80515A0+854j
		add	eax, 1
		mov	dword ptr [ecx+edx], 0
		add	edx, 10h
		cmp	eax, esi
		jbe	short loc_8051DF8
		mov	edx, [ebp+arg_8]
		mov	ecx, [ebp+var_20]
		mov	[edx], eax

loc_8051E14:				; CODE XREF: sub_80515A0+841j
		mov	eax, [ebp+var_1C]
		shl	eax, 4
		lea	eax, [ecx+eax]
		mov	edx, [eax]
		test	edx, edx
		jnz	short loc_8051E94
		mov	dword ptr [eax], 5
		movzx	edx, byte ptr [edi]
		jmp	loc_8051740
; ---------------------------------------------------------------------------

loc_8051E31:				; CODE XREF: sub_80515A0+80Cj
					; sub_80515A0+89Dj
		add	eax, 1
		movzx	edx, byte ptr [eax]
		lea	ecx, [edx-30h]
		cmp	cl, 9
		jbe	short loc_8051E31
		cmp	dl, 24h
		jnz	loc_8051DB2
		xor	eax, eax
		mov	ecx, esi

loc_8051E4C:				; CODE XREF: sub_80515A0+8D3j
		imul	edx, eax, 0Ah
		cmp	eax, 1999999Ah
		sbb	eax, eax
		movsx	ecx, cl
		not	eax
		or	edx, eax
		lea	eax, [edx+ecx-30h]
		cmp	eax, edx
		sbb	edx, edx
		add	edi, 1
		movzx	ecx, byte ptr [edi]
		or	eax, edx
		lea	edx, [ecx-30h]
		cmp	dl, 9
		jbe	short loc_8051E4C
		test	eax, eax
		jz	loc_8052007
		cmp	eax, 0FFFFFFFFh
		jz	loc_80517B2	; jumptable 080517F1 default case
		sub	eax, 1
		add	edi, 1
		mov	[ebx+20h], eax
		jmp	loc_8051DB5
; ---------------------------------------------------------------------------

loc_8051E94:				; CODE XREF: sub_80515A0+881j
		cmp	edx, 5
		jnz	loc_80517B8
		movzx	edx, byte ptr [edi]
		jmp	loc_8051740
; ---------------------------------------------------------------------------

loc_8051EA5:				; CODE XREF: sub_80515A0+82Dj
		mov	eax, [ebp+var_28]
		sar	[ebp+var_28], 1Fh
		mov	edx, [ebp+var_1C]
		add	eax, eax
		or	[ebp+var_28], eax
		cmp	[ebp+var_28], edx
		ja	short loc_8051EC5
		add	edx, 1
		mov	[ebp+var_28], edx
		jb	loc_8051C90

loc_8051EC5:				; CODE XREF: sub_80515A0+917j
		cmp	[ebp+var_28], 0FFFFFFFh
		ja	loc_8051C90
		mov	ecx, [ebp+arg_8]
		mov	edx, [ebp+var_28]
		mov	eax, [ecx+4]
		shl	edx, 4
		test	eax, eax
		jz	loc_8051FFA
		mov	[esp+4], edx	; size
		mov	[esp], eax	; ptr
		call	_realloc

loc_8051EF2:				; CODE XREF: sub_80515A0+A62j
		test	eax, eax
		mov	ecx, eax
		jz	loc_8051C90
		mov	esi, [ebp+arg_8]
		mov	[esi+4], eax
		jmp	loc_8051DD9
; ---------------------------------------------------------------------------

loc_8051F07:				; CODE XREF: sub_80515A0+67Ej
		mov	[esp], ecx	; size
		mov	[ebp+var_44], dl
		call	_malloc
		movzx	edx, [ebp+var_44]
		jmp	loc_8051C37
; ---------------------------------------------------------------------------

loc_8051F1B:				; CODE XREF: sub_80515A0+3A0j
		mov	[ebx+10h], ecx
		jmp	loc_8051AF8
; ---------------------------------------------------------------------------

loc_8051F23:				; CODE XREF: sub_80515A0+7FBj
		mov	[ebp+var_3C], 2
		jmp	loc_8051DA1
; ---------------------------------------------------------------------------

loc_8051F2F:				; CODE XREF: sub_80515A0+579j
		cmp	esi, 7
		mov	[ebp+var_1C], 8
		jg	loc_8051806
		test	esi, 2
		mov	[ebp+var_1C], 2
		jnz	loc_8051806
		and	esi, 1
		cmp	esi, 1
		sbb	eax, eax
		and	eax, 2
		add	eax, 4
		mov	[ebp+var_1C], eax
		jmp	loc_8051806
; ---------------------------------------------------------------------------

loc_8051F68:				; CODE XREF: sub_80515A0+5F0j
		cmp	esi, 7
		mov	[ebp+var_1C], 15h
		jg	loc_8051806
		test	esi, 2
		mov	[ebp+var_1C], 12h
		jnz	loc_8051806
		and	esi, 1
		neg	esi
		add	esi, 14h
		mov	[ebp+var_1C], esi
		jmp	loc_8051806
; ---------------------------------------------------------------------------

loc_8051F9B:				; CODE XREF: sub_80515A0+818j
		mov	eax, [ebp+var_1C]
		cmp	eax, 0FFFFFFFFh
		mov	[ebx+20h], eax
		jz	short loc_8052007
		mov	ecx, [ebp+var_1C]
		add	ecx, 1
		mov	[ebp+var_24], ecx
		jmp	loc_8051DC7
; ---------------------------------------------------------------------------

loc_8051FB4:				; CODE XREF: sub_80515A0+618j
		cmp	esi, 7
		mov	[ebp+var_1C], 7
		jg	loc_8051806
		test	esi, 2
		mov	[ebp+var_1C], 1
		jnz	loc_8051806
		and	esi, 1
		cmp	esi, 1
		sbb	esi, esi
		and	esi, 2
		add	esi, 3
		mov	[ebp+var_1C], esi
		jmp	loc_8051806
; ---------------------------------------------------------------------------

loc_8051FED:				; CODE XREF: sub_80515A0+740j
		mov	[esp], eax	; size
		call	_malloc
		jmp	loc_8051CF2
; ---------------------------------------------------------------------------

loc_8051FFA:				; CODE XREF: sub_80515A0+940j
		mov	[esp], edx	; size
		call	_malloc
		jmp	loc_8051EF2
; ---------------------------------------------------------------------------

loc_8052007:				; CODE XREF: sub_80515A0+7DAj
					; sub_80515A0+8D7j ...
		mov	edx, [ebp+arg_8]
		mov	ecx, [edx+4]
		jmp	loc_80517B8
; ---------------------------------------------------------------------------

loc_8052012:				; CODE XREF: sub_80515A0+27Aj
					; sub_80515A0+7ABj
		mov	edi, [ebp+arg_8]
		mov	ecx, [edi+4]
		jmp	loc_80517B8
; ---------------------------------------------------------------------------

loc_805201D:				; CODE XREF: sub_80515A0+542j
					; sub_80515A0+7A2j
		mov	esi, [ebp+arg_8]
		mov	ecx, [esi+4]
		jmp	loc_80517B8
sub_80515A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_8052030	proc near		; DATA XREF: start+Bo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_8052030	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_8052040	proc near		; DATA XREF: start+10o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		call	sub_805209A
		add	ebx, 2FA9h
		sub	esp, 1Ch
		call	_init_proc
		lea	edi, (dword_8054F08 - 8054FF4h)[ebx]
		lea	eax, (dword_8054F08 - 8054FF4h)[ebx]
		sub	edi, eax
		sar	edi, 2
		test	edi, edi
		jz	short loc_8052092
		xor	esi, esi

loc_8052070:				; CODE XREF: sub_8052040+50j
		mov	eax, [ebp+arg_8]
		mov	[esp+8], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+4], eax
		mov	eax, [ebp+arg_0]
		mov	[esp], eax
		call	ds:(dword_8054F08 - 8054FF4h)[ebx+esi*4]
		add	esi, 1
		cmp	esi, edi
		jb	short loc_8052070

loc_8052092:				; CODE XREF: sub_8052040+2Cj
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_8052040	endp


; =============== S U B	R O U T	I N E =======================================


sub_805209A	proc near		; CODE XREF: sub_8052040+6p
					; sub_80520A0+4p
		mov	ebx, [esp+0]
		retn
sub_805209A	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_80520A0	proc near		; CODE XREF: sub_80495B0+60p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		call	sub_805209A
		add	ebx, 2F4Bh
		sub	esp, 0Ch
		mov	eax, ds:(off_8054FF0 - 8054FF4h)[ebx]
		test	eax, eax
		jz	short loc_80520BE
		mov	eax, [eax]

loc_80520BE:				; CODE XREF: sub_80520A0+1Aj
		mov	[esp+8], eax
		mov	eax, [ebp+arg_0]
		mov	dword ptr [esp+4], 0
		mov	[esp], eax
		call	___cxa_atexit
		add	esp, 0Ch
		pop	ebx
		pop	ebp
		retn
sub_80520A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_80520E0	proc near		; CODE XREF: _init_proc+27p
		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		mov	eax, ds:dword_8054F08
		cmp	eax, 0FFFFFFFFh
		jz	short loc_8052104
		mov	ebx, offset dword_8054F08
		db	66h
		nop

loc_80520F8:				; CODE XREF: sub_80520E0+22j
		sub	ebx, 4
		call	eax ; dword_8054F08
		mov	eax, [ebx]
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_80520F8

loc_8052104:				; CODE XREF: sub_80520E0+Fj
		add	esp, 4
		pop	ebx
		pop	ebp
		retn
sub_80520E0	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_fini		segment	dword public 'CODE' use32
		assume cs:_fini
		;org 805210Ch
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _term_proc
_term_proc	proc near
		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		call	$+5
		pop	ebx
		add	ebx, 2EDCh
		call	sub_8049260
		pop	ecx
		pop	ebx
		leave
		retn
_term_proc	endp

_fini		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rodata		segment	para public 'CONST' use32
		assume cs:_rodata
		;org 8052140h
		dd 3
		public _IO_stdin_used
_IO_stdin_used	dd 20001h
; char msgid[]
msgid		db 'Try `%s --help',27h,' for more information.',0Ah,0
					; DATA XREF: sub_80492F0+1Do
		align 10h
; char aUsageSOption__[]
aUsageSOption__	db 'Usage: %s [OPTION]... [FILE]...',0Ah,0 ; DATA XREF: sub_80492F0+66o
		align 4
; char aConcatenateFil[]
aConcatenateFil	db 'Concatenate FILE(s), or standard input, to standard output.',0Ah
					; DATA XREF: sub_80492F0+9Co
		db 0Ah
		db '  -A, --show-all           equivalent to -vET',0Ah
		db '  -b, --number-nonblank    number nonempty output lines',0Ah
		db '  -e                       equivalent to -vE',0Ah
		db '  -E, --show-ends          display $ at end of each line',0Ah
		db '  -n, --number             number all output lines',0Ah
		db '  -s, --squeeze-blank      suppress repeated empty output lines',0Ah
		db 0
		align 4
; char aTEquivalentToV[]
aTEquivalentToV	db '  -t                       equivalent to -vT',0Ah
					; DATA XREF: sub_80492F0+CAo
		db '  -T, --show-tabs          display TAB characters as ^I',0Ah
		db '  -u                       (ignored)',0Ah
		db '  -v, --show-nonprinting   use ^ and M- notation, except for LFD '
		db 'and TAB',0Ah,0
; char aHelpDisplayThi[]
aHelpDisplayThi	db '      --help     display this help and exit',0Ah,0
					; DATA XREF: sub_80492F0+F8o
		align 4
; char aVersionOutputV[]
aVersionOutputV	db '      --version  output version information and exit',0Ah,0
					; DATA XREF: sub_80492F0+126o
		align 10h
; char aWithNoFileOrWh[]
aWithNoFileOrWh	db 0Ah			; DATA XREF: sub_80492F0+154o
		db 'With no FILE, or when FILE is -, read standard input.',0Ah,0
; char aExamplesSFGOut[]
aExamplesSFGOut	db 0Ah			; DATA XREF: sub_80492F0+182o
		db 'Examples:',0Ah
		db '  %s f - g  Output f',27h,'s contents, then standard input, then g',27h
		db 's contents.',0Ah
		db '  %s        Copy standard input to standard output.',0Ah,0
		align 4
; char aSHomePageHttpW[]
aSHomePageHttpW	db '%s home page: <http://www.gnu.org/software/%s/>',0Ah,0
					; DATA XREF: sub_80492F0+1FDo
		align 4
; char aGeneralHelpUsi[]
aGeneralHelpUsi	db 'General help using GNU software: <http://www.gnu.org/gethelp/>',0Ah,0
					; DATA XREF: sub_80492F0+23Fo
; char aReportSTransla[]
aReportSTransla	db 'Report %s translation bugs to <http://translationproject.org/team'
					; DATA XREF: sub_80492F0+288o
		db '/>',0Ah,0
; char aReportSBugsToS[]
aReportSBugsToS	db 0Ah			; DATA XREF: sub_80492F0+1C3o
		db 'Report %s bugs to %s',0Ah,0
aBugCoreutils@g	db 'bug-coreutils@gnu.org',0 ; DATA XREF: sub_80492F0+1DDo
					; .text:0804B663o
word_80525FA	dw 4E47h		; DATA XREF: sub_80492F0+219o
					; sub_80495B0+1B6o ...
		db 55h,	20h
; char domainname[]
domainname	db 'coreutils',0        ; DATA XREF: sub_80492F0+211o
					; sub_80495B0+41o ...
; char dirname[]
dirname		db '/usr/share/locale',0 ; DATA XREF: sub_80495B0+39o
					; .rodata:08052F18o
; char aTorbjRnGranlun[]
aTorbjRnGranlun	db 'Torbjörn Granlund',0 ; DATA XREF: sub_80495B0:loc_8049742o
; char s2[]
s2		db 'Torbjorn Granlund',0 ; DATA XREF: sub_80495B0+19Ao
aRichardM_Stall	db 'Richard M. Stallman',0 ; DATA XREF: sub_80495B0+1AEo
aCat		db 'cat',0              ; DATA XREF: sub_80495B0+1BEo
; char shortopts[]
shortopts	db 'benstuvAET',0       ; DATA XREF: sub_80495B0+A2o
; char aStandardOutput[]
aStandardOutput	db 'standard output',0  ; DATA XREF: sub_80495B0+D9Ao
; char aSInputFileIsOu[]
aSInputFileIsOu	db '%s: input file is output file',0 ; DATA XREF: sub_80495B0+AD7o
; char aWriteError[]
aWriteError	db 'write error',0      ; DATA XREF: sub_80495B0+4C2o
					; sub_80495B0+8A7o ...
; char aCannotDoIoctlO[]
aCannotDoIoctlO	db 'cannot do ioctl on %s',0 ; DATA XREF: sub_80495B0+DE7o
; char aClosingStandar[]
aClosingStandar	db 'closing standard input',0 ; DATA XREF: sub_80495B0+D26o
aNumberNonblank	db 'number-nonblank',0  ; DATA XREF: .rodata:longoptso
aNumber		db 'number',0           ; DATA XREF: .rodata:08052750o
					; sub_804D1A0+1BAo
aSqueezeBlank	db 'squeeze-blank',0
aShowNonprintin	db 'show-nonprinting',0
aShowEnds	db 'show-ends',0
aShowTabs	db 'show-tabs',0
aShowAll	db 'show-all',0
aHelp		db 'help',0
aVersion	db 'version',0
		align 20h
; struct option	longopts
longopts	option <offset aNumberNonblank,	0, 0, 62h> ; DATA XREF:	sub_80495B0+9Ao
					; "number-nonblank"
		dd offset aNumber	; "number"
		dd 2 dup(0)
		dd 6Eh,	80526E0h, 2 dup(0)
		dd 73h,	80526EEh, 2 dup(0)
		dd 76h,	80526FFh, 2 dup(0)
		dd 45h,	8052709h, 2 dup(0)
		dd 54h,	8052713h, 2 dup(0)
		dd 41h,	805271Ch, 2 dup(0)
		dd 0FFFFFF7Eh, 8052721h, 2 dup(0)
		dd 0FFFFFF7Dh, 4 dup(0)
off_80527E0	dd offset a0+11h	; DATA XREF: sub_80495B0+5DBr
					; sub_80495B0+750r
dword_80527E4	dd 342E37h		; DATA XREF: .data:off_8055120o
a_libs		db '/.libs/',0          ; DATA XREF: sub_804A440+38o
byte_80527F0	db 6Ch,	74h		; DATA XREF: sub_804A440+4Eo
byte_80527F2	db 2Dh			; DATA XREF: sub_80495B0+2A6o
					; sub_80495B0+2F3r ...
byte_80527F3	db 0			; DATA XREF: sub_80495B0+924r
					; sub_80495B0+A3Er
; char file[]
file		db 'mbuiter.h',0        ; DATA XREF: sub_804A4C0+8A6o
					; sub_804A4C0+8CAo ...
; char assertion[]
assertion	db 'mbsinit (&iter->state)',0 ; DATA XREF: sub_804A4C0+8AEo
					; sub_804B150+4B6o ...
; char aIterCur_ptr0[]
aIterCur_ptr0	db '*iter->cur.ptr == ',27h,'\0',27h,0 ; DATA XREF: sub_804A4C0+8F6o
					; sub_804B150+4DAo ...
; char aIterCur_wc0[]
aIterCur_wc0	db 'iter->cur.wc == 0',0 ; DATA XREF: sub_804A4C0+8D2o
					; sub_804B150+226o ...
; char fromcode[]
fromcode	db 'UTF-8',0            ; DATA XREF: sub_804ADD0+2Bo
					; sub_804ADD0+12Co ...
aSS		db '%s (%s)',0          ; DATA XREF: sub_804ADD0+25Eo
					; .text:0804B0E6o
; char function[]
function	db 'mbuiter_multi_next',0 ; DATA XREF: sub_804A4C0:loc_804AD56o
					; sub_804A4C0:loc_804AD7Ao ...
; char aMbiter_h[]
aMbiter_h	db 'mbiter.h',0         ; DATA XREF: sub_804B150+21Eo
					; sub_804B150+4AEo ...
; char aMbiter_multi_n[]
aMbiter_multi_n	db 'mbiter_multi_next',0 ; DATA XREF: sub_804B150:loc_804B35Eo
					; sub_804B150:loc_804B5EEo ...
aReportBugsToS_	db 0Ah			; DATA XREF: .text:0804B64Fo
		db 'Report bugs to <%s>.',0Ah,0
aSSS		db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_804B6F0+3Do
aSS_0		db '%s %s',0Ah,0        ; DATA XREF: sub_804B6F0+1C8o
; char aC[]
aC		db '(C)',0              ; DATA XREF: sub_804B6F0+5Do
aWrittenByS_	db 'Written by %s.',0Ah,0 ; DATA XREF: sub_804B6F0+138o
aWrittenBySAndS	db 'Written by %s and %s.',0Ah,0 ; DATA XREF: sub_804B6F0+14Ao
aWrittenBySSAnd	db 'Written by %s, %s, and %s.',0Ah,0 ; DATA XREF: sub_804B6F0+15Co
		align 4
aSHomePageHtt_0	db '%s home page: <http://www.gnu.org/software/%s/>.',0Ah,0
					; DATA XREF: .text:0804B683o
		align 10h
aGeneralHelpU_0	db 'General help using GNU software: <http://www.gnu.org/gethelp/>.',0Ah
					; DATA XREF: .text:0804B6C5o
		db 0
		align 4
; char aLicenseGplv3Gn[]
aLicenseGplv3Gn	db 0Ah			; DATA XREF: sub_804B6F0+9Do
		db 'License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licens'
		db 'es/gpl.html>.',0Ah
		db 'This is free software: you are free to change and redistribute it'
		db '.',0Ah
		db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
		db 0Ah,0
		align 10h
aWrittenBySSSAn	db 'Written by %s, %s, %s,',0Ah ; DATA XREF: sub_804B6F0+171o
		db 'and %s.',0Ah,0
aWrittenBySSSSA	db 'Written by %s, %s, %s,',0Ah ; DATA XREF: sub_804B6F0+186o
		db '%s, and %s.',0Ah,0
aWrittenBySSS_2	db 'Written by %s, %s, %s,',0Ah ; DATA XREF: sub_804B6F0+19Bo
		db '%s, %s, and %s.',0Ah,0
aWrittenBySSS_3	db 'Written by %s, %s, %s,',0Ah ; DATA XREF: sub_804B6F0+1B0o
		db '%s, %s, %s, and %s.',0Ah,0
aWrittenBySSS_0	db 'Written by %s, %s, %s,',0Ah ; DATA XREF: sub_804B6F0+10Fo
		db '%s, %s, %s, %s,',0Ah
		db 'and %s.',0Ah,0
aWrittenBySSS_1	db 'Written by %s, %s, %s,',0Ah ; DATA XREF: sub_804B6F0+121o
		db '%s, %s, %s, %s,',0Ah
		db '%s, and %s.',0Ah,0
; char aWrittenBySSSSS[]
aWrittenBySSSSS	db 'Written by %s, %s, %s,',0Ah ; DATA XREF: sub_804B6F0+CAo
		db '%s, %s, %s, %s,',0Ah
		db '%s, %s, and others.',0Ah,0
off_8052B68	dd offset loc_804B81B	; DATA XREF: sub_804B6F0:loc_804B7F0r
		dd offset loc_804B820	; jump table for switch	statement
		dd offset loc_804B832
		dd offset loc_804B844
		dd offset loc_804B859
		dd offset loc_804B86E
		dd offset loc_804B883
		dd offset loc_804B898
		dd offset loc_804B7F7
		dd offset loc_804B809
		align 20h
aCopyrightSDFre	db 'Copyright %s %d Free Software Foundation, Inc.',0
					; DATA XREF: sub_804B6F0+79o
; char aMemoryExhauste[]
aMemoryExhauste	db 'memory exhausted',0 ; DATA XREF: sub_804B910+Eo
; char format[]
format		db '%s: %s',0           ; DATA XREF: sub_804BBC0+87o
					; sub_80495B0+984o ...
byte_8052BE7	db 43h			; DATA XREF: sub_804BCA0+2Dr
byte_8052BE8	db 0			; DATA XREF: sub_804BCA0+39r
aPosix		db 'POSIX',0            ; DATA XREF: sub_804BCA0:loc_804BCF0o
asc_8052BEF	db '"',0                ; DATA XREF: sub_804BF90+37Co
					; sub_804BF90+399o ...
; char asc_8052BF1[]
asc_8052BF1	db '`',0                ; DATA XREF: sub_804BF90+240o
					; sub_804BF90+25Bo
aLiteral	db 'literal',0          ; DATA XREF: .rodata:08052F00o
aShell		db 'shell',0            ; DATA XREF: .rodata:08052F04o
aShellAlways	db 'shell-always',0     ; DATA XREF: .rodata:08052F08o
aC_0		db 'c',0                ; DATA XREF: .rodata:08052F0Co
aCMaybe		db 'c-maybe',0          ; DATA XREF: .rodata:08052F10o
aEscape		db 'escape',0           ; DATA XREF: .rodata:08052F14o
aClocale	db 'clocale',0          ; DATA XREF: .rodata:08052F1Co
		align 20h
off_8052C40	dd offset loc_804C271	; DATA XREF: sub_804BF90+33r
		dd offset loc_804C28E	; jump table for switch	statement
		dd offset loc_804C2B2
		dd offset loc_804C2E5
		dd offset loc_804C318
		dd offset loc_804BFCA
		dd offset loc_804C1C8
		dd offset loc_804C1C8
off_8052C60	dd offset loc_804C4E8, offset loc_804C043, offset loc_804C043
					; DATA XREF: sub_804BF90+46Er
		dd offset loc_804C043, offset loc_804C043, offset loc_804C043 ;	jump table for switch statement
		dd offset loc_804C043, offset loc_804C4D8, offset loc_804C4C8
		dd offset loc_804C4B8, offset loc_804C4A8, offset loc_804C460
		dd offset loc_804C408, offset loc_804C488, offset loc_804C043
		dd offset loc_804C043, offset loc_804C043, offset loc_804C043
		dd offset loc_804C043, offset loc_804C043, offset loc_804C043
		dd offset loc_804C043, offset loc_804C043, offset loc_804C043
		dd offset loc_804C043, offset loc_804C043, offset loc_804C043
		dd offset loc_804C043, offset loc_804C043, offset loc_804C043
		dd offset loc_804C043, offset loc_804C043, offset loc_804C36C
		dd offset loc_804C36C, offset loc_804C36C, offset loc_804C365
		dd offset loc_804C36C, offset loc_804C380, offset loc_804C36C
		dd offset loc_804C648, offset loc_804C36C, offset loc_804C36C
		dd offset loc_804C36C, offset loc_804C380, offset loc_804C380
		dd offset loc_804C380, offset loc_804C380, offset loc_804C380
		dd offset loc_804C380, offset loc_804C380, offset loc_804C380
		dd offset loc_804C380, offset loc_804C380, offset loc_804C380
		dd offset loc_804C380, offset loc_804C380, offset loc_804C380
		dd offset loc_804C380, offset loc_804C380, offset loc_804C36C
		dd offset loc_804C36C, offset loc_804C36C, offset loc_804C36C
		dd offset loc_804C590, offset loc_804C043, offset loc_804C380
		dd offset loc_804C380, offset loc_804C380, offset loc_804C380
		dd offset loc_804C380, offset loc_804C380, offset loc_804C380
		dd offset loc_804C380, offset loc_804C380, offset loc_804C380
		dd offset loc_804C380, offset loc_804C380, offset loc_804C380
		dd offset loc_804C380, offset loc_804C380, offset loc_804C380
		dd offset loc_804C380, offset loc_804C380, offset loc_804C380
		dd offset loc_804C380, offset loc_804C380, offset loc_804C380
		dd offset loc_804C380, offset loc_804C380, offset loc_804C380
		dd offset loc_804C380, offset loc_804C36C, offset loc_804C568
		dd offset loc_804C380, offset loc_804C36C, offset loc_804C380
		dd offset loc_804C36C, offset loc_804C380, offset loc_804C380
		dd offset loc_804C380, offset loc_804C380, offset loc_804C380
		dd offset loc_804C380, offset loc_804C380, offset loc_804C380
		dd offset loc_804C380, offset loc_804C380, offset loc_804C380
		dd offset loc_804C380, offset loc_804C380, offset loc_804C380
		dd offset loc_804C380, offset loc_804C380, offset loc_804C380
		dd offset loc_804C380, offset loc_804C380, offset loc_804C380
		dd offset loc_804C380, offset loc_804C380, offset loc_804C380
		dd offset loc_804C380, offset loc_804C380, offset loc_804C380
		dd offset loc_804C350, offset loc_804C36C, offset loc_804C350
		dd offset loc_804C365
off_8052E5C	dd offset loc_804C420	; DATA XREF: sub_804BF90+877r
		dd offset loc_804C420	; jump table for switch	statement
		dd offset loc_804C810
		dd offset loc_804C420
		dd offset loc_804C810
		dd offset loc_804C420
		dd offset loc_804C810
		dd offset loc_804C810
		dd offset loc_804C810
		dd offset loc_804C810
		dd offset loc_804C810
		dd offset loc_804C810
		dd offset loc_804C810
		dd offset loc_804C810
		dd offset loc_804C810
		dd offset loc_804C810
		dd offset loc_804C810
		dd offset loc_804C810
		dd offset loc_804C810
		dd offset loc_804C810
		dd offset loc_804C810
		dd offset loc_804C810
		dd offset loc_804C810
		dd offset loc_804C810
		dd offset loc_804C810
		dd offset loc_804C810
		dd offset loc_804C810
		dd offset loc_804C810
		dd offset loc_804C810
		dd offset loc_804C810
		dd offset loc_804C810
		dd offset loc_804C810
		dd offset loc_804C810
		dd offset loc_804C420
		align 20h
		dd offset aLiteral	; "literal"
		dd offset aShell	; "shell"
		dd offset aShellAlways	; "shell-always"
		dd offset aC_0		; "c"
		dd offset aCMaybe	; "c-maybe"
		dd offset aEscape	; "escape"
		dd offset dirname+0Bh
		dd offset aClocale	; "clocale"
		dd 9 dup(0)
		dd 1, 2, 3, 4, 5, 6, 7
; char name[]
name		db 'CHARSETALIASDIR',0  ; DATA XREF: sub_804D1A0+DBo
aUsrLib		db '/usr/lib',0         ; DATA XREF: sub_804D1A0+101o
; char a50s50s[]
a50s50s		db '%50s %50s',0        ; DATA XREF: sub_804D1A0+246o
aAscii		db 'ASCII',0            ; DATA XREF: sub_804D1A0+97o
		align 20h
dword_8052FA0	dd 1A00h		; DATA XREF: sub_804A4C0+A9r
					; sub_804A4C0+1B9r ...
		dd 0FFFFFFEFh, 0FFFFFFFEh, 7FFFFFFEh, 4	dup(0)
; char aMbuiter_mult_0[]
aMbuiter_mult_0	db 'mbuiter_multi_next',0 ; DATA XREF: sub_804D5F0:loc_804D6F7o
					; sub_804D5F0:loc_804D71Bo ...
		align 4
off_8052FD4	dd offset loc_804F8F0	; DATA XREF: sub_804F350+606r
		dd offset loc_804FC80	; jump table for switch	statement
		dd offset loc_804FAE0
		dd offset loc_804FC50
		dd offset loc_804FBB0
		dd offset loc_804F960
		dd offset loc_804F960
		dd offset loc_804F960
		dd offset loc_804F960
		dd offset loc_804FCB0
		dd offset loc_804FD10
		dd offset loc_804FD78
		dd offset loc_804FE10
		dd offset loc_804F960
		dd offset loc_804F960
		dd offset loc_804F960
		dd offset loc_804F960
		dd offset loc_804F960
off_805301C	dd offset loc_80504F0	; DATA XREF: sub_804F350+D3Fr
		dd offset loc_8050518	; jump table for switch	statement
		dd offset loc_8050098
		dd offset loc_8050098
		dd offset loc_8050500
; char aMbuiter_mult_1[]
aMbuiter_mult_1	db 'mbuiter_multi_next',0 ; DATA XREF: sub_8051210:loc_80513ACo
					; sub_8051210:loc_80513D5o ...
aNull		db '(NULL)',0           ; DATA XREF: sub_8051480+F0o
		align 4
off_805304C	dd offset loc_80514A5	; DATA XREF: sub_8051480+3Ar
		dd offset loc_8051520
		dd offset loc_8051520
		dd offset loc_8051510
		dd offset loc_8051510
		dd offset loc_80514C8
		dd offset loc_80514C8
		dd offset loc_80514C8
		dd offset loc_80514C8
		dd offset loc_80514E8
		dd offset loc_80514E8
		dd offset loc_8051530
		dd offset loc_8051540
		dd offset loc_80514C8
		dd offset loc_80514C8
		dd offset loc_8051560
		dd offset loc_8051580
		dd offset loc_80514C8
		dd offset loc_80514C8
		dd offset loc_80514C8
		dd offset loc_80514C8
		dd offset loc_80514C8
		dd offset loc_80514C8
dword_80530A8	dd 28h,	4Eh, 55h, 2 dup(4Ch), 29h, 0 ; DATA XREF: sub_8051480+110o
off_80530C4	dd offset loc_80518A9, offset loc_80517B2, offset loc_80517B2
					; DATA XREF: sub_80515A0+251r
		dd offset loc_80517B2, offset loc_80517B2, offset loc_80517B2 ;	jump table for switch statement
		dd offset loc_80517B2, offset loc_80517B2, offset loc_80517B2
		dd offset loc_80517B2, offset loc_80517B2, offset loc_80517B2
		dd offset loc_80517B2, offset loc_80517B2, offset loc_80517B2
		dd offset loc_80517B2, offset loc_80517B2, offset loc_80517B2
		dd offset loc_80517B2, offset loc_80517B2, offset loc_80517B2
		dd offset loc_80517B2, offset loc_80517B2, offset loc_80517B2
		dd offset loc_80517B2, offset loc_80517B2, offset loc_80517B2
		dd offset loc_80517B2, offset loc_8051B52, offset loc_80517B2
		dd offset loc_8051B41, offset loc_80517B2, offset loc_8051B52
		dd offset loc_8051B52, offset loc_8051B52, offset loc_80517B2
		dd offset loc_80517B2, offset loc_80517B2, offset loc_80517B2
		dd offset loc_80517B2, offset loc_80517B2, offset loc_80517B2
		dd offset loc_80517B2, offset loc_80517B2, offset loc_80517B2
		dd offset loc_80517B2, offset loc_8051B30, offset loc_80517B2
		dd offset loc_80517B2, offset loc_80517B2, offset loc_80517B2
		dd offset loc_8051B0E, offset loc_80517B2, offset loc_80517B2
		dd offset loc_80517B2, offset loc_80517B2, offset loc_80517B2
		dd offset loc_80517B2, offset loc_80517B2, offset loc_80517B2
		dd offset loc_8051B52, offset loc_80517B2, offset loc_8051BD0
		dd offset loc_8051BA8, offset loc_8051B52, offset loc_8051B52
		dd offset loc_8051B52, offset loc_80517B2, offset loc_8051BA8
		dd offset loc_80517B2, offset loc_80517B2, offset loc_80517B2
		dd offset loc_80517B2, offset loc_8051B85, offset loc_8051B0E
		dd offset loc_8051B78, offset loc_80517B2, offset loc_80517B2
		dd offset loc_80517F8, offset loc_80517B2, offset loc_8051B0E
		dd offset loc_80517B2, offset loc_80517B2, offset loc_8051B0E
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame	segment	dword public 'CONST' use32
		assume cs:_eh_frame
		;org 8053214h
		align 8
_eh_frame	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_ctors		segment	dword public 'DATA' use32
		assume cs:_ctors
		;org 8054F08h
dword_8054F08	dd 0FFFFFFFFh		; DATA XREF: sub_8052040+19o
					; sub_8052040+1Fo ...
		align 10h
_ctors		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_dtors		segment	dword public 'DATA' use32
		assume cs:_dtors
		;org 8054F10h
dword_8054F10	dd 0FFFFFFFFh		; DATA XREF: sub_8049260+1Ao
					; sub_8049260+38r
dword_8054F14	dd 0			; DATA XREF: sub_8049260+15o
_dtors		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_jcr		segment	dword public 'DATA' use32
		assume cs:_jcr
		;org 8054F18h
dword_8054F18	dd 0			; DATA XREF: sub_80492C0+6r
					; sub_80492C0+18o
_jcr		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_got		segment	dword public 'DATA' use32
		assume cs:_got
		;org 8054FECh
__gmon_start___ptr dd offset __gmon_start__ ; DATA XREF: _init_proc+13r
off_8054FF0	dd offset dword_8055100	; DATA XREF: sub_80520A0+12r
_got		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_got_plt	segment	dword public 'DATA' use32
		assume cs:_got_plt
		;org 8054FF4h
		align 10h
off_8055000	dd offset getpagesize	; DATA XREF: _getpagesizer
off_8055004	dd offset abort		; DATA XREF: _abortr
off_8055008	dd offset __errno_location ; DATA XREF:	___errno_locationr
off_805500C	dd offset __cxa_atexit	; DATA XREF: ___cxa_atexitr
off_8055010	dd offset open64	; DATA XREF: _open64r
off_8055014	dd offset fputs_unlocked ; DATA	XREF: _fputs_unlockedr
off_8055018	dd offset __ctype_get_mb_cur_max ; DATA	XREF: ___ctype_get_mb_cur_maxr
off_805501C	dd offset __fprintf_chk	; DATA XREF: ___fprintf_chkr
off_8055020	dd offset __gmon_start__ ; DATA	XREF: ___gmon_start__r
off_8055024	dd offset realloc	; DATA XREF: _reallocr
off_8055028	dd offset iconv_open	; DATA XREF: _iconv_openr
off_805502C	dd offset __printf_chk	; DATA XREF: ___printf_chkr
off_8055030	dd offset strchr	; DATA XREF: _strchrr
off_8055034	dd offset getenv	; DATA XREF: _getenvr
off_8055038	dd offset calloc	; DATA XREF: _callocr
off_805503C	dd offset write		; DATA XREF: _writer
off_8055040	dd offset __uflow	; DATA XREF: ___uflowr
off_8055044	dd offset memset	; DATA XREF: _memsetr
off_8055048	dd offset fopen64	; DATA XREF: _fopen64r
off_805504C	dd offset __libc_start_main ; DATA XREF: ___libc_start_mainr
off_8055050	dd offset stpcpy	; DATA XREF: _stpcpyr
off_8055054	dd offset _exit		; DATA XREF: __exitr
off_8055058	dd offset strrchr	; DATA XREF: _strrchrr
off_805505C	dd offset __assert_fail	; DATA XREF: ___assert_failr
off_8055060	dd offset bindtextdomain ; DATA	XREF: _bindtextdomainr
off_8055064	dd offset mbrtowc	; DATA XREF: _mbrtowcr
off_8055068	dd offset read		; DATA XREF: _readr
off_805506C	dd offset ungetc	; DATA XREF: _ungetcr
off_8055070	dd offset free		; DATA XREF: _freer
off_8055074	dd offset dcgettext	; DATA XREF: _dcgettextr
off_8055078	dd offset getopt_long	; DATA XREF: _getopt_longr
off_805507C	dd offset ioctl		; DATA XREF: _ioctlr
off_8055080	dd offset __ctype_b_loc	; DATA XREF: ___ctype_b_locr
off_8055084	dd offset fclose	; DATA XREF: _fcloser
off_8055088	dd offset mbsinit	; DATA XREF: _mbsinitr
off_805508C	dd offset memcpy	; DATA XREF: _memcpyr
off_8055090	dd offset strlen	; DATA XREF: _strlenr
off_8055094	dd offset iconv		; DATA XREF: _iconvr
off_8055098	dd offset setlocale	; DATA XREF: _setlocaler
off_805509C	dd offset strcpy	; DATA XREF: _strcpyr
off_80550A0	dd offset iswspace	; DATA XREF: _iswspacer
off_80550A4	dd offset close		; DATA XREF: _closer
off_80550A8	dd offset fwrite	; DATA XREF: _fwriter
off_80550AC	dd offset nl_langinfo	; DATA XREF: _nl_langinfor
off_80550B0	dd offset malloc	; DATA XREF: _mallocr
off_80550B4	dd offset iswalnum	; DATA XREF: _iswalnumr
off_80550B8	dd offset __stack_chk_fail ; DATA XREF:	___stack_chk_failr
off_80550BC	dd offset iconv_close	; DATA XREF: _iconv_closer
off_80550C0	dd offset __fpending	; DATA XREF: ___fpendingr
off_80550C4	dd offset error		; DATA XREF: _errorr
off_80550C8	dd offset strnlen	; DATA XREF: _strnlenr
off_80550CC	dd offset memmove	; DATA XREF: _memmover
off_80550D0	dd offset __strndup	; DATA XREF: ___strndupr
off_80550D4	dd offset textdomain	; DATA XREF: _textdomainr
off_80550D8	dd offset __fxstat64	; DATA XREF: ___fxstat64r
off_80550DC	dd offset fscanf	; DATA XREF: _fscanfr
off_80550E0	dd offset __sprintf_chk	; DATA XREF: ___sprintf_chkr
off_80550E4	dd offset memchr	; DATA XREF: _memchrr
off_80550E8	dd offset __snprintf_chk ; DATA	XREF: ___snprintf_chkr
off_80550EC	dd offset iswprint	; DATA XREF: _iswprintr
off_80550F0	dd offset strcmp	; DATA XREF: _strcmpr
off_80550F4	dd offset __strdup	; DATA XREF: ___strdupr
off_80550F8	dd offset exit		; DATA XREF: _exitr
_got_plt	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 80550FCh
		align 10h
dword_8055100	dd 0			; DATA XREF: .got:off_8054FF0o
dword_8055104	dd 8055114h		; DATA XREF: sub_80495B0:loc_8049BC9r
					; sub_80495B0+629w ...
a0		db '                 0',9,0 ; DATA XREF: sub_80495B0+601o
					; sub_80495B0+779o ...
off_805511C	dd offset a0+11h	; DATA XREF: sub_80495B0+5F4r
					; sub_80495B0+610w ...
off_8055120	dd offset dword_80527E4	; DATA XREF: sub_80495B0+1CAr
; int status
status		dd 1			; DATA XREF: sub_804B910+22r
					; sub_804BBC0:loc_804BC65r
; void *ptr
ptr		dd offset dword_8055130	; DATA XREF: .text:0804BE48r
					; .text:0804BEADw ...
dword_805512C	dd 1			; DATA XREF: .text:0804BE4Er
					; .text:0804BE6Fr ...
dword_8055130	dd 100h			; DATA XREF: .text:0804BE89w
					; .text:loc_804BE9Do ...
off_8055134	dd offset dword_80551E0	; DATA XREF: .text:0804BE93w
					; sub_804C8D0+150r
_data		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 8055140h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
		public optind
optind		dd ?			; DATA XREF: sub_80495B0:loc_8049848r
					; Copy of shared data
		public stderr
; FILE *stderr
stderr		dd ?			; DATA XREF: sub_80492F0+41r
					; sub_804BBC0:loc_804BBF2r
					; Copy of shared data
		align 20h
		public stdout
; FILE *stdout
stdout		dd ?			; DATA XREF: sub_80492F0+8Er
					; sub_80492F0+BCr ...
					; Copy of shared data
byte_8055164	db ?			; DATA XREF: sub_8049260+7r
					; sub_8049260:loc_80492A8w
		align 4
dword_8055168	dd ?			; DATA XREF: sub_8049260+10r
					; sub_8049260+33w ...
dword_805516C	dd ?			; DATA XREF: sub_80495B0+41Dr
					; sub_80495B0+9C2w ...
dword_8055170	dd ?			; DATA XREF: sub_80495B0+2A6w
					; sub_80495B0+2EBr ...
; int fd
fd		dd ?			; DATA XREF: sub_80495B0+311w
					; sub_80495B0+571r ...
dword_8055178	dd ?			; DATA XREF: sub_80492F0+Fr
					; sub_80492F0:loc_8049348r ...
dword_805517C	dd ?			; DATA XREF: .text:0804BBA7w
					; sub_804BBC0+72r
byte_8055180	db ?			; DATA XREF: .text:0804BBB7w
					; sub_804BBC0+1Dr
		align 20h
dword_80551A0	dd ?			; DATA XREF: .text:loc_804BD70o
					; .text:0804BD9Bo ...
dword_80551A4	dd ?			; DATA XREF: sub_804CA50+22r
dword_80551A8	dd ?			; DATA XREF: sub_804CA50+2Fr
dword_80551AC	dd ?			; DATA XREF: sub_804CA50+38r
dword_80551B0	dd ?			; DATA XREF: sub_804CA50+41r
dword_80551B4	dd ?			; DATA XREF: sub_804CA50+4Ar
dword_80551B8	dd ?			; DATA XREF: sub_804CA50+53r
dword_80551BC	dd ?			; DATA XREF: sub_804CA50+5Cr
dword_80551C0	dd ?			; DATA XREF: sub_804CA50+65r
dword_80551C4	dd ?			; DATA XREF: sub_804CA50+6Er
		align 20h
dword_80551E0	dd 40h dup(?)		; DATA XREF: .text:0804BE7Ao
					; .text:0804BE93o ...
; char *s
s		dd ?			; DATA XREF: sub_804D1A0+2Dr
					; sub_804D1A0:loc_804D260r ...
		align 20h
dword_8055300	dd ?			; DATA XREF: sub_8051140+37r
					; sub_80511B0+48r ...
		dd 100h	dup(?)
_bss		ends

; ===========================================================================

; Segment type:	Externs
; extern
; int getpagesize(void)
		extrn getpagesize:near	; DATA XREF: .got.plt:off_8055000o
; void abort(void)
		extrn abort:near	; DATA XREF: .got.plt:off_8055004o
; int *_errno_location(void)
		extrn __errno_location:near ; DATA XREF: .got.plt:off_8055008o
		extrn __cxa_atexit:near	; DATA XREF: .got.plt:off_805500Co
		extrn open64:near	; DATA XREF: .got.plt:off_8055010o
		extrn fputs_unlocked:near ; DATA XREF: .got.plt:off_8055014o
; size_t _ctype_get_mb_cur_max(void)
		extrn __ctype_get_mb_cur_max:near ; DATA XREF: .got.plt:off_8055018o
		extrn __fprintf_chk:near ; DATA	XREF: .got.plt:off_805501Co
; void *realloc(void *ptr, size_t size)
		extrn realloc:near	; DATA XREF: .got.plt:off_8055024o
; iconv_t iconv_open(const char	*tocode, const char *fromcode)
		extrn iconv_open:near	; DATA XREF: .got.plt:off_8055028o
		extrn __printf_chk:near	; DATA XREF: .got.plt:off_805502Co
; char *strchr(const char *s, int c)
		extrn strchr:near	; DATA XREF: .got.plt:off_8055030o
; char *getenv(const char *name)
		extrn getenv:near	; DATA XREF: .got.plt:off_8055034o
; void *calloc(size_t nmemb, size_t size)
		extrn calloc:near	; DATA XREF: .got.plt:off_8055038o
; ssize_t write(int fd,	const void *buf, size_t	n)
		extrn write:near	; DATA XREF: .got.plt:off_805503Co
; int _uflow(_IO_FILE *)
		extrn __uflow:near	; DATA XREF: .got.plt:off_8055040o
; void *memset(void *s,	int c, size_t n)
		extrn memset:near	; DATA XREF: .got.plt:off_8055044o
		extrn fopen64:near	; DATA XREF: .got.plt:off_8055048o
		extrn __libc_start_main:near ; DATA XREF: .got.plt:off_805504Co
		extrn stpcpy:near	; DATA XREF: .got.plt:off_8055050o
; void exit(int	status)
		extrn _exit:near	; DATA XREF: .got.plt:off_8055054o
; char *strrchr(const char *s, int c)
		extrn strrchr:near	; DATA XREF: .got.plt:off_8055058o
; void _assert_fail(const char *assertion, const char *file, unsigned int line,	const char *function)
		extrn __assert_fail:near ; DATA	XREF: .got.plt:off_805505Co
; char *bindtextdomain(const char *domainname, const char *dirname)
		extrn bindtextdomain:near ; DATA XREF: .got.plt:off_8055060o
; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n,	mbstate_t *p)
		extrn mbrtowc:near	; DATA XREF: .got.plt:off_8055064o
; ssize_t read(int fd, void *buf, size_t nbytes)
		extrn read:near		; DATA XREF: .got.plt:off_8055068o
; int ungetc(int c, FILE *stream)
		extrn ungetc:near	; DATA XREF: .got.plt:off_805506Co
; void free(void *ptr)
		extrn free:near		; DATA XREF: .got.plt:off_8055070o
; char *dcgettext(const	char *domainname, const	char *msgid, int category)
		extrn dcgettext:near	; DATA XREF: .got.plt:off_8055074o
; int getopt_long(int argc, char *const	*argv, const char *shortopts, const struct option *longopts, int *longind)
		extrn getopt_long:near	; DATA XREF: .got.plt:off_8055078o
; int ioctl(int	fd, unsigned __int32 request, ...)
		extrn ioctl:near	; DATA XREF: .got.plt:off_805507Co
; const	unsigned __int16 **_ctype_b_loc(void)
		extrn __ctype_b_loc:near ; DATA	XREF: .got.plt:off_8055080o
; int fclose(FILE *stream)
		extrn fclose:near	; DATA XREF: .got.plt:off_8055084o
; int mbsinit(const mbstate_t *ps)
		extrn mbsinit:near	; DATA XREF: .got.plt:off_8055088o
; void *memcpy(void *dest, const void *src, size_t n)
		extrn memcpy:near	; DATA XREF: .got.plt:off_805508Co
; size_t strlen(const char *s)
		extrn strlen:near	; DATA XREF: .got.plt:off_8055090o
; size_t iconv(iconv_t cd, char	**inbuf, size_t	*inbytesleft, char **outbuf, size_t *outbytesleft)
		extrn iconv:near	; DATA XREF: .got.plt:off_8055094o
; char *setlocale(int category,	const char *locale)
		extrn setlocale:near	; DATA XREF: .got.plt:off_8055098o
; char *strcpy(char *dest, const char *src)
		extrn strcpy:near	; DATA XREF: .got.plt:off_805509Co
; int iswspace(wint_t wc)
		extrn iswspace:near	; DATA XREF: .got.plt:off_80550A0o
; int close(int	fd)
		extrn close:near	; DATA XREF: .got.plt:off_80550A4o
; size_t fwrite(const void *ptr, size_t	size, size_t n,	FILE *s)
		extrn fwrite:near	; DATA XREF: .got.plt:off_80550A8o
; char *nl_langinfo(nl_item item)
		extrn nl_langinfo:near	; DATA XREF: .got.plt:off_80550ACo
; void *malloc(size_t size)
		extrn malloc:near	; DATA XREF: .got.plt:off_80550B0o
; int iswalnum(wint_t wc)
		extrn iswalnum:near	; DATA XREF: .got.plt:off_80550B4o
		extrn __stack_chk_fail:near ; DATA XREF: .got.plt:off_80550B8o
; int iconv_close(iconv_t cd)
		extrn iconv_close:near	; DATA XREF: .got.plt:off_80550BCo
; size_t _fpending(FILE	*fp)
		extrn __fpending:near	; DATA XREF: .got.plt:off_80550C0o
; void error(int status, int errnum, const char	*format, ...)
		extrn error:near	; DATA XREF: .got.plt:off_80550C4o
		extrn strnlen:near	; DATA XREF: .got.plt:off_80550C8o
; void *memmove(void *dest, const void *src, size_t n)
		extrn memmove:near	; DATA XREF: .got.plt:off_80550CCo
		extrn __strndup:near	; DATA XREF: .got.plt:off_80550D0o
; char *textdomain(const char *domainname)
		extrn textdomain:near	; DATA XREF: .got.plt:off_80550D4o
		extrn __fxstat64:near	; DATA XREF: .got.plt:off_80550D8o
; int fscanf(FILE *stream, const char *format, ...)
		extrn fscanf:near	; DATA XREF: .got.plt:off_80550DCo
		extrn __sprintf_chk:near ; DATA	XREF: .got.plt:off_80550E0o
; void *memchr(const void *s, int c, size_t n)
		extrn memchr:near	; DATA XREF: .got.plt:off_80550E4o
		extrn __snprintf_chk:near ; DATA XREF: .got.plt:off_80550E8o
; int iswprint(wint_t wc)
		extrn iswprint:near	; DATA XREF: .got.plt:off_80550ECo
; int strcmp(const char	*s1, const char	*s2)
		extrn strcmp:near	; DATA XREF: .got.plt:off_80550F0o
		extrn __strdup:near	; DATA XREF: .got.plt:off_80550F4o
; void exit(int	status)
		extrn exit:near		; DATA XREF: .got.plt:off_80550F8o
		extrn __gmon_start__ ; weak ; DATA XREF: .got:__gmon_start___ptro
					; .got.plt:off_8055020o


		end start

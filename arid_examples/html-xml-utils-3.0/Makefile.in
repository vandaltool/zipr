# Makefile.in generated by automake 1.8.3 from Makefile.am.
# @configure_input@

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

# Copyright © 1994-2004 World Wide Web Consortium
# See http://www.w3.org/Consortium/Legal/copyright-software-19980720.html
#
# Author: Bert Bos <bert@w3.org>
# Created: 31 Mar 2000
# Version: $Id: Makefile.am,v 1.25 2004/04/21 15:34:36 bbos Exp $


SOURCES = $(addid_SOURCES) $(asc2xml_SOURCES) $(cexport_SOURCES) $(cite_SOURCES) $(count_SOURCES) $(extract_SOURCES) $(htmlclean_SOURCES) $(htmlprune_SOURCES) $(incl_SOURCES) $(index_SOURCES) $(mkbib_SOURCES) $(multitoc_SOURCES) $(normalize_SOURCES) $(num_SOURCES) $(pipe_SOURCES) $(toc_SOURCES) $(uncdata_SOURCES) $(unent_SOURCES) $(unpipe_SOURCES) $(wls_SOURCES) $(xml2asc_SOURCES) $(xmlns_SOURCES) $(xref_SOURCES) $(xselect_SOURCES)

srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
top_builddir = .
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = @INSTALL@
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
bin_PROGRAMS = addid$(EXEEXT) cexport$(EXEEXT) cite$(EXEEXT) \
	count$(EXEEXT) extract$(EXEEXT) htmlclean$(EXEEXT) \
	htmlprune$(EXEEXT) incl$(EXEEXT) index$(EXEEXT) mkbib$(EXEEXT) \
	multitoc$(EXEEXT) normalize$(EXEEXT) num$(EXEEXT) \
	pipe$(EXEEXT) xselect$(EXEEXT) toc$(EXEEXT) uncdata$(EXEEXT) \
	unent$(EXEEXT) unpipe$(EXEEXT) wls$(EXEEXT) xmlns$(EXEEXT) \
	xref$(EXEEXT) xml2asc$(EXEEXT) asc2xml$(EXEEXT)
subdir = .
DIST_COMMON = README $(am__configure_deps) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in $(srcdir)/config.h.in \
	$(top_srcdir)/configure AUTHORS COPYING ChangeLog INSTALL NEWS \
	TODO depcomp html.c html.h install-sh malloc.c missing scan.c \
	strdup.c strerror.c strstr.c tfind.c tsearch.c twalk.c ylwrap
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \
	$(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \
 configure.lineno configure.status.lineno
mkinstalldirs = $(mkdir_p)
CONFIG_HEADER = config.h
CONFIG_CLEAN_FILES =
am__installdirs = "$(DESTDIR)$(bindir)" "$(DESTDIR)$(bindir)" "$(DESTDIR)$(man1dir)"
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
PROGRAMS = $(bin_PROGRAMS)
am_addid_OBJECTS = addid.$(OBJEXT) html.$(OBJEXT) scan.$(OBJEXT) \
	dtd.$(OBJEXT) openurl.$(OBJEXT) errexit.$(OBJEXT) \
	url.$(OBJEXT) connectsock.$(OBJEXT) heap.$(OBJEXT) \
	tree.$(OBJEXT) types.$(OBJEXT) genid.$(OBJEXT) class.$(OBJEXT) \
	hash.$(OBJEXT)
addid_OBJECTS = $(am_addid_OBJECTS)
addid_LDADD = $(LDADD)
addid_DEPENDENCIES = @LIBOBJS@
am_asc2xml_OBJECTS = asc2xml.$(OBJEXT)
asc2xml_OBJECTS = $(am_asc2xml_OBJECTS)
asc2xml_LDADD = $(LDADD)
asc2xml_DEPENDENCIES = @LIBOBJS@
am_cexport_OBJECTS = cexport.$(OBJEXT)
cexport_OBJECTS = $(am_cexport_OBJECTS)
cexport_LDADD = $(LDADD)
cexport_DEPENDENCIES = @LIBOBJS@
am_cite_OBJECTS = heap.$(OBJEXT) errexit.$(OBJEXT) cite.$(OBJEXT)
cite_OBJECTS = $(am_cite_OBJECTS)
cite_LDADD = $(LDADD)
cite_DEPENDENCIES = @LIBOBJS@
am_count_OBJECTS = count.$(OBJEXT) html.$(OBJEXT) scan.$(OBJEXT) \
	types.$(OBJEXT) errexit.$(OBJEXT) heap.$(OBJEXT) \
	openurl.$(OBJEXT) url.$(OBJEXT) connectsock.$(OBJEXT)
count_OBJECTS = $(am_count_OBJECTS)
count_LDADD = $(LDADD)
count_DEPENDENCIES = @LIBOBJS@
am_extract_OBJECTS = extract.$(OBJEXT) html.$(OBJEXT) scan.$(OBJEXT) \
	openurl.$(OBJEXT) url.$(OBJEXT) connectsock.$(OBJEXT) \
	heap.$(OBJEXT) errexit.$(OBJEXT) class.$(OBJEXT)
extract_OBJECTS = $(am_extract_OBJECTS)
extract_LDADD = $(LDADD)
extract_DEPENDENCIES = @LIBOBJS@
am_htmlclean_OBJECTS = htmlclean.$(OBJEXT) html.$(OBJEXT) \
	tree.$(OBJEXT) types.$(OBJEXT) heap.$(OBJEXT) dtd.$(OBJEXT) \
	scan.$(OBJEXT) errexit.$(OBJEXT)
htmlclean_OBJECTS = $(am_htmlclean_OBJECTS)
htmlclean_LDADD = $(LDADD)
htmlclean_DEPENDENCIES = @LIBOBJS@
am_htmlprune_OBJECTS = htmlprune.$(OBJEXT) tree.$(OBJEXT) \
	scan.$(OBJEXT) html.$(OBJEXT) errexit.$(OBJEXT) dtd.$(OBJEXT) \
	heap.$(OBJEXT) types.$(OBJEXT) openurl.$(OBJEXT) url.$(OBJEXT) \
	connectsock.$(OBJEXT) class.$(OBJEXT)
htmlprune_OBJECTS = $(am_htmlprune_OBJECTS)
htmlprune_LDADD = $(LDADD)
htmlprune_DEPENDENCIES = @LIBOBJS@
am_incl_OBJECTS = incl.$(OBJEXT) scan.$(OBJEXT) html.$(OBJEXT) \
	openurl.$(OBJEXT) url.$(OBJEXT) heap.$(OBJEXT) \
	errexit.$(OBJEXT) connectsock.$(OBJEXT) types.$(OBJEXT)
incl_OBJECTS = $(am_incl_OBJECTS)
incl_LDADD = $(LDADD)
incl_DEPENDENCIES = @LIBOBJS@
am_index_OBJECTS = index.$(OBJEXT) scan.$(OBJEXT) html.$(OBJEXT) \
	openurl.$(OBJEXT) url.$(OBJEXT) heap.$(OBJEXT) class.$(OBJEXT) \
	errexit.$(OBJEXT) connectsock.$(OBJEXT) types.$(OBJEXT) \
	tree.$(OBJEXT) genid.$(OBJEXT) dtd.$(OBJEXT)
index_OBJECTS = $(am_index_OBJECTS)
index_LDADD = $(LDADD)
index_DEPENDENCIES = @LIBOBJS@
am_mkbib_OBJECTS = errexit.$(OBJEXT) heap.$(OBJEXT) mkbib.$(OBJEXT) \
	hash.$(OBJEXT)
mkbib_OBJECTS = $(am_mkbib_OBJECTS)
mkbib_LDADD = $(LDADD)
mkbib_DEPENDENCIES = @LIBOBJS@
am_multitoc_OBJECTS = multitoc.$(OBJEXT) html.$(OBJEXT) scan.$(OBJEXT) \
	openurl.$(OBJEXT) url.$(OBJEXT) connectsock.$(OBJEXT) \
	heap.$(OBJEXT) errexit.$(OBJEXT) class.$(OBJEXT)
multitoc_OBJECTS = $(am_multitoc_OBJECTS)
multitoc_LDADD = $(LDADD)
multitoc_DEPENDENCIES = @LIBOBJS@
am_normalize_OBJECTS = normalize.$(OBJEXT) html.$(OBJEXT) \
	scan.$(OBJEXT) openurl.$(OBJEXT) url.$(OBJEXT) tree.$(OBJEXT) \
	connectsock.$(OBJEXT) heap.$(OBJEXT) dtd.$(OBJEXT) \
	types.$(OBJEXT) textwrap.$(OBJEXT) errexit.$(OBJEXT)
normalize_OBJECTS = $(am_normalize_OBJECTS)
normalize_LDADD = $(LDADD)
normalize_DEPENDENCIES = @LIBOBJS@
am_num_OBJECTS = num.$(OBJEXT) html.$(OBJEXT) scan.$(OBJEXT) \
	openurl.$(OBJEXT) url.$(OBJEXT) errexit.$(OBJEXT) \
	heap.$(OBJEXT) connectsock.$(OBJEXT)
num_OBJECTS = $(am_num_OBJECTS)
num_LDADD = $(LDADD)
num_DEPENDENCIES = @LIBOBJS@
am_pipe_OBJECTS = pipe.$(OBJEXT) html.$(OBJEXT) scan.$(OBJEXT) \
	types.$(OBJEXT) errexit.$(OBJEXT) heap.$(OBJEXT) \
	openurl.$(OBJEXT) url.$(OBJEXT) connectsock.$(OBJEXT)
pipe_OBJECTS = $(am_pipe_OBJECTS)
pipe_LDADD = $(LDADD)
pipe_DEPENDENCIES = @LIBOBJS@
am_toc_OBJECTS = html.$(OBJEXT) scan.$(OBJEXT) dtd.$(OBJEXT) \
	openurl.$(OBJEXT) errexit.$(OBJEXT) url.$(OBJEXT) \
	class.$(OBJEXT) connectsock.$(OBJEXT) heap.$(OBJEXT) \
	tree.$(OBJEXT) types.$(OBJEXT) genid.$(OBJEXT) toc.$(OBJEXT) \
	hash.$(OBJEXT)
toc_OBJECTS = $(am_toc_OBJECTS)
toc_LDADD = $(LDADD)
toc_DEPENDENCIES = @LIBOBJS@
am_uncdata_OBJECTS = uncdata.$(OBJEXT)
uncdata_OBJECTS = $(am_uncdata_OBJECTS)
uncdata_LDADD = $(LDADD)
uncdata_DEPENDENCIES = @LIBOBJS@
am_unent_OBJECTS = unent.$(OBJEXT)
unent_OBJECTS = $(am_unent_OBJECTS)
unent_LDADD = $(LDADD)
unent_DEPENDENCIES = @LIBOBJS@
am_unpipe_OBJECTS = unpipe.$(OBJEXT) heap.$(OBJEXT) errexit.$(OBJEXT) \
	openurl.$(OBJEXT) url.$(OBJEXT) connectsock.$(OBJEXT)
unpipe_OBJECTS = $(am_unpipe_OBJECTS)
unpipe_LDADD = $(LDADD)
unpipe_DEPENDENCIES = @LIBOBJS@
am_wls_OBJECTS = wls.$(OBJEXT) html.$(OBJEXT) scan.$(OBJEXT) \
	openurl.$(OBJEXT) url.$(OBJEXT) connectsock.$(OBJEXT) \
	heap.$(OBJEXT) errexit.$(OBJEXT) types.$(OBJEXT)
wls_OBJECTS = $(am_wls_OBJECTS)
wls_LDADD = $(LDADD)
wls_DEPENDENCIES = @LIBOBJS@
am_xml2asc_OBJECTS = xml2asc.$(OBJEXT)
xml2asc_OBJECTS = $(am_xml2asc_OBJECTS)
xml2asc_LDADD = $(LDADD)
xml2asc_DEPENDENCIES = @LIBOBJS@
am_xmlns_OBJECTS = xmlns.$(OBJEXT) html.$(OBJEXT) scan.$(OBJEXT) \
	openurl.$(OBJEXT) url.$(OBJEXT) connectsock.$(OBJEXT) \
	heap.$(OBJEXT) errexit.$(OBJEXT) types.$(OBJEXT)
xmlns_OBJECTS = $(am_xmlns_OBJECTS)
xmlns_LDADD = $(LDADD)
xmlns_DEPENDENCIES = @LIBOBJS@
am_xref_OBJECTS = html.$(OBJEXT) scan.$(OBJEXT) dtd.$(OBJEXT) \
	openurl.$(OBJEXT) errexit.$(OBJEXT) url.$(OBJEXT) \
	connectsock.$(OBJEXT) heap.$(OBJEXT) tree.$(OBJEXT) \
	types.$(OBJEXT) genid.$(OBJEXT) xref.$(OBJEXT) hash.$(OBJEXT)
xref_OBJECTS = $(am_xref_OBJECTS)
xref_LDADD = $(LDADD)
xref_DEPENDENCIES = @LIBOBJS@
am_xselect_OBJECTS = xselect.$(OBJEXT) types.$(OBJEXT) \
	errexit.$(OBJEXT) heap.$(OBJEXT) html.$(OBJEXT) scan.$(OBJEXT) \
	selector.$(OBJEXT)
xselect_OBJECTS = $(am_xselect_OBJECTS)
xselect_LDADD = $(LDADD)
xselect_DEPENDENCIES = @LIBOBJS@
binSCRIPT_INSTALL = $(INSTALL_SCRIPT)
SCRIPTS = $(bin_SCRIPTS)
DEFAULT_INCLUDES = -I. -I$(srcdir) -I.
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
@AMDEP_TRUE@DEP_FILES = $(DEPDIR)/malloc.Po $(DEPDIR)/strdup.Po \
@AMDEP_TRUE@	$(DEPDIR)/strerror.Po $(DEPDIR)/strstr.Po \
@AMDEP_TRUE@	$(DEPDIR)/tfind.Po $(DEPDIR)/tsearch.Po \
@AMDEP_TRUE@	$(DEPDIR)/twalk.Po ./$(DEPDIR)/addid.Po \
@AMDEP_TRUE@	./$(DEPDIR)/asc2xml.Po ./$(DEPDIR)/cexport.Po \
@AMDEP_TRUE@	./$(DEPDIR)/cite.Po ./$(DEPDIR)/class.Po \
@AMDEP_TRUE@	./$(DEPDIR)/connectsock.Po ./$(DEPDIR)/count.Po \
@AMDEP_TRUE@	./$(DEPDIR)/dtd.Po ./$(DEPDIR)/errexit.Po \
@AMDEP_TRUE@	./$(DEPDIR)/extract.Po ./$(DEPDIR)/genid.Po \
@AMDEP_TRUE@	./$(DEPDIR)/hash.Po ./$(DEPDIR)/heap.Po \
@AMDEP_TRUE@	./$(DEPDIR)/html.Po ./$(DEPDIR)/htmlclean.Po \
@AMDEP_TRUE@	./$(DEPDIR)/htmlprune.Po ./$(DEPDIR)/incl.Po \
@AMDEP_TRUE@	./$(DEPDIR)/index.Po ./$(DEPDIR)/mkbib.Po \
@AMDEP_TRUE@	./$(DEPDIR)/multitoc.Po ./$(DEPDIR)/normalize.Po \
@AMDEP_TRUE@	./$(DEPDIR)/num.Po ./$(DEPDIR)/openurl.Po \
@AMDEP_TRUE@	./$(DEPDIR)/pipe.Po ./$(DEPDIR)/scan.Po \
@AMDEP_TRUE@	./$(DEPDIR)/selector.Po ./$(DEPDIR)/textwrap.Po \
@AMDEP_TRUE@	./$(DEPDIR)/toc.Po ./$(DEPDIR)/tree.Po \
@AMDEP_TRUE@	./$(DEPDIR)/types.Po ./$(DEPDIR)/uncdata.Po \
@AMDEP_TRUE@	./$(DEPDIR)/unent.Po ./$(DEPDIR)/unpipe.Po \
@AMDEP_TRUE@	./$(DEPDIR)/url.Po ./$(DEPDIR)/wls.Po \
@AMDEP_TRUE@	./$(DEPDIR)/xml2asc.Po ./$(DEPDIR)/xmlns.Po \
@AMDEP_TRUE@	./$(DEPDIR)/xref.Po ./$(DEPDIR)/xselect.Po
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
LEXCOMPILE = $(LEX) $(LFLAGS) $(AM_LFLAGS)
YLWRAP = $(top_srcdir)/ylwrap
YACCCOMPILE = $(YACC) $(YFLAGS) $(AM_YFLAGS)
SOURCES = $(addid_SOURCES) $(asc2xml_SOURCES) $(cexport_SOURCES) \
	$(cite_SOURCES) $(count_SOURCES) $(extract_SOURCES) \
	$(htmlclean_SOURCES) $(htmlprune_SOURCES) $(incl_SOURCES) \
	$(index_SOURCES) $(mkbib_SOURCES) $(multitoc_SOURCES) \
	$(normalize_SOURCES) $(num_SOURCES) $(pipe_SOURCES) \
	$(toc_SOURCES) $(uncdata_SOURCES) $(unent_SOURCES) \
	$(unpipe_SOURCES) $(wls_SOURCES) $(xml2asc_SOURCES) \
	$(xmlns_SOURCES) $(xref_SOURCES) $(xselect_SOURCES)
DIST_SOURCES = $(addid_SOURCES) $(asc2xml_SOURCES) $(cexport_SOURCES) \
	$(cite_SOURCES) $(count_SOURCES) $(extract_SOURCES) \
	$(htmlclean_SOURCES) $(htmlprune_SOURCES) $(incl_SOURCES) \
	$(index_SOURCES) $(mkbib_SOURCES) $(multitoc_SOURCES) \
	$(normalize_SOURCES) $(num_SOURCES) $(pipe_SOURCES) \
	$(toc_SOURCES) $(uncdata_SOURCES) $(unent_SOURCES) \
	$(unpipe_SOURCES) $(wls_SOURCES) $(xml2asc_SOURCES) \
	$(xmlns_SOURCES) $(xref_SOURCES) $(xselect_SOURCES)
man1dir = $(mandir)/man1
NROFF = nroff
MANS = $(man_MANS)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
distdir = $(PACKAGE)-$(VERSION)
top_distdir = $(distdir)
am__remove_distdir = \
  { test ! -d $(distdir) \
    || { find $(distdir) -type d ! -perm -200 -exec chmod u+w {} ';' \
         && rm -fr $(distdir); }; }
DIST_ARCHIVES = $(distdir).tar.gz
GZIP_ENV = --best
distuninstallcheck_listfiles = find . -type f -print
distcleancheck_listfiles = find . -type f -print
ACLOCAL = @ACLOCAL@
AMDEP_FALSE = @AMDEP_FALSE@
AMDEP_TRUE = @AMDEP_TRUE@
AMTAR = @AMTAR@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CYGPATH_W = @CYGPATH_W@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
EXEEXT = @EXEEXT@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
LDFLAGS = @LDFLAGS@
LEX = @LEX@
LEXLIB = @LEXLIB@
LEX_OUTPUT_ROOT = @LEX_OUTPUT_ROOT@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LTLIBOBJS = @LTLIBOBJS@
MAKEINFO = @MAKEINFO@
OBJEXT = @OBJEXT@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
STRIP = @STRIP@
VERSION = @VERSION@
YACC = @YACC@
ac_ct_CC = @ac_ct_CC@
ac_ct_STRIP = @ac_ct_STRIP@
am__fastdepCC_FALSE = @am__fastdepCC_FALSE@
am__fastdepCC_TRUE = @am__fastdepCC_TRUE@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
bindir = @bindir@
build_alias = @build_alias@
datadir = @datadir@
exec_prefix = @exec_prefix@
host_alias = @host_alias@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
lex_opt_flags = @lex_opt_flags@
libdir = @libdir@
libexecdir = @libexecdir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
prefix = @prefix@
program_transform_name = @program_transform_name@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
bin_SCRIPTS = cite-mkbib printlinks
man_MANS = asc2xml.1 cexport.1 cite-mkbib.1 cite.1\
			count.1 htmlclean.1 htmlprune.1 incl.1 index.1\
			mkbib.1 multitoc.1 normalize.1 num.1 pipe.1 toc.1\
			unent.1 unpipe.1 wls.1 xml2asc.1 xmlns.1\
			xref.1

EXTRA_DIST = $(man_MANS) dtd.hash unent.hash export.h\
			$(bin_SCRIPTS) $(BUILT_SOURCES)

LDADD = @LIBOBJS@
AM_YFLAGS = -d
AM_LFLAGS = @lex_opt_flags@
BUILT_SOURCES = connectsock.e heap.e types.e dtd.e errexit.e\
			tree.e genid.e html.e url.e openurl.e scan.e\
			textwrap.e scan.c html.c html.h dtd.c unent.c\
			class.e selector.e hash.e

asc2xml_SOURCES = asc2xml.c
addid_SOURCES = addid.c html.y scan.l dtd.c openurl.c errexit.c\
			url.c connectsock.c heap.c tree.c types.c genid.c\
			class.c hash.c

cexport_SOURCES = cexport.c
cite_SOURCES = heap.c errexit.c cite.c
count_SOURCES = count.c html.y scan.l types.c errexit.c heap.c\
			openurl.c url.c	connectsock.c

extract_SOURCES = extract.c html.y scan.l openurl.c url.c\
			connectsock.c heap.c errexit.c class.c

htmlclean_SOURCES = htmlclean.c html.y tree.c types.c heap.c dtd.c\
			scan.l errexit.c

htmlprune_SOURCES = htmlprune.c tree.c scan.l html.y errexit.c dtd.c\
			heap.c types.c openurl.c url.c connectsock.c class.c

incl_SOURCES = incl.c scan.l html.y openurl.c url.c heap.c\
			errexit.c connectsock.c types.c

index_SOURCES = index.c scan.l html.y openurl.c url.c heap.c class.c\
			errexit.c connectsock.c types.c tree.c genid.c dtd.c

mkbib_SOURCES = errexit.c heap.c mkbib.c hash.c
multitoc_SOURCES = multitoc.c html.y scan.l openurl.c url.c\
			connectsock.c heap.c errexit.c class.c

normalize_SOURCES = normalize.c html.y scan.l openurl.c url.c\
			tree.c connectsock.c heap.c dtd.c types.c\
			textwrap.c errexit.c

num_SOURCES = num.c html.y scan.l openurl.c url.c errexit.c\
			heap.c connectsock.c

pipe_SOURCES = pipe.c html.y scan.l types.c errexit.c heap.c\
			openurl.c url.c connectsock.c

xselect_SOURCES = xselect.c types.c errexit.c heap.c html.y scan.l\
			selector.c

toc_SOURCES = html.y scan.l dtd.c openurl.c errexit.c url.c class.c\
			connectsock.c heap.c tree.c types.c genid.c toc.c\
			hash.c

uncdata_SOURCES = uncdata.c
unent_SOURCES = unent.c
unpipe_SOURCES = unpipe.c heap.c errexit.c openurl.c url.c\
			connectsock.c

wls_SOURCES = wls.c html.y scan.l openurl.c url.c\
			connectsock.c heap.c errexit.c types.c

xmlns_SOURCES = xmlns.c html.y scan.l openurl.c url.c\
			connectsock.c heap.c errexit.c types.c

xml2asc_SOURCES = xml2asc.c
xref_SOURCES = html.y scan.l dtd.c openurl.c errexit.c url.c\
			connectsock.c heap.c tree.c types.c genid.c xref.c\
			hash.c

HTML_MANS = $(man_MANS:.1=.html)
CLEANFILES = $(HTML_MANS)
SUFFIX = .c:sC .l:sC .y:sC .e:h .h:h
SUFFIXES = .e
all: $(BUILT_SOURCES) config.h
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
.SUFFIXES: .e .c .l .o .obj .y
am--refresh:
	@:
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      echo ' cd $(srcdir) && $(AUTOMAKE) --gnu '; \
	      cd $(srcdir) && $(AUTOMAKE) --gnu  \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    echo ' $(SHELL) ./config.status'; \
	    $(SHELL) ./config.status;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	$(SHELL) ./config.status --recheck

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(srcdir) && $(AUTOCONF)
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(srcdir) && $(ACLOCAL) $(ACLOCAL_AMFLAGS)

config.h: stamp-h1
	@if test ! -f $@; then \
	  rm -f stamp-h1; \
	  $(MAKE) stamp-h1; \
	else :; fi

stamp-h1: $(srcdir)/config.h.in $(top_builddir)/config.status
	@rm -f stamp-h1
	cd $(top_builddir) && $(SHELL) ./config.status config.h
$(srcdir)/config.h.in:  $(am__configure_deps) 
	cd $(top_srcdir) && $(AUTOHEADER)
	rm -f stamp-h1
	touch $@

distclean-hdr:
	-rm -f config.h stamp-h1
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(mkdir_p) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) '$$p' '$(DESTDIR)$(bindir)/$$f'"; \
	   $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) "$$p" "$(DESTDIR)$(bindir)/$$f" || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
	done

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)
html.h: html.c
	@if test ! -f $@; then \
	  rm -f html.c; \
	  $(MAKE) html.c; \
	else :; fi
addid$(EXEEXT): $(addid_OBJECTS) $(addid_DEPENDENCIES) 
	@rm -f addid$(EXEEXT)
	$(LINK) $(addid_LDFLAGS) $(addid_OBJECTS) $(addid_LDADD) $(LIBS)
asc2xml$(EXEEXT): $(asc2xml_OBJECTS) $(asc2xml_DEPENDENCIES) 
	@rm -f asc2xml$(EXEEXT)
	$(LINK) $(asc2xml_LDFLAGS) $(asc2xml_OBJECTS) $(asc2xml_LDADD) $(LIBS)
cexport$(EXEEXT): $(cexport_OBJECTS) $(cexport_DEPENDENCIES) 
	@rm -f cexport$(EXEEXT)
	$(LINK) $(cexport_LDFLAGS) $(cexport_OBJECTS) $(cexport_LDADD) $(LIBS)
cite$(EXEEXT): $(cite_OBJECTS) $(cite_DEPENDENCIES) 
	@rm -f cite$(EXEEXT)
	$(LINK) $(cite_LDFLAGS) $(cite_OBJECTS) $(cite_LDADD) $(LIBS)
count$(EXEEXT): $(count_OBJECTS) $(count_DEPENDENCIES) 
	@rm -f count$(EXEEXT)
	$(LINK) $(count_LDFLAGS) $(count_OBJECTS) $(count_LDADD) $(LIBS)
extract$(EXEEXT): $(extract_OBJECTS) $(extract_DEPENDENCIES) 
	@rm -f extract$(EXEEXT)
	$(LINK) $(extract_LDFLAGS) $(extract_OBJECTS) $(extract_LDADD) $(LIBS)
htmlclean$(EXEEXT): $(htmlclean_OBJECTS) $(htmlclean_DEPENDENCIES) 
	@rm -f htmlclean$(EXEEXT)
	$(LINK) $(htmlclean_LDFLAGS) $(htmlclean_OBJECTS) $(htmlclean_LDADD) $(LIBS)
htmlprune$(EXEEXT): $(htmlprune_OBJECTS) $(htmlprune_DEPENDENCIES) 
	@rm -f htmlprune$(EXEEXT)
	$(LINK) $(htmlprune_LDFLAGS) $(htmlprune_OBJECTS) $(htmlprune_LDADD) $(LIBS)
incl$(EXEEXT): $(incl_OBJECTS) $(incl_DEPENDENCIES) 
	@rm -f incl$(EXEEXT)
	$(LINK) $(incl_LDFLAGS) $(incl_OBJECTS) $(incl_LDADD) $(LIBS)
index$(EXEEXT): $(index_OBJECTS) $(index_DEPENDENCIES) 
	@rm -f index$(EXEEXT)
	$(LINK) $(index_LDFLAGS) $(index_OBJECTS) $(index_LDADD) $(LIBS)
mkbib$(EXEEXT): $(mkbib_OBJECTS) $(mkbib_DEPENDENCIES) 
	@rm -f mkbib$(EXEEXT)
	$(LINK) $(mkbib_LDFLAGS) $(mkbib_OBJECTS) $(mkbib_LDADD) $(LIBS)
multitoc$(EXEEXT): $(multitoc_OBJECTS) $(multitoc_DEPENDENCIES) 
	@rm -f multitoc$(EXEEXT)
	$(LINK) $(multitoc_LDFLAGS) $(multitoc_OBJECTS) $(multitoc_LDADD) $(LIBS)
normalize$(EXEEXT): $(normalize_OBJECTS) $(normalize_DEPENDENCIES) 
	@rm -f normalize$(EXEEXT)
	$(LINK) $(normalize_LDFLAGS) $(normalize_OBJECTS) $(normalize_LDADD) $(LIBS)
num$(EXEEXT): $(num_OBJECTS) $(num_DEPENDENCIES) 
	@rm -f num$(EXEEXT)
	$(LINK) $(num_LDFLAGS) $(num_OBJECTS) $(num_LDADD) $(LIBS)
pipe$(EXEEXT): $(pipe_OBJECTS) $(pipe_DEPENDENCIES) 
	@rm -f pipe$(EXEEXT)
	$(LINK) $(pipe_LDFLAGS) $(pipe_OBJECTS) $(pipe_LDADD) $(LIBS)
toc$(EXEEXT): $(toc_OBJECTS) $(toc_DEPENDENCIES) 
	@rm -f toc$(EXEEXT)
	$(LINK) $(toc_LDFLAGS) $(toc_OBJECTS) $(toc_LDADD) $(LIBS)
uncdata$(EXEEXT): $(uncdata_OBJECTS) $(uncdata_DEPENDENCIES) 
	@rm -f uncdata$(EXEEXT)
	$(LINK) $(uncdata_LDFLAGS) $(uncdata_OBJECTS) $(uncdata_LDADD) $(LIBS)
unent$(EXEEXT): $(unent_OBJECTS) $(unent_DEPENDENCIES) 
	@rm -f unent$(EXEEXT)
	$(LINK) $(unent_LDFLAGS) $(unent_OBJECTS) $(unent_LDADD) $(LIBS)
unpipe$(EXEEXT): $(unpipe_OBJECTS) $(unpipe_DEPENDENCIES) 
	@rm -f unpipe$(EXEEXT)
	$(LINK) $(unpipe_LDFLAGS) $(unpipe_OBJECTS) $(unpipe_LDADD) $(LIBS)
wls$(EXEEXT): $(wls_OBJECTS) $(wls_DEPENDENCIES) 
	@rm -f wls$(EXEEXT)
	$(LINK) $(wls_LDFLAGS) $(wls_OBJECTS) $(wls_LDADD) $(LIBS)
xml2asc$(EXEEXT): $(xml2asc_OBJECTS) $(xml2asc_DEPENDENCIES) 
	@rm -f xml2asc$(EXEEXT)
	$(LINK) $(xml2asc_LDFLAGS) $(xml2asc_OBJECTS) $(xml2asc_LDADD) $(LIBS)
xmlns$(EXEEXT): $(xmlns_OBJECTS) $(xmlns_DEPENDENCIES) 
	@rm -f xmlns$(EXEEXT)
	$(LINK) $(xmlns_LDFLAGS) $(xmlns_OBJECTS) $(xmlns_LDADD) $(LIBS)
xref$(EXEEXT): $(xref_OBJECTS) $(xref_DEPENDENCIES) 
	@rm -f xref$(EXEEXT)
	$(LINK) $(xref_LDFLAGS) $(xref_OBJECTS) $(xref_LDADD) $(LIBS)
xselect$(EXEEXT): $(xselect_OBJECTS) $(xselect_DEPENDENCIES) 
	@rm -f xselect$(EXEEXT)
	$(LINK) $(xselect_LDFLAGS) $(xselect_OBJECTS) $(xselect_LDADD) $(LIBS)
install-binSCRIPTS: $(bin_SCRIPTS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(mkdir_p) "$(DESTDIR)$(bindir)"
	@list='$(bin_SCRIPTS)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  if test -f $$d$$p; then \
	    f=`echo "$$p" | sed 's|^.*/||;$(transform)'`; \
	    echo " $(binSCRIPT_INSTALL) '$$d$$p' '$(DESTDIR)$(bindir)/$$f'"; \
	    $(binSCRIPT_INSTALL) "$$d$$p" "$(DESTDIR)$(bindir)/$$f"; \
	  else :; fi; \
	done

uninstall-binSCRIPTS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_SCRIPTS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's|^.*/||;$(transform)'`; \
	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
	done

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/malloc.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/strdup.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/strerror.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/strstr.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/tfind.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/tsearch.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/twalk.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/addid.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/asc2xml.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cexport.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cite.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/class.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/connectsock.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/count.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/dtd.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/errexit.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/extract.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/genid.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hash.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/heap.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/html.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/htmlclean.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/htmlprune.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/incl.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/index.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mkbib.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/multitoc.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/normalize.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/num.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/openurl.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pipe.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/scan.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/selector.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/textwrap.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/toc.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tree.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/types.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/uncdata.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/unent.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/unpipe.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/url.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/wls.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/xml2asc.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/xmlns.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/xref.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/xselect.Po@am__quote@

.c.o:
@am__fastdepCC_TRUE@	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
@am__fastdepCC_TRUE@	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(COMPILE) -c $<

.c.obj:
@am__fastdepCC_TRUE@	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
@am__fastdepCC_TRUE@	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(COMPILE) -c `$(CYGPATH_W) '$<'`

.l.c:
	$(SHELL) $(YLWRAP) $< $(LEX_OUTPUT_ROOT).c $@ -- $(LEXCOMPILE)

.y.c:
	$(SHELL) $(YLWRAP) $< y.tab.c $@ y.tab.h $*.h y.output $*.output -- $(YACCCOMPILE)
uninstall-info-am:
install-man1: $(man1_MANS) $(man_MANS)
	@$(NORMAL_INSTALL)
	test -z "$(man1dir)" || $(mkdir_p) "$(DESTDIR)$(man1dir)"
	@list='$(man1_MANS) $(dist_man1_MANS) $(nodist_man1_MANS)'; \
	l2='$(man_MANS) $(dist_man_MANS) $(nodist_man_MANS)'; \
	for i in $$l2; do \
	  case "$$i" in \
	    *.1*) list="$$list $$i" ;; \
	  esac; \
	done; \
	for i in $$list; do \
	  if test -f $(srcdir)/$$i; then file=$(srcdir)/$$i; \
	  else file=$$i; fi; \
	  ext=`echo $$i | sed -e 's/^.*\\.//'`; \
	  case "$$ext" in \
	    1*) ;; \
	    *) ext='1' ;; \
	  esac; \
	  inst=`echo $$i | sed -e 's/\\.[0-9a-z]*$$//'`; \
	  inst=`echo $$inst | sed -e 's/^.*\///'`; \
	  inst=`echo $$inst | sed '$(transform)'`.$$ext; \
	  echo " $(INSTALL_DATA) '$$file' '$(DESTDIR)$(man1dir)/$$inst'"; \
	  $(INSTALL_DATA) "$$file" "$(DESTDIR)$(man1dir)/$$inst"; \
	done
uninstall-man1:
	@$(NORMAL_UNINSTALL)
	@list='$(man1_MANS) $(dist_man1_MANS) $(nodist_man1_MANS)'; \
	l2='$(man_MANS) $(dist_man_MANS) $(nodist_man_MANS)'; \
	for i in $$l2; do \
	  case "$$i" in \
	    *.1*) list="$$list $$i" ;; \
	  esac; \
	done; \
	for i in $$list; do \
	  ext=`echo $$i | sed -e 's/^.*\\.//'`; \
	  case "$$ext" in \
	    1*) ;; \
	    *) ext='1' ;; \
	  esac; \
	  inst=`echo $$i | sed -e 's/\\.[0-9a-z]*$$//'`; \
	  inst=`echo $$inst | sed -e 's/^.*\///'`; \
	  inst=`echo $$inst | sed '$(transform)'`.$$ext; \
	  echo " rm -f '$(DESTDIR)$(man1dir)/$$inst'"; \
	  rm -f "$(DESTDIR)$(man1dir)/$$inst"; \
	done

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES) config.h.in $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS) config.h.in $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$tags$$unique" \
	  || $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	     $$tags $$unique
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES) config.h.in $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS) config.h.in $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	$(am__remove_distdir)
	mkdir $(distdir)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
	-find $(distdir) -type d ! -perm -777 -exec chmod a+rwx {} \; -o \
	  ! -type d ! -perm -444 -links 1 -exec chmod a+r {} \; -o \
	  ! -type d ! -perm -400 -exec chmod a+r {} \; -o \
	  ! -type d ! -perm -444 -exec $(SHELL) $(install_sh) -c -m a+r {} {} \; \
	|| chmod -R a+r $(distdir)
dist-gzip: distdir
	$(AMTAR) chof - $(distdir) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz
	$(am__remove_distdir)

dist-bzip2: distdir
	$(AMTAR) chof - $(distdir) | bzip2 -9 -c >$(distdir).tar.bz2
	$(am__remove_distdir)

dist-tarZ: distdir
	$(AMTAR) chof - $(distdir) | compress -c >$(distdir).tar.Z
	$(am__remove_distdir)

dist-shar: distdir
	shar $(distdir) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).shar.gz
	$(am__remove_distdir)

dist-zip: distdir
	-rm -f $(distdir).zip
	zip -rq $(distdir).zip $(distdir)
	$(am__remove_distdir)

dist dist-all: distdir
	$(AMTAR) chof - $(distdir) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz
	$(am__remove_distdir)

# This target untars the dist file and tries a VPATH configuration.  Then
# it guarantees that the distribution is self-contained by making another
# tarfile.
distcheck: dist
	case '$(DIST_ARCHIVES)' in \
	*.tar.gz*) \
	  GZIP=$(GZIP_ENV) gunzip -c $(distdir).tar.gz | $(AMTAR) xf - ;;\
	*.tar.bz2*) \
	  bunzip2 -c $(distdir).tar.bz2 | $(AMTAR) xf - ;;\
	*.tar.Z*) \
	  uncompress -c $(distdir).tar.Z | $(AMTAR) xf - ;;\
	*.shar.gz*) \
	  GZIP=$(GZIP_ENV) gunzip -c $(distdir).tar.gz | unshar ;;\
	*.zip*) \
	  unzip $(distdir).zip ;;\
	esac
	chmod -R a-w $(distdir); chmod a+w $(distdir)
	mkdir $(distdir)/_build
	mkdir $(distdir)/_inst
	chmod a-w $(distdir)
	dc_install_base=`$(am__cd) $(distdir)/_inst && pwd | sed -e 's,^[^:\\/]:[\\/],/,'` \
	  && dc_destdir="$${TMPDIR-/tmp}/am-dc-$$$$/" \
	  && cd $(distdir)/_build \
	  && ../configure --srcdir=.. --prefix="$$dc_install_base" \
	    $(DISTCHECK_CONFIGURE_FLAGS) \
	  && $(MAKE) $(AM_MAKEFLAGS) \
	  && $(MAKE) $(AM_MAKEFLAGS) dvi \
	  && $(MAKE) $(AM_MAKEFLAGS) check \
	  && $(MAKE) $(AM_MAKEFLAGS) install \
	  && $(MAKE) $(AM_MAKEFLAGS) installcheck \
	  && $(MAKE) $(AM_MAKEFLAGS) uninstall \
	  && $(MAKE) $(AM_MAKEFLAGS) distuninstallcheck_dir="$$dc_install_base" \
	        distuninstallcheck \
	  && chmod -R a-w "$$dc_install_base" \
	  && ({ \
	       (cd ../.. && umask 077 && mkdir "$$dc_destdir") \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" install \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" uninstall \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" \
	            distuninstallcheck_dir="$$dc_destdir" distuninstallcheck; \
	      } || { rm -rf "$$dc_destdir"; exit 1; }) \
	  && rm -rf "$$dc_destdir" \
	  && $(MAKE) $(AM_MAKEFLAGS) dist \
	  && rm -rf $(DIST_ARCHIVES) \
	  && $(MAKE) $(AM_MAKEFLAGS) distcleancheck
	$(am__remove_distdir)
	@(echo "$(distdir) archives ready for distribution: "; \
	  list='$(DIST_ARCHIVES)'; for i in $$list; do echo $$i; done) | \
	  sed -e '1{h;s/./=/g;p;x;}' -e '$${p;x;}'
distuninstallcheck:
	@cd $(distuninstallcheck_dir) \
	&& test `$(distuninstallcheck_listfiles) | wc -l` -le 1 \
	   || { echo "ERROR: files left after uninstall:" ; \
	        if test -n "$(DESTDIR)"; then \
	          echo "  (check DESTDIR support)"; \
	        fi ; \
	        $(distuninstallcheck_listfiles) ; \
	        exit 1; } >&2
distcleancheck: distclean
	@if test '$(srcdir)' = . ; then \
	  echo "ERROR: distcleancheck can only run from a VPATH build" ; \
	  exit 1 ; \
	fi
	@test `$(distcleancheck_listfiles) | wc -l` -eq 0 \
	  || { echo "ERROR: files left in build directory after distclean:" ; \
	       $(distcleancheck_listfiles) ; \
	       exit 1; } >&2
check-am: all-am
check: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) check-am
all-am: Makefile $(PROGRAMS) $(SCRIPTS) $(MANS) config.h
installdirs:
	for dir in "$(DESTDIR)$(bindir)" "$(DESTDIR)$(bindir)" "$(DESTDIR)$(man1dir)"; do \
	  test -z "$$dir" || $(mkdir_p) "$$dir"; \
	done
install: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
	-rm -f html.h
	-rm -f html.c
	-rm -f scan.c
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am
	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
	-rm -rf $(DEPDIR) ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-hdr distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am: install-man

install-exec-am: install-binPROGRAMS install-binSCRIPTS

install-info: install-info-am

install-man: install-man1

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
	-rm -rf $(top_srcdir)/autom4te.cache
	-rm -rf $(DEPDIR) ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS uninstall-binSCRIPTS \
	uninstall-info-am uninstall-man

uninstall-man: uninstall-man1

.PHONY: CTAGS GTAGS all all-am am--refresh check check-am clean \
	clean-binPROGRAMS clean-generic ctags dist dist-all dist-bzip2 \
	dist-gzip dist-shar dist-tarZ dist-zip distcheck distclean \
	distclean-compile distclean-generic distclean-hdr \
	distclean-tags distcleancheck distdir distuninstallcheck dvi \
	dvi-am html html-am info info-am install install-am \
	install-binPROGRAMS install-binSCRIPTS install-data \
	install-data-am install-exec install-exec-am install-info \
	install-info-am install-man install-man1 install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags uninstall \
	uninstall-am uninstall-binPROGRAMS uninstall-binSCRIPTS \
	uninstall-info-am uninstall-man uninstall-man1


# .c.e: cexport; ./do_export $* -I. $(CPPFLAGS) -c "@CPP@"
# .c.e: cexport; ./cexport -I. $(CPPFLAGS) -c "@CPP@" $<
%.e: %.c cexport
	./cexport -I. $(CPPFLAGS) -c "@CPP@" $<

dtd.c: dtd.hash
	gperf -a -c -C -o -t -p -T -k '1,2,$$' -N lookup_element $< >$@

unent.c: unent.hash
	gperf -a -c -C -o -t -p -k '1,2,$$' -D -N lookup_entity $< >$@

# html.h: html.c
scan.o: html.h scan.c

#property.c: property.hash
#	gperf -a -c -C -o -t -p -k '1,2,12,$$' -N lookup_property $< >$@

# Convenience: publish the tar file, update the online Readme,
# Changlog and man pages
#
%.html: %.1; man2html $<

publish: publish-tar publish-doc

publish-tar: dist
	rsync -e ssh $(distdir).tar.gz ChangeLog README \
	 tux.w3.org:/afs/w3.org/pub/WWW/Tools/HTML-XML-utils/

publish-doc: $(HTML_MANS) Overview.html
	rsync -e ssh $(HTML_MANS) Overview.html \
	 tux.w3.org:/afs/w3.org/pub/WWW/Tools/HTML-XML-utils/man1/

Overview.html: $(HTML_MANS)
	echo "<title>Manual pages</title><ul>" >$@
	for f in $(HTML_MANS); do\
	 echo "<li><a href=\""$$f"\">"`basename $$f .html`"</a>" >>$@;\
	done
	echo "</ul>" >>$@
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:

import os

Import('env')
myenv=env
myenv.Replace(SECURITY_TRANSFORMS_HOME=os.environ['SECURITY_TRANSFORMS_HOME'])
myenv.Replace(ZIPR_HOME=os.environ['ZIPR_HOME'])
myenv.Replace(ZIPR_SDK=os.environ['ZIPR_SDK'])
myenv.Replace(ZIPR_INSTALL=os.environ['ZIPR_INSTALL'])


MemorySpaceFiles=  '''
	MemorySpace.cpp
	../src/memory_space.cpp
	../src/zipr_options.cpp
	'''

OptionFiles=  '''
	ZiprOptions.cpp
	../src/zipr_new_options.cpp
	'''

# ELFIO needs to be first so we get the zipr version instead of the sectrans version.  the zipr version is modified to include get_offset.
cpppath=''' 
	.
	$ZIPR_HOME/third_party/ELFIO/elfio-2.2	
	$SECURITY_TRANSFORMS_HOME/include/
	$SECURITY_TRANSFORMS_HOME/libIRDB/include/
	$SECURITY_TRANSFORMS_HOME/beaengine/include
	$SECURITY_TRANSFORMS_HOME/beaengine/beaengineSources/Includes/
	$ZIPR_HOME/include/
	$ZIPR_SDK/include/
	'''

libs='''
 	xform 
	IRDB-core 
	IRDB-cfg 
	BeaEngine_s_d 
	pqxx  
	transform 
	rewrite 
	pq 
	dl 
	EXEIO
	'''

libpath='''
	$SECURITY_TRANSFORMS_HOME/lib
	'''

myenv.Append(CCFLAGS=" -Wall ")
myenv.Append(CXXFLAGS=" -g -O0 -std=c++11 ")
myenv.Append(LINKFLAGS=" -Wl,-E ")	# export all symbols


myenv=myenv.Clone(CPPPATH=Split(cpppath), LIBS=Split(libs), LIBPATH=Split(libpath))

#print 'myenv='
#print myenv.Dump()

MemorySpace=myenv.Program("MemorySpace.exe", Split(MemorySpaceFiles))
Options=myenv.Program("Options.exe", Split(OptionFiles))
Default([MemorySpace, Options])


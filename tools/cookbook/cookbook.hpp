#ifndef _LIBTRANSFORM_COOKBOOK_TRANSFORM_H_
#define _LIBTRANSFORM_COOKBOOK_TRANSFORM_H_

#include "transform.hpp"
#include "VirtualOffset.hpp"

namespace libTransform
{
	using namespace std;
	using namespace libIRDB;

	/*
	 * Cookbook Transform:
	 *
	 * A subclass of Transform that provides a basic
	 * transform (an instruction comment logger) and
	 * extra features that make the cookbook examples
	 * easier to read.
	 */
	class CookbookTransform : public Transform
	{
		public:
			/*
			 * CookbookTransform
			 *
			 * Constructor. It simply calls through to the parent 
			 * constructor.
			 *
			 * Input:
			 * p_variantID: The variant ID (generated by the
			 *  peasoupify process.)
			 * p_variantIR: Pointer to the intermediate representation
			 *  of the file in the database.
			 * p_filteredFunctions: A set of functions that are blacklisted.
			 *
			 * Output:
			 * Returns:
			 */
			CookbookTransform(VariantID_t *p_variantID, 
				FileIR_t *p_variantIR, 
				set<std::string> *p_filteredFunctions) :
				Transform(p_variantID, 
					p_variantIR, 
					p_filteredFunctions) 
			{
			}

			/*
			 * execute()
			 *
			 * A function that subclasses can implement
			 * that will do the actual work of executing
			 * the transformation.
			 *
			 * Input: None
			 * Output: None
			 * Returns: 0/1 based on success or failure,
			 *  respectively.
			 * 
			 */
			virtual int execute();
		protected:

			/*
			 * addCookbookCallback:
			 *
			 * Add a callback to an instruction.
			 *
			 * Input: 
			 * original: the original instruction to hook with a
			 *  callback.
			 * callback: the name of the callback to invoke.
			 * before: true for executing the callback before
			 *  the instruction. false to execute the callback
			 *  after.
			 * extra: a pointer to some extra data 
			 *  passed to the callback
			 *
			 * Output:
			 * Returns:
			 * 
			 * As a side effect, instructions are inserted that will
			 * invoke callback before or after original is executed.
			 */
			void addCookbookCallback(Instruction_t *original, 
				string callback, 
				bool before = true,
				void *extra = 0);
	};
}
#endif

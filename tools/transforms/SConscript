import os

Import('env')
myenv=env.Clone()
myenv.Replace(SECURITY_TRANSFORMS_HOME=os.environ['SECURITY_TRANSFORMS_HOME'])


libname="IRDB-util"
cpppath=''' 
	$SECURITY_TRANSFORMS_HOME/include/
	$SECURITY_TRANSFORMS_HOME/libIRDB/include/
	$SECURITY_TRANSFORMS_HOME/libMEDSannotation/include/
	$SECURITY_TRANSFORMS_HOME/libtransform/include/
	$SECURITY_TRANSFORMS_HOME/beaengine/include
	$SECURITY_TRANSFORMS_HOME/libEXEIO/include
	$SECURITY_TRANSFORMS_HOME/beaengine/beaengineSources/Includes/
	'''

LIBS= " xform IRDB-cfg MEDSannotation transform " + env.subst('$BASE_IRDB_LIBS') 
LIBPATH="$SECURITY_TRANSFORMS_HOME/lib"

integer_files="transformutils.cpp integertransformdriver.cpp"

# doesn't work on solaris.
#myenv.Append(CFLAGS="-Wall")
#myenv.Append(CCFLAGS="-Wall")

myenv.Append(CXXFLAGS = " -std=c++11 ")

all_files="PNTransformDriver.cpp PNStackLayout.cpp PNRange.cpp Range.cpp OffsetInference.cpp DirectOffsetInference.cpp ScaledOffsetInference.cpp P1Inference.cpp PNRegularExpressions.cpp PNMain.cpp StackLayout.cpp General_Utility.cpp AnnotationBoundaryGenerator.cpp PrecedenceBoundaryInference.cpp PNIrdbManager.cpp EhUpdater.cpp"


myenv=myenv.Clone(CPPPATH=Split(cpppath))
ru_obj=myenv.Object("Rewrite_Utility.cpp");
ru_lib=myenv.Library("rewrite", ru_obj);
install=myenv.Install("$SECURITY_TRANSFORMS_HOME/lib/", ru_lib)
Default(install)

p1=myenv.Program("p1transform.exe", Split(all_files), LIBS=Split(LIBS)+ru_lib, LIBPATH=Split(LIBPATH))
install=myenv.Install("$SECURITY_TRANSFORMS_HOME/bin/", p1)
Default(install)
install=myenv.InstallAs("$SECURITY_TRANSFORMS_HOME/bin/pntransform.exe", p1)
Default(install)
#install=myenv.InstallAs("p1transform.exe", p1)
#Default(install)

intdr=myenv.Program("integertransformdriver.exe", Split(integer_files), LIBS=Split(LIBS)+ru_lib, LIBPATH=Split(LIBPATH))
install=myenv.Install("$SECURITY_TRANSFORMS_HOME/bin/", intdr)
Default(install)



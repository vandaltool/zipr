#------------------------------Copyright-------------------------------------------------
# NOTICE
# 
# This software (or technical data) was produced for the U. S.
# Government under contract 2009-0917826-016 and is subject to the Rights in Data-General Clause 52.227-14 (DEC 2007).
# 
# The following copyright notice may be affixed after receipt of written approval from the Contracting Officer.  Please contact the Contracts Office for assistance with obtaining approval or identifying the correct clause. If the contract has Clause 52.227-14, Alt. IV, written approval is not required and the below copyright notice may be affixed.
# 
# Copyright (c) 2012 The MITRE Corporation. All Rights Reserved.
#------------------------------Copyright-------------------------------------------------
#

# execute <test_case> <time_limit> <cmd_line> <run_directory> <ref_id> <port> -> <void>

previous_dir=`pwd`
cd /home/tm/peasoup
source set_env_vars
cd $previous_dir

echo "1" 1>&2

# store test case name so called scripts can use it
export TNE_TEST_CASE="$1"
unset VERBOSE

echo "test_case = $1"
echo "time_limit = $2"
echo "cmd_line = $3"
echo "run_directory = $4"
echo "ref_id = $5"
echo "port = $6"

echo "2" 1>&2
#archive the arguments sent to execute run
#-----------------------------------------------------
# /home/ps1/peasoup/scripts/archive.sh 4 $1 "$4" $6
#-----------------------------------------------------

# For now, put the path to the environment file needed by ps_analyze and ps_run
# in an environment variable of its own. This is to try and make it obvious
# what this path is for and the fact that it is local layout dependant
# export PEASOUP_ENV_PATH='/ps0/testbot/uva-svn/strata_env'

LOG_COMMAND="$GRACE_HOME/concolic/src/util/linux/ps_log_tne.py"
GEN_MESSAGE_COMMAND="$GRACE_HOME/concolic/src/util/linux/general_message.py"

# prevent unbounded subject execution
# usage: set_timer <seconds>
set_timer()
{
	# wait
	sleep $1& wait

	# FIXME: crazy hack
	# kill the subject
	pkill a.stratafied
}

# set timer for 10 minutes
set_timer $2 2> /dev/null & TIMER_PID=$!

echo "3" 1>&2
# Log the call and its contents
python $LOG_COMMAND -n $1 -t "Execute parameters" -m "$message_1"

# Send a general message that execute was called
python $GEN_MESSAGE_COMMAND -n $1 -t "Execute called" -m "execute script called for test case i/o pair"

echo "3.1" 1>&2
# Clean up any stray SYSV semaphores
IPCS_S=$(ipcs -s | egrep "0x[0-9a-f]+ [0-9]+" | grep $(whoami) | cut -f2 -d" ")
for id in $IPCS_S; do
	ipcrm -s $id;
done

# cd to run_directory
cd $4
python $LOG_COMMAND -n $1 -t "Execute script" -m "run dir: $PWD"

# check if the cmd_line ($3) ends with &, if so, need to wait for the batch 
# process to be complete and capture the actual return code
# options of grep that used -E, --extended-regexp and -q, --quiet, --silent
echo $3 | grep -qE "&$"
ck_code=$?

echo "4" 1>&2

# Split the provided command line into an array at white spaces
cmdline=($3)
# The first item in the array is <path>/<name of exe>
execpath=${cmdline[0]}
python $LOG_COMMAND -n $1 -t "Execute script" -m "derived execution path: $execpath"

echo "5" 1>&2

echo "$execpath"
echo "5.1" 1>&2
eval echo "$execpath"
echo "5.2" 1>&2

eval execpath=$execpath

# Check to make sure the executable exists
# TODO: When we start saving the analyzed executable outside the VM
# for resets, this will change to retrieve the protected executable if it
# isn't there. Right now, just fail.
echo "5.3" 1>&2
if [ -e "${execpath}" ]; then
echo "5.4" 1>&2
	echo "Found Executable"
	python $LOG_COMMAND -n $1 -t "Execute script" -m "Peasoup executable found"
echo "5.5" 1>&2
else
echo "5.6" 1>&2
	# echo "failure"
	echo "ERROR - Did not find Executable"
echo "5.7" 1>&2
	python $LOG_COMMAND -n $1 -t "Execute script" -m "Peasoup executable not found. Exiting execution attempt"
echo "5.8" 1>&2
        ss_report_status $6 "<?xml version=1.0 encoding=UTF-8 ?><return_status_message><message_type>execute_status</message_type><test_case>$1</test_case><ref_id>$6</ref_id><status>skip</status><status_code></status_code></return_status_message>"
echo "5.9" 1>&2
	exit
fi

echo "6" 1>&2
# log and execute cmd_line
echo "${cmdline[@]:0}"
eval echo "${cmdline[@]:0}"
eval ls -l $execpath
echo "7" 1>&2

eval cmd="command executed: ${cmdline[@]:0}"
python $LOG_COMMAND -n $1 -t "Execute script" -m "$cmd"
eval ${cmdline[@]:0}

# Block of code from MITRE to handle return code of background command
if [ $ck_code -ne 0 ]; then
	# capture the return code
    rtn_code=$?
    echo "if: ck_code <> 0; rtn_code = $rtn_code"
else
	tc_pid=$!
	wait $tc_pid
	rtn_code=$?
    echo "else: ck_code = 0; tc_pid = $tc_pid; rtn_code=$rtn_code"
fi
PS_RUN_STATUS="$rtn_code"

# report status with the actual rtn_code
ss_report_status $6 "<?xml version=3D1.0 encoding=3DUTF-8 ?><return_status_message><message_type>execute_status</message_type><test_case>$1</test_case><ref_id>$5</ref_id><status>success</status><status_code>$rtn_code</status_code></return_status_message>"


python $LOG_COMMAND -n $1 -t "Execute script" -m "execution complete with status: $PS_RUN_STATUS"
echo "Execute Complete with status $PS_RUN_STATUS"

#--- this block commented out - moved to individual peasoup scripts
# datapath=dirname `tail -n 1 $execpath|gawk '{print $2}'`

#if [ -f $datapath/diagnostics.out ]; then
	#len=`cat $datapath/diagnostics.out | wc -l` 
	#if [ $len -gt 0 ]; then 

        # make output more concise
#		wc -l $4/diagnostics.out
#	    sort $4/diagnostics.out | uniq > tmp.$$
	    #cat $datapath/diagnostics.out | uniq > tmp.$$
		#mv tmp.$$ $datapath/diagnostics.out
#
		#echo "--------------------------------------------------------"
		#echo "-        PEASOUP DETECTED AND CONFINED ERRORS          -"
		#echo "- (and possibly detected that some errors were benign) -"
		#echo "-               (Summarized below)                     -"
		#echo "--------------------------------------------------------"
		#cat $4/diagnostics.out

		# report detector warnings to test manager
		#while read line
		#do
			#case $line in
			#POLICY:\ controlled\ exit*)
				#$GRACE_HOME/concolic/src/util/linux/controlled_exit.py -m "$line"
				#;;
			#POLICY:\ continue\ execution*)
				#$GRACE_HOME/concolic/src/util/linux/continue_execution.py -m "$line"
				#;;
			#*)
				#$GRACE_HOME/concolic/src/util/linux/general_message.py -m "$line"
				#;;
			#esac
		#done < $datapath/diagnostics.out
	#fi
#fi
#----------------------

echo "8" 1>&2
# Send a general message that execution has finished
python $GEN_MESSAGE_COMMAND -n $1 -t "Execution complete" -m "execution done for test case i/o pair"

# we're done; cancel timer
if [ ! -z $TIMER_PID ]; then
	# if the timer process is still running, kill it;
	# if it's gone, report a timeout
	kill -0 $TIMER_PID &> /dev/null
	if [ "$?" == "0" ]; then
		kill -9 $TIMER_PID &> /dev/null
	else
            ss_report_status $6 "<?xml version=1.0 encoding=UTF-8 ?><return_status_message><message_type>execute_status</message_type><test_case>$1</test_case><ref_id>$6</ref_id><status>controlled exit</status><status_code>$PS_RUN_STATUS</status_code></return_status_message>"

	    exit
	fi
fi

echo "9" 1>&2
# echo "success"
# check for controlled exit
# pwd

# diag_file="Release/`ls -tr Release|grep peasoup_executable_dir|tail -1`/diagnostics.out"
# if [ -f $diag_file ]; then
        # len=`cat $diag_file | wc -l`
        # if [ $len -gt 0 ]; then
               # grep -q "controlled exit" $diag_file
               # if [ "$?" == "0" ]; then
                       # ss_report_status $6 "<?xml version=1.0 encoding=UTF-8 ?><return_status_message><message_type>execute_status</message_type><test_case>$1</test_case><ref_id>$6</ref_id><status>controlled_exit</status><status_code>$?</status_code></return_status_message>"
                       # exit
               # fi
       # fi
# fi

echo "10" 1>&2
# if nothing else happened, consider it a success
ss_report_status $6 "<?xml version=1.0 encoding=UTF-8 ?><return_status_message><message_type>execute_status</message_type><test_case>$1</test_case><ref_id>$6</ref_id><status>success</status><status_code>$PS_RUN_STATUS</status_code></return_status_message>"

echo "11" 1>&2
#archive observables
#-----------------------------------------------------
# cd $3/..
# tar cfz /home/ps1/$1_observables.tar observables
# /home/ps1/peasoup/scripts/archive.sh 5 $1 /home/ps1/$1_observables.tar $6
# rm /home/ps1/$1_observables.tar 
#-----------------------------------------------------

#CLEANUP
# It should delete all files created by the analysis step
# since they are already archived by that step.  This
# prevents files from being archived twice

echo "Cleaning..."
pwd
ls -l

# Save any changed files from peasoup executable folder
# Save off the diagnostics.out and a.ncexe.sigs files
# There might be more than one peasoup_executables folder
# so append the diagnostics.out files together since they
# have the same name
cd /opt/stonesoup/TH-workspace
more peasoup_executable*/diagnostics.out > diagnostics.out
more peasoup_executable*/a.ncexe.sigs.orig >> a.ncexe.sigs.orig
mv peasoup_executable*/a.ncexe.sigs.* .
rm -rf peasoup_executable*

# Remove the programs - they are archived in analyze
rm -rf built install

# Kill any left over processes
pkill sleep

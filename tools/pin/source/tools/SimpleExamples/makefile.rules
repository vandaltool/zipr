##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################


##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
TEST_TOOL_ROOTS := dcache edgcnt pinatrace trace icount inscount2_mt opcodemix malloctrace calltrace jumpmix toprtn \
                   catmix regmix ilenmix coco get_source_location extmix xed-print xed-use ldstmix topopcode regval

# This defines the tests to be run that were not already defined in TEST_TOOL_ROOTS.
TEST_ROOTS :=

# This defines a list of tests that should run in the "short" sanity. Tests in this list must also
# appear either in the TEST_TOOL_ROOTS or the TEST_ROOTS list.
# If the entire directory should be tested in sanity, assign TEST_TOOL_ROOTS and TEST_ROOTS to the
# SANITY_SUBSET variable in the tests section below (see example in makefile.rules.tmpl).
SANITY_SUBSET := get_source_location regval

# This defines the tools which will be run during the the tests, and were not already defined in
# TEST_TOOL_ROOTS.
TOOL_ROOTS :=

# This defines all the applications that will be run during the tests.
APP_ROOTS := get_source_app regval_app

# This defines any additional object files that need to be compiled.
OBJECT_ROOTS :=

# This defines any additional dlls (shared objects), other than the pintools, that need to be compiled.
DLL_ROOTS :=

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS :=

###### Place architecture-specific definitions here ######

# Place ia32-specific definitions here if they apply to all supported operating systems.
ifeq ($(TARGET),ia32)
    TEST_TOOL_ROOTS += emuload
endif

# Place intel64-specific definitions here if they apply to all supported operating systems.
ifeq ($(TARGET),intel64)
    TEST_TOOL_ROOTS += inscount2_vregs
endif

###### Place OS-specific definitions here ######

# Linux
ifeq ($(TARGET_OS),linux)
    TEST_TOOL_ROOTS += xed-cache
    ifeq ($(TARGET),intel64)
        TEST_TOOL_ROOTS += fence
    endif
endif

# Mac
ifeq ($(TARGET_OS),mac)
    ifeq ($(TARGET),intel64)
        TEST_TOOL_ROOTS += fence
    endif
endif

###### Handle exceptions here ######

# topopcode can't be compiled on 64b Windows
ifeq ($(TARGET_OS)-$(TARGET),windows-intel64)
    TEST_TOOL_ROOTS := $(filter-out topopcode, $(TEST_TOOL_ROOTS))
endif

# We can't compile the get_source_app application on Windows due to a cygwin bug.
# For details see: http://cygwin.com/ml/cygwin/2008-08/msg00157.html.
ifeq ($(TARGET_OS),windows)
    TEST_TOOL_ROOTS := $(filter-out get_source_location, $(TEST_TOOL_ROOTS))
    SANITY_SUBSET := $(filter-out get_source_location, $(SANITY_SUBSET))
    APP_ROOTS := $(filter-out get_source_app, $(APP_ROOTS))
endif

# TODO: These tests fail on KNC - fix and remove the following:
# for get_source_location see Mantis 2960
ifeq ($(TARGET),mic)
    TEST_TOOL_ROOTS := $(filter-out get_source_location, $(TEST_TOOL_ROOTS))
    SANITY_SUBSET := $(filter-out get_source_location, $(SANITY_SUBSET))
    APP_ROOTS := $(filter-out get_source_app, $(APP_ROOTS))
endif

# TODO: These tests fail on Mac - fix and remove the following:
ifeq ($(TARGET_OS),mac)
    TEST_TOOL_ROOTS := $(filter-out get_source_location, $(TEST_TOOL_ROOTS))
    SANITY_SUBSET := $(filter-out get_source_location, $(SANITY_SUBSET))
    APP_ROOTS := $(filter-out get_source_app, $(APP_ROOTS))
endif

# TODO: These tests did not run before the changes - fix and remove the following:
TEST_TOOL_ROOTS := $(filter-out fence, $(TEST_TOOL_ROOTS))

# GetSourceLocation api not currently supported in android. See mantis 2913.
ifeq ($(TARGET_OS),android)
    TEST_TOOL_ROOTS := $(filter-out get_source_location, $(TEST_TOOL_ROOTS))
    SANITY_SUBSET := $(filter-out get_source_location, $(SANITY_SUBSET))
    APP_ROOTS := $(filter-out get_source_app, $(APP_ROOTS))
endif


##############################################################
#
# Test recipes
#
##############################################################

# This section contains recipes for tests other than the default.
# See makefile.default.rules for the default test rules.
# All tests in this section should adhere to the naming convention: <testname>.test

get_source_location.test: $(OBJDIR)get_source_location$(PINTOOL_SUFFIX) $(OBJDIR)get_source_app$(EXE_SUFFIX)
	$(PIN) -t $(OBJDIR)get_source_location$(PINTOOL_SUFFIX) \
	  -- $(OBJDIR)get_source_app$(EXE_SUFFIX) > $(OBJDIR)get_source_location.out 2>&1
	$(QGREP) "get_source_app.cpp:3" $(OBJDIR)get_source_location.out 
	$(QGREP) "get_source_app.cpp:4" $(OBJDIR)get_source_location.out 
	$(QGREP) "get_source_app.cpp:5" $(OBJDIR)get_source_location.out 
	$(RM) $(OBJDIR)get_source_location.out

regval.test: $(OBJDIR)regval$(PINTOOL_SUFFIX) $(OBJDIR)regval_app$(EXE_SUFFIX)
	$(PIN) -t $(OBJDIR)regval$(PINTOOL_SUFFIX) -o $(OBJDIR)regval.out -- $(OBJDIR)regval_app$(EXE_SUFFIX)
	$(RM) $(OBJDIR)regval.out


##############################################################
#
# Build rules
#
##############################################################

# This section contains the build rules for all binaries that have special build rules.
# See makefile.default.rules for the default build rules.

###### Special applications' build rules ######

$(OBJDIR)get_source_app$(EXE_SUFFIX): get_source_app.cpp
	$(APP_CXX) $(APP_CXXFLAGS_NOOPT) $(DBG_INFO_CXX_ALWAYS) $(COMP_EXE)$@ $< $(APP_LDFLAGS_NOOPT) $(APP_LIBS) $(DBG_INFO_LD_ALWAYS)

# This application needs to be compiled without optimizations for the placeholder functions to be available to the tool.
$(OBJDIR)regval_app$(EXE_SUFFIX): regval_app.cpp
	$(APP_CXX) $(APP_CXXFLAGS_NOOPT) $(COMP_EXE)$@ $< $(APP_LDFLAGS_NOOPT) $(APP_LIBS) $(CXX_LPATHS) $(CXX_LIBS)

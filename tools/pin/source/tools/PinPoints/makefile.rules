##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################


##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
TEST_TOOL_ROOTS := isimpoint controller branch_predictor bbtrace

# This defines the tests to be run that were not already defined in TEST_TOOL_ROOTS.
TEST_ROOTS := controller_length controller_symbol controller_int3

# This defines a list of tests that should run in the "short" sanity. Tests in this list must also
# appear either in the TEST_TOOL_ROOTS or the TEST_ROOTS list.
# If the entire directory should be tested in sanity, assign TEST_TOOL_ROOTS and TEST_ROOTS to the
# SANITY_SUBSET variable in the tests section below (see example in makefile.rules.tmpl).
SANITY_SUBSET :=

# This defines the tools which will be run during the the tests, and were not already defined in
# TEST_TOOL_ROOTS.
TOOL_ROOTS :=

# This defines the static analysis tools which will be run during the the tests. They should not
# be defined in TEST_TOOL_ROOTS. If a test with the same name exists, it should be defined in
# TEST_ROOTS.
# Note: Static analysis tools are in fact executables linked with the Pin Static Analysis Library.
# This library provides a subset of the Pin APIs which allows the tool to perform static analysis
# of an application or dll. Pin itself is not used when this tool runs.
SA_TOOL_ROOTS :=

# This defines all the applications that will be run during the tests.
APP_ROOTS := controller_app

# This defines any additional object files that need to be compiled.
OBJECT_ROOTS :=

# This defines any additional dlls (shared objects), other than the pintools, that need to be compiled.
DLL_ROOTS :=

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS :=

###### Handle exceptions here ######

# TODO: These tests fail on KNC because GetSourceLocation is not currently supported on this platform.
# See mantis 2960
ifeq ($(TARGET),mic)
    TEST_TOOL_ROOTS := $(filter-out controller, $(TEST_TOOL_ROOTS))
    TEST_ROOTS := $(filter-out controller_int3, $(TEST_ROOTS))
endif

# TODO: These tests fail on Android because GetSourceLocation is not currently supported on this platform.
# See mantis 2913.
ifeq ($(TARGET_OS),android)
    TEST_TOOL_ROOTS := $(filter-out controller, $(TEST_TOOL_ROOTS))
    TEST_ROOTS := $(filter-out controller_length controller_symbol controller_int3, $(TEST_ROOTS))
endif


##############################################################
#
# Test recipes
#
##############################################################

# This section contains recipes for tests other than the default.
# See makefile.default.rules for the default test rules.
# All tests in this section should adhere to the naming convention: <testname>.test

controller_length.test: $(OBJDIR)controller$(PINTOOL_SUFFIX) $(OBJDIR)controller_app$(EXE_SUFFIX)
	$(PIN) -t $(OBJDIR)controller$(PINTOOL_SUFFIX) -start_address myStart -length 10000000 \
	  -control_log $(OBJDIR)controller_length.log -- $(OBJDIR)controller_app$(EXE_SUFFIX)
	$(RM) $(OBJDIR)controller_length.log

controller_symbol.test: $(OBJDIR)controller$(PINTOOL_SUFFIX) $(OBJDIR)controller_app$(EXE_SUFFIX)
	$(PIN) -t $(OBJDIR)controller$(PINTOOL_SUFFIX) -start_address myStart -stop_address foo:1000 \
	  -control_log $(OBJDIR)controller_symbol.log -- $(OBJDIR)controller_app$(EXE_SUFFIX)
	$(RM) $(OBJDIR)controller_symbol.log

controller_int3.test: $(OBJDIR)controller$(PINTOOL_SUFFIX) $(OBJDIR)controller_app$(EXE_SUFFIX)
	$(PIN) -t $(OBJDIR)controller$(PINTOOL_SUFFIX) -start_address myStart -stop_int3 1000 \
	  -control_log $(OBJDIR)controller_int3.log -- $(OBJDIR)controller_app int3$(EXE_SUFFIX)
	$(RM) $(OBJDIR)controller_int3.log


##############################################################
#
# Build rules
#
##############################################################

# This section contains the build rules for all binaries that have special build rules.
# See makefile.default.rules for the default build rules.

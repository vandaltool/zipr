%4.0f RPM
%-4s = %+5.1f%s
%+6.1f%s  
%+6.2f A  
%6.2f %sJ
%6.2f %sW  
%+6.2f V  
%+6.3f V
Adapter: %s
AMD AMDSI
  -A, --no-adapter      Do not show adapter for each chip
bus "i2c-%d" "%s"
bus-list
      --bus-list        Generate bus statements for sensors.conf
Can't get adapter name
  -c, --config-file     Specify a config file
config-file
Could not open config file
crit low
crit max
crit min
disabled
  (div = %1.0f)
EMERGENCY
ERROR: Can't get label of feature %s!
ERROR: Can't get value of subfeature %s: %s
Example chip names:
fahrenheit
   FAULT
   FAULT  
  -f, --fahrenheit      Show temperatures in degrees fahrenheit
__fprintf_chk
getopt_long
GLIBC_2.0
GLIBC_2.1
GLIBC_2.3.4
__gmon_start__
  -h, --help            Display this help text
hsvfAc:u
iconv_close
iconv_open
If no chips are specified, all chip info will be printed.
Intel PECI
Internal error while parsing options!
interval
_IO_stdin_used
ISO-8859-1
_Jv_RegisterClasses
libc.so.6
__libc_start_main
/lib/ld-linux.so.2
libsensors.so.4
libsensors_version
	lm78-i2c-0-2d	*-i2c-0-2d
	lm78-i2c-0-*	*-i2c-0-*
	lm78-i2c-*-2d	*-i2c-*-2d
	lm78-i2c-*-*	*-i2c-*-*
	lm78-isa-0290	*-isa-0290
	lm78-isa-*	*-isa-*
Make sure you loaded all the kernel drivers you need.
  (min = %4.0f RPM)
  (min = %4.0f RPM, div = %1.0f)
     N/A
     N/A  
nl_langinfo
no-adapter
No sensors found!
Not enough %s buffers (%d)
Parse error in chip name `%s'
__printf_chk
Run as root?
  %s: %.3f
%s = %+6.2f A
%s = %6.2f %sW
%s = %+6.2f V
%s: At least one "set" statement failed
  sensor = %s
sensors_cleanup
sensors_do_chip_sets
sensors_free_chip_name
sensors_get_adapter_name
sensors_get_all_subfeatures
sensors_get_detected_chips
sensors_get_features
sensors_get_label
sensors_get_subfeature
sensors_get_value
sensors_init
sensors_init: %s
sensors_parse_chip_name
sensors_snprintf_chip_name
sensors_strerror
setlocale
Specified sensor(s) not found!
  -s, --set             Execute `set' statements (root only)
__strcpy_chk
%s version %s with libsensors version %s
thermal diode
thermistor
transistor
Try sensors-detect to find out which these are.
Try `%s -h' for more information
uH9t$0tB
  -u                    Raw output (debugging only)
Usage: %s [OPTION]... [CHIP]...
Use `-' after `-c' to read the config file from stdin.
  -v, --version         Display the program version

            }
        }
    # absolute pathname to query helper
# 'abs_path' from Cwd resolves symlinks, and we don't want that to happen
        addsubstvar($package, "misc:Depends", $gtk_binver_dep);
    # base directory to prepend to the list of locations
    # base directory to prepend to the output module file and to strip
B<dh_gtkmodules> is a debhelper program that handles correctly
B<dh_gtkmodules> [S<I<debhelper options>>]
("binary version").
                chomp;
        chomp;
            close FIND or die "Error while running find: $!";
    close QUERY or die "Error while querying modules with $querymodules: $!";
    complex_doit("printf '%s\\n' '# automatically generated by dh_gtkmodules, do not edit' >>$module_file");
        complex_doit("printf '%s\\n' '$_' >>$module_file");
current package, it will generate a dependency on the earliest Gtk
current package with the package name or "<package>.immodules" if it
development files.
dh_gtkmodules - create Gtk module files for Gtk modules
    doit("chmod", 644, "$module_file");
    doit("chown", "0:0", "$module_file");
        doit("install", "-d", "$basedir/$module_files_d");
        doit("rm", "-f", "$module_file");
    doit("rm", "-f", "$module_file");
Do not generate any dependencies in ${misc:Depends}.
        } else {
} else {
        } elsif (-f $path or -l $path) {
        error("Internal error: could not find any module in the output of $querymodules.");
            error("$path has unknown file type.");
            error("$querymodules could not load a module:\n$_\nYou should probably make the libraries built by your package available via LD_LIBRARY_PATH.");
# file on its stdout with *.so passed on its command-line)
    find_modules(\@im_modules, $tmp, $im_modules_path);
    find_modules(\@loaders_modules, $tmp, $loaders_modules_path);
              "find '$path' -name '*.so' \\( -type f -or -type l \\) |")
finds any GdkPixbuf loaders or IM modules.
    foreach (map("$basedir/$_", split(/:/, $path))) {
foreach my $package (@{$dh{DOPACKAGES}}) {
# gdk-pixbuf-query-loaders helper (generates a GdkPixbuf loaders module
generating a dependency on the versionned Gtk+ module ABI and
# Gtk binary version virtual Provide
Gtk+ module directories.
# gtk-query-immodules-2.0 helper (generates an IM module file on its
=head1 AUTHOR
=head1 DESCRIPTION
=head1 NAME
=head1 OPTIONS
=head1 SEE ALSO
=head1 SYNOPSIS
    if (0 == @loaders_modules + @im_modules) {
    if (0 == $n_lines) {
    if (! -d "$basedir/$module_files_d") {
    if (! $dh{K_FLAG}) {
        if (-d $path) {
    if (! -d "$tmp/$modules_base_path") {
if ($ENV{GTK_QUERYIMMODULES}) {
if ($ENV{GTK_QUERYLOADERS}) {
        if (! -e $path) {
    if (@im_modules) {
    if (@loaders_modules) {
        if (m#^g_module_open\(\) failed for #) {
        if (m#^\Q"$absolute_basedir/\E#) {
    # if no modules of these types were found, we're done
            # if path is a directory (or symlink to a directory), search for
            # if path is a file or symlink, simply add it to the list
    if ($path =~ m#^/#) {
        # if some module couldn't be loaded by the query helper, bail out
    # if the versionned directory isn't present, give up on package
If this command finds the versionned standard module directory in the
                      $im_module_files_d,
                      @im_modules);
indexes for GdkPixbuf loaders and IM modules that it finds in the
=item B<-k>
        # it's necessary to make the path absolute to strip the build-time
L<debhelper>
    # list of locations to search relative to $basedir separated with ":"
                      $loader_module_files_d,
                      @loaders_modules);
Loic Minier <lool@dooz.org>
    # modules to query
    my $absolute_basedir = make_absolute_path($basedir);
    my $basedir = shift;
    my $cwd = getcwd;
    my $do_query = join ' ', $querymodules, @modules;
my $gtk_binver_dep = 'gtk2.0-binver-2.10.0';
my $im_module_files_d = "$modules_base_path/immodule-files.d";
    my @im_modules = ();
my $im_modules_path = "$modules_base_path/immodules";
my $loader_module_files_d = "$modules_base_path/loader-files.d";
    my @loaders_modules = ();
my $loaders_modules_path = "$modules_base_path/loaders";
    my $module_files_d = shift;
    my $module_file = shift;
    my @modules = @_;
my $modules_base_path = 'usr/lib/i386-linux-gnu/gtk-2.0/2.10.0';
    my $modules_ref = shift;
    my $n_lines = 0;
        my $path = make_absolute_path($_);
    my $path = shift;
my $queryimmodules;
my $queryloaders;
    my $querymodules = shift;
    my $tmp = tmpdir($package);
            next;
        next;
        next if m/^#/;
        $n_lines++;
    # nothing written to the module file, fail miserably
    # of the output
    # on the Gtk binary version
            open(FIND,
    open(QUERY, "$do_query 2>&1 |")
        or die "Can't query modules with $querymodules: $!";
              or die "Can't run find: $!";
# (otherwise it's harder to remove the prefix of the generated output)
        # prefix later on
                push @$modules_ref, $_;
            push @$modules_ref, $path;
    $queryimmodules = $ENV{GTK_QUERYIMMODULES};
    $queryimmodules = '/usr/lib/i386-linux-gnu/libgtk2.0-0/gtk-query-immodules-2.0';
    $queryloaders = $ENV{GTK_QUERYLOADERS};
    $queryloaders = '/usr/lib/i386-linux-gnu/libgtk2.0-0/gdk-pixbuf-query-loaders';
        query_modules($queryimmodules,
        query_modules($queryloaders,
# relative directory to store the generated IM module file
# relative directory to store the generated loader module file
    # relative directory where to write the module file
# relative Gtk base module path
    # relative path of the module file
# relative path to GdkPixbuf loaders modules (separated by ":")
# relative path to IM modules (separated by ":")
    return "$cwd/$path";
        return $path;
    # search for specific module types
    # since the versionned module directory exists, generate a dependency
            # *.so files or symlinks
            s#^\Q"$absolute_basedir/\E#"/#;
# stdout with *.so passed on its command-line)
        # strip build-time prefix from output
sub find_modules {
sub make_absolute_path {
sub query_modules {
This command automatically adds a "<package>.loaders" file to the
This program relies on Debhelper, but is shipped with the Gtk
                      $tmp,
                      "$tmp/$im_module_files_d/$package.immodules",
                      "$tmp/$loader_module_files_d/$package.loaders",
use Cwd;
use Debian::Debhelper::Dh_Lib;
use strict;
#!/usr/bin/perl -w
            verbose_print("skipping $path.");
version that Gtk currently has compatibility for in ${misc:Depends}
    warning("Package $package has " . @loaders_modules . " GdkPixbuf loaders and " . @im_modules . " Gtk IM modules.");
warning("This program is deprecated, everything is handled by triggers now.");
    # where to store the modules we find
            while (<FIND>) {
    while (<QUERY>) {

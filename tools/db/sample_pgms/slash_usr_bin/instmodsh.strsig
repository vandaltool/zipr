                      );
         {
         };
        }
##############################################################################
###############################################################################
A little interface to ExtUtils::Installed to examine locally* installed modules,
        Archive::Tar->create_archive($file, 0, $Inst->files($module));
Available commands are:
   CASE:
    $class = 'all' unless $class;
   d [all|prog|doc]   - List the directories used by a module
      # Default
                       d => \&list_directories,
         do_module((split(' ', $reply))[1]);
        else {
    else {
    else { 
        elsif( $cmd eq 'q' ) {
    elsif( eval { require Archive::Tar } ) {
    eval 'exec /usr/bin/perl -S $0 ${1+"$@"}'
         exit(0);
ExtUtils::Installed
   f [all|prog|doc]   - List installed files of a given type
                       f => \&list_installed,
        for my $f (@rest) {
   h                  - Display module help
=head1 DESCRIPTION
=head1 NAME
=head1 SEE ALSO
=head1 SYNOPSIS
                       h => \&module_help,
    if( !(defined $file and length $file) ) {
    if (eval { @dirs = $Inst->directories($module, $class); }) {
    if (eval { @files = $Inst->files($module, $class); }) {
        if( $Module_Commands{$cmd} ) {
    if (my @missing = $Inst->validate($module)) {
	if $running_under_some_shell;
$Inst = ExtUtils::Installed->new();
    instmodsh
instmodsh - A shell to examine installed modules
              join("\n   ", @dirs), "\n");
              join("\n   ", @files), "\n");
              join("\n   ", @missing), "\n");
         last CASE;
        last if $cmd eq 'q';
            last MODULE_CMD;
   l            - List all installed modules
   m <module>   - Select a module
    MODULE_CMD: while (1) {
            $Module_Commands{$cmd}->($reply, $module);
            module_help();
@Modules = $Inst->modules();
    my $class = (split(' ', $reply))[1];
        my($cmd) = $reply =~ /^(\w)\b/;
    my @dirs;
    my @files;
    my $file = (split(' ', $reply))[1];
        my($first, @rest) = $Inst->files($module);
my $help = <<EOF;
    my ($module) = @_;
my %Module_Commands = (
my $Module_Help = <<EOF;
    my($reply, $module) = @_;
        my $reply = <STDIN>; chomp($reply);
   my $reply = <STDIN>; chomp($reply);
*On Debian system, B<core> and B<vendor> modules are managed by C<dpkg>.
        print($@); 
        print "Can't use tar\n" if $?;
        print("$class directories in $module are:\n   ",
        print("$class files in $module are:\n   ",
   print("cmd? ");
        print("Files missing from $module are:\n   ",
         print($help);
print($help);
         print("Installed modules are:\n   ", join("\n   ", @Modules), "\n");
        print("$module cmd? ");
        print("$module has no missing files\n");
    print $Module_Help;
    print($Module_Help);
        print "No tar file specified\n";
   q                  - Quit the module
   q            - Quit the program
      $reply eq 'l' and do
      $reply eq 'q' and do
      $reply =~ /^m\s+/ and do
sub create_archive {
sub do_module($) {
sub list_directories {
sub list_installed {
sub module_help {
sub toplevel()
sub validate_packlist {
        system('tar', 'cvf', $file, $first);
            system('tar', 'rvf', $file, $f);
                       t => \&create_archive,
toplevel();
   t <tarfile>        - Create a tar archive of the module
use ExtUtils::Installed;
use ExtUtils::Packlist;
use IO::File;
use strict;
use vars qw($Inst @Modules);
#!/usr/bin/perl
#!/usr/bin/perl -w
validate your packlists and even create a tarball from an installed module.
                       v => \&validate_packlist,
   v                  - Validate the .packlist - check for missing files
while (1)

apr_hash_count
apr_hash_first
apr_hash_next
apr_hash_this
apr_ltoa
apr_pool_clear
apr_pool_destroy
apr_psprintf
brute-force calculation of the query answer and lazily populating the
__bss_start
cache to vastly speed up certain history-querying operations.  For
compatibility with repositories created with pre-1.5 versions of
Crawl the Subversion repository located at REPOS-PATH in an attempt to
[%%%dd/%%%dd]  Found %%d new lines of history.
during typical repository usage.  It can be run while the repository
ERROR: %s
__fprintf_chk
GLIBC_2.0
GLIBC_2.3.4
__gmon_start__
index with answers it calculates.  Unfortunately, calculating that
information appear in the index organically) can be very costly.
information using the brute-force method (instead of having the
_IO_stdin_used
is online, too, without interrupting normal Subversion activities.
_Jv_RegisterClasses
libapr-1.so.0
libc.so.6
__libc_start_main
/lib/ld-linux.so.2
libpthread.so.0
libsvn_fs-1.so.1
libsvn_repos-1.so.1
libsvn_subr-1.so.1
Not enough arguments.
populate that repository's index of node origins.  
__printf_chk
Subversion in a fashion far more efficient than is likely to happen
Subversion, Subversion will gracefully handle cache misses by doing a
svn_cmdline_init
svn_fs_copied_from
svn_fs_node_origin_rev
svn_fs_paths_changed
svn_fs_revision_root
svn_fs_youngest_rev
svn_handle_error2
svn_path_canonicalize
svn_path_internal_style
svn_pool_create_ex
svn-populate-node-origins-index: 
svn_repos_fs
svn_repos_open
svn_utf_cstring_to_utf8
The node origins index is new as of Subversion 1.5, and behaves as a
This tool triggers the lazy index population logic built into
Usage: %s REPOS-PATH

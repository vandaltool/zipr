		     ))
Adds exception handling stubs to the C code.
affected is the use of I<target>s by the output C code (see L<perlguts>).
allowed here for backwards compatibility.
all xsubs. This flag will enable prototypes.
any makefiles generated by MakeMaker.
$args{filename} = shift @ARGV;
		      argtypes!
@ARGV == 1 or die $usage;
@ARGV = grep {$_ ne '-C++'} @ARGV;  # Allow -C++ for backward compatibility
B<xsubpp> [B<-v>] [B<-except>] [B<-s pattern>] [B<-prototypes>] [B<-noversioncheck>] [B<-nolinenumbers>] [B<-nooptimize>] [B<-typemap typemap>] [B<-output filename>]... file.xs
B<xsubpp> of 5.005 and earlier operated.
By default I<xsubpp> will not automatically generate prototype code for
by Ken Williams.
		      csuffix=s
Currently doesn't do anything at all.  This flag has been a no-op for
default typemaps.  This option may be used multiple times, with the last
determine how to map C function parameters and variables to Perl values.
Disable recognition of ANSI-like descriptions of function signature.
Disable recognition of C<IN>, C<OUT_LIST> and C<INOUT_LIST> declarations.
Disables certain optimizations.  The only optimization that is currently
Disables the run time test that determines if the object file (derived
    eval 'exec /usr/bin/perl -S $0 ${1+"$@"}'
		      except!
exit( ExtUtils::ParseXS::errors() ? 1 : 0 );
from the C<.xs> file) and the C<.pm> files have the same version
GetOptions(\%args, qw(hiertype!
Getopt::Long::Configure qw(no_auto_abbrev no_ignore_case);
=head1 AUTHOR
=head1 DESCRIPTION
=head1 ENVIRONMENT
=head1 MODIFICATION HISTORY
=head1 NAME
=head1 OPTIONS
=head1 SEE ALSO
=head1 SYNOPSIS
if ($args{v}) {
	if $running_under_some_shell;
Indicates that a user-supplied typemap should take precedence over the
		      inout!
=item B<-C++>
=item B<-except>
=item B<-hiertype>
=item B<-noargtypes>
=item B<-noinout>
=item B<-nolinenumbers>
=item B<-nooptimize>
=item B<-noversioncheck>
=item B<-output filename>
=item B<-prototypes>
=item B<-typemap typemap>
=item B<-v>
It will also use a default typemap installed as C<ExtUtils::typemap>.
I<xsubpp> will compile XS code into C code by embedding the constructs
		      linenumbers!
many versions of perl, at least as far back as perl5.003_07.  It's
#!./miniperl
my %args = ();
my $usage = "Usage: xsubpp [-v] [-csuffix csuffix] [-except] [-prototypes] [-noversioncheck] [-nolinenumbers] [-nooptimize] [-noinout] [-noargtypes] [-s pattern] [-typemap typemap]... file.xs\n";
necessary to let C functions manipulate Perl values and creates the glue
necessary to let Perl access those functions.  The compiler uses typemaps to
No environment variables are used.
Note that the C<XSOPT> MakeMaker option may be used to add these options to
		      object_capi!
		      optimize!
  or die $usage;
Originally by Larry Wall.  Turned into the C<ExtUtils::ParseXS> module
		      output=s
perl(1), perlxs(1), perlxstut(1), ExtUtils::ParseXS
Prevents the inclusion of `#line' directives in the output.
Prints the I<xsubpp> version number to standard output, then exits.
  print "xsubpp version $ExtUtils::ParseXS::VERSION\n";
process_file(%args);
		      prototypes!
require 5.002;
Retains '::' in type names so that C++ hierarchical types can be mapped.
See the file F<Changes>.
specified, output will be written to standard output.
Specifies the name of the output file to generate.  If no file is
		      s=s
The compiler will search for typemap files called I<typemap>.  It will use
the following search path to find default typemaps, with the rightmost
This compiler is typically run by the makefiles created by L<ExtUtils::MakeMaker>.
This may significantly slow down the generated code, but this is the way
typemap having the highest precedence.
		      typemap=s@
typemap taking precedence.
	../../../typemap:../../typemap:../typemap:typemap
use ExtUtils::ParseXS qw(process_file);
use Getopt::Long;
#!/usr/bin/perl
		      v
		      versioncheck!
xsubpp - compiler to convert Perl XS code into C code

AUTOLOAD
B<pl2pm> F<files>
B<pl2pm> is a tool to aid in the conversion of Perl4-style .pl
	$carp = "use Carp;\n";
    chomp;
closedir
continue
dbmclose
    else {
    elsif ($pack eq $oldpack) {
    elsif ($pack eq '' || $pack eq 'main') {
endgrent
endhostent
endnetent
endprotoent
endpwent
endservent
    eval 'exec /usr/bin/perl -S $0 ${1+"$@"}'
    @export{@export} = (1) x @export;
    @export = grep(!$keyword{$_}, @export);
	@export = m/sub\s+([A-Za-z]\w*)/g;
	@export = m/sub\s+\w+'(\w+)/g;
$export_ok
	$export_ok = "\@EXPORT_OK = qw(@export_ok);\n";
\@EXPORT = qw(@export);
file will still work fine and you should only use this tool if you
formline
getgrent
getgrgid
getgrnam
gethostbyaddr
gethostbyname
gethostent
getlogin
getnetbyaddr
getnetbyname
getnetent
getpeername
getpriority
getprotobyname
getprotobynumber
getprotoent
getpwent
getpwnam
getpwuid
getservbyname
getservbyport
getservent
getsockname
getsockopt
=head1 AUTHOR
=head1 DESCRIPTION
=head1 LIMITATIONS
=head1 NAME
=head1 SYNOPSIS
	if ($export->{$ident}) {
    if (@export_ok) {
    if (-f $newname) {
    if ( open(PM, ">$newname") ) {
    if ($prefix eq '' && $ident =~ /^(t|s|m|d|ing|ll|ed|ve|re)$/) {
	if $running_under_some_shell;
    if (s/\bdie\b/croak/g) {
    if (!/\$\[\s*\)?\s*=\s*[^0\s]/) {
    if (/sub\s+\w+'/) {
\@ISA = qw(Exporter);
It's just a first step, but it's usually a good first step.
    $keyword{$_} = 1;
Larry Wall <larry@wall.org>
library files to Perl5-style library modules.  Usually, your old .pl
local $/;
localtime
    my $carp      ='';
    my @export = ();
    my %export = ();
    my $export_ok = '';
    my @export_ok = grep($keyword{$_}, @export);
my %keyword = ();
    my $newname = $ARGV;
    my $newpack = "\u$2";
    my $oldpack = $2;
    my ($prefix, $pack, $ident,$newpack,$oldpack,$export) = @_;
    my $xlated ;
    $newname =~ s/\.pl$/.pm/ || next;
    $newname =~ s#(.*/)?(\w+)#$1\u$2#;
package $newpack;
pl2pm - Rough tool to translate Perl4 .pl files to Perl5 .pm modules.
plan to update your library to use some of the newer Perl 5 features,
        print PM <<"END";
prototype
quotemeta
readline
readlink
readpipe
require Exporter;
    return $xlated;
rewinddir
	s/\$\[/0/g;
    s/\bstd(in|out|err)\b/\U$&/g;
	s/croak "([^"]*)\\n"/croak "$1"/g;
setgrent
sethostent
setnetent
setpriority
setprotoent
setpwent
setservent
setsockopt
shmwrite
shutdown
socketpair
    s/open\s+(\w+)/open($1)/g;
    s/(package\s*)($oldpack)\s*;[ \t]*\n+//ig;
    s/(#.*)require ['"]$oldpack\.pl['"]/$1use $newpack/;
    s/(^\s*);#/$1#/g;
	s/^\s*(local\s*\()?\s*\$\[\s*\)?\s*=\s*0\s*;[ \t]*\n//g;
	s/\$\[\s*\+\s*//g;
	s/\s*\+\s*\$\[//g;
	s/(sub\s+)main'(\w+)/$1$2/g;
    s/(sub\s+)(\w+)(\s*\{[ \t]*\n)\s*package\s+$oldpack\s*;[ \t]*\n+/${1}main'$2$3/ig;
sub xlate {
such as AutoLoading.
    s/([\$\@%&*]?)(\w+)'(\w+)/&xlate($1,$2,$3,$newpack,$oldpack,\%export)/eg;
    s/([\$\@%&*])'(\w+)/&xlate($1,"",$2,$newpack,$oldpack,\%export)/eg;
syswrite
truncate
UNITCHECK
use 5.006;
use strict;
use warnings;
#!/usr/bin/perl
wantarray
      warn "Can't create $newname: $!\n";
	warn "Won't overwrite existing $newname\n";
while (<>) {
while (<DATA>) {
	$xlated = "${pack}'$ident";
	    $xlated = "$prefix$ident";
	$xlated = "$prefix${newpack}::$ident";
	    $xlated = "$prefix${pack}::$ident";
	$xlated = "$prefix${pack}::$ident";

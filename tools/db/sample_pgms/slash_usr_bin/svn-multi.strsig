        )
        )?
# --------------------------------------------------------------
    'a', 'b' and 'c' will be added without a specific group, i.e. the last group
# Add TEXINPUTS to path
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
 also allows to provide additional files including the corresponding groups. The
 and provides it to the 'svn-multi' package using '.svx' files.  It will first
# and version 1.3c or later is part of all distributions of LaTeX
        ^                   # at begin of line
# (at your option) any later version.
        {                   # begin token group
# but WITHOUT ANY WARRANTY; without even the implied warranty of
  chdir($dir);
    chomp;
  close($fh);
      close($infoh);
  close ($svnfh);
  close ($svxfh);
            \]              # closing ]
# conditions of the LaTeX Project Public License, either version 1.3c
          contains a list of all input and output files used by the LaTeX main
# Copyright (C) 2006-2009 Martin Scharrer
    Creates Subversion keywords for all files declared by '\svnextern' inside
create_svxfile("$jobname.svx", @mainfilepairs )
  create_svxfile($svxfile, @pairs);
  delete $external{$maintex};
Description:
{${dollar}HeadURL: $href->{URL} \$}
{${dollar}LastChangedBy: $href->{'Last Changed Author'} \$}
{${dollar}LastChangedDate: $href->{'Last Changed Date'} \$}
{${dollar}LastChangedRevision: $href->{'Last Changed Rev'} \$}
      else {
    else {
    elsif ($arg =~ /^--fls/) {
    elsif ($arg =~ /^--group|^-?-fg/) {
    elsif (/$resvnexternal/) {
# E-mail: martin@scharrer-online.de
        $                   # end of line
        }                   # end token group
              (.*)          # everything else, e.g: 'filea}{fileb}{filec'
              (.*)          # everything else, e.g: 'patha}{pathb}{pathc'
Examples:
  exit(0);
      $fgused = 1;
    File 'a' is in group 'A', 'b' is in 'B' and 'c' is not in any group.
          file is produced by LaTeX when run with the '--recorder' option and
            ([^}]+)         # file name (everything until })
          file. Only input files with a relative path will be used.  A
      $file = path_search($file);
      @files = ();
      $file =~ s/^\.\///;
# files declared with '\svnexternal' inside the LaTeX document.
  $file =~ s/##/#/g;
 --fls  : Read list of (additional) files from the file '<jobname>.fls'. This
  foreach my $arg (@args) {
  foreach my $dir (@PATH) {
    foreach my $file (@$files) {
foreach my $file (keys %external) {
Further Information:
# generates .svx files with '\svnidlong' macros holding Subversion keywords for
# GNU General Public License for more details.
# GPL v3:
        $group = $1;
      $group = $arg;
 ... [--group|-g <group name>] [input_files] ...
 --group <GN>  : Use given group name <GN> for all following files,
                 group is specified.
                ([^\]]*)    # group name (everything until ])
        $group =~ s/^["']|["']$//; # '
      $group =~ s/^["']|["']$//; # '
#   http://www.latex-project.org/lppl.txt
# $Id: svn-multi-pl.dtx 692 2009-03-27 21:38:45Z martin $
      if ($arg =~ /^--group=(.*)/) {
if (!@ARGV or grep { $_ eq '--help' or $_ eq '-h' } @ARGV) {
if ($dir && $dir ne './') {
    if (-e "$dir$file") {
if (-e "$jobname.svn" and open( my $svnfh, '<', "$jobname.svn")) {
if (exists $external{$maintex}) {
    if ($group) {
    if (/^INPUT ([^\/].*)$/) {
if ($jobname =~ /^-/) {
  if @mainfilepairs;
    if ( (not defined $lastgroup and $group) or ($group ne $lastgroup) ) {
      if (not keys %info) {
    if ($readfg) {
    if  (/$resvnexternalpath/) {
    In addition to the '\svnextern' declared files the keywords for the files
# it under the terms of the GNU General Public License as published by
 jobname[.tex] : The LaTeX `jobname`, i.e. the basename of your main LaTeX file.
    keywords for 'e', 'd', 'f' will be part of group 'B'.
 keywords for the additional files will be written in the file '<jobname>.svx'.
    $lastgroup = $group;
# LPPL v1.3c:
    mentioned in the .fls file which are placed in the 'FLS' group.
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  my @args = @_;
  my $date = time2str("%Y-%m-%d %XZ", str2time($href->{'Last Changed Date'}), 'Z');
my $dollar  = '$';
my %EXCLUDE = map { $_ => 1 } qw(sty tex aux log out toc fff ttt svn svx);
my %external;
      my $ext = substr($file, rindex($file,'.')+1);
  my $fgused = 0;
      my $file = $1;
  my @files;
  my $file = shift;
  my $fls = shift;
  my $group = '';
      my ($group,$file,$list) = ($1||"",$2,$3||"");
  my $href = shift;
      my %info = map { chomp; split /\s*:\s*/, $_, 2 } <$infoh>;
my ($jobname, $dir, $suffix) = fileparse(shift @ARGV, qr/\.(tex|ltx|dtx|svn)$/);
  my $lastgroup;
my @mainfilepairs;
my $maintex = "$jobname.tex";
my $outfile = "$jobname.svx";
  my @pairs;
my @PATH;
  my $readfg;
my $resvnexternalpath = qr/
my $resvnexternal = qr/
my ($REV,$DATE) =
  my %seen;
  my %stack;
  my ($svxfile, @fgpair) = @_;
  my $svxfile = $file;
my $VERSION = "0.2";
        next;
      next if $seen{$group}{$file};
    no warnings 'uninitialized';
            {               # { of first file
            {               # { of first path
            }               # } of last file
            }               # } of last path
# of this license or (at your option) any later version.
      # Only print the file once per group and .svx file
            \[              # opening [
  open (my $fh, '<', $fls) or return;
      open(my $infoh, '-|', "svn info '$file' 2>/dev/null") or next;
  open(my $svxfh, '>', $svxfile) or do {
        (?:                 # optional:
Options:
 or -g <GN>      including the one read by a '--fls' option, until the next
            |               # or nothing
        (?:                 # paths:
          previously selected group will be honoured.
        print "% Could not receive keywords for '$file'!\n\n";
      print "{$file}\n";
  printf STDOUT "Main directory is '$dir'.\n";
  print "% Generated by svn-multi.pl v$VERSION\n\n";
      print "[$group]" if $group;
      print "% Keywords for '$file'\n";
      print "\n"
  print "\n";
  print STDOUT <<'EOT';
  print STDOUT "Generating .svx file '$svxfile'.\n";
  print STDOUT "Reading '$jobname.svn'.\n";
print STDOUT "This is svn-multi.pl, Version $VERSION-$REV, $DATE\n";
      print "\\svnexternalfile";
      print "\\svngroup{$group}\n";
      print svnidlong(\%info);
# purposes.
      push @{$external{$file}{$group} ||= []}, ( split /}\s*{/, $list );
      push @files, $arg;
      push @files, read_fls("$jobname.fls");
  push @mainfilepairs, [ $group, [ @$list ] ];
push @mainfilepairs, parse_args(@ARGV);
      push @pairs, [ $group, [ @files ] ];
  push @pairs, [ $group, [ @files ] ] if @files;
  push @pairs, [ $group, [ @$list ] ];
push @PATH, map { $_ =~ s/(?<!\/)$/\//; $_ } grep { $_ }
      push @PATH, ( split /}\s*{/, $1 );
      $readfg = 0;
        $readfg = 1;
    return;
      return "$dir$file";
  return <<"EOT";
  return $file;
  return $file if not $file or -e $file or not @PATH;
  return "" if (not defined $href->{Name});
  return if not @fgpair or not $svxfile;
  return keys %stack;
  return @pairs;
   \s*                      # allow for spaces
 scan the file '<jobname>.svn' for files declared by the '\svnextern' macro but
      $seen{$group}{$file} = 1;
See the svn-multi package manual for more information about this script.
  select $svxfh;
    specified in the LaTeX file before the '\svnextern' macro will be used. The
        split(':', $ENV{'TEXINPUTS'}||"");
  (split ' ','$Id: svn-multi-pl.dtx 692 2009-03-27 21:38:45Z martin $')[2,3];
      $stack{$1} = 1 if not exists $EXCLUDE{$ext};
sub create_svxfile ($@) {
sub create_svxfile ($@);
sub parse_args {
sub path_search {
sub read_fls {
sub svnid {
sub svnidlong {
sub usage {
sub usage;
      \\\@svnexternalpath   # the macro name
      \\\@svnexternal       # the macro name
\\svnid{${dollar}Id: $href->{Name} $href->{'Last Changed Rev'} $date $href->{'Last Changed Author'} \$}
\\svnidlong
# svn-multi.ins and the derived files svn-multi.sty, svnkw.sty and svn-multi.pl.
#  svn-multi.pl for the svn-multi v2.0 LaTeX package
 svn-multi.pl jobname[.tex] [--fls] [--group|-g <group name>] [input_files] ...
 svn-multi.pl mymainlatexfile
 svn-multi.pl mymainlatexfile a b c --group=B e d f
 svn-multi.pl mymainlatexfile --group=A a --group=B b --group='' c
 svn-multi.pl mymainlatexfile --group=FLS --fls
  $svxfile =~ s/\.(tex|ltx)$/.svx/;
# The Current Maintainer of this work is Martin Scharrer.
# The file 'svn-multi.pl' may be renamed to 'svn-multi' for installation
# the Free Software Foundation, either version 3 of the License, or
# The latest version of this license is in
    the LaTeX code.
    the LaTeX code. In addition it does the same for all relative input files
The main LaTeX file here is 'mymainlatexfile.tex'.
 This LaTeX helper script collects Subversion keywords from non-(La)TeX files
# This program is distributed in the hope that it will be useful,
# This program is free software under the GPL v3 and LPPL v1.3c or later.
# This program is free software: you can redistribute it and/or modify
# This program works only in combination with the LaTeX package 'svn-multi' and
# This work consists of the files svn-multi.dtx, svn-multi-pl.dtx and
# This work has the LPPL maintenance status `maintained'.
# This work may be distributed and/or modified under the
  usage();
  use Date::Format;
  use Date::Parse;
use File::Basename;
use strict;
    use warnings;
use warnings;
#!/usr/bin/perl
#  version 0.1, Mar 1st, 2009
# version 2008/05/04 or later.
    warn "ERROR: Could not create SVX file '$svxfile'!\n";
  warn "No .svn file found for '$jobname'!\n";
  while (<$fh>) {
  while ( my ($group, $files) = @{shift @fgpair||[]}) {
  while ( my ($group,$list) = each %{$external{$file}} ) {
  while ( my ($group,$list) = each %{$external{$maintex}} ) {
  while (<$svnfh>) {
# WWW: http://www.scharrer-online.de/latex/svn-multi/
# You should have received a copy of the GNU General Public License

2. Tilt the page away from you. Look at the two large squares, each containing colored patches. For each large square, find the colored path that most closely matches the background color. Each patch has an associated letter and number.
# along with this program; if not, write to the Free Software
                app.exec_()
            app = QApplication(sys.argv)
# (at your option) any later version.
# Author: Don Welch
        break
            break
                break
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# (c) Copyright 2003-2009 Hewlett-Packard Development Company, L.P.
# -*- coding: utf-8 -*-
                color_cal_type = d.mq.get('color-cal-type', COLOR_CAL_TYPE_NONE)
            continue
                continue
            d.close()
            d = device.Device(device_uri, printer_name)
def colorAdj(line, maximum):
def colorCal():
def colorCal2():
def colorCal4():
def enterAlignmentNumber(letter, hortvert, colors, minimum, maximum):
def enterPaperEdge(maximum):
def invalidPen():
def photoPenRequired():
def photoPenRequired2():
    device_uri = mod.getDeviceUri(device_uri, printer_name,
            dlg = ColorCalDialog(None, device_uri)
            dlg.show()
__doc__ = "Perform color calibration on HPLIP supported inkjet printers. (Note: Not all printers require the use of this utility)."
                d.open()
                elif color_cal_type == COLOR_CAL_TYPE_CARRIER: # 6
                elif color_cal_type == COLOR_CAL_TYPE_CONNERY: # 4
                elif color_cal_type == COLOR_CAL_TYPE_COUSTEAU: # 5
                elif color_cal_type == COLOR_CAL_TYPE_DESKJET_450: #1
                elif color_cal_type == COLOR_CAL_TYPE_MALIBU_CRICK: #2
                elif color_cal_type == COLOR_CAL_TYPE_STRINGRAY_LONGBOW_TORNADO: #2
                elif color_cal_type == COLOR_CAL_TYPE_TYPHOON: # 7
                else:
            else:
    else:
            except Error:
        except Error, e:
        except ImportError:
            except KeyboardInterrupt:
except KeyboardInterrupt:
            except ValueError:
        except ValueError:
        filter={'color-cal-type': (operator.ne, COLOR_CAL_TYPE_NONE)})
        #finally:
        finally:
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
from base.g import *
from base import device, status, utils, maint, tui, module
from prnt import cups
            from PyQt4.QtGui import QApplication
            from ui4.colorcaldialog import ColorCalDialog
# GNU General Public License for more details.
                                'hp-pqdiag'])
        if 1:
                if color_cal_type == COLOR_CAL_TYPE_UNSUPPORTED:
            if d.isIdleAndNoError():
            if len(x) < 2:
        if len(x) < 2:
            if len(x) > 3:
        if len(x) > 3:
        if letter not in 'abcdefghijklmn':
            if letter not in 'pqrstuv':
    if mode == GUI_MODE:
    if mode == INTERACTIVE_MODE:
        if not utils.canEnterGUIMode4():
        if number < 0 or number > 14:
            if number < 0 or number > 7:
    if ok:
            if x.lower().strip() == 'd': # use defaults
        if x.lower().strip() == 'd': # use defaults
            if x.lower().strip() == 'q':
        if x.lower().strip() == 'q':
import getopt
import operator
import os
import re
import sys
                        (INTERACTIVE_MODE, GUI_MODE), (UI_TOOLKIT_QT4,))
# it under the terms of the GNU General Public License as published by
        (letter, minimum, maximum), minimum, maximum)
            letter = x[0].lower()
        letter = x[0].lower()
        (line, maximum), 1, maximum)
                log.debug("Color calibration type=%d" % color_cal_type)
                log.debug("Starting GUI loop...")
                    log.error("Color calibration through HPLIP not supported for this printer. Please use the printer's front panel to perform color calibration.")
                log.error("Device is busy or in an error state. Please check device and try again.")
            log.error('Enter only a single letter and a one or two digit number (eg, "C5").')
                log.error('Enter only a single letter and a one or two digit number (eg, "R3").')
    log.error("Invalid cartridge(s) installed.\nPlease install valid cartridges and try again.")
                    log.error("Invalid color calibration type.")
    log.error("Photo cartridge not installed.\nPlease install the photo cartridge and try again.")
    log.error("Photo cartridge or photo blue cartridge not installed.\nPlease install the photo (or photo blue) cartridge and try again.")
            log.error("%s -u/--gui requires Qt4 GUI support. Entering interactive mode." % __mod__)
            log.error("Unable to load Qt4 support. Is it installed?")
            log.error("Unable to open device: %s" % e.msg)
                log.error("Unable to print to printer. Please check device and try again.")
    log.error("User exit")
            log.error("You must enter a letter 'A' thru 'N'")
            log.error("You must enter a letter 'A' thru 'N' followed by a number 1 thru 14.")
                log.error("You must enter a letter 'P' thru 'V'")
                log.error("You must enter a letter 'P' thru 'V' followed by a number 1 thru 7.")
                log.error("You must enter at least two characters (a letter and a number)")
            log.error("You must enter at least two characters (a letter and a number)")
log.info("")
log.info('Done.')
    log.info("""Instructions:\n1. Hold the calibration page at arm's length in front of your eyes.
                    maint.colorCalType1(d, tui.load_paper_prompt, colorCal, photoPenRequired)
                    maint.colorCalType2(d, tui.load_paper_prompt, colorCal2, invalidPen)
                    maint.colorCalType3(d, tui.load_paper_prompt, colorAdj, photoPenRequired2)
                    maint.colorCalType4(d, tui.load_paper_prompt, colorCal4, None)
                    maint.colorCalType5(d, tui.load_paper_prompt)
                    maint.colorCalType6(d, tui.load_paper_prompt)
                    maint.colorCalType7(d, tui.load_photo_paper_prompt)
        maximum, 1, maximum)
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            mode = INTERACTIVE_MODE
__mod__ = 'hp-colorcal'
    mod = module.Module(__mod__, __title__, __version__, __doc__, None,
        mod.parseStdOpts()
    mod.setUsage(module.USAGE_FLAG_DEVICE_ARGS,
                number = int(x[1:])
            number = int(x[1:])
                ok = False
            ok = False
    ok = True
    opts, device_uri, printer_name, mode, ui_toolkit, lang = \
    return ok, values
    return tui.enter_range("Enter numbered arrow that is best aligned with the paper edge (1-%d or q=quit): " %
    return tui.enter_range("Enter the best aligned value for line %s (%d-%d or q=quit): " %
    return tui.enter_range("Enter the numbered box on line %s that is best color matched to the background color (1-%d or q=quit): " %
    return tui.enter_range("""Enter the numbered image labeled "1" thru "7" that is best color matched to the image labeled "X""", 1, 7)
    return tui.enter_range("""Select the number between 1 and 81 of the numbered patch that best matches the background.""", 1, 81)
                 see_also_list=['hp-align', 'hp-clean', 'hp-linefeedcal',
# Std Lib
                sys.exit(0)
            sys.exit(0)
                sys.exit(1)
            sys.exit(1)
# the Free Software Foundation; either version 2 of the License, or
# This program is distributed in the hope that it will be useful,
# This program is free software; you can redistribute it and/or modify
__title__ = 'Printer Cartridge Color Calibration Utility'
            try:
        #try:
        try:
#!/usr/bin/python
    values = [0, 0, 0, 0]
        values[0] = ord(str(letter).upper()) - ord('A')
            values[0], values[1] = -1, -1
        values[1] = number - 1
            values[2] = ord(str(letter).upper()) - ord('P')
                values[2], values[3] = -1, -1
            values[3] = number - 1
__version__ = '3.0'
        while True:
    while True:
        x = raw_input(log.bold("""Enter the letter ('A' thru 'N') and number (1 thru 14) for the GRAY plot (eg, "C5") or "q" to quit: """))
            x = raw_input(log.bold("""Enter the letter ('P' thru 'V') and number (1 thru 7) for the COLOR plot (eg, "R3") or "q" to quit: """))
# You should have received a copy of the GNU General Public License

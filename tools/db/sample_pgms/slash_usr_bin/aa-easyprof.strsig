# ------------------------------------------------------------------
        apparmor.easyprof.print_basefilenames(easyp.get_policy_groups())
        apparmor.easyprof.print_basefilenames(easyp.get_templates())
            apparmor.easyprof.print_files(files)
        apparmor.easyprof.print_files(files)
        binary = args[0]
    binary = None
#    Copyright (C) 2011-2012 Canonical Ltd.
    def usage():
        easyp = apparmor.easyprof.AppArmorEasyProfile(binary, opt)
    elif binary == None:
    elif not opt.template and not opt.policy_groups and len(args) < 1:
    elif opt.list_policy_groups:
    elif opt.policy_groups and opt.show_policy_group:
    elif opt.template and opt.show_template:
        error(e.value)
        error("Must specify full path to binary\n%s" % m)
        error("Must specify -p with --show-policy-group")
    except AppArmorException, e:
    except Exception:
            files = [os.path.join(easyp.dirs['policygroups'], g)]
        files = [os.path.join(easyp.dirs['templates'], opt.template)]
        for g in opt.policy_groups.split(','):
from apparmor.easyprof import AppArmorException, error
    if len(args) >= 1:
if __name__ == "__main__":
    if opt.list_templates:
    if opt.show_policy_group and not opt.policy_groups:
    # if we made it here, generate a profile
import apparmor.easyprof
import os
import sys
#    License published by the Free Software Foundation.
#    modify it under the terms of version 2 of the GNU General Public
    m = usage()
    (opt, args) = apparmor.easyprof.parse_args()
               os.path.basename(sys.argv[0])
    params = apparmor.easyprof.gen_policy_params(binary, opt)
    p = easyp.gen_policy(**params)
    print p,
        raise
        '''Return usage information'''
        return 'USAGE: %s [options] <path to binary>' % \
        sys.exit(0)
#    This program is free software; you can redistribute it and/or
    try:
#! /usr/bin/env python

        }
    $0 [-a] [-p] [-v] | [-h]
ability to function.  You may be able to correct this by performing a
a bLuRfle.pm module or that the C<eval " require \"$module_name.pm\"; ">
    # actual required module tests above.
# Add the ones that we know that perl thinks are there:
An attempt to C<eval "require $module"> failed, even though the list of 
    # and has a defined version
    # and has zero missing files,
are executed.
    $ARGV[0] =~ s/^-//; 
    -a Run all tests (default is to skip .ph tests)
    # A silly name for a module (that hopefully won't ever exist).
B<perlivp> [B<-a>] [B<-p>] [B<-v>] [B<-h>]
    # .bs files are optional
by output that looks like:
C<ExtUtils::Installed -E<gt> validate()> over your installation.
           # Compilation failed in require at (eval 1) line 1.
# Config.pm may not list a i_stdio var).
    # Consider it there if it contains one or more files,
Correct by conducting a proper installation.
Correct by running B<h2ph> over your system's C header files.  If necessary, 
        die "FAILED--no tests were run for some reason.\n";
           # DProf: run perl with -d to use DProf.
# easier to "fix" - at least for now.
edit the resulting *.ph files to eliminate perl syntax errors.
        else {
    else {
} else {
    elsif ($#missing == -1) {
} elsif ($tests_total==0){
    EOUSAGE
    $error_total++;
                              $error_total, $tests_total, $rate;
    eval 'exec /usr/bin/perl -S $0 ${1+"$@"}'
    eval "require \"$_\";";
        eval " require \"$_.pm\"; ";
        eval " require \"$unnecessary.pm\"; ";
    exit;
extensions indicated that it should succeed.  Correct by conducting a proper 
            $extensions_there++;
        $extensions_total++;
# Final report (rather than feed ousrselves to Test::Harness::runtests()
    foreach (@extensions) {
foreach (@INC) {
foreach (@ph_files) {
foreach (qw(Config.pm ExtUtils/Installed.pm)) {
#foreach (qw(stdio.ph syslog.ph)) {
For further information on how to conduct a proper installation consult the 
for (@modules) {
    for my $flag (split(//,$ARGV[0])) {
Gives a description of each test prior to performing it.
Gives more detailed information about each test, after it has been performed.
=head1 AUTHOR
=head1 DESCRIPTION
=head1 DIAGNOSTICS
=head1 NAME
=head1 OPTIONS
=head1 SYNOPSIS
        $h_file = $1;
	$h_file = 'arpa/inet'    if $h_file eq 'arpainet';
	$h_file = 'netinet/in'   if $h_file eq 'niin';
	$h_file = 'netinet/tcp'  if $h_file eq 'netinettcp';
        $h_file = 'rpcsvc/dbm'   if $h_file eq 'rpcsvcdbm';
        $h_file =~ s{^sys(\w.+)}{sys/$1} unless $h_file eq 'syslog';
	$h_file = 'sys/resource' if $h_file eq 'sysresrc';
	$h_file = 'sys/security' if $h_file eq 'syssecrt';
	$h_file = 'sys/select'   if $h_file eq 'sysselct';
    -h Prints this help message.
        if (!$@) {
        if ($@) {
    if (!$@) {
    if (-d $_) {
if (defined($Config{'extensions'})) {
if ($error_total == 0 && $tests_total) {
if ($extensions_total == $extensions_there) {
    if (!grep(/$unnecessary/, @extensions)) {
if ($INC_total == $INC_there) {
if (($installed_total == $installed_there) && 
if ($ivp_VERSION eq $]) {
    if ($#missing >= 0) {
if ($needed_total == $needed_there) {
if ($opt{'a'}) {
        if $running_under_some_shell;
if (scalar(@ph_files) == $ph_there) {
    if ($tests_total > 0) { $rate = sprintf "%.2f", 100.0 * ($pass__total / $tests_total); }
        if ( $useithreads !~ /define/i ) {
    if ($var =~ m/i_(.+)/ && $val eq 'define') {
    if ($version) {
if (-x $perlpath) {
        $INC_there++;
    $INC_total++;
installation.
installation.  This is a serious error since it adversely affects perlivp's
        $installed_there++;
    $installed_total++;
    ($installed_total == $version_check)) {
INSTALL file that comes with the perl source and the README file for your 
       is printed.  Test failures always print out some extra information
is the latter case then please let the author know.
=item B<-a> run all tests
=item B<-h> help
=item B<-p> print preface
=item B<-v> verbose
=item * print "# file",+($#missing == 0) ? '' : 's'," missing from installation:\n";
=item * print "# Needed module `$_' does not appear to be properly installed.\n";
=item * print "# Perl binary `$perlpath' does not appear executable.\n";
=item * print "# Perl header `$_' does not appear to be properly installed.\n";
=item * print "# Perl \@INC directory `$_' does not appear to exist.\n";
=item * print "# Perl version `$]' installed, expected $ivp_VERSION.\n";
=item * print "# Required module `$_' does not appear to be properly installed.\n";
=item * print "# Unnecessary module `bLuRfle' appears to be installed.\n";
# Just about "any" C implementation ought to have a stdio.h (even if 
libraries have been installed correctly.  A correct installation is verified
Likely to occur for a perl binary that was not properly installed.
Likely to occur for a perl library tree that was not properly installed.
Likely to occur for a perl that was not properly installed.
    make install
    # man files are often compressed
    @missing = ();
    @missing = grep { ! /\.bs$/ } @missing;
    @missing = grep { ! ( -s "$_.gz" || -s "$_.bz2" ) } @missing;
    @missing = $installed -> validate($_);
my $error_total = 0;
    my @extensions = split(/\s+/,$Config{'extensions'});
my $extensions_there = 0;
my $extensions_total = 0;
my $h_file = undef;
my $INC_there = 0;
my $INC_total = 0;
my $installed = ExtUtils::Installed -> new();
my $installed_there = 0;
my $installed_total = 0;
my $ivp_VERSION = "5.014002";
my @missing = ();
my @modules = $installed -> modules();
my $needed_there = 0;
my $needed_total = 0;
my $pass__total = 0;
my $perlpath = '/usr/bin/perl';
my @ph_files = qw(stdio.ph);
my $ph_there = 0;
    my $rate = 0.0;
my $tests_total = 0;
    my $unnecessary = 'bLuRfle';
my $useithreads = 'define';
my $val = undef;
my $var = undef;
my $version_check = 0;
my $version = undef;
        # (NB syslog.ph is heavily used for the DBI pre-requisites).
        $needed_there++;
    $needed_total++;
        next if ($_ eq '');
        next if $_ eq 'Devel/DProf';
        next if $_ eq 'IO/Compress';
        next if $_ eq 'libnet';
        next if $_ eq 'Locale/Codes';
        next if $_ eq 'podlators';
    next if $_ eq '.'; # skip -d test here
            next if ($_ eq 'threads');
            next if ($_ eq 'threads/shared');
        next if $_ eq 'XS/APItest';
        next if $_ eq 'XS/Typemap';
    next if m|/usr/local|; # not shipped on Debian
Normally tests for optional features are skipped.  With -a all tests
Note that any failed tests ought to print out some extra information whether
    # Note that this test serves more as a check of the validity of the
           # \NT> perl  -e "eval \"require 'Devel/DProf.pm'\"; print $@"
    ok 1
    ok 2
One of the two modules that is used by perlivp was not present in the 
One or more files turned up missing according to a run of 
$opt{p}++ if $opt{P};
@opt{ qw/? H h P p V v/ } = qw(0 0 0 0 0 0 0);
$opt{v}++ if $opt{V};
or not -v is thrown.
(or your platform's equivalent procedure) to verify that B<perl> and its
    $pass__total++;
perlivp - Perl Installation Verification Procedure
# perlivp v5.14.2
Perl version it was built under.  It can be used after running:
Peter Prymmer
        $ph_there++;
platform.
    -p Print a preface before each test telling what it will test.
    print "All tests successful.\n";
print "## Checking installations of extensions built with perl.\n" if $opt{'p'};
print "## Checking installations of *.h -> *.ph header files.\n" if $opt{'p'};
print "## Checking installations of later additional extensions.\n" if $opt{'p'};
print "## Checking installations of modules necessary for ivp.\n" if $opt{'p'};
print "## Checking Perl binary via variable `\$perlpath' = $perlpath.\n" if $opt{'p'};
print "## Checking Perl version via variable `\$]'.\n" if $opt{'p'};
print "## Checking roots of the Perl library directory tree via variable `\@INC'.\n" if $opt{'p'};
    print << "    EOUSAGE";
    printf " %d/%d subtests failed, %.2f%% okay.\n",
        print "# file",+($#missing == 0) ? '' : 's'," missing from installation:\n";
        print '# ',join(' ',@missing),"\n";
            print "## Module `$_' appears to be installed.\n" if $opt{'v'};
        print "## Module `$_' appears to be installed.\n" if $opt{'v'};
        print "# Needed module `$_' does not appear to be properly installed.\n";
    print "not ok 1\n";
    print "not ok 2\n";
    print "not ok 3\n";
    print "not ok 4\n";
    print "not ok 5\n";
    print "not ok 6\n";
    print "not ok 7\n";
        print "# $_; NO VERSION\n" if $opt{'v'};
    print "ok 1\n";
    print "ok 2\n";
    print "ok 3\n";
    print "ok 4\n";
    print "ok 5\n";
    print "ok 6\n";
    print "ok 7\n";
    print "## Perl binary `$perlpath' appears executable.\n" if $opt{'v'};
    print "# Perl binary `$perlpath' does not appear executable.\n";
        print "## Perl header `$_' appears to be installed.\n" if $opt{'v'};
        print "# Perl header `$_' does not appear to be properly installed.\n";
        print "# Perl \@INC directory `$_' does not appear to exist.\n";
        print "## Perl \@INC directory `$_' exists.\n" if $opt{'v'};
    print "## Perl version `$]' appears installed as expected.\n" if $opt{'v'};
    print "# Perl version `$]' installed, expected $ivp_VERSION.\n";
            print "# Required module `$_' does not appear to be properly installed.\n";
    print "##  Skip checking of *.ph header files.\n" if $opt{'p'};
Prints out a brief help message.
            print "# Unnecessary module `$unnecessary' appears to be installed.\n";
            print "## Unnecessary module `$unnecessary' does not appear to be installed.\n" if $opt{'v'};
        print "## $_; $version\n" if $opt{'v'};
proper perl installation.
        push(@ph_files, "$h_file.ph");
       regardless of whether or not this switch is set.
    shift;
	# Some header and symbol names don't match for hysterical raisins.
sub usage {
test may give misleading results with your installation of perl.  If yours
        # test modules
$tests_total++;
        # that's a distribution name, not a module name
The B<perlivp> program is set up at Perl source code build time to test the
        # This ought to distinguish syslog from sys/syslog.
This test not coming out ok could indicate that you have in fact installed 
            $@ = undef;
        $@ = undef;
    $@ = undef;
        usage() if 'h' =~ /\Q$flag/;
        usage() if '?' =~ /\Q$flag/;
        usage("unknown flag: `$flag'") unless 'HhPpVva' =~ /\Q$flag/;
use Config;
use ExtUtils::Installed;
use vars qw(%opt); # allow testing with older versions (do not use our)
#!/usr/bin/perl
        $version_check++;
    $version = $installed -> version($_);
    $version = undef;
           # VMS$ perl  -e "eval ""require \""Devel/DProf.pm\"";"" print $@"
    -v Verbose mode in which extra information about test results
        warn "$0: `$flag' flag already set\n" if $opt{$flag}++;
    warn "@_\n" if @_;
# we simply format some output on our own to keep things simple and
while ($ARGV[0] =~ /^-/) {
while (($var, $val) = each %Config) {

A NULL argv[0] was passed through an exec system call.
__assert_fail
bindtextdomain
bug-coreutils@gnu.org
Copyright %s %d Free Software Foundation, Inc.
__ctype_b_loc
__ctype_get_mb_cur_max
__cxa_atexit
dcgettext
/dev/null
__errno_location
!(__extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (str) && __builtin_constant_p (p->str) && (__s1_len = __builtin_strlen (str), __s2_len = __builtin_strlen (p->str), (!((size_t)(const void *)((str) + 1) - (size_t)(const void *)(str) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((p->str) + 1) - (size_t)(const void *)(p->str) == 1) || __s2_len >= 4)) ? __builtin_strcmp (str, p->str) : (__builtin_constant_p (str) && ((size_t)(const void *)((str) + 1) - (size_t)(const void *)(str) == 1) && (__s1_len = __builtin_strlen (str), __s1_len < 4) ? (__builtin_constant_p (p->str) && ((size_t)(const void *)((p->str) + 1) - (size_t)(const void *)(p->str) == 1) ? __builtin_strcmp (str, p->str) : (__extension__ ({ __const unsigned char *__s2 = (__const unsigned char *) (__const char *) (p->str); register int __result = (((__const unsigned char *) (__const char *) (str))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((__const unsigned char *) (__const char *) (str))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((__const unsigned char *) (__const char *) (str))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((__const unsigned char *) (__const char *) (str))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (p->str) && ((size_t)(const void *)((p->str) + 1) - (size_t)(const void *)(p->str) == 1) && (__s2_len = __builtin_strlen (p->str), __s2_len < 4) ? (__builtin_constant_p (str) && ((size_t)(const void *)((str) + 1) - (size_t)(const void *)(str) == 1) ? __builtin_strcmp (str, p->str) : (__extension__ ({ __const unsigned char *__s1 = (__const unsigned char *) (__const char *) (str); register int __result = __s1[0] - ((__const unsigned char *) (__const char *) (p->str))[0]; if (__s2_len > 0 && __result == 0) { __result = (__s1[1] - ((__const unsigned char *) (__const char *) (p->str))[1]); if (__s2_len > 1 && __result == 0) { __result = (__s1[2] - ((__const unsigned char *) (__const char *) (p->str))[2]); if (__s2_len > 2 && __result == 0) __result = (__s1[3] - ((__const unsigned char *) (__const char *) (p->str))[3]); } } __result; }))) : __builtin_strcmp (str, p->str)))); }) == 0)
!(__extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (str) && __builtin_constant_p (s->str) && (__s1_len = __builtin_strlen (str), __s2_len = __builtin_strlen (s->str), (!((size_t)(const void *)((str) + 1) - (size_t)(const void *)(str) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((s->str) + 1) - (size_t)(const void *)(s->str) == 1) || __s2_len >= 4)) ? __builtin_strcmp (str, s->str) : (__builtin_constant_p (str) && ((size_t)(const void *)((str) + 1) - (size_t)(const void *)(str) == 1) && (__s1_len = __builtin_strlen (str), __s1_len < 4) ? (__builtin_constant_p (s->str) && ((size_t)(const void *)((s->str) + 1) - (size_t)(const void *)(s->str) == 1) ? __builtin_strcmp (str, s->str) : (__extension__ ({ __const unsigned char *__s2 = (__const unsigned char *) (__const char *) (s->str); register int __result = (((__const unsigned char *) (__const char *) (str))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((__const unsigned char *) (__const char *) (str))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((__const unsigned char *) (__const char *) (str))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((__const unsigned char *) (__const char *) (str))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (s->str) && ((size_t)(const void *)((s->str) + 1) - (size_t)(const void *)(s->str) == 1) && (__s2_len = __builtin_strlen (s->str), __s2_len < 4) ? (__builtin_constant_p (str) && ((size_t)(const void *)((str) + 1) - (size_t)(const void *)(str) == 1) ? __builtin_strcmp (str, s->str) : (__extension__ ({ __const unsigned char *__s1 = (__const unsigned char *) (__const char *) (str); register int __result = __s1[0] - ((__const unsigned char *) (__const char *) (s->str))[0]; if (__s2_len > 0 && __result == 0) { __result = (__s1[1] - ((__const unsigned char *) (__const char *) (s->str))[1]); if (__s2_len > 1 && __result == 0) { __result = (__s1[2] - ((__const unsigned char *) (__const char *) (s->str))[2]); if (__s2_len > 2 && __result == 0) __result = (__s1[3] - ((__const unsigned char *) (__const char *) (s->str))[3]); } } __result; }))) : __builtin_strcmp (str, s->str)))); }) == 0)
extra operand %s
For complete documentation, run: info coreutils '%s invocation'
__fpending
__fprintf_chk
fputs_unlocked
__freading
freopen64
fseeko64
General help using GNU software: <http://www.gnu.org/gethelp/>
getopt_long
GLIBC_2.0
GLIBC_2.1
GLIBC_2.1.3
GLIBC_2.2
GLIBC_2.3
GLIBC_2.3.3
GLIBC_2.3.4
GLIBC_2.4
__gmon_start__
GNU coreutils
      --help     display this help and exit
http://www.gnu.org/software/coreutils/
_IO_stdin_used
iswprint
\$L9\$<tG
len != 0
libc.so.6
__libc_start_main
/lib/ld-linux.so.2
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
Mark Kettenis
memory exhausted
posix_fadvise64
__printf_chk
__progname
__progname_full
program_invocation_name
program_invocation_short_name
Report bugs to: %s
Report %s bugs to %s
Report %s translation bugs to <http://translationproject.org/team/>
%s, and %s.
search_item
setlocale
shell-always
%s home page: <%s>
%s: input contains a loop:
%s: input contains an odd number of tokens
%s, %s, and others.
%s, %s, and %s.
%s (%s) %s
%s, %s, %s, and %s.
%s, %s, %s, %s,
__stack_chk_fail
standard input
There is NO WARRANTY, to the extent permitted by law.
This is free software: you are free to change and redistribute it.
Try `%s --help' for more information.
Usage: %s [OPTION] [FILE]
/usr/share/locale
      --version  output version information and exit
With no FILE, or when FILE is -, read standard input.
write error
Write totally ordered list consistent with the partial ordering in FILE.
Written by %s.
Written by %s and %s.
Written by %s, %s, and %s.
Written by %s, %s, %s,

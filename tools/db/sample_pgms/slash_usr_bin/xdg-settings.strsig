            ;;
          *)
         ;;
        ;;
      !*)
      */*)
      *)
#--------------------------------------
#----------------------------------------
#-----------------------------------------
#---------------------------------------------
#------------------------------------------------------------
#-------------------------------------------------------------
#----------------------------------------------------------------------------
    # Add the mime-type to the list
    # All output to stderr
        # Already has the mime-type? Great!
#   and/or sell copies of the Software, and to permit persons to whom the
An exit code of 0 indicates success while a non-zero exit code indicates
    # Annoyingly, xfce wants its .desktop files in a separate directory instead
# applications for handling a given MIME type, the desktop environment may copy
# application's list of MIME types before we can set it as the default for that
applications that do not use the desktop environment's libraries (which would
    apps="${XDG_DATA_HOME:-$HOME/.local/share}/applications"
    A required tool could not be found.
#   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
       [a-zA-Z]*-*)
    base="`basename "$binary"`"
        basename "$desktop"
    # Because KDE will use the handler for MIME type text/html if this value
    # Be silent
    binary="`desktop_file_to_binary "$1"`"
    binary="`desktop_file_to_binary "$browser"`"
    [ "$binary" ] || exit_failure_file_missing
    [ "$binary" ] || exit_failure_operation_failed
    binary="`gconftool-2 --get /desktop/gnome/applications/browser/exec | first_word`"
        binary="`gconftool-2 --get /desktop/gnome/url-handlers/$protocol/command | first_word`"
    binary="`readlink -f "$binary"`"
    binary="`resolve_kde_browser`"
binary_to_desktop_file()
    binary="`which "$1"`"
        binary="`which "${BROWSER%%:*}"`"
        binary="`which x-www-browser`"
#!/bin/sh
    browser="`get_browser_mime`"
        browser="`get_browser_mime "x-scheme-handler/$protocol"`"
    browser="`get_browser_xfce`"
    browser="`kreadconfig --file kdeglobals --group General --key BrowserApplication`"
    browser="`read_kde_browser`"
    # by itself, so we fix it only after querying to find the current default.
    case "$1" in
    case "$browser" in
case "$DE" in
    case "$file" in
    case "$MIMETYPES" in
        case "$parm" in
cat << _MANUALPAGE
cat << _USAGE
            # Change %F, %f, %U, and %u to "%s".
            check_browser_$DE "$1"
check_browser_gnome()
check_browser_kde()
check_browser_xfce()
        # check by hand if it didn't find anything (oddly kwriteconfig works
check_common_commands "$@"
check_common_commands()
check_desktop_filename()
            check_desktop_filename "$1"
        check="`desktop_file_to_binary "$1"`"
    check="`desktop_file_to_binary "$1"`"
    # Check HTTP and HTTPS, but not about: and unknown:, using the GNOME 3 scheme.
    # Check HTTP and HTTPS, but not about: and unknown:, using the legacy GNOME scheme.
check_input_file()
check_output_file()
# Checks for known desktop environments
# Checks for shared commands, e.g. --help
            # Check to make sure it's worth the processing.
check_vendor_prefix()
Check whether the default web browser is firefox.desktop, which can be false
check_xfce_desktop_file()
    check_xfce_desktop_file "$1" || exit_failure_operation_failed
            command="`grep -E "^Exec(\[[^]=]*])?=" "$file" | cut -d= -f 2- | first_word`"
        command="`grep -E "^Exec(\[[^]=]*])?=" "$file" | cut -d= -f 2- | first_word`"
            command="`grep -E "^Exec(\[[^]=]*])?=" "$file" | cut -d= -f 2- | sed -e 's/%[FfUu]/"%s"/g'`"
            command="`which "$command"`"
        command="`which "$command"`"
#   Common utility functions included in all XDG wrapper scripts
    # copy here, that copy will be used in xdg-mime and we will avoid waiting.
#   copy of this software and associated documentation files (the "Software"),
#   Copyright 2009, Google Inc.
    # Create the file if it does not exist to avoid special cases below.
        [ -d "$dir/applications" -o -d "$dir/applnk" ] || continue
        # Debian and Ubuntu (and others?) have x-www-browser.
# {{{ default browser
# }}} default browser
          default-web-browser)
          default-web-browser) # PROP:           Default web browser
Description
      *.desktop)
    desktop="$1"
    desktop="`basename "$1"`"
        desktop="`binary_to_desktop_file "$binary"`"
        desktop="`binary_to_desktop_file "${browser#!}"`"
desktop environments often provide proxy configuration and default web browser
desktop_file_to_binary()
        desktop_file_to_binary "$browser"
        desktop="`grep "^WebBrowser=" "$file" | cut -d= -f 2-`"
detectDE
detectDE()
        [ "$dir" -a -d "$dir/applications" ] || continue
        [ "$dir" -a -d "$dir/xfce4" ] || continue
        [ "$dir" -a -d "$dir/xfce4/helpers" ] || continue
        [ "$dir" ] || continue
        DIR=`dirname "$1"`
    dispatch_generic "$@"
dispatch_generic()
    dispatch_specific "$@"
dispatch_specific()
# Does the opposite of resolve_kde_browser: if prefixed with !, tries to find a desktop
    done
        done
        echo
        echo "$@"
  echo "$@" >&2
    echo 'A vendor prefix consists of alpha characters ([a-zA-Z]) and is terminated' >&2
        echo "${browser#!}"
        echo "$browser"
        echo "$desktop.desktop"
                echo "$file" | sed -e 's,//*,/,g'
    echo "$first"
    echo "Known properties:"
    echo "MimeType=$MIME;$MIMETYPES" >> "$temp"
            echo no
        echo no
        echo "Try 'xdg-settings --help' for more information." >&2
            echo "Type=X-XFCE-Helper" >> "$target/$1"
            echo "Use 'man xdg-settings' or 'xdg-settings --manual' for additional info."
        echo "Use 'man xdg-settings' or 'xdg-settings --manual' for additional info."
    echo "Use --novendor to override or 'xdg-settings --manual' for additional info." >&2
    echo "WebBrowser=${1%.desktop}" >> "$temp"
    echo 'with a dash ("-"). An example '"$file_label"' is '"'example-$file'" >&2
            echo "xdg-settings 1.0.2"
        echo "xdg-settings: $@" >&2
    echo "xdg-settings: $file_label '$file' does not have a proper vendor prefix" >&2
            echo "X-XFCE-Category=WebBrowser" >> "$target/$1"
            echo "X-XFCE-Commands=`echo "$command" | first_word`" >> "$target/$1"
            echo "X-XFCE-CommandsWithParameter=$command" >> "$target/$1"
        echo yes
    echo yes
    elif `dbus-send --print-reply --dest=org.freedesktop.DBus /org/freedesktop/DBus org.freedesktop.DBus.GetNameOwner string:org.gnome.SessionManager > /dev/null 2>&1` ; then DE=gnome;
    elif [ x"$DESKTOP_SESSION" = x"LXDE" ]; then DE=lxde;
    elif [ x"$GNOME_DESKTOP_SESSION_ID" != x"" ]; then DE=gnome;
    elif [ x"$op" = x"check" ]; then
    elif xprop -root _DT_SAVE_MODE 2> /dev/null | grep ' = \"xfce4\"$' >/dev/null 2>&1; then DE=xfce;
    else
    else DE=""
    else # set
        [ $# -eq 1 ] || exit_failure_syntax "unexpected/missing argument"
    Error in command line syntax.
    esac
        esac
even if "get default-web-browser" says that is the current value (if only some
Examples
    exit 0
    exit 1
    exit 2
    exit 3
    exit 4
    exit 5
    exit 6
Exit Codes
exit_failure_file_missing()
        exit_failure_file_missing "file '$1' does not exist"
exit_failure_file_permission_read()
        exit_failure_file_permission_read "no permission to read file '$1'"
exit_failure_file_permission_write()
            exit_failure_file_permission_write "no permission to create file '$1'"
            exit_failure_file_permission_write "no permission to write to file '$1'"
        exit_failure_operation_failed
    exit_failure_operation_failed
exit_failure_operation_failed()
exit_failure_operation_impossible()
    exit_failure_operation_impossible "unknown desktop environment"
            exit_failure_syntax
exit_failure_syntax()
        exit_failure_syntax "invalid application name"
  exit_failure_syntax "invalid operation"
# Exit script on failure returned by a tool application
# Exit script on failure to locate necessary tool applications
# Exit script on insufficient permission to read a specified file
# Exit script on insufficient permission to write a specified file
# Exit script on malformed arguments, not enough arguments
# Exit script on missing file specified on command line
# Exit script on successfully completing the desired operation
            exit_success
        exit_success
    exit_success
exit_success()
    # Extract the property names from dispatch_specific() above.
failure. The following failure codes can be returned:
    [ ! -f "$apps/$1" ] && return
        fi
            fi
    file=`basename "$1"`
# file corresponding to the binary, otherwise just returns the desktop file name.
        file="$dir/applications/$1"
        file="$dir/applications/$desktop"
        file="$dir/xfce4/helpers/$1"
        file="$dir/xfce4/helpers.rc"
    file_label="$2"
        # fine though).
    # First look in $BROWSER
first_word()
#   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
                # Fix any double slashes that got added path composition
    # Fixing the local desktop file can actually change the default browser all
fix_local_desktop_file()
    fix_local_desktop_file "$1" "$MIME" || return
        [ ! -f "$kdeglobals" ] && return
    for dir in $search; do
        for file in "$dir"/applications/*.desktop "$dir"/applnk/*.desktop; do
    for protocol in about unknown; do
    for protocol in http https about unknown; do
    for protocol in http https; do
            # Found a file to convert.
    # further processes need it around. But since it does not close its stdout,
    gconftool-2 --type bool --set /desktop/gnome/applications/browser/needs_term false
    gconftool-2 --type bool --set /desktop/gnome/applications/browser/nremote true
        gconftool-2 --type bool --set /desktop/gnome/url-handlers/$protocol/enabled true
        gconftool-2 --type bool --set /desktop/gnome/url-handlers/$protocol/needs_terminal false
    gconftool-2 --type string --set /desktop/gnome/applications/browser/exec "$binary"
        gconftool-2 --type string --set /desktop/gnome/url-handlers/$protocol/command "$binary %s"
    generic)
            get_browser_$DE
get_browser_gnome()
get_browser_kde()
        get_browser_mime
get_browser_mime()
    get_browser_mime "x-scheme-handler/http"
get_browser_xfce()
Get the desktop file name of the current default web browser
# {{{ GNOME
# }}} GNOME
        grep '^BrowserApplication\[$[^]=]*\]=' "$kdeglobals" | head -n 1 | cut -d= -f 2-
            grep -Eq "^(NoDisplay|Hidden)=true" "$file" && continue
    grep "^[ 	]*[^)]*) # PROP:" "$0" | sed -e 's/^[ 	]*\([^)]*\)) # PROP: \(.*\)$/  \1 \2/' | sort
            grep -q "^Exec.*$base" "$file" || continue
        grep -q "^WebBrowser=" "$file" || continue
    grep -v "^MimeType=" "$apps/$1" >> "$temp"
            grep -v "^Type=" "$file" > "$target/$1"
    grep -v "^WebBrowser=" "$helpers_rc" >> "$temp"
            --help)
    helper_dir="${XDG_CONFIG_HOME:-$HOME/.config}/xfce4"
    helpers_rc="$helper_dir/helpers.rc"
    if [ "$DE" = kde -a -z "$XDG_MIME_FIXED" ]; then
    if [ ! -d "$helper_dir" ]; then
    if [ -e "$1" ]; then
    if [ ! -e "$1" ]; then
    if [ $? -eq 0 ]; then
    if [ $# -gt 0 ]; then
    # if it does not exists, check if we are allowed to write on the directory
    if [ $oldlines -le $newlines ]; then
    if [ ! -r "$1" ]; then
        if [ -r "$file" ]; then
    if [ ! -r "$helpers_rc" ]; then
    IFS=:
    if test -z "$1" ; then
    if test -z "$2" ; then
    # if the file exists, check if it is writeable
        if [ ! -w "$1" ]; then
        if [ ! -w "$DIR" -o ! -x "$DIR" ]; then
if [ x"$1" = x"--list" ]; then
    if [ x"$binary" != x -a x"$binary" != x"$check" ]; then
        if [ x"$binary" != x"$check" ]; then
    if [ x"$binary" != x"$check" ]; then
    if [ x"$browser" != x"$1" ]; then
        if [ x"$browser" != x"$desktop" ]; then
    if [ x"$browser" = x ]; then
    if [ x"$browser" != x ]; then
if [ ${XDG_UTILS_DEBUG_LEVEL-0} -lt 1 ]; then
    if [ x"`get_browser_mime $MIME`" != x"$1" ]; then
    if [ x"$KDE_FULL_SESSION" = x"true" ]; then DE=kde;
if [ x"$op" != x"get" -a x"$op" != x"check" -a x"$op" != x"set" ]; then
    if [ x"$op" = x"get" ]; then
            if [ x"`readlink -f "$command"`" = x"$binary" ]; then
        if [ -z "$check" ]; then
    if [ -z "$check" ]; then
#   in all copies or substantial portions of the Software.
# In order to remove an application from the automatically-generated list of
    # is empty, we allow either the empty string or a match to $check here.
# It also always returns 1 in KDE 3.4 and earlier
# {{{ KDE
# }}} KDE
        kdeglobals_dir=`kde${KDE_SESSION_VERSION}-config --path config  | cut -d ':' -f 1`
        kdeglobals="$kdeglobals_dir/kdeglobals"
    kde|gnome|xfce)
# kfmclient exec/openURL can give bogus exit value in KDE <= 3.5.4
kfmclient_fix_exit_code()
        # kreadconfig in KDE 4 may not notice Key[$*]=... localized settings, so
        ktradertest text/html Application > /dev/null 2>&1
    kwriteconfig --file kdeglobals --group General --key BrowserApplication "$1"
#   LICENSE:
    List all properties xdg-settings knows about.
# made other changes to it as well. So, tweak the existing file.)
    major=`echo $version | sed 's/KDE.*: \([0-9]\).*/\1/'`
            # Make sure it's a visible desktop file (e.g. not "preferred-web-browser.desktop").
            --manual)
--manual
            manualpage
manualpage()
_MANUALPAGE
        MIME="$1"
        MIME="$2"
        $MIME\;*|*\;$MIME\;*|*\;$MIME\;|*\;$MIME)
        MIME="text/html"
# MIME type from its list. In that case, we must restore the MIME type to the
    MIMETYPES="`grep "^MimeType=" "$apps/$1" | cut -d= -f 2-`"
# MIME type. (We can't just delete the local version, since the user may have
# {{{ MIME utilities
# }}} MIME utilities
    minor=`echo $version | sed 's/KDE.*: [0-9]*\.\([0-9]\).*/\1/'`
        mkdir -p "$helper_dir" || exit_failure_operation_failed
            mkdir -p "$target"
    mkdir -p "${XDG_DATA_HOME:-$HOME/.local/share}/applications"
        mv "$temp" "$apps/$1"
        mv "$temp" "$helpers_rc"
    newlines="`wc -l < "$temp"`"
    [ -n "$file_label" ] || file_label="filename"
        # No explicit default browser; KDE will use the MIME type text/html.
    # No local desktop file?
    # of the standard locations, and requires a few custom tweaks to them:
of the underlying settings actually reflect that value)
    oldlines="`wc -l < "$apps/$1"`"
    oldlines="`wc -l < "$helpers_rc"`"
    # one does not already exist. It will exit after about 15 seconds if no
    One of the files passed on the command line did not exist.
        # Only do this once, as we only need it once.
        # $op = "check"
    orig="`get_browser_mime $MIME`"
#   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# or missing required option.
#   OTHER DEALINGS IN THE SOFTWARE.
#   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# otherwise, uses desktop_file_to_binary to get the binary out of the desktop file.
        parm="$1"
parm="$2"
#   Permission is hereby granted, free of charge, to any person obtaining a
# prints usage information
    # property descriptions with spaces so that it will look nice.
        # Put back the original value
    read first rest
read_kde_browser()
        readlink -f "$command"
# Reads the KDE browser setting, compensating for a bug in some versions of kreadconfig.
#   Refer to the usage() function below for usage.
    release=`echo $version | sed 's/KDE.*: [0-9]*\.[0-9]*\.\([0-9]\).*/\1/'`
        # Remove any arguments (%F, %f, %U, %u, etc.).
resolve_kde_browser()
        resolve_kde_browser_desktop
resolve_kde_browser_desktop()
# Resolves the KDE browser setting to a binary: if prefixed with !, simply removes it;
        return
         return
            return
                return
        return 0
    return 0
        return 1
    return 1
            [ -r "$file" ] || continue
        [ -r "$file" ] || continue
        [ -r "$file" ] && return
        rm -f "$temp"
    search="${XDG_CONFIG_HOME:-$HOME/.config}:${XDG_CONFIG_DIRS:-/etc/xdg}"
    search="${XDG_DATA_HOME:-$HOME/.local/share}:${XDG_DATA_DIRS:-/usr/local/share:/usr/share}"
            set_browser_$DE "$1"
set_browser_gnome()
set_browser_kde()
set_browser_mime()
    set_browser_mime "$1" || return
        set_browser_mime "$1" "x-scheme-handler/$protocol" || return
set_browser_xfce()
    # Set the default browser using the GNOME 3 scheme.
    # Set the default browser using the legacy GNOME scheme.
Set the default web browser to google-chrome.desktop
    # Set the handler for about: and unknown URL types.
    # Set the handler for HTTP and HTTPS.
settings. Using xdg-settings these parameters can be extracted for use by
# set variable DE to the desktop environments name, lowercase
        shift
    Show command synopsis.
    Show the xdg-utils version information.
    Show this manualpage.
# Simply return 0 in such case
        sleep 4
#   Software is furnished to do so, subject to the following conditions:
Synopsis
            target="${XDG_DATA_HOME:-$HOME/.local/share}/xfce4/helpers"
    temp="`mktemp "$apps/$1.XXXXXX"`" || return
    temp="`mktemp "$helpers_rc.XXXXXX"`" || return
    test "$major" -gt 3 && return $1
    test "$minor" -gt 5 && return $1
    test "$release" -gt 4 && return $1
#   The above copyright notice and this permission notice shall be included
    The action failed.
#   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# the global .desktop file into the user's .local directory, and remove that
    # the --list option. The formatting is important. Make sure to line up the
    # The new file should have at least as many lines as the old.
    # The PROP comments in this function are used to generate the output of
#   the rights to use, copy, modify, merge, publish, distribute, sublicense,
    # the shell (via grep) will wait around for kdeinit to exit. If we start a
#   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        # This can take a little bit to get noticed.
# This function is hard-coded for text/html but it could be adapted if needed.
# This handles backslashes but not quote marks.
        # This will only take the first value if there is more than one.
#   to deal in the Software without restriction, including without limitation
        touch "$helpers_rc" || exit_failure_operation_failed
    # "Type" must be "X-XFCE-Helper"
        unset IFS
        usage
            usage
use the settings natively).
use xdg-settings as root.
# {{{ utility functions
# }}} utility functions
#   Utility script to get various settings from the desktop environment.
            --version)
--version
    version=`kde${KDE_SESSION_VERSION}-config --version 2>/dev/null | grep '^KDE'`
        # We have the file, no need to create it.
    # We only know how to get or check the default web browser.
    while [ $# -gt 0 ] ; do
[ x"$1" != x ] || exit_failure_syntax "no operation given"
[ x"$1" = x"get" -o x"$3" != x ] || exit_failure_syntax "no parameter value given"
[ x"$2" != x ] || exit_failure_syntax "no parameter name given"
    xdg-mime default "$1" "$MIME" || return
        xdg-mime default "$orig" "$MIME"
        XDG_MIME_FIXED=yes
    xdg_mime_fixup
xdg_mime_fixup()
    # xdg-mime may use ktradertest, which will fork off a copy of kdeinit if
    xdg-mime query default "$MIME"
    xdg_redirect_output=" >&2"
    xdg_redirect_output=" > /dev/null 2> /dev/null"
#   xdg-settings
        xdg-settings check default-web-browser firefox.desktop
xdg-settings { get | check | set } {property} [value]
        xdg-settings get default-web-browser
xdg-settings gets various settings from the desktop environment. For instance,
xdg-settings - get various settings from the desktop environment
xdg-settings { --help | --list | --manual | --version }
xdg-settings is for use inside a desktop session only. It is not recommended to
        xdg-settings set default-web-browser google-chrome.desktop
#@xdg-utils-common@
  [ ${XDG_UTILS_DEBUG_LEVEL} -lt $1 ] && return 0;
# {{{ xfce
# }}} xfce
    [ x"$op" != x"get" -a x"$op" != x"check" ] && exit_failure_operation_impossible
    [ x"$parm" != x"default-web-browser" ] && exit_failure_operation_impossible
    # "X-XFCE-Category" must be "WebBrowser" (for web browsers, anyway)
    # "X-XFCE-Commands" and "X-XFCE-CommandsWithParameter" must be set
    [ -z "$browser" ] && return
  [ -z "${XDG_UTILS_DEBUG_LEVEL}" ] && return 0;
[ -z "${XDG_UTILS_DEBUG_LEVEL}" ] && unset XDG_UTILS_DEBUG_LEVEL;

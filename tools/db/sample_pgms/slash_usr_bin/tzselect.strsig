	    ?*)
	    '')
[ $? = 123 ] || {
			$1 == cc && $4 == region { print $3 }
			$1 == cc { print $4 }
			$3 ~ ("^" continent "/") {
	    Africa \
#	<a href=ftp://ftp.cs.mun.ca/pub/pdksh/pdksh.tar.gz>
#	<a href=ftp://ftp.gnu.org/pub/gnu/>
#	<a href=ftp://ftp.whidbey.net/pub/brennan/>
	    Americas \
		Americas) continent=America;;
	    Antarctica \
	    'Arctic Ocean' \
	    Asia \
# Ask the user about the time zone, and output the resulting TZ value to stdout.
		# Ask the user for a Posix TZ string.  Check that it conforms.
	# Ask the user for continent or ocean.
	    'Atlantic Ocean' \
	    Australia \
: ${AWK=awk}
			$AWK -v TZ="$TZ" 'BEGIN {
($AWK -v x=y 'BEGIN { exit 123 }') </dev/null >/dev/null 2>&1
			BEGIN {
# Begin the main loop.  We come back here if the user wants to retry.
#! /bin/bash
#	Bourne-Again shell (bash)
	    ?*) break
			break
			    ?*) break
				?*) break
						break
can use the $0 command in shell scripts:"
	    case $continent in
		case $continent in
	case $continent in
		case $countries in
			    case $country in
			case $country in
	case $country+$region in
case $(echo 1 | (select x in x; do break; done) 2>/dev/null) in
	    case $ok in
	case $ok in
				case $region in
			case $region in
		case $regions in
case $SHELL in
		case $TZsec in
    cat <<EOF
						cc = $1
				cc = country
# Check for awk Posix compliance.
	continent=
		*' '*) continent=$(expr "$continent" : '\([^ ]*\)')
# Contributed by Paul Eggert.
		countries=$($AWK -F'\t' \
	country=
					country = cc_list[i]
					  country = cc_name[country]
			country=$countries
*csh) file=.login line="setenv TZ '$TZ'";;
				date = "(J?[0-9]+|M[0-9]+\.[0-9]+\.[0-9]+)"
				datetime = "," date "(/" time ")?"
		# Determine TZ from country and region.
	echo >&2 ""
echo >&2 "
	echo >&2 "$0: Sorry, your \`$AWK' program is not Posix compatible."
			echo >&2 "$0: time zone files are not set up correctly"
		echo >&2 "$0: time zone files are not set up correctly"
	?*+)	echo >&2 "	$country";;
	?*+?*)	echo >&2 "	$country$newline	$region";;
			echo >&2 'For example, GST-10 is a zone named GST' \
	echo >&2 "Is the above information OK?"
	    '') echo >&2 'Please enter 1 for Yes, or 2 for No.';;
			    '') echo >&2 'Please enter a number in range.';;
				'') echo >&2 'Please enter a number in range.';;
		echo >&2 'Please enter a number in range.';;
			echo >&2 'Please enter the desired value' \
	echo >&2 'Please identify a location' \
	echo >&2 'Please select a continent or ocean.'
			echo >&2 'Please select a country.'
			echo >&2 'Please select one of the following' \
	echo >&2 "The following information has been given:"
	echo >&2 "Therefore TZ='$TZ' will be used.$extra_info"
			echo >&2 "\`$TZ' is not a conforming" \
	+)	echo >&2 "	TZ='$TZ'"
echo "$TZ"
elif [ "$1" = "--version" ]; then
			END {
	    esac
			    esac
				esac
			esac;;
	    Europe \
    exit 0
				exit 0
	'') exit 1;;
			'') exit 1
			exit 1
		exit 1
		exit 1;;
			extra_info="
	extra_info=
	<$f || {
*) file=.profile line="TZ='$TZ'; export TZ"
For bug reporting instructions, please see:
for f in $TZ_COUNTRY_TABLE $TZ_ZONE_TABLE
				for (i = 1; i <= ccs; i++) {
	for i in 1 2 3 4 5 6 7 8
		# Get list of names of countries in the continent or ocean.
		# Get list of names of time zone rule regions in the country.
	# Give up after 8 unsuccessful tries.
#	GNU awk (gawk)
Here is that TZ value again, this time on standard output so that you
					if ($0 !~ /^#/) cc_name[$1] = $2
					if ($0 !~ /^#/  &&  country == $2) {
if [ "$1" = "--help" ]; then
					if (cc_name[country]) {
				if (!cc_seen[$1]++) cc_list[++ccs] = $1
IFS=$newline
		# If there's more than one country, ask the user which one.
		# If there's more than one region, ask the user which one.
				if (TZ ~ tzpattern) exit 1
# If your host lacks awk, or has an old awk that does not conform to Posix.2,
# If your host lacks the Korn shell,
	    'Indian Ocean' \
# Interact with the user via stderr and stdin.
Local time is now:	$TZdate.
	# Loop until they agree in seconds.
		# Make sure the corresponding zoneinfo file exists.
# Make sure the tables are readable.
		*"$newline"*)
newline='
			/^#/ { next }
	    'none - I want to specify the time zone using the Posix TZ format.'
				  "(" offset ")?(" datetime datetime ")?)?)$"
				offset = "[-+]?" time
				'of the TZ environment variable.'
	# Output TZ info and ask the user to confirm.
	    'Pacific Ocean' \
PKGVERSION='(Ubuntu EGLIBC 2.15-0ubuntu10.4) '
# Porting notes:
				'Posix time zone string.'
					print country
?*) PS3=
#	Public domain ksh
			read TZ
	region=
			region=$regions
		regions=$($AWK -F'\t' \
$REPORT_BUGS_TO.
REPORT_BUGS_TO='<http://www.debian.org/Bugs/>'
Select a time zone interactively.
	select continent in \
			select country in $countries
	select ok in Yes No
			select region in $regions
		'so that time zone rules can be set correctly.'
# Specify default values for environment variables if they are unset.
				'that is 10 hours ahead (east) of UTC.'
# This script also uses several features of modern awk programs.
# This script requires several features of the Korn shell.
				time = "[0-2]?[0-9](:[0-5][0-9](:[0-5][0-9])?)?"
				'time zone regions.'
to the file '$file' in your home directory; then log out and log in again.
		TZ=$($AWK -F'\t' \
TZ_COUNTRY_TABLE=$TZDIR/iso3166.tab
		TZdate=$(LANG=C TZ="$TZ_for_date" date)
: ${TZDIR=/usr/share/zoneinfo}
		<$TZ_for_date || {
		TZ_for_date=$TZ;;
		TZ_for_date=$TZDIR/$TZ
				tzname = "[^-+,0-9][^-+,0-9][^-+,0-9]+"
				tzpattern = "^(:.*|" tzname offset "(" tzname \
		TZsec=$(expr "$TZdate" : '.*:\([0-5][0-9]\)')
tzselect $PKGVERSION$VERSION
		' <$TZ_ZONE_TABLE)
		' <$TZ_ZONE_TABLE | sort -f)
TZ_ZONE_TABLE=$TZDIR/zone.tab
Universal Time is now:	$UTdate."
Usage: tzselect
	# Use the proposed TZ to output the current date relative to UTC.
		UTdate=$(LANG=C TZ=UTC0 date)
		$UTsec)
		UTsec=$(expr "$UTdate" : '.*:\([0-5][0-9]\)')
			-v continent="$continent" \
			-v country="$country" \
VERSION='@(#)tzselect.ksh	8.2'
			-v region="$region" \
			-v TZ_COUNTRY_TABLE="$TZ_COUNTRY_TABLE" \
				while (getline <TZ_COUNTRY_TABLE) {
# Work around a bug in bash 1.14.7 and earlier, where $PS3 is sent to stdout.
	Yes) break
You can make this change permanent for yourself by appending the line
# you can use either of the following free programs instead:

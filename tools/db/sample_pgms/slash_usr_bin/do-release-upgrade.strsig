                          ]
                            "a desktop system and 'server' for server "
                            "available and report the result via the "
  #  chech-new-release mode)
  check_only = sys.argv[0].endswith("check-new-release")
  #       correctly, see http://bugs.python.org/issue4391
                            "Currently 'desktop' for regular upgrades of "
                     default=check_only,
                     dest="devel_release", default=False,
                     dest="frontend", 
                     dest="mode", 
                     dest="proposed_release", default=False,
                     dest="quiet")
                     dest="show_version", default=False,
  enc = locale.getpreferredencoding()
  except:
                            "exit code").decode(enc))
  fetcher = DistUpgradeFetcherCore(new_dist=m.new_dist,
  fetcher.run()
    fetcher.run_options.append("--sandbox")
  fetcher.run_options += ["--mode=%s" % options.mode,
  #FIXME: Workaround a bug in optparser which doesn't handle unicode/str
from DistUpgrade.DistUpgradeVersion import VERSION
from DistUpgrade.utils import init_proxy
from gettext import gettext as _
from optparse import OptionParser
from UpdateManager.Core.DistUpgradeFetcherCore import DistUpgradeFetcherCore
from UpdateManager.Core.MetaRelease import MetaReleaseCore
                          "--frontend=%s" % options.frontend,
  gettext.bindtextdomain("update-manager", "/usr/share/locale")
  gettext.textdomain("update-manager")
                     help=_("Check if upgrading to the latest devel release "
                     help=_("Check only if a new distribution release is "
                     help=_("Run in a special upgrade mode.\n"
                     help=_("Run the specified frontend").decode(enc))
                     help=_("Show version and exit").decode(enc))
                     help=_("Test upgrade with a sandbox aufs overlay").decode(enc))
                     help=_("Try upgrading to the latest release using "
  if m.new_dist is None:
  if m.new_dist.upgrade_broken:
  if m.no_longer_supported is not None:
if __name__ == "__main__":
    if not options.quiet:
  if not options.quiet:
  if options.check_dist_upgrade_only:
  if options.sandbox:
  if options.show_version:
import apt
import gettext
import locale
import os
import sys
import time
import warnings
  init_proxy()
                          "is possible").decode(enc))
    locale.setlocale(locale.LC_ALL, "")
  # make sure to inform the user if his distro is no longer supported
  m = MetaReleaseCore(useDevelopmentRelease=options.devel_release,
NO_RELEASE_AVAILABLE=1
  # now inform about a new release
  (options, args) = parser.parse_args()
  parser.add_option ("-c", "--check-dist-upgrade-only", action="store_true",
  parser.add_option ("-d", "--devel-release", action="store_true",
  parser.add_option ("-f", "--frontend", default="DistUpgradeViewText",
  parser.add_option ("-m", "--mode", default="server",
  parser.add_option ("-p", "--proposed", action="store_true",
  parser.add_option ("-q", "--quiet", default=False, action="store_true",
  parser.add_option ("-s","--sandbox", action="store_true", default=False,
  parser.add_option ("-V", "--version", action="store_true",
  parser = OptionParser()
    pass
              "please try again later. The server reported: '%s'") % m.new_dist.upgrade_broken
    print _("Checking for a new Ubuntu release")
    print _("For upgrade information, please visit:\n"
    print _("New release '%s' available.") % m.new_dist.version
      print _("No new release found")
      print _("Release upgrade not possible right now") 
    print _("Run 'do-release-upgrade' to upgrade to it.")
    print "%s: version %s" % (os.path.basename(sys.argv[0]), VERSION)
      print _("The release upgrade can not be performed currently, "
    print _("Your Ubuntu release is not supported anymore.")
  progress = apt.progress.text.AcquireProgress()
				   progress=progress)
RELEASE_AVAILABLE=0
  #       Should be resolved by Python3
    sys.exit(0)
    sys.exit(NO_RELEASE_AVAILABLE)
    sys.exit(RELEASE_AVAILABLE)
                            "systems are supported.").decode(enc))
                            "the upgrader from $distro-proposed").decode(enc))
  # this will make it appear in motd (that calls do-release-upgrade in
  # this will timeout eventually
    time.sleep(0.5)
    url = "http://www.ubuntu.com/releaseendoflife"
            "%(url)s\n") % { 'url' : url }
                      useProposed=options.proposed_release)
#!/usr/bin/python
warnings.filterwarnings("ignore", "apt API not stable yet", FutureWarning)
  # we have a new dist
  # when run as "check-new-release" we go into "check only" mode
  while m.downloading:

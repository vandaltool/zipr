~~~~~~~~
   ~~~~~~~~~~~
                         }
                     }
                 );
                 ); 
                 }
                );
                ); 
               ,'?' => '?', ''  => '?'
               );
             }
           }
          +-----------------+---+ +-----------------+---+
         }
        }
        # -----------------------------
       ) 
       {
       }
       # ----------------------------
       # -----------------------------
    }    
    # -----
    # --------------
    # ---------------
    # ------------------------
    # -----------------------------
   # -----------------------------
   # ----------------------------------
   # ------------------------------------
  ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- --------------------
  # -------------------------------
  # --------------------------------
  # *******************************************************
  # ***********************************************************************
  # ******************************************************************************
-------------
--------------------------------------------------------------------------
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ================================
# =================================
# =====================================
# ======================================
# ========================================
# =========================================
# ============================================
# =============================================
# ==========================================================
# ===========================================================
#  ~~~~~~~~~~~                                               #
# ----------------------
# -----------------------
# ----------------------------
# -----------------------------
# -----------------------------------------------------------------------------------
# ****************************
# *****************************
# ####################################
# ######################################
# ############################################
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% #
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #
#-----------------------
#---------------------------------
#----------------------------------
#-----------------------------------
###########
##############
###############
#############################################################
######################################################################
#######################################################################
########################################################################
##########################################################################
	# ----------------------------
	# -----------------------------
	# -------------------------------------
	# ****************************
  0.1-beta1: internal
  0.1-beta2: (1997-02-27)
  0.1-beta3: (1997-03-10)
  0.1-beta4: (1997-03-11)
	$0           =~ m%/([^/]+)$%o;
   $| = 1;
  1.0-beta1: (1997-03-12)
  1.0-beta2: (1997-03-14)
  1.0-beta3: (1997-03-14)
  1.0-beta4: (1997-03-14)
  1.0-beta5: (1997-04-04)
  1.1         : (1997-04-28)
  1.1-beta1: (1997-04-xx) 
  1.1-beta2: (1997-04-11)
  1.1-beta-3  : (1997-04-xx)
  1.1-beta-4  : (1997-04-xx)
  1.1-beta-5  : (1997-04-xx)
  1.2-1       : (1997-xx-xx)
  1.2         : (1997-05-13)
  1.2-2       : (1997-06-10)
1)Calling $script with 2 arguments:
#    1.First sort all entries by host by putting host without wildcards first,
               , 1  => 'Y',  0  => 'N'
  2.01        : (1997-12-12)
  2.0         : (1997-10-09)
  2.02        : (1998-01-xx)
  2.03         : (1998-02-27)
  2.04-alpha1  : (2000-02-11)
   2.05: (2000-02-17)   Monty
   2.06:  Don't print '+++USING FULL WHERE CLAUSE+++'
  2.0p1-3     : (1997-10-xx)
	# 2 arguments: (user,db) -> ('localhost','user','db')
2)Calling $script with 3 arguments:
  #    2.Get grant for user from the "db" table.
#    2.Get grant for user from the "db" table.
	# 3 arguments: (host,user,db)
  #    3.If hostname is "empty" for the found entry, AND the privileges with
#    3.If hostname is "empty" for the found entry, AND the privileges with
3)Using wildcards:
  #    4.OR (add) the privileges for the user from the "user" table.
#    4.OR (add) the privileges for the user from the "user" table.
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>8
	$ACCESS_D_BCK = 'db_backup';     
        $Access_db{$field} = $MySQLaccess::Report::Answer{$record[$D{$field}]};
	$ACCESS_DB = 'mysql';		 # name of DB with grant-tables
	$ACCESS_D  = 'db';               #
 ,'Access_denied'
	$ACCESS_D_TMP = 'db_tmp';        
    %ACCESS_ERR= ('Access_denied'       => 'Access denied' 
	$ACCESS_H_BCK = 'host_backup';   
	$ACCESS_H  = 'host';		 # 
        $Access_host{$field} = $MySQLaccess::Report::Answer{$record[$H{$field}]};
	$ACCESS_H_TMP = 'host_tmp';      
   => "Accessing the db as an anonymous user.\n"
         %Access = MySQLaccess::Grant::Get_Access_Rights($host,$user,$db);	
      %Access = MySQLaccess::Grant::Get_Access_Rights($host,$user,$db);	
         %Access = MySQLaccess::Grant::Get_Access_Rights($host,$user,$db,'tmp');	
     %_access_                 = %{$refgrant};
  %_access_                 = %{$refgrant};
  Access-rights
	$ACCESS_U_BCK = 'user_backup';   
          $Access_user{$field} = $MySQLaccess::Report::Answer{$record[$U{$field}]};
	$ACCESS_U_TMP = 'user_tmp';      
	$ACCESS_U  = 'user';	         # 
  #     (add all privileges which is "Y" in "user")
#     (add all privileges which is "Y" in "user")
	# Add/Edit privileges
    # add entry for all fields in the DB-table
    # add entry for all fields in the HOST-table
    # add entry for all fields in the USER-table
         ."</ADDRESS>\n"
         ."<ADDRESS>\n"
         ."</ADDRESS>\n</CENTER>\n"
  -add some more functionality for DNS.
                           Administratieve Informatieverwerking (AIV)
            a first capital letter.
                  '>' => 'After',
   @after  = sort(@after);
#      after this host with wildcards and entries with host = ".
  -a full where clause is use now.  How can we handle older servers?
# a higher value gives more info
         ."[<a href=$FORM?edit=on>Change/edit ACL</a>] \n"
         ."[<a href=$FORM?help=on>New check</a>] \n"
         ."[<a href=$FORM?howto=on>Examples</a>] \n"
         ."[<a href=$FORM?plan=on>Future&nbsp;Plans</a>] \n"
         ."[<a href=$FORM?relnotes=on>Release&nbsp;Notes</a>] \n"
         ."[<a href=$FORM?version=on>Version</a>] \n"
         ." <a href=\"$MySQLaccess::MYSQLADMIN\">$MySQLaccess::MYSQLADMIN</a></td>\n"
@all_dbs   = @{MySQLaccess::DB::Get_All_dbs($Param{'db'})};
             --all_dbs   : report access-rights for all possible dbs
#@all_dbs_tmp   = @{MySQLaccess::DB::Get_All_dbs($Param{'db'},'tmp')};
   => "All grant-tables are empty, which gives full access to ALL users !!"
@all_hosts = @{MySQLaccess::DB::Get_All_hosts($Param{'host'})};
             --all_hosts : report access-rights for all possible hosts
#@all_hosts_tmp = @{MySQLaccess::DB::Get_All_hosts($Param{'host'},'tmp')};
  - Allow the debug level to be set on the cmd line with --debug=N.
# all privileges.
@all_users = @{MySQLaccess::DB::Get_All_users($Param{'user'})};
             --all_users : report access-rights for all possible users
#@all_users_tmp = @{MySQLaccess::DB::Get_All_users($Param{'user'},'tmp')};
           Also the error-messages the mysql-client reports are 
# always be printed (once)
#  and (a reference to) an array which holds the fieldnames.
           and confusing ;-)
         ."and <font color=$color{'>'}>AFTER</font> changes to grant-tables</font>\n";
         and ( MySQLaccess::Wildcards::MatchTemplate($db_tpl,$db) )
         and ( MySQLaccess::Wildcards::MatchTemplate($db_tpl,$db) ) ) {
         and ( MySQLaccess::Wildcards::MatchTemplate($user_tpl,$user) ) ) {
             ."and password=PASSWORD('$password');\n";
#  and start the program by processing the parameters        #
           and the answers read from the pipe.
           (%,_) and the Regular-expression (*,?) syntax.
       and use a matrix-report.
     ."An error occured when executing an SQL statement.\n"
     ."An error occured when trying to connect to the database\n"
     ."An error occured when trying to work with some tables in the database\n"
     ."An error occured when trying to work with the temporary tables in the database\n"
 ,'anonymous_access'
    $answer = <MYSQL_A>; #answer from mysql
#  answers from MYSQL_A
    %Answer =  ('Y' =>  1 , 'N' =>  0
   # Any host also means:
   # - any host still to be defined/created
    any options just the arguments 'user db' or 'host user db', where
   # Any user means also:
   # - any user still to be defined/created
   => "Any user with the appropriate permissions has access to your DB!\n"
   => "A password is required for user `\$user' :-("
      $aref1= \@MySQLaccess::Grant::sorted_db_table ;
      $aref1= \@MySQLaccess::Grant::sorted_db_tmp_table ;
      $aref_db   = \@MySQLaccess::Grant::sorted_db_table; 
      $aref_db   = \@MySQLaccess::Grant::sorted_db_tmp_table;   
      $aref_host = \@MySQLaccess::Grant::sorted_host_table;
      $aref_host = \@MySQLaccess::Grant::sorted_host_tmp_table;
   $aref=MySQLaccess::Grant::Diff_Privileges();
      $aref = \@MySQLaccess::Grant::sorted_db_table;
      $aref = \@MySQLaccess::Grant::sorted_db_tmp_table ;
      $aref = \@MySQLaccess::Grant::sorted_host_table;
      $aref = \@MySQLaccess::Grant::sorted_host_tmp_table ;
      $aref = \@MySQLaccess::Grant::sorted_user_table;
      $aref = \@MySQLaccess::Grant::sorted_user_tmp_table ;
      $aref_user = \@MySQLaccess::Grant::sorted_user_table;
      $aref_user = \@MySQLaccess::Grant::sorted_user_tmp_table;
    # as long as there's no full where clause (Distrib 3.20)...
# assume we mean 'localhost'
     ."  a superuser-password to, with the -P option?\n"
        $atime, $mtime, $ctime, $blksize, $blocks) = stat($fname);
    + At least the user and the db must be given (even with wildcards)
# At TCX hosts contain a list of all machines on local network. These are granted
      available in the that directory or in /etc, and point your browser
            a wildcard-expression.
    BackupGrantTables();
           . "backup-tables, so you can always perform a 1-level rollback.";
  -b, --brief          single-line tabular report
   @before = sort(@before);
      before taking them into production
           better interpreted ;-)  
     ."Be very careful about it!!"
  BEWARE:  Everybody can access your DB as user 'nobody'
  BEWARE:  Everybody can access your DB as user 'root'
         ."</BODY>\n"
         ."<BODY>\n"
# brief and table-format 
             --brief     : as brief as possible, don't mention notes,warnings and rules
	          ,"brief|b"       => \$Param{'brief'}
            --brief     : single-line tabular output
  - bugfix:
  - bugfix: any option with a '.' (eg ip-number) was interpreted as
  - bugfix: error in matching regular expression and string given
  - bugfixes:
  - bugfix: Fieldnames which should be skipped on the output can now have
  - bugfix: in an expression "$i = $j or $k", the '=' binds tighter than the or
  - bugfix: the host-table should not be used if the host isn't empty in db
  - bugfix: The table sorting was only being applied to the "user" table; all
  - bugfix: the user-field should not be treated as a sql-regexpr,
  - bugfix: translation to reg.expr of \_ and \%.
  - bugfix: When no entry was found in the db-table, the default accessrights are
         ."BUGs can be reported by email to <a href=mailto:bugs\@mysql.com>bugs\@mysql.com</a><BR>\n"
         ."BUGs can be reported by email to bugs\@mysql.com\n";
    # build list of available tables
    ## build list of known/existing tables;
   # Build list of priv. for grant-tables
   # Build list of priv. for tmp-tables
   # Build list of users,dbs,hosts
# Build list of users,dbs,hosts
#  Build the query for an ordered list of entries
            but as a plain string.
# but WITHOUT ANY WARRANTY; without even the implied warranty of
      by empty (blanc) values!
            (by Monty)
            (by Paul D. Smith <psmith\@baynetworks.com>)
         ."By RUG-AIV, by Yves Carlier (<a href=mailto:Yves.Carlier\@rug.ac.be>Yves.Carlier\@rug.ac.be</a>)<BR>\n"
         ."By RUG-AIV, by Yves Carlier (Yves.Carlier\@rug.ac.be)\n"
            by user which resulted in
      (by X Zhu <X.Zhu@Bradford.ac.uk>)
#  Calculate diff between temporary and original grant-tables
     ."calling `$MySQLaccess::script'."
# can be set to 0,1,2,3
<center>
         ."</CENTER>\n";
         ."<CENTER>\n<ADDRESS>\n"
    * CGI-BIN version with HTML and forms interface.  Simply place the
         ."Changes by Steve Harvey (<a href=mailto:sgh\@vex.net>sgh\@vex.net</a>)<BR>\n"
         ."Changes by Steve Harvey (sgh\@vex.net)\n"
                       changes in (temporary) grant-tables
           . "changes take effect.";
  #  check all records in mysql::db for matches with the triple (host,db,user)
  #  check all records in mysql::host for matches with the tuple (host,db)
  #  check all records in mysql::user for matches with the tuple (host,user)
    # check connection 
    ## check for errors...
	# check for things which aren't
    # check host and db
# check if host (IP or name) can be matched
# check if the given hostname (or ip)
      checking against the 'db' and 'host' tables. (Bug fixed in MySQL3.20.19)
    # check path to mysql-client executable
    # check server-version 
     ."check the priveliges in the db-table `\$db'."
     ."+ Check your path, or\n"
     ."Check your users!"
   chomp(@diffs);
    chomp($password = <STDIN>);
    chomp(@res); 
	chop($line);
   # cleanup temp. files
#    client to exactly duplicate order of resulting argument lists
         close(CNF);
   close(CNFFILE);
    close(CREATE);
   close(DIFF);
    close(DONTCARE);
   close $ha;
   close $hb;
    close MYSQL_A;
    close MYSQL_Q;
  Closes vulnerability due to former implementation requiring passwords
#  Close the connection to the mysql-db
($CMD,$CGI) = GetMode();
       # column-headers should only be 
    command line, in which case the values will be prompted for.
    * --commit  : copy grant-rules from temporary tables to grant-tables
  --commit             copy grant-rules from temporary tables to grant-tables
                  ,"commit"        => \$Param{'commit'}
  - complain when certain programs and paths can't be found.
  - complete rewrite of the granting-rules, based on the documentation
   # compute difference
  - connect as superuser with superpassword.
    $connect .= " --defaults-file=$MySQLaccess::MYSQL_CNF --no-data";
#  connecting from host '$host'
#  Connecting to the MYSQL DB
    $connect .= " $MySQLaccess::ACCESS_DB";
    $connect .= " $MySQLaccess::MYSQL_OPT";
    $connect .= " $tables{$table}";
    ## copy data
    ## Copy data from temporay tables to grant-tables
#  Copy grant-rules from temporary tables to the ACL-tables
                  ,"copy"          => \$Param{'copy'}
    * --copy    : (re)load temporary grant-tables from original ones.
  --copy               reload temporary grant-tables from original ones
   Copyright (C) 1997,1998 Yves.Carlier\@rug.ac.be
# Copyright (c) 2000, 2007 MySQL AB, 2009 Sun Microsystems, Inc.
    ## copy structure 
    * copy the grant-rules to temporary tables, where you are safe to
    * copy the new grant-rules from the temporary tables back to the
#  Copy the structure and the data of a table to another table
# corresponds with the localhost
    $create = '';
       # create column-headers
    # create column-headers
    $create = "@create";
    @create = <CREATE>;
  # Create default access-rights
          | create_priv     | N | | file_priv       | N |
          | create_priv     | Y | | file_priv       | Y |
    $create =~ s/CREATE TABLE $tables{$table} \(/CREATE TABLE $table \(/;
#  Create temporary/backup table
# create the config file for mysql and mysqldump
              $curblock = $type;
               ,'db'   => [0,1,2]
 ,'Dbaccess_denied'
                 ,'Dbaccess_denied'     => 'Access to database denied'
	          ,"db|d=s"        => \$Param{'db'}
   db    : 'foo.bar','Foo','nobody','Y','Y','Y','N','N','N'
       $DB  =$MySQLaccess::ACCESS_D;
       $DB  =$MySQLaccess::ACCESS_D_TMP;
   db    : 'No matching rule'
 ,'db_required'
  -d, --db=#           name of the database
    $DEBUG     = 0;
	$DEBUG   = 0;
    $DEBUG     = 2;
  # debugging access-rights in db 
# debugging flag
    # debugging info
	          ,"debug=i"       => \$Param{'DEBUG'}
    $DEBUG     = $MySQLaccess::DEBUG unless ($DEBUG);
  --debug=N            enter debuglevel N (0..3)
        $DEBUG = $Param{'DEBUG'} if ($Param{'DEBUG'}>=$DEBUG);
        $DEBUG = $Q->param('debug') if ($Q->param('debug')>=$DEBUG);
	# declared as options:
  #   default access-rights are no access at all!!
    * default values are read from a configuration file $script.conf
    defined($Param{'commit'}) or
    defined($Param{'copy'}) or
    defined($Param{'rollback'}) ) { $Param{'edit'}='on'; }
           definitions of 2 different access-rights.
    #'delete_priv',     'process_priv',
          | delete_priv     | Y | | process_priv    | N |
          | delete_priv     | Y | | process_priv    | Y |
    $delim = <MYSQL_A>; # read header
die "Unsafe config file found: $unsafeConfig\n"  if $unsafeConfig;
   # DIFF
   @diffs = <DIFF>;
   @diffs = grep(/[<>]/,@diffs);
        $DIFF      = '/usr/bin/diff'; 
                       does not yet know how to handle full where clauses.
                       (!don't forget to do an mysqladmin reload)
                  (!don't forget to do an mysqladmin reload)
#         ."Don't forget to mention the version $VERSION!<BR>\n"
                 # don't unquote backslashes as we just write it back out
       # do tables exist?
   # DOUBT:
  >>  duplicate output. <psmith>
    # each record has 1 field to much : ucase_host
     ."+ edit the source of this script to point \$DIFF to the diff program.\n"
     ."+ edit the source of this script to point \$MYSQLDUMP to the mysqldump program.\n"
     ."+ edit the source of this script to point \$MYSQL to the mysql client.\n"
           eg. Select_priv and select_priv, they were considered as 
# -> eliminate 'broken pipe' error
                     } else {
         } else {
        else {
    else {
    else { 
   # else {
   else {
  else {
   else                            { $cmd=1; $cgi=0; } 
    else                                  { $match=0;}
          else            { print "\t";   $column=2;}
          else            { print "<td width=10%></td>";   $column=2;}
        else               { push(@Notes,'password_required'); }
     else         { push(@Notes,'valid_password'); }
    else {      #reading production grant-tables
    #else           { return undef; }
             } elsif ( defined $group ) {
  elsif (-f "/etc/$script_conf") {
  elsif (-f "/usr/$script_conf") {
       $end = ' ORDER BY ' . join(',', @order) . ";\n";
# End script
   #    enough to look which db already exist on the system
    $ENV{IFS} = " \t\n";
    $ENV{PATH} = "/bin:/usr/bin";
    $ENV{SHELL} = "/bin/sh";
    ## error-handling
    # Error-messages from the MySQL client
      eval $format;
   => "Everybody can access your DB as user `\$user' from host `\$host'\n"
Examples of how to call $script:
# exclude each-other
    ## execute query
          exit 0;
      exit 0;
    exit 0;
   exit 0;
#   exit 0;
       exit 1;
@EXPORT = qw(&Print_Header());
    $expr  =~ s/\\_/\002/g;
    $expr  =~ s/\\\?/\002/g;
    $expr  =~ s/\\\*/\002/g;
    $expr  =~ s/\\%/\002/g;
    $expr  =~ s/\002/_/g;
    $expr  =~ s/\002/?/g;
    $expr  =~ s/\002/*/g;
    $expr  =~ s/\002/%/g;
    $expr  =~ s/_/.+/g;
    $expr  =~ s/\?/.+/g;
    $expr  =~ s/\./\\./g;
    $expr  =~ s/\*/.*/g;
    $expr  =~ s/%/.*/g;
               "(FIELD = '')");
               "((FIELD like '%\\%%') OR (FIELD like '%\\_%'))",
        $field = ucfirst($field); 
    #'file_priv',       'shutdown_priv');
# FINDING THE RIGHT GRANT-RULE
  #  first match is used.
      first this file is looked for in the current directory; if not
  - first trial.
    * Fixed bug in acl with anonymous user:  Now if one gets accepted by the
  - fixed some "-w" warnings.
      (fix supplied by Steve Harvey <sgh@vex.net>)
    $fname =~ s#/[^/]+$##;
       foreach $db (@all_dbs) {
    foreach $db (@all_dbs) {
       foreach $db (@all_dbs_tmp) {
    foreach $error (@MySQLaccess::Grant::Error) {
    foreach $error (@MySQLaccess::Grant::Errors) {
      foreach $field (keys(%D)) {
  foreach $field (keys(%D)) { ##only priv. set in db-table
      foreach $field (keys(%H)) {
     foreach $field (keys(%H)) {  ##only priv. set in host-table 
    foreach $field (keys(%MySQLaccess::Grant::D)) {
    foreach $field (keys(%MySQLaccess::Grant::H)) {
    foreach $field (keys(%MySQLaccess::Grant::U)) {
    foreach $field (keys(%right)) { MySQLaccess::Debug::Print(3, sprintf("> %15s : %1s",$field,$right{$field})); }
    foreach $field (keys(%Struct)) { MySQLaccess::Debug::Print(2,"+ $field -> $Struct{$field}"); }
        foreach $field (keys(%U)) {
  foreach $field (keys(%U)) { ##only priv. set in user-table
       foreach $field (@MySQLaccess::Grant::Privileges) {
      foreach $field (@MySQLaccess::Grant::Privileges) {
    foreach $field (@MySQLaccess::Grant::Privileges) {
           foreach $field (@priv) {
#       foreach $field (@privlist) { print " > $field\n"; }
    foreach $field (sort(keys(%MySQLaccess::Grant::Rules))) {
    foreach $field (@Struct) { MySQLaccess::Debug::Print(2,"+ $field"); }
    foreach $field (@table) {
   foreach $group (keys %MYSQL_CNF) {
         foreach $header (@headers) {
      foreach $header (@headers) {
    foreach $header (@headers) {
   foreach $host (@all_hosts) {
foreach $host (@all_hosts) {
   foreach $host (@all_hosts_tmp) {
      foreach $item (keys %{$MYSQL_CNF{$group}}) {
    foreach $line (@diffs) {
      foreach $line (@lines) { 
    foreach $line (@res) { MySQLaccess::Debug::Print(2," >>$line"); }
    foreach $msg (@messages) {
    foreach $nerror (sort(keys(%ACCESS_ERR))) {
    foreach $note (@MySQLaccess::Grant::Notes) {
   foreach $record (@{$aref}) {
  foreach $record (@{$aref}) {
   foreach $record (@{$aref1}) { #MySQLaccess::Grant::sorted_db_table) {
   foreach $record (@{$aref}) { #MySQLaccess::Grant::sorted_db_table) {
   foreach $record (@{$aref}) { #MySQLaccess::Grant::sorted_user_table) {
   #foreach $record (@MySQLaccess::Grant::sorted_user_table) {
    foreach $right (@D) {
    foreach $right (@H) {
    foreach $right (@U) {
    foreach $tbl (keys(%tables)) {
    foreach $tbl (@Tables) { MySQLaccess::Debug::Print(2,"+ $tbl"); }
    foreach $tmp (@order)
     foreach $user (@all_users) {
  foreach $user (@all_users) {
     foreach $user (@all_users_tmp) {
    foreach $warning (@MySQLaccess::Grant::Warnings) {
  foreach $w (@where) {
    for $i (0 .. $rows-1) {
    for $i ($rows .. $#MySQLaccess::Grant::Privileges) {
# for localhost
         ."<form action=$FORM method=GET>\n"
      $format = "format STDOUT = \n"
    $FORM = $ENV{'SCRIPT_NAME'};
<FORM method=POST action=$FORM>
         ."</form>\n"
   for their suggestions, debugging and patches. 
     ."  for the superuser?\n"
  for USER 'nobody', from HOST 'foo.bar', to DB 'Foo'
  for USER 'root', from HOST 'localhost', to DB 'mysql'
#  for user '$user' 
    found in de FAQ.
      found it is looked for in /etc/
# From the FAQ: the Grant-algorithm
   From version 2.0x, $script can also be used through a WEB-browser
    $f =~ s/FIELD/$this/g;
 ,'full_access' 
    $full_access=0;
  - functionality
  - functionality:
  - functionality/bugfix:
#  FUNCTIONS  #
# generate a help-screen in CMD-mode
   # get all db for which access-rights can be calculated,
   # get all db for which access-rights can be calculated.
    ## get creation-data for original table
# get hostname and local-ip
  # get hostname for IP-address
# get info/help if necc.
  # get IP-address for hostname
	# Get options from commandline
	GetOptions("help"          => \$Param{'help'}
	$Getopt::Long::ignorecase=0; #case sensitive options
       # Get record-layout 
    # grant-database
      grant-tables.
# grant-tables
                 $group = $1;
   # groups may be in any order, generic groups such as [client] assumed
                 $group =~ tr/A-Z/a-z/;
         ."<H1>$MySQLaccess::script Version $MySQLaccess::VERSION</H1>\n" 
   ($ha, $after)  = tempfile("$MySQLaccess::script.XXXXXX") or
    * hashes should  be initialized with () instead of {} <psmith>
   ($hb, $before) = tempfile("$MySQLaccess::script.XXXXXX") or
    $headers   = 0;
#$headers=0;
         ."</HEAD>\n"
         ."<HEAD>\n"
  -?, --help           display this helpscreen and exit
   # here to be empty
  -h, --host=#         name or IP-number of the host
             ."host='$host' and user='$user' and password='$encpw' "
	          ,"host|h=s"      => \$Param{'host'}
    host is 'localhost' if one uses only two arguments.
       $HOST=$MySQLaccess::ACCESS_H;
       $HOST=$MySQLaccess::ACCESS_H_TMP;
   host  : 'Not processed: host-field is not empty in db-table.'
 ,'host_required'
   @host = sort(@host);
              . '$host_user_db,@priv' . "\n"
        ($host,$user,$db,@priv) = split(/,/,$line);
     ($_host_,$_user_,$encpw_) = @{$refrecord};
  ($_host_,$_user_,$encpw_) = @{$refrecord};
            --howto     : display examples on how to use mysqlaccess
$HOWTO = <<_HOWTO;
	          ,"howto"         => \$Param{'howto'}
  --howto              some examples of how to run `$script'
  -H, --rhost=#        remote MySQL-server to connect to
         ."<HR>\n";
         ."</HTML>\n";
       . "<HTML>\n"
if (0) {
	if ($#ARGV == 1) {
	if ($#ARGV == 2) {
                         if ( CheckUnsafeFile($fname) ) {
   if ( $CMD && length($Param{'spassword'}) == 0 ) {
          if ($column==2) { print "\n\t"; $column=1;}
          if ($column==2) { print "</tr>\n<tr>\n"; $column=1;}
   if (defined($ENV{'HTTP_HOST'})) { $cmd=0; $cgi=1; }
    if (defined($force) and $force) {
                 if ( defined $item ) {
    if (!defined($MySQLaccess::Host::localhost)) {
    if (defined($MySQLaccess::Param{'brief'})) { 
    if (defined($MySQLaccess::Param{'rhost'}))     { $connect .= " --host=$MySQLaccess::Param{'rhost'}"; }
         if ( defined $MYSQL_CNF{$group}{$item} ) {
if ( defined($Param{'commit'}) ) {
if ( defined($Param{'copy'}) ) {
if ( defined($Param{'edit'})) {
if ( defined($Param{'help'}) 
if (!defined($Param{'host'}))      { $Param{'host'}='localhost'; }
if ( defined($Param{'howto'}) ) {
	if ( defined($Param{'password'}) && length($Param{'password'}) == 0 ) {
if ( defined($Param{'plan'}) ) {
if ( defined($Param{'preview'}) ) {
if (defined($Param{'preview'}) or
if ( defined($Param{'relnotes'}) ) {
if ( defined($Param{'rollback'}) ) {
if (defined($Param{'spassword'})) {
if (defined($Param{'superuser'})) {
if (defined($Param{'table'})) { undef($Param{'brief'}); }
if ( defined($Param{'version'}) ) {
  if (defined($password)) {
   if (defined($tmp) and $tmp) {
       if ($delim =~ /^ERROR/) {
    if ($delim ne "ok\n") {
   #if EDIT-mode
#if EDIT-mode
                 if ( !exists $MYSQL_CNF{$group} ) {
    if (! -f $MySQLaccess::MYSQL) {
    ## if forced
    ## if 'force' existing table is dropped first
  if (-f "./$script_conf") {
       if (grep(/$ACCESS_ERR{$nerror}/i,$answer)) { 
      if (grep(/$ACCESS_ERR{$nerror}/i,$answer)) { 
       if (grep(/$ACCESS_ERR{$nerror}/i,$create)) { 
	if ( grep(/\-\?/,@ARGV) ) { MySQLaccess::Report::Print_Usage(); exit 0; }
    if ( (!grep(/$db/i,@db)) and ($db =~/$reg_expr/i) ) {
   if (!grep(/^%$/,@db)) { push(@db,"$MySQLaccess::NEW_DB"); }
       if (!grep(/$DB/,@tables))   { MySQLaccess::DB::CreateTable($DB); }
    if (!grep(/^$from$/,@known_tables)) { return 'Unknown_table'; }
    if ( (!grep(/$host/,@host)) and ($host=~/$reg_expr/)) {
   # if ( (!grep(/$host/,@host)) and ($host=~/$reg_expr/)) {
    if (! grep(/$host/i,@host)) {
       if (!grep(/$HOST/,@tables)) { MySQLaccess::DB::CreateTable($HOST); }
	if (! grep(/$i/,@{$skip{$table}}) ){
	if (! grep(/$right/,@privlist)) { push(@privlist,$right); }
       if (grep(/^$table$/,@known_tables)) {
       if (!grep(/$USER/,@tables)) { MySQLaccess::DB::CreateTable($USER); }
    if ( (!grep(/$user/,@user)) and ($user=~/$reg_expr/)) {
                     if ( $group eq 'client' ) {
    if (! $headers) {
    if ($ip !~ /([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)/o) {
    #if ($ip ne "") { return "$ip"; }
                     if ( $item =~ /^password$/ ) {
   if it is ran as a CGI-script.  (See the release-notes)
    if ( (length $fname) > 0 ) {
   if ( length($Param{'spassword'}) > 0 ) {
    if ( $mode & 022 ) {  # unsafe if writable by other
    if ( $mode & 066 ) {  # unsafe if accessible by other
        if ($MySQLaccess::CGI) {
       if ($MySQLaccess::CGI) {
       if ($MySQLaccess::CGI) { 
      if ($MySQLaccess::CGI) {
    if (!$MySQLaccess::CGI) { 
    if ($MySQLaccess::CGI) {
    if ($MySQLaccess::CGI) { 
   if ($MySQLaccess::CGI ) {
    if ($MySQLaccess::CGI) { #CGI-BIN mode
if ($MySQLaccess::CGI) { #CGI-version
    if ($MySQLaccess::CGI) { print "</center>\n</font>\n"; }
    if ($MySQLaccess::CGI) { print "<font color=DarkGreen>\n<center>\n"; }
    if ($MySQLaccess::CGI) { print "<font color=Red>\n<center>\n"; }
    if ($MySQLaccess::CGI) { print "<font color=Red>\n<PRE>\n"; }
    if ($MySQLaccess::CGI) { print "</PRE>\n"; }
    if ($MySQLaccess::CGI) { print "<PRE>\n"; }
#       if ($MySQLaccess::CGI) { print "</PRE>\n"; }
#       if ($MySQLaccess::CGI) { print "<PRE>\n"; }
    if ($MySQLaccess::CGI) { print "</PRE>\n</font>\n"; }
        if ($MySQLaccess::CMD) {
       if ($MySQLaccess::CMD) {
      if ($MySQLaccess::CMD) {
    if ($MySQLaccess::CMD) {
    if ($MySQLaccess::CMD) { #command-line mode
if ($MySQLaccess::CMD) { #command-line version
       if ($MySQLaccess::CMD) { die "Could not find MySQL-client '$MySQLaccess::MYSQL'"; }
if (@MySQLaccess::Grant::Error) {
    if ($MySQLaccess::Grant::full_access) { print "$MESSAGES{'full_access'}\n"; }
  if (!$MySQLaccess::Grant::process_host_table) {
  if ($MySQLaccess::Grant::process_host_table) {
    if ( ( MySQLaccess::Host::Is_localhost($host_tpl)
    if ( MySQLaccess::Host::MatchTemplate($host,$host_tpl) and
    if (($MySQLaccess::host_name eq $localhost) or ($MySQLaccess::host_ip eq $local_ip)) {
    if ($MySQLaccess::Host::SERVER >= '3.21') {
    if ($MySQLaccess::Param{'brief'}) {
    if ($MySQLaccess::Report::separator) { print "$MySQLaccess::Report::separator\n"; }
    if ($name =~ /[%_]/) { 
   if ($nerror) {
   if ($nerror = MySQLaccess::DB::CommitGrantTables()) {
if ( $nerror=MySQLaccess::DB::OpenConnection() ) {
   if ($nerror = MySQLaccess::DB::RollbackGrantTables()) {
if ($nerror=MySQLaccess::Grant::ReadTables()) {
# if no host is given
    + If no host is given, `localhost' is assumed
   # if no rule is found for a certain db in the db-table,
    if ( open CNF, $fname ) {
if ($Param{'edit'} and $nerror=MySQLaccess::Grant::ReadTables('tmp')) {
        if ($passwd eq '') { push(@Warnings,'insecure_user');  }
    # if password is valid, at least 1 row returns before we read 'ok'
  if (! $rule_found ) {
    if ($string=~ /^$tpl$/ or $tpl eq '') { $match=1; }
             if ( /\[\s*(\w+)\s*]/ ) {
   if ( ! ($template =~ /[\*\?%_]/) ) {
   if ($template =~ /[\*\?]/) {
   => "If the final priveliges of the user are more then you gave the user,\n"
    * if the table db is empty, mysqlaccess freezed 
    if ($tmp) { #reading temporary tables
           if ($type ne $curblock) {
    if ( ($uid != $<) && ($uid != 0) ) {
    if ( $uid != $< ) {   # unsafe if owned by other than current user
  if ($_user_ eq $MySQLaccess::NEW_USER) { 
  if ($_user_ ne $user) {
      if ($user_tpl eq '') { push(@Warnings,'public_database'); }
     if (!$valid) { push(@Errors,'invalid_password'); }
     ."* If you used the -P option, you may have supplied an invalid password?\n"
     ."* If you used the -U option, it may be possible you have to supply\n"
     ."* If you used the -U option, you may have supplied an invalid username?\n"
#  in an ordered fashion
$INFO = <<"_INFO";
	# information on MySQL
    # inform if there are no rules ==> full access for everyone.
  - inform the user if he has not enough priv. to read the mysql db
# Inform user if he has not enough
    * in Host::MatchTemplate: incorrect match if host-field was left empty.
                     <INPUT type=submit name=table value="Tabular"></td>
  'insecure_user' 
    #'insert_priv',     'drop_priv',
          | insert_priv     | Y | | reload_priv     | N |
          | insert_priv     | Y | | reload_priv     | Y |
                  interpreted by the shell.  use \* or '*'
  # in the db-table isn't empty
 ,'invalid_password'
  - IP-number and name for a host are equiv.
    $ip = pack "C4",$1,$2,$3,$4;
      $isit = ( 'localhost' =~ /$host_tpl/ ) ? 1 : 0;
                 ($item, $value) = /((?:\w|-)+)\s*=\s*(\S+)/;
  >>  I think that the warnings should either be enhanced to _really_
           it open throughout the whole run. Queries are written to,
  - It would be nice if one could optionally start mysqlaccess without
    $j=0;
    $j=1;
      $j = $j+2;
#  known tables.
       @known_tables = Show_Tables();
        last;
      last;
    # layout:
  - layout: long messages are wrapped on the report.
 ,'least_priv'
#  Lets get to it,                                           #
# Library General Public License for more details.
# License along with this library; if not, write to the Free
# License as published by the Free Software Foundation; version 2
         $line1 .= sprintf("| %-20s",'Host,User,DB');
      $line1 .= sprintf("| %-30s|",'Host,User,DB');
           $line1 .= sprintf("%-4s ",$header);
        $line1 .= sprintf("%-4s|",$header);
              $line1 .= sprintf("<td align=center><font color=$color{$type}>%-4s</font></td>",$field);
         $line1 .= sprintf("<th>%-20s</th>",'Host, User, DB');
    $line1 .= sprintf("<th>%-20s</th>",'Host, User, DB');
           $line1 .= sprintf("<th>%-4s</th>",$header);
      $line1 .= sprintf("<th>%-4s</th>",$header);
           $line1="<td><font color=$color{$type}>$host, $user, $db</font></td>";
         $line2 .= sprintf("+ %-20s",'-' x 20);
      $line2 .= sprintf("+-%-30s+",'-' x 30);
           $line2 .= sprintf("%s ",'----');
        $line2 .= sprintf("%s+",'----');
        $line = substr($line,1);
  - 'localhost' and the name/ip of the local machine are now equiv.
  local $host_ip   = MySQLaccess::Host::Name2IP($host);
$localhost = MySQLaccess::Host::LocalHost();
  local $host_name = MySQLaccess::Host::IP2Name($host);
    $localhost = undef;
  local ($host,$user,$db,$tmp) = @_;
$local_ip  = MySQLaccess::Host::Name2IP($localhost);
    * log-file for debug-output : /tmp/mysqlaccess.log
# MA 02110-1301, USA
#  Make a backup of the original grant-tables
#  Make an ordered list of the privileges
    ## Make backup of original grant-tables
    ## manipulate result for creation-data for temporary table
   Many thanks go to <monty\@mysql.com> and <psmith\@BayNetworks.COM>
# match a given string with a template
    $match = (MySQLaccess::Wildcards::MatchTemplate($tpl,$host_name) or
       Matrix_Report($host,$user,$db,$refhash);  
     ."* Maybe YOU do not have READ-access to this database?\n"
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    MergeConfigFile("$dir/.my.cnf");
    MergeConfigFile("/etc/my.cnf");
MergeConfigFiles();
    MergeConfigFile("/usr/my.cnf");
#  merge data from .cnf file
#  merge options from config files
%MESSAGES = ( 
      $message =~ s/\$db/$db/g;
      $message =~ s/\$host/$host/g;
      $message =~ s/\$password/$password/g;
      $message =~ s/\$user/$user/g;
      $message =~ s/\$user/$user/g; 
 ,'minimum_priv'
# modify it under the terms of the GNU Library General Public
            (Monty)
            more descriptive notes and warnings
  - more information
  - More -w cleanups; should be totally -w-clean.
   Moved the log file from /tmp to ~
    my ($a,$b,$c,$d) = unpack('C4',$addrs[0]);
   my %Access;
  my %_Access_;
my %Access = ();
  my %Access_db    = %{Default_Access_Rights()};
  my %Access_host = %{Default_Access_Rights()};
  my %Access_user = %{Default_Access_Rights()}; 
   my @after =();
   my @all_dbs   = @{MySQLaccess::DB::Get_All_dbs('*')};
   my @all_dbs_tmp   = @{MySQLaccess::DB::Get_All_dbs('*','tmp')};
   my @all_hosts = @{MySQLaccess::DB::Get_All_hosts('*')};
   my @all_hosts_tmp = @{MySQLaccess::DB::Get_All_hosts('*','tmp')};
   my @all_users = @{MySQLaccess::DB::Get_All_users('*')};
   my @all_users_tmp = @{MySQLaccess::DB::Get_All_users('*','tmp')};
    my $answer = <MYSQL_A>; #answer from mysql
    my ($aref) = @_;
   my $aref;
   my $aref1;
   my $aref_db;
   my $aref_host;
   my $aref_user;
   my @before=();
    my %block = ( '<' => 'Before',
   my $cgi=0;
   my $cmd=0;
   my $cmd="$MySQLaccess::DIFF $before $after |";
    my %color = ( '<' => 'Green',
    my $column=2;
    my $connect = "$MySQLaccess::MYSQL --defaults-file=$MySQLaccess::MYSQL_CNF";
    my $connect = $MySQLaccess::MYSQLDUMP;
    my $create;
    my $curblock = '';
       my ($d1,$d2) = MySQLaccess::DB::Show_Fields($DB);
   my @db=();
   my $dbg_file = "$MySQLaccess::script_log";
    my $db = $record[1];
    my $db_tpl   = MySQLaccess::Wildcards::SQL2Reg($record[1]);
    my $DEBUG = ${$PACK."::DEBUG"} ? ${$PACK."::DEBUG"} : $MySQLaccess::DEBUG ;
    my $delim;
    my $delim = <MYSQL_A>; # read header
    my ($dev, $ino, $mode, $nlink,
   my @diffs =();
    my @diffs = @{$aref};
    my $end   = ";\n";
    my ($error) = @_;
#    my ($error) = @_;
    my ($expr) = @_;
    my $expr_o = $expr;
	my ($field,$type,$null,$key,$default,$extra) = split(' ',$line);
    my ($fname) = @_;
    my ($from,$to,$force) = @_;
    my $f = $w;
    my ($group, $item, $value);
       my ($h1,$h2) = MySQLaccess::DB::Show_Fields($HOST);
    my @headers = ();
   my @host=();
  my ($host,$db,$aref) = @_;
    my ($HOST,$DB,$USER);
  my ($host,$db,$user,$aref) = @_;
    my $host_ip   = Name2IP($host);
    my $host = $localhost;
    my $host_name = IP2Name($host);
    my $host = $record[0];
   # my $host = $record[0];
    my ($host_tpl) = @_;
    my ($host,$tpl) = @_;
    my $host_tpl = MySQLaccess::Wildcards::SQL2Reg($record[0]);
  my ($host,$user,$aref) = @_;
    my ($host,$user,$db,$a) = @_;
    my ($host,$user,$db,$refhash) = @_;
  my ($_host_,$_user_,$encpw_);
    my $i=0;
    my ($ip) = @_;
    my $ip = "$a.$b.$c.$d";
    my $ip_o = $ip;
    my $isit = 0;
    my @known_tables=();
    my @known_tables  = Show_Tables();    
    my ($level,$mesg) = @_;
    my $line;
         my $line1="";
      my $line1="";
         my $line1="<tr>";
         my $line2="";
      my $line2="";
      my @lines = split(/\n/,$message);
    my $match=0;
    my $match = 0;
      my $message = $MESSAGES{$error};
      my $message = $MESSAGES{$note};
      my $message = $MESSAGES{$warning};
    my @messages = @{$aref};
   my $msg1= "Don't forget to do an 'mysqladmin reload' before these\n"
   my $msg2= "A backup-version of your original grant-rules are saved in the\n"
   my $msg = "The grant-rules are copied from the grant-tables to\n"
   my $msg = "The grant-rules have been copied from the temporary tables\n"
   my $msg = "The old grant-rules have been copied back from the backup tables\n"
    my $mysqldump = $connect;
    my ($name) = @_;
    my ($name,$aliases,$addrtype,$length,@addrs) = gethostbyaddr($ip, AF_INET);
    my ($_name,$aliases,$addrtype,$length,@addrs) = gethostbyname($name);
    my ($name,$pass,$uid,$gid,$quota,$comment,$gcos,$dir,$shell) = getpwuid $<;
    my $nerror;
    my $nerror= 0;
    my ($pack,$file,$line,$subname,$hasargs,$wantarray) = caller(1);
    my ($PACK)  = split('::',$subname); 
    my $passwd   = $record[2];
    my $password;
    my ($password,$host,$user,$encpw) = @_;
    my $pid;
    my @privlist=();
    my ($prompt) = @_;
    my $query="";
    my $query = "";
    my $query;
    my $query = "show fields from $table;select 'ok';\n";
    my $query = "show tables;select 'ok';\n";
    my $query  = Sort_fields($start, $end, '', @order);
  my @record = ();
  my $record;
    my @record=split(/\t/,$record);
   # my @record=split(/\t/,$record);
  my ($refrecord,$refgrant);
    my @res=();
  my $res = '';
    my $right;
    my %right = ();
    my $rows = int(@MySQLaccess::Grant::Privileges/2);  #round up
      my $rule = (defined($MESSAGES{$MySQLaccess::Grant::Rules{$field}}) ? $MESSAGES{$MySQLaccess::Grant::Rules{$field}} : $MySQLaccess::Grant::Rules{$field});
  my $rule_found=0;
    my ($sec,$min,$hour) = localtime();
    my $skip;
    my %skip = ('host' => [0,1]
    my $skip=<MYSQL_A>; 
    my $skip = <MYSQL_A>; # read 'ok'
    my $skip = <MYSQL_A>;  #skip header
    my $skip = <MYSQL_A>; # skip result 'ok'
                      mysql     => { },
#  mysqlaccess:                                              #
                   $MySQLaccess::ACCESS_D_BCK => $MySQLaccess::ACCESS_D,
                   $MySQLaccess::ACCESS_D => $MySQLaccess::ACCESS_D_BCK,
                   $MySQLaccess::ACCESS_D => $MySQLaccess::ACCESS_D_TMP,
                   $MySQLaccess::ACCESS_D_TMP => $MySQLaccess::ACCESS_D,
                   $MySQLaccess::ACCESS_H_BCK => $MySQLaccess::ACCESS_H,
                   $MySQLaccess::ACCESS_H => $MySQLaccess::ACCESS_H_BCK,
                   $MySQLaccess::ACCESS_H => $MySQLaccess::ACCESS_H_TMP,
                   $MySQLaccess::ACCESS_H_TMP => $MySQLaccess::ACCESS_H,
                   $MySQLaccess::ACCESS_U_BCK => $MySQLaccess::ACCESS_U,
                   $MySQLaccess::ACCESS_U => $MySQLaccess::ACCESS_U_BCK,
  - mysqlaccess could also notice if all tables are empty. This means
   MySQLaccess::DB::CloseConnection();
#   MySQLaccess::DB::CloseConnection();
MySQLaccess::DB::CloseConnection();
                           MySQLaccess::DB::Sort_table($USER, 'ucase_host', 'user');
                           MySQLaccess::DB::Sort_table($USER, 'ucase_host', 'user', 'password'):
  MySQLaccess::Debug::Print(1, "");
    MySQLaccess::Debug::Print(1,"BackupGrantTables():");
    MySQLaccess::Debug::Print(1,"CommitGrantTables():");
    MySQLaccess::Debug::Print(1,"CreateTable($table):");
   MySQLaccess::Debug::Print(1, "Debug Get_All_hosts:");
   MySQLaccess::Debug::Print(1,"Debug Get_All_users:");
  MySQLaccess::Debug::Print(1,"done for ($host,$user,$db)");
       MySQLaccess::Debug::Print(1,"Finding fields in ACL files:");
       MySQLaccess::Debug::Print(1,"Finding fields in tmp-ACL files:");
  MySQLaccess::Debug::Print(1, "for ($host,$user,$db):");  
  MySQLaccess::Debug::Print(1, "Get_grant_from_host()");
  MySQLaccess::Debug::Print(1, "(host=$host,user=$user)");
  MySQLaccess::Debug::Print(1, "(host=$host,user=$user,db=$db)");
    MySQLaccess::Debug::Print(1, "($host) =?= ($tpl)");
    MySQLaccess::Debug::Print(1,"LoadTmpTables():");
    MySQLaccess::Debug::Print(1,"MySQLaccess::DB::CopyTable($from,$to)");
  MySQLaccess::Debug::Print(1, "Reading configuration file...");
   MySQLaccess::Debug::Print(1, "#Reading db-table...");
   MySQLaccess::Debug::Print(1, "#Reading host-table...");
       MySQLaccess::Debug::Print(1, "Reading sorted tables:");
       MySQLaccess::Debug::Print(1, "Reading sorted temp-tables:");
  MySQLaccess::Debug::Print(1, "returning @record");
    MySQLaccess::Debug::Print(1,"RollbackGrantTables():");
    MySQLaccess::Debug::Print(1,"Show_Fields($table):");
    MySQLaccess::Debug::Print(1,"Show_Tables():");
    MySQLaccess::Debug::Print(1,"Sort_table():");
   MySQLaccess::Debug::Print(1," template=[$template]");
    MySQLaccess::Debug::Print(1,"Validate_Password($password,$host,$user,$encpw)");
       MySQLaccess::Debug::Print(2, "added");
       MySQLaccess::Debug::Print(2,"added");
      MySQLaccess::Debug::Print(2," A> $line");
    MySQLaccess::Debug::Print(2,"Answer: $answer\n");
          MySQLaccess::Debug::Print(2,"Answer contain error [$nerror]");
         MySQLaccess::Debug::Print(2,"Answer contain error [$nerror]");
    MySQLaccess::Debug::Print(2, "Array:");
       MySQLaccess::Debug::Print(2,"Backup table $tbl -> $tables{$tbl}.");
	MySQLaccess::Debug::Print(2,"Checking for localhost");
    MySQLaccess::Debug::Print(2,"Connecting to: $connect");
    MySQLaccess::Debug::Print(2,"> $db ");
    MySQLaccess::Debug::Print(2, "Debug Default_Access_Rights():");
    MySQLaccess::Debug::Print(2,"$expr_o --> $expr");
  MySQLaccess::Debug::Print(2, "FOUND!!");
    MySQLaccess::Debug::Print(2,"Hash:");
    MySQLaccess::Debug::Print(2, "> $host ");
    MySQLaccess::Debug::Print(2, "($host_name,$host_ip) =?= ($tpl): $ncount");
    MySQLaccess::Debug::Print(2, "host: $record");
    MySQLaccess::Debug::Print(2, ">> Host-table doesn't have to be processed!!");
       MySQLaccess::Debug::Print(2,"Loading data $tables{$tbl} -> $tbl.");
       MySQLaccess::Debug::Print(2,"Loading table $tbl -> $tables{$tbl}.");
    MySQLaccess::Debug::Print(2,"Making backup of original grant-tables...");
    MySQLaccess::Debug::Print(2, "name=$host_name ; ip=$host_ip");
     MySQLaccess::Debug::Print(2, "NO record found in the user-table!!");
     MySQLaccess::Debug::Print(2, "NO restrictions found in the host-table!!");
    MySQLaccess::Debug::Print(2, "NO rule found in db-table => no access granted!!");
    MySQLaccess::Debug::Print(2,"OpenConnection:");
    MySQLaccess::Debug::Print(2,"PID of open pipe: $pid");
    MySQLaccess::Debug::Print(2,"Query: $query");
    MySQLaccess::Debug::Print(2, "Read db: $record");
   MySQLaccess::Debug::Print(2,"#Reading db-table...");
   MySQLaccess::Debug::Print(2,"#Reading user-table...");
     MySQLaccess::Debug::Print(2, "<=?=> $record");
    MySQLaccess::Debug::Print(2,"Result of sorted table $tbl:");
  MySQLaccess::Debug::Print(2, "Rights after parsing db-table..:");
  MySQLaccess::Debug::Print(2, "Rights after parsing host-table..:");
  MySQLaccess::Debug::Print(2, "Rights after parsing user-table..:");
       MySQLaccess::Debug::Print(2,"Rollback table $tbl -> $tables{$tbl}.");
	   MySQLaccess::Debug::Print(2,"$script called with 2 arguments:");
	   MySQLaccess::Debug::Print(2,"$script called with 3 arguments:");
     MySQLaccess::Debug::Print(2, "Selected record=@record");
       MySQLaccess::Debug::Print(2, "skipped");
       MySQLaccess::Debug::Print(2,"skipped");
    MySQLaccess::Debug::Print(2,"Sorting table $tbl by `@order'");
    MySQLaccess::Debug::Print(2,"SQL: $query");
    MySQLaccess::Debug::Print(2,"SQL = $sql");
	MySQLaccess::Debug::Print(2," $table>: $line");
    MySQLaccess::Debug::Print(2,"($tpl,$string) --> $match");
    MySQLaccess::Debug::Print(2,"> $user ");
	   MySQLaccess::Debug::Print(3," ==> added column[$i]: $field ($Struct{$field})");
	MySQLaccess::Debug::Print(3," ==> added table: $line");
    MySQLaccess::Debug::Print(3," A> $delim");
           MySQLaccess::Debug::Print(3," A> $line");
       { MySQLaccess::Debug::Print(3," A> $line"); }
      MySQLaccess::Debug::Print(3,"because ($MySQLaccess::host_name EQ $localhost) AND ($MySQLaccess::host_ip EQ $local_ip)");
       MySQLaccess::Debug::Print(3,"check answer for error $ACCESS_ERR{$nerror}");
      MySQLaccess::Debug::Print(3,"check answer for error $ACCESS_ERR{$nerror}");
  MySQLaccess::Debug::Print(3,"db  =$db");
    MySQLaccess::Debug::Print(3, "=>db_tpl   : read=$record[1] -> $db_tpl");
    MySQLaccess::Debug::Print(3, "=>db_tpl   : $record[1] -> $db_tpl");
  MySQLaccess::Debug::Print(3,"host=$host, hostname=$host_name, host-ip =$host_ip");
    MySQLaccess::Debug::Print(3,"hostname=$name => IP=$ip");
    MySQLaccess::Debug::Print(3, "=>host_tpl : read=$record[0] -> converted=$host_tpl");
    MySQLaccess::Debug::Print(3, "=>host_tpl : $record[0] -> $host_tpl");
    MySQLaccess::Debug::Print(3,"IP=$ip_o => hostname=$name");
       MySQLaccess::Debug::Print(3,"'$ip' is not an ip-number, returning IP=$ip");
    MySQLaccess::Debug::Print(3,"localhost = $host");
      MySQLaccess::Debug::Print(3," 'localhost' =?= $host_tpl  -> $isit");
MySQLaccess::Debug::Print(3, "localhost name=$localhost, ip=$local_ip");
       MySQLaccess::Debug::Print(3,"'$name' contains SQL-wildcards, returning name=$name");
    MySQLaccess::Debug::Print(3, "=>password : read=$record[2] -> $passwd");
    MySQLaccess::Debug::Print(3, "Record= $record");
       MySQLaccess::Debug::Print(3,"Setting package variable \$localhost=$MySQLaccess::Host::localhost");
           MySQLaccess::Debug::Print(3," ==> skipped column[$i], value=[$field]");
	MySQLaccess::Debug::Print(3, " <split: $field - $type - $null - $key - $default - $extra");
    MySQLaccess::Debug::Print(3, "=>user_tpl : read=$record[1] -> $user_tpl");
    MySQLaccess::Debug::Print(3, "=>user_tpl : read=$record[2] -> $user_tpl");
  MySQLaccess::Debug::Print(3,"user=$user");
    MySQLaccess::Debug::Print(4,"addrtype=$addrtype - length=$length");
    MySQLaccess::Debug::Print(4,"aliases=$aliases");
      MySQLaccess::Debug::Print(4,"because ($MySQLaccess::host_name != $localhost) AND ($MySQLaccess::host_ip != $local_ip)");
    MySQLaccess::Debug::Print(4,"IP=$ip split up => $1.$2.$3.$4");
    MySQLaccess::Debug::Print(4,"IP packed -> >>$ip<<\n");
      MySQLaccess::Debug::Print(4,"Not checking for localhost");
    %MySQLaccess::Grant::Access       = %{Default_Access_Rights()};
       $MySQLaccess::Grant::Access{$field} = ($MySQLaccess::Grant::Access{$field} and $_access_{$field});
    $MySQLaccess::Grant::Access{$field} = ($MySQLaccess::Grant::Access{$field} or $_access_{$field});
       %MySQLaccess::Grant::D = %{$d1}; @MySQLaccess::Grant::D = @{$d2};
       %MySQLaccess::Grant::D_tmp = %{$d1}; @MySQLaccess::Grant::D_tmp = @{$d2};
    @MySQLaccess::Grant::Errors       = ();
    $MySQLaccess::Grant::full_access=0;
    $MySQLaccess::Grant::full_access   = 1;
       %MySQLaccess::Grant::H = %{$h1}; @MySQLaccess::Grant::H = @{$h2};
       %MySQLaccess::Grant::H_tmp = %{$h1}; @MySQLaccess::Grant::H_tmp = @{$h2};
         MySQLaccess::Grant::Initialize();
      MySQLaccess::Grant::Initialize();
         MySQLaccess::Grant::Initialize('tmp');
    @MySQLaccess::Grant::Notes        = ();
       @MySQLaccess::Grant::Privileges=@{Make_Privlist()};
#       @MySQLaccess::Grant::Privileges_tmp=@{Make_Privlist()};
    $MySQLaccess::Grant::process_host_table = 0;
      $MySQLaccess::Grant::process_host_table = ($record[0] eq '');
    $MySQLaccess::Grant::Rules{'db'}   = 'no_rule_found';
      $MySQLaccess::Grant::Rules{'db'} = $record;
    $MySQLaccess::Grant::Rules{'host'} = 'no_equiv_host';
      $MySQLaccess::Grant::Rules{'host'} = $record;
    $MySQLaccess::Grant::Rules{'user'} = 'no_rule_found';
        $MySQLaccess::Grant::Rules{'user'} = $record;
       @MySQLaccess::Grant::sorted_db_table  = MySQLaccess::DB::Sort_table($DB, 'ucase_host', 'user', 'db');
       @MySQLaccess::Grant::sorted_db_tmp_table  = MySQLaccess::DB::Sort_table($DB, 'ucase_host', 'user', 'db');
       @MySQLaccess::Grant::sorted_host_table= MySQLaccess::DB::Sort_table($HOST, 'ucase_host', 'db');
       @MySQLaccess::Grant::sorted_host_tmp_table= MySQLaccess::DB::Sort_table($HOST, 'ucase_host', 'db');
       @MySQLaccess::Grant::sorted_user_table= defined($MySQLaccess::Param{'password'}) ?
       @MySQLaccess::Grant::sorted_user_tmp_table= defined($MySQLaccess::Param{'password'}) ?
       %MySQLaccess::Grant::U_tmp = %{$u1}; @MySQLaccess::Grant::U_tmp = @{$u2};
       %MySQLaccess::Grant::U = %{$u1}; @MySQLaccess::Grant::U = @{$u2};
    @MySQLaccess::Grant::Warnings     = ();
$MySQLaccess::Host::localhost = MySQLaccess::Host::LocalHost();
       $MySQLaccess::Host::localhost = Sys::Hostname::hostname();
$MySQLaccess::Host::local_ip  = MySQLaccess::Host::Name2IP($localhost);
$MySQLaccess::Host::SERVER = $Param{'old_server'} ? '3.20' : $SERVER;
       $MySQLaccess::Report::headers=1;
      MySQLaccess::Report::Print_Access_rights($host,$user,$db,\%Access);
   MySQLaccess::Report::Print_Diff_ACL($aref);
   MySQLaccess::Report::Print_Edit();
      MySQLaccess::Report::Print_Error_Access($nerror);
    MySQLaccess::Report::Print_Error_Access($nerror);
       MySQLaccess::Report::Print_Error_Messages() ;
   MySQLaccess::Report::Print_Error_Messages() ;
   MySQLaccess::Report::Print_Footer();
#   MySQLaccess::Report::Print_Footer();
MySQLaccess::Report::Print_Footer();
MySQLaccess::Report::Print_Header();
   MySQLaccess::Report::Print_HowTo();
   MySQLaccess::Report::Print_Message([$msg]);
   MySQLaccess::Report::Print_Message([$msg,$msg1]);
   MySQLaccess::Report::Print_Message([$msg,$msg1,$msg2]);
   MySQLaccess::Report::Print_Plans();
   MySQLaccess::Report::Print_Relnotes();
   MySQLaccess::Report::Print_Usage() if $print_usage;
   MySQLaccess::Report::Print_Version();
       $MySQLaccess::Report::separator = $MySQLaccess::CGI ? "<hr>" : "-"x80;
   mysqlaccess (Version $VERSION)
             MySQLaccess::Wildcards::MatchTemplate($tpl,$host_ip));
         MySQLaccess::Wildcards::MatchTemplate($user_tpl,$user)
        $MYSQLADMIN= 'http://foobar.com/MySQLadmin';
	%MYSQL_CNF = (client    => { },
                         $MYSQL_CNF{$group}{$item} = $value;
                         $MYSQL_CNF{'mysqldump'}{$item} = $value;
      $MYSQL_CNF{'mysqldump'}{'password'} = $Param{'spassword'};
   $MYSQL_CNF{'mysqldump'}{'user'} = $Param{'superuser'};
                         $MYSQL_CNF{'mysql'}{$item} = $value;
      $MYSQL_CNF{'mysql'}{'password'} = $Param{'spassword'};
   $MYSQL_CNF{'mysql'}{'user'} = $Param{'superuser'};
	$MYSQL_CNF = tmpnam();
                      mysqldump => { },
    $mysqldump =~ s/ \$TABLE / $tbl /;
        $MYSQLDUMP = '/usr/bin/mysqldump';
	$MYSQL_OPT = ' --batch --unbuffered';
    my $sql = "select host,user,password from user having "
	$MYSQL     = '/usr/bin/mysql';    # path to mysql executable
  my ($start, $end, $sofar, $this, @rest) = (@_);
    my $start = "SELECT *,UCASE(host) as ucase_host FROM $tbl ";
    my $string = "";
    my @Struct = ();
    my %Struct = ();
    my ($table) = @_;
    my @table=();
    my ($table,$force) = @_;
    my @tables;
    my @Tables = ();
    my %tables = ( $MySQLaccess::ACCESS_U_BCK => $MySQLaccess::ACCESS_U,
    my %tables = ( $MySQLaccess::ACCESS_U => $MySQLaccess::ACCESS_U_BCK,
    my %tables = ( $MySQLaccess::ACCESS_U => $MySQLaccess::ACCESS_U_TMP,
    my %tables = ( $MySQLaccess::ACCESS_U_TMP => $MySQLaccess::ACCESS_U,
    my $tbl;
    my ($tbl, @order) = @_;
   my ($template,$tmp) = @_;
    my ($tmp) = @_;
    my $tmp;
    my ($tpl,$string) = @_;
       my ($u1,$u2) = MySQLaccess::DB::Show_Fields($USER);
   my @user=();
    my $user = $record[1];
    my $user_tpl = $record[1]; #user field isn't pattern-matched!!
    my $user_tpl = $record[2]; #user field isn't pattern matched!!
    my $valid=0;
    * "my" variable $name masks earlier declaration in same scope,
  my @where = ("((FIELD not like '\\%') AND (FIELD <> ''))",
              . ".\n";
     ."\n"
   $nerror=MySQLaccess::DB::LoadTmpTables();
$NEW_DB   = 'ANY_NEW_DB'  ;
  - new option:
  - new options:
  -new options:
$NEW_USER = 'ANY_NEW_USER';
             next if /^[#;]/;
            N, instead of the faulty Y in a previous version.
   N    N    N    N    N    N    N    N    N    N   any_other_host,nobody,Foo
   N    N    N    N    N    N    N    N    N    N   %,nobody,Foo  
#  (no aliases yet!!)
# no caching on STDOUT
 ,'no_equiv_host' 
   => "No matching rule"
#  no notes,warnings,...
#  Normaly nothing should be changed beneeth this line
 ,'no_rule_found'
           not be searched for in Name2IP and IP2Name.
            note: make sure you escape your wildcards, so they don't get
#  NOTE: really should do two separate merges for each
# Notes and warnings
      Note that when default-values are given, these can't get overriden
    # NOTE: this clause WILL NOT work on 3.21, because of the
 ,'not_found_diff'
 ,'not_found_mysql'
 ,'not_found_mysqldump'
    # not owned by me or root
   => "Not processed: host-field is not empty in db-table."
    *      Now we check if the right version of the mysql-client is used,
#  of all relevant grant-fields, with their index in the record,
     ."of `$MySQLaccess::script'."
# of the License.
           older version (--unbuffered, since 3.0.18)
      --old_server     connect to old MySQL-server (before v3.21) which 
    * --old_server: mysqlaccess will now use a full where clause when
                  ,"old_server"    => \$Param{'old_server'}
  >>  one of my tables.  Probably the script should catch that and not
  >>  only printing things that it knows with 100% certainty. <psmith)
# on the template.
#  Open an connection to the mysql-db
    # open connection (not using /bin/sh -c)
    #open(CREATE,"$mysqldump");
   open(DEBUG,"> $dbg_file") or warn "Could not open outputfile $dbg_file for debugging-info\n";
   open(DIFF,"$cmd");
_OPTIONS
$OPTIONS = <<_OPTIONS;
           options. They made the processing of the commandline too painful 
    Option values for --password -p -spassword -P  may now be omitted from
# or a blanc form in CGI-mode 
     or !defined($Param{'db'}) 
     or !defined($Param{'host'})
     or !defined($Param{'user'}) 
    # order of 'ORDER BY' and 'HAVING'
      or die "sysopen $MYSQL_CNF: $!";
                                          or  if the host isn't emty in user
           or  MySQLaccess::Wildcards::MatchTemplate($host_tpl,$host_ip) )
           or MySQLaccess::Wildcards::MatchTemplate($host_tpl,$host_ip) )
           or  MySQLaccess::Wildcards::MatchTemplate($host_tpl,$host_name)
           or MySQLaccess::Wildcards::MatchTemplate($host_tpl,$host_name)
            other cleanups.  I believe the access calculation is 100% correct.
    # other options??
      other privileges. (reported by monty)
package MySQLaccess;
package MySQLaccess::DB;
package MySQLaccess::Debug;
package MySQLaccess::Grant;
package MySQLaccess::Host;
package MySQLaccess::Report;
package MySQLaccess::Wildcards;
    * packages
	$Param{'brief'}     = $Q->param('brief')     || $Param{'brief'}; 
	$Param{'commit'}    = $Q->param('commit'); 
	$Param{'copy'}      = $Q->param('copy'); 
           $Param{'db'}   = $ARGV[1] || $Param{'db'}; 
	   $Param{'db'}   = $ARGV[2] || $Param{'db'};
	$Param{'db'}   = $Q->param('db')   || $Q->param('d') || $Param{'db'};
	$Param{'debug'}     = $Q->param('debug')     || $Param{'debug'};
	$Param{'edit'}      = $Q->param('edit'); 
	$Param{'help'} = $Q->param('help') ;
	   $Param{'host'} = $ARGV[0] || $Param{'host'};
	   $Param{'host'} = $Param{'host'} || 'localhost'; 
	$Param{'host'} = $Q->param('host') || $Q->param('h') || $Param{'host'};
	$Param{'howto'}     = $Q->param('howto'); 
	$Param{'old_server'}= $Q->param('old_server')|| $Param{'old_server'};
           $Param{'password'} = PromptPass(
	$Param{'password'}  = $Q->param('password')  || $Q->param('p') || $Param{'password'};
	$Param{'plan'}      = $Q->param('plan');
	$Param{'preview'}   = $Q->param('preview'); 
	$Param{'relnotes'}  = $Q->param('relnotes');
	$Param{'rhost'}     = $Q->param('rhost')     || $Q->param('H') || $Param{'rhost'};
	$Param{'rollback'}  = $Q->param('rollback'); 
      $Param{'spassword'} =
	$Param{'spassword'} = $Q->param('spassword') || $Q->param('P') || $Param{'spassword'};
	$Param{'superuser'} = $Q->param('superuser') || $Q->param('U') || $Param{'superuser'};
	$Param{'table'}     = $Q->param('table')     || $Param{'table'}; 
	   $Param{'user'} = $ARGV[0] || $Param{'user'};
	   $Param{'user'} = $ARGV[1] || $Param{'user'};
	$Param{'user'} = $Q->param('user') || $Q->param('u') || $Param{'user'};
	$Param{'version'}   = $Q->param('version') ? $Q->param('version') : $Q->param('v');
    $password;
	                        "Password for MySQL user $Param{'user'}: ");
	          ,"password|p:s"  => \$Param{'password'}
 ,'password_required' 
             --password  : validate password for user 
                                         #path to mysqldump executable
    ## path to mysqldump executable
    # path to mysql executable
# perform some checks
    $pid=IPC::Open3::open3(\*DONTCARE,\*CREATE,"",split /\s+/,$mysqldump);
    $pid=IPC::Open3::open3(\*MYSQL_Q,\*MYSQL_A,"",split /\s+/,$connect);
	          ,"plan"          => \$Param{'plan'}
            --plan      : print suggestions/ideas for future releases
  --plan               print suggestions/ideas for future releases
      play with them.
  -p, --password=#     validate password for user
        $PREFIX='      ';
        $PREFIX='    ';
      $PREFIX='BEWARE';
      $PREFIX='ERROR';
      $PREFIX='NOTE';
    * preview changes in privileges after changing grant-rules,
                  ,"preview"       => \$Param{'preview'}
    * --preview : preview changes in privileges after changing
# preview result of changes in the 
  --preview            show differences in privileges after making
    # print access-information
    print "Access-rights\n";
   #    print "added\n" if ($DEBUG>2);
              print $block{$curblock},":\n";
      print "<b>$PREFIX:</b> $message<br>\n";
    print "<br>\n";
    print "<CENTER>\n"
          print "<center>\n<font color=Red>\n";
          print "</center>\n</font>\n";
#  print CGI-form
      print CNFFILE "[$group]\n";
            print CNFFILE "$item=$MYSQL_CNF{$group}{$item}\n";
            print CNFFILE "$item\n";
      print CNFFILE "\n";
       # print column-headers
    print "content-type: text/html\n\n" 
# Print debugging information on STDERR
    print DEBUG "[$hour:$min:$sec $subname] $mesg\n" if ($DEBUG>=$level);
    print "Differences in access-rights BEFORE and AFTER changes in grant-tables\n";
    print "Differences in access-rights <font color=$color{'<'}>BEFORE</font> "
       # printed once.
print <<EOForm;
          print "ERROR: Could not find MySQL-client '$MySQLaccess::MYSQL'";
    Print_Error_Messages();
    # print errors:
          printf "| %-15s | %s |",$field,$Answer{$a->{$field}}; 
      printf "| %-20s",join(',',$host,$user,$db);
  	  printf " %-2s  ",$Answer{$a->{$field}}; 
      printf " %-5s : '%s'\n",$field,$rule;
    print "<font color=Red>Access-rights</font>\n";
#  print footer info
        Print_Form();
#print $format;
    print "for USER '<font color=Green>$user</font>', from HOST '<font color=Green>$host</font>', to DB '<font color=Green>$db</font>'\n";
    print "for USER '$user', from HOST '$host', to DB '$db'\n";
  	  printf "<td align=center>%-2s</td>",$Answer{$a->{$field}}; 
      printf "<td><b>%-20s</b></td>",join(', ',$host,$user,$db);
          printf " <td width=35%><b>%-15s</b></td><td width=10%>%s</td>\n",$field,$Answer{$a->{$field}}; 
      printf "<tr><th>%-5s</th><td>'%s'</td></tr>\n",$field,$rule;
   print $ha join("\n",@after);
   print $hb join("\n",@before);
#  print header info
   # print "> $host " if ($DEBUG>2);
    print "<HR>\n"
    print "<HR>\n";
         print "$line1\n";
      print "$line1\n";
         print "$line1</tr>\n";
    print "$line1</tr>\n";
         print "$line2\n";
      print "$line2\n";
           #print "$line\n";
       print $MESSAGES{$error};
    print $MESSAGES{$error};
       print $msg;
       print $MySQLaccess::CGI ? "<br>\n" : "\n";
       print $MySQLaccess::HOWTO;
       print $MySQLaccess::INFO;
    print $MySQLaccess::OPTIONS;
       print $MySQLaccess::RELEASE;
    print "$MySQLaccess::script Version $MySQLaccess::VERSION\n"
       print $MySQLaccess::TODO;
    print MYSQL_Q "$query";
    print MYSQL_Q "$query\n";
    print MYSQL_Q "select 'ok';\n";
    print MYSQL_Q "$sql";
       print "\n";
      print "\n";
    print      "\n";
    print "---------------------------------------------------------------------\n";
    print "\n"
    print "\n";
#    print "---------------------------------------------------------------------\n";
        #print "\n" if $DEBUG;
       print "Note: Editing the temporary tables is NOT supported in CMD-line mode!\n";
    # print notes:
        Print_Options();
        print "$PREFIX:\t $line\n"; 
       print "</PRE>\n"; 
       print "<PRE>\n";
       print "<PRE>\n"; 
#       print "Privileges:\n";
    print $prompt;
   #print "#Reading user-table...\n" if ($DEBUG>1);
   #    print "skipped\n" if ($DEBUG>2);
#  print some information on STDOUT
#    print STDERR "A>",$answer;
#    print STDERR $answer;
#    print STDERR "BackupGrantTables:\n";
    print STDERR "CommitGrantTables()\n";
#    print STDERR "CopyTable($from,$to)\n";
#    print STDERR "CreateTable done\n";
#    print STDERR "CreateTable($table)\n";
#    print STDERR $delim;
#print STDERR ">",$line;
#    print STDERR "LoadTmpTables:\n";
#       print STDERR "->$nerror?";
#    print STDERR $query;
#print STDERR $query;
#    print STDERR "RollbackGrantTables:\n";
#       print STDERR "Structure copied\n";
       print STDERR "$tbl -> $tables{$tbl}\n";
#       print STDERR "$tbl -> $tables{$tbl}\n";
#          print STDERR "Yes!";
    print "<table border width=100%>\n";
    print      "</table><br>";
    print "</table>\n";
    print "</table>\n";  #close table in brief-output
    # print table of access-rights
         print "<table width=100% border>\n";
    Print_Taskbar();
#  print taskbar on STDOUT
    print "</th>";
    print "<th colspan=11>";
    print "<th colspan=5>";
#  print the access-rights on STDOUT
#  print the diff. in the grants before and after
    print "The following rules are used:\n";
    # print the rules used
      print "<tr>";
           print "<tr>$line1</tr>\n";
      print "</tr>\n";
    print "</tr>\n";
    print "<tr>\n";
    print "<tr>\n";    
    print      "</tr>\n</table><br>";
              print "<tr><td><b>$block{$curblock}<b></td></tr>\n";
    print "<tr><th colspan=2>The following rules are used:</th></tr>\n";
    print      "\t+-----------------+---+\t+-----------------+---+";
    print      "\t+-----------------+---+\t+-----------------+---+\n";
   $print_usage=0;
$print_usage=1;
    # print "+++USING FULL WHERE CLAUSE+++\n";
    # print warnings:
    * Privileges of the user-table were not AND-ed properly with the
# privileges to read the access-db
#  priviliges currently defined in the grant-tables.
	# prompt for user password if requested
           PromptPass("Password for MySQL superuser $Param{'superuser'}: ");
#  prompt tty for a password
  -P, --spassword=#    password for superuser
 ,'public_database' 
         push(@after,MySQLaccess::Report::Raw_Report($host,$user,$db,\%Access));
         push(@before,MySQLaccess::Report::Raw_Report($host,$user,$db,\%Access));
       push(@db,$db);
      push(@db,$template);
         push(@headers,substr($field,0,4));
      push(@headers,substr($field,0,4));
   #push(@host,"any_other_host");
       push(@host,$host);
   #    push(@host,$host);
      push(@host,$template);
   push(@MySQLaccess::Grant::Error,'db_required') unless defined($Param{'db'});
   push(@MySQLaccess::Grant::Error,'host_required') unless defined($Param{'host'});
push(@MySQLaccess::Grant::Error,'not_found_diff')      if !(-x $DIFF);
push(@MySQLaccess::Grant::Error,'not_found_mysqldump') if !(-x $MYSQLDUMP);
push(@MySQLaccess::Grant::Error,'not_found_mysql')     if !(-x $MYSQL);
       push(@MySQLaccess::Grant::Error,'use_old_server');
   push(@MySQLaccess::Grant::Error,'user_required') unless defined($Param{'user'});
    push(@MySQLaccess::Report::Errors,"Can't create temporary file: $!");
           push(@res,$line);
	   push(@Struct,$field); #array
	push(@Tables,$line); #array
   push(@user,"$MySQLaccess::NEW_USER");
      push(@user,$template);
       push(@user,$user);
   #push(@user,'');               #without_suplying_a_username
     push(@Warnings,'anonymous_access');
     push(@Warnings,'minimum_priv');
   #push(@Warnings,'minimum_priv');
 	$Q = new CGI;
<!-- Quering -->
    $query .= "$create\n";
    $query .= "DELETE FROM $to;";
       $query = "DROP TABLE $table;";
    $query .= "INSERT INTO $to SELECT * FROM $from;";
    $query .= "select 'ok';";
    $query    .= "select 'ok';\n";
    $query .= "SELECT 'ok';\n";
#  questions to MYSQL_Q
# Read configuration-file
# Read in all parameters
    # reading production grant-tables or temporary tables?
# Read MySQL ACL-files
     @record=();
    @record=split(/\t/,$record);
    ## recreate temporary table
                  '>' => 'Red',
    *      redefined the option --brief, which now gives a single-line 
  ($refrecord,$refgrant)=Get_grant_from_db($host,$db,$user,$aref_db); #set process_host_table
     ($refrecord,$refgrant)=Get_grant_from_host($host,$db,$aref_host);
  ($refrecord,$refgrant)    = Get_grant_from_user($host,$user,$aref_user);
   $reg_expr = MySQLaccess::Wildcards::SQL2Reg("$reg_expr");
      #$reg_expr = MySQLaccess::Wildcards::Wild2Reg($template);
   $reg_expr = $template;
      $reg_expr =~ tr/*?/%_/;
_RELEASE
Release Notes:
$RELEASE = <<'_RELEASE';
            --relnotes  : display release-notes
	          ,"relnotes"      => \$Param{'relnotes'}
  --relnotes           print release-notes
# reload grant-tables 
#  (Re)load temporary tables with entries of ACL-tables
# reload temporay grant-tables 
  #      (Remove all which is not "Y" in both)
#      (Remove all which is not "Y" in both)
    # remove columnheaders from output
    *      removed options --all_users,--all_dbs,--all_hosts, which 
    # remove trailing \n from each returned record
    # replace mysql-wildcards by reg-wildcards
# Report access-rights for each
     ->report access-rights of user nobody from all machines to db Foo,
     ->report rights of user root logged in at machine foobar to db Foo
     ->report rights of user root logged on at the local host in db mysql
   report the access-privileges for a USER from a HOST to a DB
#  report the access_rights for the tuple ($host,$user,$db).
	require CGI;
     require "/etc/$script_conf";
     require "./$script_conf";
     require "/usr/$script_conf";
    @res = grep(!/^\Q$delim\E$/, @res);
    @res = grep { /(.*)\t.*$/; $_ = $1; } @res;
    $res .= Sort_fields($start, $end, "$sofar$f", @rest);
# restore previous grant-rules
  # retrieve information on DB
  # retrieve information on HOST
  # retrieve information on USER
                    retrieving information from the MySQL-server.  If
       return 0;
      return 0;
    return 0;
    return 0; 
        return 1;
    return 1;
        return 1  unless $mode & 01000;  # but sticky bit ok
    return ([],\%Access_host);
#  return all db the grant-tables are working on,
#  return all entries in the given table,
#  return all hosts the grant-tables are working on,
#  return all users the grant-tables are working on,
#  return (a reference to) a hash which holds all default
#  return (a reference to) a hash which holds the names
#  return (a reference to) an array which holds all 
        return CheckUnsafeDir($fname);
   return ($cmd,$cgi);
      return \@db;
   return \@db;
   return \@diffs;
    return $expr;
      return \@host;
    return $host;
   return \@host;
       return $ip;
    return ($ip || $name);
      return $isit;
    return $match;
  return %MySQLaccess::Grant::Access;
       return $name; 
    return ($name || $ip);
    #return ($name || undef);
          return $nerror; 
         return $nerror; 
       return $nerror if ($nerror=CopyTable($tables{$tbl},$tbl));
       return $nerror if ($nerror=CopyTable($tbl,$tables{$tbl},'force'));
       return $nerror if ($nerror=CreateTable($to,$force)); 
    return \@privlist;
  return (\@record,\%Access_db);
  return (\@record,\%Access_host); #matching record in host-table
  return (\@record,\%Access_user); #matching record in user-table
    return @res;
  return ($res);
    return \%right;
    return $string;
    return  (\%Struct,\@Struct); 
    return @Tables; 
#  return the IP-number of the host
#  return the Name with the corr. IP-nmbr
    return 'Unknown_table' unless defined($tables{$table});
      return \@user;
   return \@user;
    return $valid;
	          ,"rhost|H=s"     => \$Param{'rhost'}
            --rhost     : name of mysql-server to connect to
	$right{$field}='0' unless (defined($right{$field}));
                  ,'rollback'      => \$Param{'rollback'}
#  Rollback the backup of the grant-tables
    * --rollback: undo the last changes to the grant-tables.
  --rollback           undo the last changes to the grant-tables.
        $rule_found=1;
      $rule_found=1;
    # rules
    * rules for db-table where not calculated and reported correctly.
      $rule =~ s/\t/','/g;
  - running mysqlaccess with "perl -w" gives less warnings...   ;-)
	$script      = $1;
	$script_conf = "$script.conf";
  \$ $script foo.bar nobody Foo 
      script in an ScriptAliased directory, make the configuration file
	$script_log  = $ENV{'HOME'}."/$script.log";
        $script      = 'MySQLAccess' unless $script;
  \$ $script  \\* nobody Foo --brief
  \$ $script root mysql
   select DEBUG;
    #'select_priv',     'create_priv',
          | select_priv     | Y | | drop_priv       | N |
          | select_priv     | Y | | drop_priv       | Y |
   select STDOUT;
  -select the warnings more carefuly.
  Sel  Ins  Upd  Del  Crea Drop Reld Shut Proc File Host,User,DB        
    # separator
    $separator = 0;
	$SERVER    = '3.21';
    # server version 3.21 has a full where clause :-)
        # set DEBUG
  #  setting privileges to db-priv
  #  setting privileges to host-priv
  #  setting privileges to user-priv
            setting xxxx=* is equiv to using option --all_xxxx
# show edit-taskbar
     ."since these are the privileges of the db `\$db'.\n"
           since we might use an option not yet implemented in an
#  single-line output foreach triple,
    $skip=<MYSQL_A>;  # Get ok row (found already ok header)
        $skip = <MYSQL_A>; # skip result 'ok'
       $skip = <MYSQL_A>; # skip result 'ok'
  $sofar .= ' AND ' if $sofar;
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
                  some or more entries in the grant-tables.
#  some special action has to be taken for
   => "Sorry,\n"
	          ,"spassword|P:s" => \$Param{'spassword'}
  - speed: we now open a bidirectional pipe to the mysql-client, and keep 
    $sql .= "select 'ok';\n";
# SQL, WILDCARDS and REGULAR EXPRESSIONS 
             s/^\s+//;
#                       START OF THE PROGRAM                            #
    $start   .= 'ORDER BY ' . join(',', @order) ." HAVING ";
       $start = "SELECT *,UCASE(host) as ucase_host FROM $tbl WHERE ";
	# static information...
	  $string .= $Answer{$a->{$field}} . ","; 
    $string = "$host,$user,$db,";
	   $Struct{$field} = $i; #hash
# sub BackupGrantTables()
sub BackupGrantTables {
# sub CheckUnsafeDir
sub CheckUnsafeDir {
# sub CheckUnsafeFile
sub CheckUnsafeFile {
# sub CloseConnection
sub CloseConnection {
# sub CommitGrantTables()
sub CommitGrantTables {
# sub CopyTable()
sub CopyTable {
sub CreateTable {
# sub CreateTable($table)
# sub Default_Access_Rights():
sub Default_Access_Rights {
# sub Diff_Privileges()
sub Diff_Privileges {
sub Get_Access_Rights {
# sub Get_Access_Rights(host,user,db)
sub Get_All_dbs {
# sub Get_All_db(template): 
sub Get_All_hosts {
# sub Get_All_hosts(template): 
sub Get_All_users {
# sub Get_All_users(template): 
# sub Get_grant_from_db:
sub Get_grant_from_db {
# sub Get_grant_from_host:
sub Get_grant_from_host {
# sub Get_grant_from_user:
sub Get_grant_from_user {
sub GetMode {
# sub Initialize()
sub Initialize {
# sub IP2Name
sub IP2Name {
sub Is_localhost {
# sub LoadTmpTables()
sub LoadTmpTables {
# sub LocalHost
sub LocalHost {
# sub Make_Privlist
sub Make_Privlist {
sub MatchTemplate {
# sub Matrix_Report:
sub Matrix_Report {
# sub MergeConfigFile
sub MergeConfigFile {
# sub MergeConfigFiles
sub MergeConfigFiles {
# sub Name2IP
sub Name2IP {
# sub OpenConnection
sub OpenConnection {
sub Print {
# sub Print_Access_rights:
sub Print_Access_rights {
# sub Print_Diff_ACL:
sub Print_Diff_ACL {
# sub Print_Edit:
sub Print_Edit {
# sub Print_Error_Access:
sub Print_Error_Access {
# sub Print_Error_Messages:
sub Print_Error_Messages {
# sub Print_Footer:
sub Print_Footer {
# sub Print_Form:
sub Print_Form {
# sub Print_Header:
sub Print_Header {
# sub Print_HowTo:
sub Print_HowTo {
# sub Print_Message:
sub Print_Message {
# sub Print_Options:
sub Print_Options {
# sub Print_Plans:
sub Print_Plans {
# sub Print_Relnotes:
sub Print_Relnotes {
# sub Print_Taskbar:
sub Print_Taskbar {
# sub Print_Usage:
sub Print_Usage {
# sub Print_Version:
sub Print_Version {
# sub PromptPass
sub PromptPass {
# sub Raw_Report:
sub Raw_Report {
# sub ReadTables()
sub ReadTables {
# sub RollbackGrantTables()
sub RollbackGrantTables {
sub Show_Fields {
# sub Show_Fields($table): 
# sub Show_Tables(): 
sub Show_Tables {
sub Sort_fields {
# sub Sort_fields: (rewritten by psmith)
sub Sort_table {
# sub Sort_table: (rewritten by psmith)
sub SQL2Reg {
# sub Tabular_Report
sub Tabular_Report {
sub Validate_Password {
# sub Validate_Password($passwd,$host,$user,$encpw)
sub Wild2Reg {
# sub WriteTempConfigFile
sub WriteTempConfigFile {
           (suggested by monty)
           (suggested by psmith)
  suggestions by Monty:
#  suitable for 1 triple (host,db,user)
    # superuser, spassword transmitted via defaults-file
	          ,"superuser|U=s" => \$Param{'superuser'}
   sysopen CNFFILE, $MYSQL_CNF, O_RDWR|O_CREAT|O_EXCL, 0700
    system "stty -echo";
    system "stty echo";
</table>
  </table>
  <table>
    * --table   : as opposite of the --brief option.
<table border width="100%" >
  <table cellspacing=5 cellpadding=2 cols=1 height="100%">
# table-format is prefered
      $table[$j]=$MySQLaccess::Grant::Privileges[$i];
         ."</table>\n"
    @tables = MySQLaccess::DB::Show_Tables();
	          ,"table|t"       => \$Param{'table'}
         ."<table width=90% border>\n"
           tabular output
#  Tabular report,
       Tabular_Report($host,$user,$db,$refhash); 
         ." <td colspan=2 align=center><font size=-2 color=Red>You need write,delete and drop-privileges to perform the above actions</font></td>\n"
         ." <td> Edit temporary tables with external application:<br>"
    <td halign=right><b><font color=Red>Database</font></b><br><font size=-2>(Name of MySQL-database user tries to connect to.</font><br><font size=-2>Wildcards <font color="Green">(*,?,%,_)</font> are allowed.)</font></td>
    <td halign=right><b><font color=Red>User</font></b><br><font size=-2>(Userid used to connect to MySQL-database.)</font></td>
    <td halign=right><b>Host</b><br><font size=-2>(Host from where the user is trying to connect to MySQL-database.</font><br><font size=-2>Wildcards <font color="Green">(*,?,%,_)</font> are allowed.)</font></td>
    <td halign=right><b>Host</b><br><font size=-2>(Host on which MySQL-server resides.)</font></td>
    <td halign=right><b>Password</b><br><font size=-2>(of Superuser.)</font></td>
    <td halign=right><b>Password</b><br><font size=-2>(Password user has to give to get access to MySQL-database.)</font></td>
    <td halign=right><b>Superuser</b><br><font size=-2>(User which has <font color="Red">read-access</font> to grant-tables.)</font></td>
    <td halign=right><INPUT type=reset value="Clear"></td>
    <td halign=right><INPUT type=submit name=brief value="Brief"><br>
    <td halign=top><INPUT name=user type=text size=15 maxlength=15 value="$MySQLaccess::Param{'user'}"></td>
         ." <td><input type=checkbox name=commit value=on> Make changes permanent</td>\n"
         ." <td><input type=checkbox name=copy value=on> Copy grant-rules to temporary tables<br></td>\n"
         ." <td><input type=checkbox name=preview value=on> Preview changes made in temporary tables</td>\n"
         ." <td><input type=checkbox name=rollback value=on> Restore previous grand-rules</td>\n"
         ." <td rowspan=5 align=center valign=center><input type=submit value=Go></td>\n"
    <td></td>
  <td valign=center>
  <td valign=top>
    <td valign=top><INPUT name=db type=text size=15 maxlength=15 value="$MySQLaccess::Param{'db'}"></td>
    <td valign=top><INPUT name=host type=text size=15 maxlength=15 value="$MySQLaccess::Param{'host'}"></td>
    <td valign=top><INPUT name=password type=password size=15 maxlength=15 value="$MySQLaccess::Param{'password'}"></td>
    <td valign=top><INPUT name=rhost type=text size=15 maxlength=15 value="$MySQLaccess::Param{'rhost'}"></td>
    <td valign=top><INPUT name=spassword type=password size=15 maxlength=15 value="$MySQLaccess::Param{'spassword'}"></td>
    <td valign=top><INPUT name=superuser type=text size=15 maxlength=15 value="$MySQLaccess::Param{'superuser'}"></td>
# Technically the user grant is calculated by:
#  tell if a config file containing a password is unsafe
#  tell if a directory is unsafe
   ($template,$tmp) = @_; # nog verder uitwerken!!!
            'test_123' being matched with 'test'
    that all user have full access!
#  that should be reported
# the copyright message should
   => "The diff program <$MySQLaccess::DIFF> could not be found.\n"
   # - the 'empty' user, ie without supplying a username
  The following rules are used:
  # the host-table doesn't have to be processed if the host-field
  #  ' The host table is mainly to maintain a list of "secure" servers. '
# The host table is mainly to maintain a list of "secure" servers.
    *      the IP-number of a host with a name containing wildcards should
#  the localhost
   => "The MySQL client program <$MySQLaccess::MYSQL> could not be found.\n"
   => "The MySQL dump program <$MySQLaccess::MYSQLDUMP> could not be found.\n"
                    then use the option --old_server.
     ."the ones shown in the table above,\n"
   => "The password '\$password' for user `\$user' is invalid :-P"
   => "The privileges for any new user are AT LEAST\n"
  #      the privileges for the host in "host" table.
#      the privileges for the host in "host" table.
   # the rights of the user are used, so we should inform
    *      the Rules were not properly reset over iterations 
  >>  the same thing?  I think it's because I have an actual host '%' in
   # !! these db's don't have to exist yet, so it's not
            the tables need to be sorted.  Rewrote the sort algorithm, and
            the table walk algorithm (no temp file anymore), and various
                                         #the temporary grant-tables
           . "the temporary tables.";
   # the user for
# ! this can also be set on the command-line
  $this or return ("$start $sofar $end");
# This program is distributed in the hope that it will be useful,
# This program is free software; you can redistribute it and/or
         ."This software comes with ABSOLUTELY NO WARRANTY.<BR>\n"
         ."This software comes with ABSOLUTELY NO WARRANTY.\n";
  <th>MySQL server</th>
  <th>Reports</th>
  <th>User information</th>
         ."<TITLE>MySQLaccess</TITLE>\n"
    $tmp = (defined($tmp) and $tmp) ? 1 : 0;
      $tmp="UCASE(host)" if ($tmp eq "ucase_host");
# to avoid passing authentication info on the command line
  to be passed on the command line.
# to determine use of full where clause
$TODO = <<_TODO;
      to escape them from your shell!! (ie type \\* or '*')
   # to process...
# to process...
           . "to the grant-tables.";
      to the right URL. 
    </tr>
  <tr align=center>
# translage SQL-expressions to Reg-expressions
# translage WILDcards to Reg-expressions
    # translation-table for poss. answers
         ."</tr>\n"
         ."<tr>\n"
  -t, --table          report in table-format
# tuple (host,user,db)
        $type = substr($line,0,1);
        $uid, $gid, $rdev, $size,
                     undef $group;
#      Under each host sort user by the same criterias.
  >>  understand and report real problems accurately, or restricted to
    * Undo all changes made in the grant-tables (1-level undo).
                           University of Ghent (RUG), Belgium
 ,'unknown_error'
                 ,'unknown_error'       => '^ERROR:'
 ,'Unknown_table'
                 ,'Unknown_table'       => "Can't find file:"
 ,'Unknown_tmp_table'
   unlink($after);
   unlink($before);
	unlink $MYSQL_CNF if defined $MYSQL_CNF and not $DEBUG;
 ,'Unrecognized_option'
                 ,'Unrecognized_option' => 'unrecognized option' 
                             $unsafeConfig = $fname;
    #'update_priv',     'reload_priv',
          | update_priv     | Y | | shutdown_priv   | N |
          | update_priv     | Y | | shutdown_priv   | Y |
                                         #URL of CGI for manipulating
Usage: $script [host [user [db]]] OPTIONS
use Exporter ();
use Fcntl;
use File::Temp qw(tempfile tmpnam);
use Getopt::Long;
    # use having :-(
use IPC::Open3;
# Use is subject to license terms.
 ,'use_old_server'
               ,'user' => [0,1,2]
   user  : 'foo.bar','nobody','','N','N','N','Y','N','N','N','N','N','N'
   user  : 'localhost','root','','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y'
       $USER=$MySQLaccess::ACCESS_U;
       $USER=$MySQLaccess::ACCESS_U_TMP;
 ,'user_required'
      user table as a empty user name, the user name is set to '' when 
     $user=$_user_;
	          ,"user|u=s"      => \$Param{'user'}
   use `$script -?' to get more information on available options.
#use strict;
use Sys::Hostname;
      using perl 5.004 <????>
#!/usr/bin/perl
  -U, --superuser=#    connect as superuser
  -u, --user=#         username for logging in to the db
  #  Validate password if this has been asked to do
#  Validate the given password 
      $valid = defined($line); 
 , 'valid_password'
     $valid = Validate_Password($password,$_host_,$_user_,$_encpw_,$aref_user);
    *      various other small things, pointed out by <monty> and <psmith>
	$VERSION     = "2.06, 20 Dec 2000";
# version of MySQL-server to connect
	          ,"version|v"     => \$Param{'version'}
  -v, --version        print information on the program `$script'
           were redundant with the wildcard-expressions for the corresponding
    *      when in different tables the field-names were not identical, 
#    When matching, use the first found match.
   # which conform to the template.
#  which conform to the template
     ."which does not yet implement a neccessary option.\n"
            which results in problems...
     ."which was build in MySQL v3.0.18, to use this version\n"
         while (<CNF>) {
       while (($line=<MYSQL_A>) ne "ok\n")
    while ( ($line=<MYSQL_A>) ne "ok\n") {
    while (($line=<MYSQL_A>) ne "ok\n")
  >>  Why do I have both '%' and 'any_other_host' in there?  Isn't that
    + Wilcards (*,?,%,_) are allowed for host, user and db, but be sure 
            wildcards (*,?) are allowed in the user,host and db options
    *      Wildcards can now be given following the SQL-expression 
# with data from backup tables
# with data from original ones
# with data from temporary tables
        :  WITHOUT supplying a password.  Be very careful about it!!
     ."WITHOUT supplying a password.\n"
    # with possible wildcards in field
     ."with the grant-tables. (dbaccess denied)\n"
     ."with the grant-tables:\n"
     ."with the grant-tables. (One of the temporary tables does not exist)\n"
     ."with the grant-tables. (table does not exist)\n"
     ."with the grant-tables. (unknown error)\n"
   # working with  temporary tables or production tables
           write;
#  write 
   # Write results to temp-file to make
WriteTempConfigFile();
              . "^<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< " . " @|||" x 10 ."\n"
                    you are connecting to an old server (before v3.21)
     ."You are using an old version of the mysql-program,\n"
   => "You have to supply a userid."
   => "You have to supply the name of a database."
   => "You have to supply the name of a host."
     ."You might consider altering the use of the parameter `--old_server' when \n"
     ."You need at least Version 6.2 of the mysql-client,\n"
     ."Your username has no relevance\n"
# You should have received a copy of the GNU Library General Public
   => "You supplied the right password for user `\$user' :-)"
   Y    Y    Y    Y    N    N    N    N    N    N   localhost,nobody,Foo

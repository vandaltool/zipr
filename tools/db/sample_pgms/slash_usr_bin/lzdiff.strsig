            )
         );;
        );;
      ;;
      *)
              *[1-9]*) xz_status=1;;
# (at your option) any later version.
# autodetection. This way memory usage limit and thread limit can be
#!/bin/bash
    *) break;;
# but WITHOUT ANY WARRANTY; without even the implied warranty of
    *[-.]bz2 | *.tbz | *.tbz2)
    *[-.]bz2 | *.tbz | *.tbz2) xz1=bzip2;;
    *[-.]bz2 | *.tbz | *.tbz2) xz2=bzip2;;
case ${0##*/} in
  case $1 in
      case "$2" in
    case "$2" in
  case $2 in
            case $xz_status in
cmp="$cmp --"
    -?*) cmp="$cmp '$1'";;
    -*\'*) cmp="$cmp '"`printf '%sX\n' "$1" | sed "$escape"`;;
  *cmp*) prog=xzcmp; cmp=${CMP:-cmp};;
            cmp_status=$?
cmp_status=$?
Compare FILE1 to FILE2, using their uncompressed contents if they are
compressed.  If FILE2 is omitted, then the files compared are FILE1 and
# Copyright (C) 1993 Jean-loup Gailly
# Copyright (C) 1998, 2002, 2006, 2007 Free Software Foundation
Do comparisons like '$cmp' does.  OPTIONs are the same as for '$cmp'.
      echo >&2 "$0: $1: Unknown compressed file name suffix"
  echo >&2 "$0: Invalid number of operands; try \`${0##*/} --help' for help"
              echo X | (echo X | eval "$cmp" /dev/fd/5 - >/dev/null 2>&1) 5<&0; then
          elif # Reject Solaris 8's buggy /bin/bash 2.03.
elif test $# -eq 2; then
          else
# environment variables.
            esac
    esac;;
escape='
        eval "$cmp" '"$1"' '"$2"';;
            eval "$cmp" '"$1"' - >&3
            eval "$cmp" - '"$2"' >&3
                eval "$cmp" - - >&3
                eval "$cmp" /dev/fd/5 - >&3) 5<&0
                eval "$cmp" - '"$tmp"' >&3
exec 3>&1
              exec 4>&1
          exec 4>&1
    exec 4>&1
      exit 2;;
  exit 2
              (exit 2); exit 2
            (exit $cmp_status)
exit $cmp_status
            F=`expr "/$2" : '.*/\(.*\)[-.][ablmotxz2]*$'` || F=$prog
          fi;;
FILE1 from which the compression format suffix has been stripped.
      FILE=`expr "X$1" : 'X\(.*\)[-.][abglmoxzZ2]*$'`;;
      FILE=`expr "X$1" : 'X\(.*[-.]t\)[abglx]z$'`ar;;
      FILE=`expr "X$1" : 'X\(.*[-.]t\)bz2$'`ar;;
      FILE=`expr "X$1" : 'X\(.*[-.]t\)zo$'`ar;;
for file; do
# GNU General Public License for more details.
    --h*) printf '%s\n' "$usage" || exit 2; exit;;
            ' HUP INT PIPE TERM 0
          if test "$1$2" = --; then
if test $# -eq 1; then
# Instead of unsetting XZ_OPT, just make sure that xz will use file format
# it under the terms of the GNU General Public License as published by
    *[-.]lzo | *.tzo)
    *[-.]lzo | *.tzo) xz1=lzop;;
    *[-.]lzo | *.tzo) xz2=lzop;;
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Modified for XZ Utils by Andrew Dudman and Lasse Collin.
# newlines correctly) turn trailing X on last line into '.
  *)     prog=xzdiff; cmp=${DIFF:-diff};;
Report bugs to <lasse.collin@tukaani.org>."
            rm -f "$tmp" || xz_status=$?
# sed script to escape all ' for the shell, and then (to handle trailing
#SET_PATH - This line is a placeholder to ease patching this script.
  s/'\''/'\''\\'\'''\''/g
    --) shift; break;;
# specified via XZ_OPT. With gzip, bzip2, and lzop it's OK to just unset the
  $s/X$/'\''/
    *.t[abglx]z)
    *.tbz2)
              test -n "$tmp" && rm -f "$tmp"
  test "X$file" = X- || <"$file" || exit 2
test "$xz_status" -eq 0 || exit 2
# the Free Software Foundation; either version 2 of the License, or
# This program is distributed in the hope that it will be useful,
# This program is free software; you can redistribute it and/or modify
            tmp=
            tmp=`mktemp -t -- "$F.XXXXXX"` || exit 2
            trap '
            trap - HUP INT PIPE TERM 0
    *.tzo)
unset GZIP BZIP BZIP2 LZOP
usage="Usage: ${0##*/} [OPTION]... FILE1 [FILE2]
    --v*) echo "$version" || exit 2; exit;;
version="$prog (XZ Utils) 5.1.0alpha"
while :; do
      xz1=bzip2;;
    ($xz1 -cd -- "$1" 4>&-; echo $? >&4) 3>&- | eval "$cmp" - '"$FILE"' >&3
              ($xz1 -cdfq -- "$1" 4>&-; echo $? >&4) 3>&- |
          ($xz1 -cdfq -- "$1" 4>&-; echo $? >&4) 3>&- |
              ($xz1 -cdfq - 4>&-; echo $? >&4) 3>&- |
      xz1=gzip;;
      xz1=lzop;;
          ($xz2 -cdfq -- "$2" 4>&-; echo $? >&4) 3>&- |
                ( ($xz2 -cdfq -- "$2" 4>&-; echo $? >&4) 3>&- 5<&- </dev/null |
            $xz2 -cdfq -- "$2" > "$tmp" || exit 2
    *[-.]xz | *[-.]lzma | *.t[lx]z)
            xz_status=$(
        xz_status=$(
  xz_status=$(
              *) xz_status=0;;
xz_status=0
xz='xz --format=auto'
    *[-.][zZ] | *_z | *[-.][gx]z | *[-.]bz2 | *[-.]lzma | *[-.]lzo)
        *[-.][zZ] | *_z | *[-.][gx]z | *[-.]bz2 | *[-.]lzma | *.t[abglx]z | *.tbz2 | *[-.]lzo | *.tzo | -)
      *[-.][zZ] | *_z | *[-.][gx]z | *[-.]bz2 | *[-.]lzma | *.t[abglx]z | *.tbz2 | *[-.]lzo | *.tzo | -)
    *[-.][zZ] | *_z | *[-.][gx]z | *[-.]bz2 | *[-.]lzma | *.t[abglx]z | *.tbz2 | *[-.]lzo | *.tzo | -)
    *[-.][zZ] | *_z | *[-.]gz | *.t[ag]z)
    *[-.][zZ] | *_z | *[-.]gz | *.t[ag]z) xz1=gzip;;
    *[-.][zZ] | *_z | *[-.]gz | *.t[ag]z) xz2=gzip;;

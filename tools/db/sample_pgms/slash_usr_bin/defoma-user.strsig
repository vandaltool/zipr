$ARG0 =~ /(.*)\/(.*)/;
$ARG0 = $0;
$COMNAME = $2;
    $COMNAME =~ /^defoma-(.*)$/;
    &Debian::Defoma::Configure::init();
    &Debian::Defoma::Configure::init2(@_);
    &Debian::Defoma::Configure::term();
    defoma_font_init();
    defoma_font_term();
    defoma_user_init() if (USERSPACE);
    defoma_user_update_font() if (USERSPACE);
} else {
    exit ERROR;
				 &get_files &SUBSTRULEDIR &ERROR &readfile);
if ($command =~ /^-/) {
if ($COMNAME eq 'defoma') {
    if ($COMNAME eq 'defoma-app' || $COMNAME eq 'defoma') {
    if ($COMNAME eq 'defoma-font' || $COMNAME eq 'defoma') {
    if ($COMNAME eq 'defoma-id' || $COMNAME eq 'defoma') {
    if ($COMNAME eq 'defoma-subst' || $COMNAME eq 'defoma') {
    if ($COMNAME eq 'defoma-user' || $COMNAME eq 'defoma') {
if ($Type =~ /^(font|app|subst|id|user)$/) {
import Debian::Defoma::Common qw(&mylock &arg_check &arg_check_category
import Debian::Defoma::User qw(&defoma_user_init &defoma_user_update_font);
    main($command);
my $command = shift(@ARGV) || usage_and_exit;
    mylock(0);
my $Type;
package main;
    printe("Unknown option: $command.");
	printm("defoma-app [option..] clean|update|ignore <app> [<category>..]");
	printm("defoma-app [option..] purge <app>");
	printm("defoma-font [option..] purge-all <hintfile>");
	printm("defoma-font [option..] purge <category> <font>");
	printm("defoma-font [option..] purge-one <hintfile> <font>");
	printm("defoma-font [option..] register-all <hintfile>");
	printm("defoma-font [option..] register <category> <font> <hints>..");
	printm("defoma-font [option..] register-one <hintfile> <font>");
	printm("defoma-font [option..] reregister-all <hintfile>");
	printm("defoma-font [option..] reregister <category> <font> <hints>..");
	printm("defoma-font [option..] reregister-one <hintfile> <font>");
	printm("defoma-font [option..] unregister-all <hintfile>");
	printm("defoma-font [option..] unregister <category> <font>");
	printm("defoma-font [option..] unregister-one <hintfile> <font>");
	printm("defoma-id [option..] add-alias <app>[/<id-cache>] <id> <font> <alias>");
	printm("defoma-id [option..] exclude <app>[/<id-cache>] <id> <font>");
	printm("defoma-id [option..] install <app>[/<id-cache>] <id> <font>");
	printm("defoma-id [option..] list-cache <app>");
	printm("defoma-id [option..] remove-alias <app>[/<id-cache>] <alias> <font>");
	printm("defoma-id [option..] unset <app>[/<id-cache>] <id> <font>");
	printm("defoma-subst check-rule <rulename>");
	printm("defoma-subst [option..] add-rule <rulename> <rules>..");
	printm("defoma-subst [option..] edit-rule <rulename>");
	printm("defoma-subst [option..] new-rule <rulename> <extra lines>..");
	printm("defoma-subst [option..] remove-rule <rulename> <rules>..");
	printm("defoma-user [options..] reconfigure");
	printm("defoma-user [options..] update");
printv(join(' ', $ARG0, ARGS));
    printw('Teminate Signal!');
    require("/usr/share/defoma/libdefoma-$Type.pl");
$SIG{'HUP'} = \&exitfunc;
$SIG{'INT'} = \&exitfunc;
$SIG{'QUIT'} = \&exitfunc;
$SIG{'TERM'} = \&exitfunc;
sub exitfunc {
sub init_all {
sub term_all {
sub usage {
sub usage_and_exit {
    term_all();
    $Type = $1;
    $Type = shift(@ARGV);
    unless (defined($Type)) {
    usage();
	usage_and_exit;
usage_and_exit();
usage_and_exit() if (@ARGV == 0);
use Debian::Defoma::Common;
use Debian::Defoma::Font;
use Debian::Defoma::Id;
use Debian::Defoma::Subst;
use Debian::Defoma::User;
use POSIX;
use strict;
use vars qw($COMNAME %SIG $ARG0);
#! /usr/bin/perl -w

	$_ = '';
		$_ = '';
		$_ = "$1\n";	# Drop algorithm name
		"adm1021" => [
		"adm1022" => [
		"adm1022" => {
		"adm1024" => {
		"adm1026" => [
		"adm1026" => {
		"adm1027" => [
		"adm1032" => {
		"adm9240" => {
		"adt7461" => {
		"adt7473" => [
# along with this program; if not, write to the Free Software
		"applesmc" => [
		"as99127f" => {
# as published by the Free Software Foundation; either version 2
# Bus statements
# * Bus statements for the ISA bus are removed.
# but WITHOUT ANY WARRANTY; without even the implied warranty of
	$chip = $1;
	%chip_delete = (
# * Chip names containing dashes are removed.
	$chip =~ s/-.*//;
# Chip statements
	%chip_trans = (
	$compute_next = 0;
	$compute_next = 0 if (! m/\\$/);
	$compute_next = 1 if (m/\\$/);
# Convert a sensors.conf file from the old (Linux 2.4, lm-sensors 2)
# Copyright (C) 2007  Jean Delvare <khali@linux-fr.org>
	$debug = 0;
	@delete = (
		# Delete references to features that are now gone
		$_ = '';	# Drop entirely 
# Drop references to lm78-j
# Drop references to pwm
# Drop references to vrm
		"ds1780" => {
} else {
	} else {
} elsif ($compute_next) {
elsif (m/^[\s#]*chip\s+"([\w\d*-]+)"/) {
elsif (m/^[\s#]*(?:label|ignore|set|compute)\s+(\S+)\s/) {
elsif (m/^\s*#+.*lm78-?j/i) {
elsif (m/^[\s#]*set\s+vrm\s/i
elsif (m/^\s*#+\s*PWM Output/i) {
		"emc6d100" => [
		"emc6d102" => [
		exit 0;
#   feature name changes and chip-specific feature name changes.
# Feature name substitution
	$first_part = $1;
	$_ = "$first_part$second_part\n";
	# First the chip-specific ones
	# First the general deletions
		foreach my $t (@{$chip_delete{$chip}}) {
	foreach my $t (@delete) {
		foreach my $t (keys %{$chip_trans{$chip}}) {
	foreach my $t (keys %trans) {
# Formula changes (in0 -> in0_input)
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
		"fscher" => [
		"fscpos" => [
		"fscpos" => {
		"fscscy" => [
		"fscscy" => {
		"gl518sm" => [
		"gl518sm" => {
		"gl520sm" => [
		"gl520sm" => {
		"gl523" => [
# GNU General Public License for more details.
if ($. == 1) {
	if ($2 eq "ISA main adapter") {
	if ($chip && exists $chip_delete{$chip}) {
	if ($chip && exists $chip_trans{$chip}) {
	if (defined $ARGV[0] && ($ARGV[0] eq '-h' || $ARGV[0] eq '--help')) {
	if (delete_line($1)) {
if (m/^# Converted by sensors-conf-convert/) {
if (m/^([\s#]*bus\s+"?i2c-\d+"?\s+"([^"]+)")\s+"[^"]*"/) {
if (m/^([\s#]*compute\s+\S+)(.*)/) {
# Implemented conversions:
	# in a given "chip" statement need the same specific processing
	# "*" is no longer a valid chip name
		# Kudos to the nice folks in #perl on freenode :)
# * Label, ignore, set and compute statements referencing features
			$line =~ s/$t/$chip_trans{$chip}->{$t}->()/ge;
		$line =~ s/$t/$trans{$t}->()/ge;
		"lm78" => {
		"lm79" => {
		"lm80" => {
		"lm81" => {
		"lm83" => {
		"lm84" => [
		"lm85" => [
		"lm85b" => [
		"lm85c" => [
		"lm86" => {
		"lm87" => {
		"lm90" => {
		"lm92" => {
		"lm93" => {
		"lm99" => {
# MA 02110-1301, USA.
		"max1619" => {
		"max6650" => [
		"max6651" => [
		"max6657" => {
		"max6680" => {
		"maxilife" => [
		"maxilife" => {
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# modify it under the terms of the GNU General Public License
    || m/^\s*#+\s*adjust this if your vid is wrong/i
    || m/^\s*#+\s*Also, one should set vrm prior to using vid in any formula/) {
	my ($chip, $line) = @_;
	my $feature = shift;
# Note that we have to look at the commented out lines too, so that
# of the License, or (at your option) any later version.
		"pcf8591" => [
		"pcf8591" => {
	print "# Converted by sensors-conf-convert on ".localtime()."\n";
		print "Convert sensors.conf from lm-sensors 2 format to lm-sensors 3 format\n",
	print STDERR "Processing bus statement: $2\n" if $debug;
	print STDERR "Processing chip section: $chip\n" if $chip and $debug;
	print STDERR "         Result will be incorrect for some chip types.\n";
	print STDERR "WARNING: Converting an already converted file!\n";
			qr/"12V(|_min|_max)"/		=> sub { "in4$1" },
			qr/"12V"/			=> sub { "in4" },
			qr/"2\.0V"/			=> sub { "in0" },
			qr/"2\.5V(|_min|_max)"/		=> sub { "in0$1" },
			qr/"2\.5V"/			=> sub { "in1" },
			qr/"3\.3V(|_min|_max)"/		=> sub { "in2$1" },
			qr/"3\.3V"/			=> sub { "in2" },
			qr/"5\.0V"/			=> sub { "in3" },
			qr/"5V(|_min|_max)"/		=> sub { "in3$1" },
			qr/\bafc_analog_out\b/,
			qr/\bafc_pwm\b/,
			qr/\bAIN1(|_min|_max)\b/	=> sub { "in6$1" },
			qr/\bAIN2(|_min|_max)\b/	=> sub { "in7$1" },
			qr/\bain_conf\b/,
			qr/\balarm_mask\b/,
		qr/\balarms\b/,
		qr/\balarms_(in|temp|fan)\b/,
		qr/\banalog_out\b/,
			qr/\banalog output\b/,
			qr/\baout\b/,
			qr/\baout_enable\b/,
		qr/\bbeeps\b/,
			qr/\bchassis\b/,
			qr/\bch(\d)\b/			=> sub { "in$1" },
			qr/\bconfig\b/,
			qr/\bcontrol\b/,
			qr/\bCPU_Temp\b/		=> sub { "temp2" },
			qr/\bdie_code\b/,
			qr/\bevent\b/,
			qr/\bfan1_off\b/,
			qr/\bfan1_off_pin\b/,
			qr/\bfan(\d)(|_div|_min)\b/	=> sub { "fan".($1+1).$2 },
			qr/\bfan\d_(max|safe)\b/,
			qr/\bfan\d_ripple\b/,
			qr/\bfan\d_(tach_mode|ppr)\b/,
			qr/\bgpio\b/,
			qr/\bgpio_mask\b/,
			qr/\bhyst(\d)\b/		=> sub { "temp$1_crit_hyst" },
			qr/\bin([56])_(min|max)\b/	=> sub { "in$1_".($2 eq "max" ? "min" : "max") },
		qr/\b(in|temp|fan)\d+_(state|status)\b/,
			qr/\binterrupt mask\b/,
			qr/\binterrupts\b/,
			qr/\biterate\b/,
			qr/\bpll(|_min|_max)\b/,
		qr/\bpwm\d*\b/,
		qr/\bpwm\d+_enable\b/,
			qr/\bpwm\d_(spinup|min|freq|min_ctl|zone|spinup_ctl)\b/,
			qr/\bremote_temp2\b/		=> sub { "temp3" },
			qr/\bremote_temp2_hyst\b/	=> sub { "temp3_min" },
			qr/\bremote_temp2_over\b/	=> sub { "temp3_max" },
		qr/\bremote_temp\b/		=> sub { "temp2" },
		qr/\bremote_temp_hyst\b/	=> sub { "temp2_max_hyst" },
			qr/\bremote_temp_hyst\b/	=> sub { "temp2_min" },
		qr/\bremote_temp_low\b/		=> sub { "temp2_min" },
		qr/\bremote_temp_over\b/	=> sub { "temp2_max" },
			qr/\brev\b/,
		qr/\bsensor(\d+)\b/		=> sub { "temp$1_type" },
			qr/\bspeed\b/,
			qr/\btcrit\b/			=> sub { "temp3_crit" },
			qr/\btcrit(\d)\b/		=> sub { "temp$1_crit" },
			qr/\btemp2_hyst\b/		=> sub { "temp2_crit_hyst" },
		qr/\btemp\b/			=> sub { "temp1" },
		qr/\btemp_crit\b/		=> sub { "temp1_crit" },
			qr/\btemp(\d)\b/		=> sub { "temp".($1+1) },
		qr/\btemp(\d+)_high\b/		=> sub { "temp$1_max" },
			qr/\btemp(\d)_hyst\b/		=> sub { "temp".($1+1)."_min" },
		qr/\btemp(\d+)_hyst\b/		=> sub { "temp$1_max_hyst" },
			qr/\btemp(\d)_input_fault\b/	=> sub { "temp$1_fault" },
			qr/\btemp\d_lim\b/,
		qr/\btemp(\d+)_low\b/		=> sub { "temp$1_min" },
			qr/\btemp(\d)_over\b/		=> sub { "temp".($1+1)."_max" },
		qr/\btemp(\d+)_over\b/		=> sub { "temp$1_max" },
			qr/\btemp(\d)_therm\b/		=> sub { "temp$1_crit" },
			qr/\btemp\d_tmin\b/,
		qr/\btemp_high\b/		=> sub { "temp1_max" },
			qr/\btemp_hot_hyst\b/		=> sub { "temp1_max_hyst" },
			qr/\btemp_hot_max\b/		=> sub { "temp1_max" },
			qr/\btemp_hyst\b/		=> sub { "temp1_crit_hyst" },
		qr/\btemp_hyst\b/		=> sub { "temp1_max_hyst" },
			qr/\btemp_hyst\b/		=> sub { "temp1_min" },
		qr/\btemp_low\b/		=> sub { "temp1_min" },
			qr/\btemp_os_hyst\b/		=> sub { "temp1_crit_hyst" },
			qr/\btemp_os_max\b/		=> sub { "temp1_crit" },
		qr/\btemp_over\b/		=> sub { "temp1_max" },
			qr/\btwo_temps\b/,
			qr/\bVccp1(|_min|_max)\b/	=> sub { "in1$1" },
			qr/\bVccp2(|_min|_max)\b/	=> sub { "in5$1" },
			qr/\bvdd\b/			=> sub { "in0" },
			qr/\bvdd_max\b/			=> sub { "in0_max" },
			qr/\bvdd_min\b/			=> sub { "in0_min" },
			qr/\bvid([12])\b/			=> sub { "cpu".($1-1)."_vid" },
		qr/\bvid\b/			=> sub { "cpu0_vid" },
			qr/\bvid(\d)(|_min|_max)\b/	=> sub { "in".($1-1).$2 },
		qr/\bvin(\d+)\b/		=> sub { "in$1" },
		qr/\bvin(\d+)_max\b/		=> sub { "in$1_max" },
		qr/\bvin(\d+)_min\b/		=> sub { "in$1_min" },
			qr/\bvolt12\b/			=> sub { "in0" },
			qr/\bvolt5\b/			=> sub { "in1" },
			qr/\bvoltbatt\b/		=> sub { "in2" },
			qr/\bwdog_(preset|state|control)\b/,
			qr/\bzone\d_(limit|hyst|range|critical|smooth)\b/,
	# Remove dashes from chip names, as this is no longer allowed
	return 0;
			return 1 if $feature =~ m/$t/;
		return 1 if $feature =~ m/$t/;
	return $line;
	$second_part = $2;
	$second_part =~ s/in(\d+)/in$1_input/gi;
	s/"\*"/"\*-\*"/g;
	# Simplify possible duplicates
	s/in(\d+)/in$1_input/gi;
	s/(lm78)-?j/$1/gi;
	s/(lm78), lm78-?j/$1/gi;
	s/("lm78-\*")(\s+"lm78-\*")+/$1/g;
	s/("maxilife-\*")(\s+"maxilife-\*")+/$1/g;
		"smsc47m192" => {
	s/(\s+"lm78-)j-/$1/g;
	s/(\s+"maxilife-)(cg|co|as|nba)-/$1/g;
sub delete_line($)
		# Substitute feature names
		$_ = substitute_line($chip, $_);
sub substitute_line($$)
# symbol names to the new (Linux 2.6 or 3, lm-sensors 3) symbol names.
# * The "algorithm name" part of bus statements is removed.
	# Then the chip-specific ones
	# Then the general substitutions
# the user doesn't have a bad surprise when uncommenting them.
# This program is distributed in the hope that it will be useful,
# This program is free software; you can redistribute it and/or
		"thmc10" => [
		"thmc50" => [
		"thmc50" => {
	%trans = (
		      "Typical usage: sensors-conf-convert < /etc/sensors.conf > /etc/sensors3.conf\n";
	undef $chip if $chip eq "*";
use strict;
use vars qw($debug $chip %trans @delete %chip_trans %chip_delete $first_part $second_part $compute_next);
#!/usr/bin/perl -w -pi.old
		"via686a" => {
		"vt1211" => [
		"vt8231" => [
		"w83781d" => {
		"w83792d" => [
		"w83793" => [
	# We only remember the first chip name, assuming that all chips
#   which are not part of the new interface are removed.
#   which have been renamed are updated. This includes both general
# You should have received a copy of the GNU General Public License

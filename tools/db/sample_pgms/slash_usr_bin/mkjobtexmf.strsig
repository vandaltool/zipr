                }
            );
            }
        )
        );
        }
                      ($? & 127), ($? & 128) ? 'with' : 'without';
        $abs_files{abs_path($file)} = '';
Additional option for the TeX compiler, examples are --ini or
    'aliases' => '',
# * aliases
a list of paths of TEXMF trees. If a match is found, the file is
Also add output files.
analyze_recorder;
and files. See section L</FILES>.
a relative file name, then it is directly linked/copied into the
are not supported and neither paths with links to parent directories.
are stored. It can be changed by option --destdir.
be used, if the file name extension differs from F<.tex>:
# * binaries, libraries
Both methods for getting the used file names are available.
* Bug fix in map_files_texmf.
Bugs in TeX's file recording might result in incomplete
can come from different directories and TEXMF trees.
    (cd test.mjt && zip -9r ../test .)
    check_child_error;
            chomp;
    chomp $str;
            $clashes{$name} = '';
    close(IN);
    --cmd-kpsewhich <cmd>  Command for kpsewhich
    'cmd-kpsewhich=s' => \$cmd_kpsewhich,
            $cmd_strace,
    --cmd-strace <cmd>     Command for strace
    'cmd-strace=s'    => \$cmd_strace,
                $cmd_tex,
            $cmd_tex,
    --cmd-tex <cmd>        Command for the TeX compiler
            $cmd_texhash,
    --cmd-texhash <cmd>    Command for texhash
    'cmd-texhash=s'   => \$cmd_texhash,
    'cmd-tex=s'       => \$cmd_tex,
# * collision of symbol links
Command for kpsewhich.
Command for strace.
Command for the TeX compiler. Default is pdflatex.
Command for updating the file name database of the generated
        $copy = 1;
    'copy'            => \$copy,
    --copy                 Copy files instead of creating
Copyright 2007 by Heiko Oberdiek.
Currently the method with B<strace> records this files.
__DATA__
                              default is `<jobname>.mjt'
    --destdir <directory>  Destination directory,
$destdir = "$jobname$ext_mkjobtexmf" unless $destdir;
    'destdir=s'       => \$destdir,
            "$destdir/texmf"
            die_error "Failed to execute: $!";
    die "!!! Error: $msg!\n";
            die_error sprintf "Child died with signal %d, %s coredump",
            die_error sprintf "Child exited with value %d", $? >> 8;
Directory where the resulting texmf tree and symbol links
directory with the job name and extension `.mjt'.
        $dir .= $elem;
        $dir .= '/' if $dir;
Display help screen.
        do_link_copy($source, $dest);
            /^\d+\s+\w+\(\"([^"]+)\",/ or warning "Unknown entry `$_'";
            '-e',
            else {
        else {
    else {
        elsif ($? & 127) {
            elsif (-b $dest) {
            elsif (-c $dest) {
            elsif (-d $dest) {
            elsif (-f $dest) {
            elsif (-p $dest) {
            elsif (-S $dest) {
            elsif (-t $dest) {
Even more complicate cases are possible:
Example for generating a tar archive:
Example for generating a zip archive (Linux/bash):
Example, how the new texmf tree (Linux/bash) can be used:
        -exitstatus => 2,
extension F<.fls> that records the used input and output files.
            '-f',
file recording (e.g. pdfTeX 1.40.3 does not record .pfb and
Files are copied instead of creating symbolic links.
Files are linked or copied without path elements.
            $files{$file} = '';
files or links without directory.
find the used file names. Two methods are available,
First B<mkjobtexmf> runs a program, usually TeX. The TeX compiler
* First experimental version.
* Fix for unknown option `--cmd-strace'.
    'flat'            => \$flat,
    --flat                 Junk paths, do not make directories
following TeX runs.
    foreach (@failed) {
    foreach my $elem (@elems) {
        foreach my $file (@a) {
    foreach my $file (keys %abs_files) {
    foreach my $file (keys %files) {
    foreach my $file (sort keys %files) {
    foreach my $key (sort keys %links) {
    foreach my $name (sort keys %clashes) {
    foreach my $name (sort keys %names) {
    foreach my $texmf (@texmf) {
        foreach (sort keys %links) {
        foreach (@texmf) {
for its TeX compilers. Then the TeX compiler generates a file with
Format generation:
                    $found = '';
                $found = $file;
                $found = 'texmf/' . substr $abs_file, $len;
                $found = 'texmf/' . substr $file, $len;
from differnt runs. Thus collisions are resolved
future versions.
GetOptions(
get_texmf_trees;
=head1 AUTHOR
=head1 COPYRIGHT AND LICENSE
=head1 DESCRIPTION
=head1 EXAMPLES
=head1 FILES
=head1 HISTORY
=head1 NAME
=head1 OPTIONS
=head1 SYNOPSIS
=head1 UNSOLVED ISSUES, CAVEATS, TODOS
=head2 Analyze and link/copy found files
=head2 File recording
=head2 Running the program
Heiko Oberdiek, email: oberdiek at uni-freiburg.de
    --help                 Brief help message
    'help|?'          => \$help,
    if ($? != 0) {
        if ($? == -1) {
If another program than TeX should be used (dvips, ...),
        if (@args) {
if (@ARGV > 0) {
                if (chmod($new_dest_mode, $dest) < 1) {
    if ($copy) {
if (!$copy) {
if ($copy) {
        if (copy($source, $dest) == 1) {
        if (defined($names{$name})) {
if (defined($umask)) {
        if (-e $dest) {
    if (@elems <= 1) {
            if ($file =~ /(^|\/)\.\.\// or $file =~ /^\//) {
    if ($flat) {
if ($flat) {
                if ($found =~ /(^|\/)\.\.\//) {
        if ($found) {
            if (-l $dest) {
    if ($needs_texhash) {
            if ($new_dest_mode != $dest_mode) {
        if (not($found)) {
if option --copy is given or symbolic linking is not available.
            if ($output) {
            if ($source_atime != $dest_atime
    if ($strace) {
    if ($success == 0) {
    if ($symlink_exists) {
        if (symlink($source, $dest) == 1) {
        if (@texmf) {
            if ($texmf eq $str) {
If the file cannot be mapped to a TEXMF tree and the file is
                if (utime($source_atime, $source_mtime, $dest) < 1) {
    if ($verbose) {
            /^(INPUT|OUTPUT) (.*)$/ or warning "Unknown entry `$_'";
                              inside the destination directory
instead of TeX. As method only program B<strace> is available.
                '-interaction=nonstopmode',
            '-interaction=nonstopmode',
in the destination directory. That allows to collect files
in the manner that the first entry that is made in
is collected. As default a directory is generated in the current
is configured by option B<--cmd-tex>. Option B<--texname> can
It can be used for archiving purposes or to speed up
=item ...
=item 2007/04/16 v0.1
=item 2007/05/09 v0.2
=item 2007/09/03 v0.3
=item 2007/09/04 v0.4
=item 2007/09/06 v0.5
=item 2008/04/05 v0.6
=item 2008/06/28 v0.7
=item B<--cmd-kpsewhich>=I<cmd>
=item B<--cmd-strace>=I<cmd>
=item B<--cmd-texhash>=I<cmd>
=item B<--cmd-tex>=I<cmd>
=item B<--copy>
=item B<--destdir>=I<directory>
=item B<--flat>
=item B<--help>
=item B<--jobname>=I<jobname>
=item B<--output>
=item B<--strace>
=item B<--texname>=I<name>
=item B<--texopt>=I<opt>
=item B<--verbose>
=item Collisions
=item Configuration file
=item Experimental software
=item F<E<lt>jobnameE<gt>.fls>
=item F<E<lt>jobnameE<gt>.mjt/>
=item F<E<lt>jobnameE<gt>.strace>
=item F<texmf.cnf>
=item Program strace
=item Recorder of TeX
=item Settings in environment variables
=item Uncomplete recording
It is the name of the job. `<jobname>.tex' serves as default for
It would save the user from retyping the same options again and again.
            "$jobname$ext_strace",
            "-jobname=$jobname",
    --jobname <name>       Name of the job (mandatory).
$jobname or die_usage('Missing jobname');
    'jobname=s'       => \$jobname,
                              job name with extension '.tex'
                last;
            last if $found;
linked/copied into the TEXMF tree. The list of paths is generated by
            $links{$found} = abs_path($file);
        $links{$name} = $file;
Log file where the result of B<strace> is stored.
    'ls-R' => '',
        make_dirs $dest;
make_links;
    --man                  Full documentation
    'man'             => \$man,
map_files;
        map_files_flat();
        map_files_texmf();
            map { verbose 'texmf: ' . value($_) } @texmf;
        mkdir $dir or die_error "Cannot make directory `$dir'";
mkjobtexmf -- Generate a texmf tree for a particular job
    mkjobtexmf --jobname foo -- dvips foo
    mkjobtexmf --jobname foo --texname '\def\abc{...}\input{foo}'
    mkjobtexmf --jobname foo --texname foo.ltx
    mkjobtexmf --jobname test
    mkjobtexmf --jobname test --cmd-tex latex
    mkjobtexmf --jobname test --texopt -ini --texname pdflatex.ini
    mkjobtexmf [options]
    mkjobtexmf [options] -- <cmd> [args]
modify it under the same terms as Perl itself
        -msg        => "\n==> $msg!\n");
        my $abs_file = abs_path($file);
    my %abs_files;
            my @a = ($file);
        my @a = @{$names{$name}};
    my @args = @_;
my @args = ();
    my @args = @ARGV;
my $author = 'Heiko Oberdiek';
        my $clash = $clashes{$name} ? ' (clash)' : '';
    my %clashes;
    my $cmd = $_[0];
my $cmd_kpsewhich  = 'kpsewhich';
    my $cmdline = "$cmd_kpsewhich -expand-path='\$TEXMF'";
my $cmd_strace     = 'strace';
my $cmd_texhash    = 'texhash';
my $cmd_tex        = 'pdflatex';
my $copy = 0;
my $copyright = "Copyright 2007, 2008 $author";
my $date = '2008/06/28';
        my $dest = "$destdir/$key";
my $destdir = '';
            my ($dest_mode, $dest_atime, $dest_mtime)
    my $dest = shift;
    my $dir = '';
    my @elems = split /\/+/, $path;
my $ext_mkjobtexmf = '.mjt';
my $ext_recorder   = '.fls';
my $ext_strace     = '.strace';
my $ext_tex        = '.tex';
    my @failed;
            my $file = $1;
            my $file = $2;
        my $file = @{$names{$name}}[0];
    my $file_rec = $jobname . ($strace ? $ext_strace : $ext_recorder);
my %files;
my $flat = 0;
my %flat_ignore = (
        my $found = '';
my $help = 0;
my $jobname = '';
            my $len = length($texmf);
my %links;
my $man = 0;
        my $method = $copy ? 'Copying' : 'Symbolic linking';
    my @msg = @_;
    my $msg = $_[0];
    my $msg = shift;
        my $name = basename($file);
    my %names;
my $needs_texhash = 0;
            my $new_dest_mode = $dest_mode
my $output = 0;
    my $path = shift;
my $prj = 'mkjobtexmf';
    my $pwd = getcwd;
        my @run_args;
        my $source = $links{$key};
            my ($source_mode, $source_atime, $source_mtime)
    my $source = shift;
my $strace = 0;
    my $str = `$cmdline`;
            my $str = substr $abs_file, 0, $len;
            my $str = substr $file, 0, $len;
    my $success = 0;
    my $symlink_exists = eval { symlink('', ''); 1 };
            my $texmf = "$_/";
    my %texmf;
my @texmf;
my $texname = '';
my @texopt = ();
my $title = "\U$prj\E $date v$version, $copyright\n";
            my $type = '';
            my $type = $1;
            my $type = 'INPUT';
my $umask = umask;
    my $value = $_[0];
my $verbose = 0;
my $version = '0.7';
Name of TeX's recorder file.
            $names{$name} = \@a;
        $needs_texhash = 1;
* New options: --copy, --flat, --destdir
            next;
        next if -d $dir;
        next if exists $flat_ignore{$name};
            next if not $output and /^OUTPUT /;
            next if /^PWD /;
            next if /\)\s+= -\d/; # -1 ENOENT, ...
            next if /\WO_DIRECTORY\W/; # skip directories
                next if /\WO_WRONLY\W/;
            '-o',
one TEXMF tree for the result. However, the source files
    open(IN, '<', $file_rec)
option C<-recorder> of TeX (Web2C) or the program B<strace>.
                              option -recorder
Options:
Options, defaults, how the program works might change in
            or die_error "Cannot open `$file_rec'";
) or die_usage('Unknown option');
    --output               Add also output files
    'output'          => \$output,
(Perl Artistic License/GNU General Public License, version 2).
.pk files).
    pod2usage(
pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;
    pop @elems;
            # preserve executable permissions if necessary
            # preserve file times
        print "!!! Failed: " . value($_) . "\n";
        print "* file name clash for " . value($name) . "\n";
        print "!!! $method failed:\n    "
    print "* @msg\n" if $verbose;
                    print "!!! Setting executive mode failed: "
                    print "!!! Setting file times failed: "
print $title;
            print "  " . value($file) . "\n";
    print "!!! Warning: $msg!\n";
    print '<' x 79, "\n";
    print '>' x 79, "\n";
program B<kpsewhich>.
                push @failed, $file;
            push @{$names{$name}}, $file;
            '-recorder',
result directory F<I<jobname>.mjt>. Absolute file names
result TEXMF tree is created. Each found file is compared against
        return;
    return if $flat;
            @run_args
            @run_args = (
            @run_args = @args;
        run_generic(
run_tex;
run_texhash;
--shell-escape. This option can be given more than once.
Some TeX distributions (e.g. Web2C) support the option B<-recorder>
                                | (($source_mode & 0111) & ~$umask);
                    || $source_mtime != $dest_mtime) {
Specifies the name of the destination directory where the result
                    = (stat($dest))[2, 8, 9];
                    = (stat($source))[2, 8, 9];
    $strace = 1;
    'strace'          => \$strace,
    --strace               Use strace instead of TeX's
sub analyze_recorder {
sub check_child_error () {
sub die_error ($) {
sub die_usage {
sub do_link_copy {
sub get_texmf_trees () {
sub make_dirs ($) {
sub make_links {
sub map_files {
sub map_files_flat {
sub map_files_texmf {
sub run_generic (@) {
sub run_tex {
sub run_texhash {
sub value ($) {
sub verbose (@) {
sub warning ($) {
            $success = 1;
* Support for `configure' added.
Symbolic links are created by default. The files are copied
                              symbol links
    system $cmd @args;
    tar cjhvf test.tar.bz2 -C test.mjt .
TeX file F<test.tex> using LaTeX:
TeX file F<test.tex> using TeX's recorder method:
        $texmf{abs_path($texmf)} = '';
# * texmf.cnf (path settings, variables)
    @texmf = sort keys %texmf;
    @texmf = split ':', $str;
    TEXMF=!!test.mjt/texmf pdflatex test
        $texmf{$texmf} = '';
texmf tree. Default is texmf.
                $texname
            $texname
    $texname = '';
    --texname <file>       Input file for TeX. Default is the
$texname = "$jobname$ext_tex" unless $texname;
    'texname=s'       => \$texname,
                @texopt,
            @texopt,
    --texopt <option>      Option for TeX run
    'texopt=s'        => \@texopt,
TeX's recorder does not. Useful are F<texmf.cnf> files for
  (Thanks to Juho Niemel"a)
  (Thanks to Karl Berry)
  (Thanks to Norbert Preining for writing a first version of
  the configure stuff.)
The destination directory will contain a flat list of
the destination directory wins.
The files `ls-R' and `aliases' are ignored.
the found files and tries sort them in this texmf tree.
The latter form runs program I<cmd> with arguments I<args>
The name of the TeX input file, if it differs from <jobname>.tex.
Then it generates a directory with a texmf tree. It checks
then this program can be given after C<-->:
the path sections should probably rewritten.
The progam B<mkjobtexmf> runs a program and tries to
The program follows the strategy not to delete files
The program uses one destination directory and at most
Therefore name collisions are possible.
The result directory F<I<jobname>.mjt> is generated. Inside the
the TeX file and <jobname> is used for naming various directories
They are not stored at all.
This library is free software; you may redistribute it and/or
This program traces system calls and signals. It is used here
This runs TeX that can be configured by options.
* Tiny fix in target `uninstall' in file `Makefile.in'.
# ToDos/unsolved problems:
to log the used files.
            'trace=open,access', # trace=file
Two methods are available to get the used file names:
                $type = 'block device';
                $type = 'character device';
                $type = 'directory';
                $type = 'file';
                $type .= 'link';
                $type = 'OUTPUT' if /\WO_WRONLY\W/;
                $type = 'pipe';
                $type = 'socket';
                $type = 'tty';
            $type = " ($type)" if $type;
* Typo in option name fixed.
    $umask = 0;
use Cwd 'abs_path', 'getcwd';
    use File::Basename;
    use File::Copy;
use Getopt::Long;
Use method with program B<strace>, see L<"DESCRIPTION">.
use Pod::Usage;
use strict;
#!/usr/bin/env perl
                              Usually this is the TeX file
    "[$value]";
                          . value($dest) . "\n";
              . value($dest) . ' => ' . value($source) . "\n";
variable settings. Because we have just one TEXMF tree,
    verbose "child exit: ok";
verbose "command: " . value "@args" if @args;
verbose "destdir: " . value $destdir;
            verbose "destination$type exists: " . value($dest);
    verbose "exec: " . value "@args";
    verbose "exec: " . value($cmdline);
        verbose "file: " . value($file);
    verbose 'File with recorded file names: ' . value($file_rec);
verbose "jobname: " . value $jobname;
Verbose messages.
        verbose 'mkdir: ' . value($dir);
    verbose "pwd: " . value($pwd);
        verbose "symbolic linking: supported";
        verbose "symbolic linking: unsupported";
        verbose("texhash run skipped, no files added");
            verbose 'texmf: none';
verbose "texname: " . value $texname if $texname;
    verbose "umask: " . sprintf("%04o", $umask);
    verbose "umask: unsupported";
        verbose value($name) . ' => ' . value($file) . $clash;
            verbose value($_) . ' => ' . value($links{$_});
    'verbose'         => \$verbose,
    --verbose              Verbose output
        while (<IN>) {
                              without extension

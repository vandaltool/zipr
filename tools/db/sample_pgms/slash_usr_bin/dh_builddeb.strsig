B<dh_builddeb> [S<I<debhelper options>>] [B<--destdir=>I<directory>] [B<--filename=>I<name>] [S<B<--> I<params>>]
B<dh_builddeb> simply calls L<dpkg-deb(1)> to build a Debian package or
	# child
			complex_doit("find $tmp $dh{EXCLUDE_FIND} | xargs rm -rf");
			complex_doit("find $tmp -name $_ | xargs rm -rf")
	"destdir=s" => \$dh{DESTDIR},
dh_builddeb - build Debian binary packages
	$dh{DESTDIR}='..';
	$dh{FILENAME}='';
	$dh{FILENAME}="/$dh{FILENAME}";
		doit("dpkg-deb", @{$dh{U_PARAMS}}, "--build", $tmp, $dh{DESTDIR}.$dh{FILENAME});
		doit("dpkg-deb", @{$dh{U_PARAMS}}, "--build", $tmp, $dh{DESTDIR}.$filename);
		else {
		error("fork failed! $!");
	exit 0;
		$exit=1 if $? != 0;
exit $exit;
file name. Does not work well if more than one .deb is generated!
	"filename=s" => \$dh{FILENAME},
			$filename="/".udeb_filename($package);
foreach my $package (@{$dh{DOPACKAGES}}) {
				foreach split(":", $ENV{DH_ALWAYS_EXCLUDE});
=head1 AUTHOR
=head1 DESCRIPTION
=head1 NAME
=head1 OPTIONS
=head1 SEE ALSO
=head1 SYNOPSIS
		if (! compat(5)) {
if (! defined $dh{DESTDIR}) {
if (! defined $dh{FILENAME}) {
	if (! defined $pid) {
	if (exists $ENV{DH_ALWAYS_EXCLUDE} && length $ENV{DH_ALWAYS_EXCLUDE}) {
		if (! $filename) {
	if (! is_udeb($package)) {
	if ($pid) { # parent
	if (wait == -1) {
init(options => {
=item B<--destdir=>I<directory>
=item B<--filename=>I<name>
=item B<--> I<params>
=item B<-u>I<params>
It is deprecated; use B<--> instead.
Joey Hess <joeyh@debian.org>
L<debhelper(7)>
my $exit=0;
		my $filename=$dh{FILENAME};
my $max_procs=get_buildoption("parallel") || 1;
	my $pid=fork();
my $processes=1;
	my $tmp=tmpdir($package);
			# Old broken code here for compatibility. Does not
other than the default of "F<..>".
package.
packages.
Pass I<params> to L<dpkg-deb(1)> when it is used to build the
		$processes--;
		$processes++;
		$processes=0;
reap while $processes;
		reap while $processes > $max_procs;
			# remove everything.
# Set the default destination directory.
sub reap {
This is another way to pass I<params> to L<dpkg-deb(1)>.
This program is a part of debhelper.
use Debian::Debhelper::Dh_Lib;
use strict;
Use this if you want the generated F<.deb> files to be put in a directory
Use this if you want to force the generated .deb file to have a particular
#!/usr/bin/perl -w

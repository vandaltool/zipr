abcdefghijklmnopqrstuvwxyz_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ
abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWXYZ
arg%i != NULL)
  arg%i = %s (arg%i);
  arg%i = %s (param_types[%i] & ~G_SIGNAL_TYPE_STATIC_SCOPE, arg%i);
  arg%i = (%s) va_arg (args_copy, %s);
  --body                     Generate C code
__bss_start
  callback = (GMarshalFunc_%s) (marshal_data ? marshal_data : cc->callback);
complete_in_arg
      data1 = closure->data;
      data1 = g_value_peek_pointer (param_values + 0);
      data1 = instance;
      data2 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
      data2 = instance;
#define g_marshal_value_peek_boolean(v)  g_value_get_boolean (v)
#define g_marshal_value_peek_boolean(v)  (v)->data[0].v_int
#define g_marshal_value_peek_boxed(v)    g_value_get_boxed (v)
#define g_marshal_value_peek_boxed(v)    (v)->data[0].v_pointer
#define g_marshal_value_peek_char(v)     g_value_get_schar (v)
#define g_marshal_value_peek_char(v)     (v)->data[0].v_int
#define g_marshal_value_peek_double(v)   g_value_get_double (v)
#define g_marshal_value_peek_double(v)   (v)->data[0].v_double
#define g_marshal_value_peek_enum(v)     g_value_get_enum (v)
#define g_marshal_value_peek_enum(v)     (v)->data[0].v_long
#define g_marshal_value_peek_flags(v)    g_value_get_flags (v)
#define g_marshal_value_peek_flags(v)    (v)->data[0].v_ulong
#define g_marshal_value_peek_float(v)    g_value_get_float (v)
#define g_marshal_value_peek_float(v)    (v)->data[0].v_float
#define g_marshal_value_peek_int64(v)    g_value_get_int64 (v)
#define g_marshal_value_peek_int64(v)    (v)->data[0].v_int64
#define g_marshal_value_peek_int(v)      g_value_get_int (v)
#define g_marshal_value_peek_int(v)      (v)->data[0].v_int
#define g_marshal_value_peek_long(v)     g_value_get_long (v)
#define g_marshal_value_peek_long(v)     (v)->data[0].v_long
#define g_marshal_value_peek_object(v)   g_value_get_object (v)
#define g_marshal_value_peek_object(v)   (v)->data[0].v_pointer
#define g_marshal_value_peek_param(v)    g_value_get_param (v)
#define g_marshal_value_peek_param(v)    (v)->data[0].v_pointer
#define g_marshal_value_peek_pointer(v)  g_value_get_pointer (v)
#define g_marshal_value_peek_pointer(v)  (v)->data[0].v_pointer
#define g_marshal_value_peek_string(v)   (char*) g_value_get_string (v)
#define g_marshal_value_peek_string(v)   (v)->data[0].v_pointer
#define g_marshal_value_peek_uchar(v)    g_value_get_uchar (v)
#define g_marshal_value_peek_uchar(v)    (v)->data[0].v_uint
#define g_marshal_value_peek_uint64(v)   g_value_get_uint64 (v)
#define g_marshal_value_peek_uint64(v)   (v)->data[0].v_uint64
#define g_marshal_value_peek_uint(v)     g_value_get_uint (v)
#define g_marshal_value_peek_uint(v)     (v)->data[0].v_uint
#define g_marshal_value_peek_ulong(v)    g_value_get_ulong (v)
#define g_marshal_value_peek_ulong(v)    (v)->data[0].v_ulong
#define g_marshal_value_peek_variant(v)  g_value_get_variant (v)
#define g_marshal_value_peek_variant(v)  (v)->data[0].v_pointer
#define __%s_MARSHAL_H__
#define %s_%s	%s_%s
#define %s_%sv	%s_%sv
/dev/stdin
 *          Do not access GValues directly in your code. Instead, use the
#else /* !G_ENABLE_DEBUG */
#endif /* !G_ENABLE_DEBUG */
#endif /* __%s_MARSHAL_H__ */
__errno_location
failed to open "%s": %s
G_BEGIN_DECLS
gboolean
g_boxed_copy
g_boxed_free
  GCClosure *cc = (GCClosure*) closure;
g_cclosure_marshal
g_cclosure_marshal_BOOL__BOXED_BOXED
g_cclosure_marshal_BOOL__FLAGS
g_cclosure_marshal_STRING__OBJECT_POINTER
g_cclosure_marshal_VOID__BOOLEAN
g_cclosure_marshal_VOID__BOXED
g_cclosure_marshal_VOID__CHAR
g_cclosure_marshal_VOID__DOUBLE
g_cclosure_marshal_VOID__ENUM
g_cclosure_marshal_VOID__FLAGS
g_cclosure_marshal_VOID__FLOAT
g_cclosure_marshal_VOID__INT
g_cclosure_marshal_VOID__LONG
g_cclosure_marshal_VOID__OBJECT
g_cclosure_marshal_VOID__PARAM
g_cclosure_marshal_VOID__POINTER
g_cclosure_marshal_VOID__STRING
g_cclosure_marshal_VOID__UCHAR
g_cclosure_marshal_VOID__UINT
g_cclosure_marshal_VOID__UINT_POINTER
g_cclosure_marshal_VOID__ULONG
g_cclosure_marshal_VOID__VARIANT
g_cclosure_marshal_VOID__VOID
g_cclosure_user_marshal
GClosure     *closure,
G_END_DECLS
--g-fatal-warnings
  --g-fatal-warnings         Make warnings fatal (abort)
g_fprintf
G_GNUC_INTERNAL 
g_hash_table_destroy
g_hash_table_foreach_remove
g_hash_table_insert
g_hash_table_lookup
g_hash_table_new
GLIBC_2.0
GLIBC_2.1
glib-genmarshal
g_list_append
g_list_free
g_log_set_always_fatal
g_malloc
g_malloc0
  GMarshalFunc_%s callback;
g_marshal_value_peek_boolean
g_marshal_value_peek_boxed
g_marshal_value_peek_char
g_marshal_value_peek_double
g_marshal_value_peek_enum
g_marshal_value_peek_flags
g_marshal_value_peek_float
g_marshal_value_peek_int
g_marshal_value_peek_int64
g_marshal_value_peek_long
g_marshal_value_peek_object
g_marshal_value_peek_param
g_marshal_value_peek_pointer
g_marshal_value_peek_string
g_marshal_value_peek_uchar
g_marshal_value_peek_uint
g_marshal_value_peek_uint64
g_marshal_value_peek_ulong
g_marshal_value_peek_variant
__gmon_start__
GObject*
g_object_ref
g_object_unref
GParamSpec*
g_param_spec_ref
g_param_spec_unref
gpointer
  gpointer data1, data2;
  g_return_if_fail (n_param_values == %u);
  g_return_if_fail (return_value != NULL);
g_return_if_fail_warning
g_scanner_destroy
g_scanner_get_next_token
g_scanner_input_file
g_scanner_new
g_scanner_peek_next_token
g_scanner_unexp_token
g_slist_free
g_slist_prepend
g_slist_reverse
g_strconcat
g_strdup
g_strdup_printf
g_str_equal
g_strerror
g_str_hash
  G_VA_COPY (args_copy, args);
 *          g_value_get_*() functions
g_value_set_boolean
g_value_set_char
g_value_set_double
g_value_set_enum
g_value_set_flags
g_value_set_float
g_value_set_int
g_value_set_int64
g_value_set_long
g_value_set_pointer
g_value_set_uchar
g_value_set_uint
g_value_set_uint64
g_value_set_ulong
g_value_take_boxed
g_value_take_object
g_value_take_param
g_value_take_string
g_value_take_variant
GVariant*
g_variant_ref_sink
g_variant_unref
--header
  --header                   Generate C headers
Help Options:
  -h, --help                 Show this help message
http://www.gtk.org
iarg != NULL
#ifdef G_ENABLE_DEBUG
  if (G_CCLOSURE_SWAP_DATA (closure))
#ifndef __%s_MARSHAL_H__
#include	<glib-object.h>
information are available at %s
--internal
  --internal                 Mark generated functions as internal
_IO_stdin_used
_Jv_RegisterClasses
libc.so.6
__libc_start_main
libglib-2.0.so.0
libgthread-2.0.so.0
/lib/ld-linux.so.2
--nostdinc
overfull string (%u bytes) for padspace
(param_types[%i] & G_SIGNAL_TYPE_STATIC_SCOPE) == 0 && 
--prefix
--prefix=
  --prefix=string            Specify marshaller prefix
  register GCClosure *cc = (GCClosure*) closure;
  register GMarshalFunc_%s callback;
  register gpointer data1, data2;
  %s (arg%i);
  %s arg%i;
 %s callback (
%s comes with ABSOLUTELY NO WARRANTY.
%sconst GValue *param_values,
%s data1,
%sdata2);
%sgpointer      instance,
%sgpointer      invocation_hint,
%sgpointer      invocation_hint G_GNUC_UNUSED,
%sgpointer      marshal_data,
%sgpointer      marshal_data)
%sgpointer      marshal_data);
%sGType        *param_types)
%sGType        *param_types);
%sguint         n_param_values,
%sGValue       *return_value,
%sGValue       *return_value G_GNUC_UNUSED,
%s instance
%sint           n_params,
--skip-source
  --skip-source              Skip source location comments
  %s [OPTION...] [FILES...]
  %s (param_types[%i] & ~G_SIGNAL_TYPE_STATIC_SCOPE, arg%i);
  %s (return_value, v_return);
%s%s arg_%d
%s%s arg_%d,
%s%s data);
%s%s data2);
%s source package. Sources, examples and contact
%s%s (param_values + %d),
%s_%sv (
--stdinc
  --stdinc, --nostdinc       Include/use standard marshallers
string != NULL
%sva_list       args,
%s version 
  %s v_return;
the GNU General Public License which can be found in the
  typedef %s (*GMarshalFunc_%s) (
type name
unknown type: %s
Utility Options:
%u.%u.%u
  va_end (args_copy);
  va_list args_copy;
--valist-marshallers
  --valist-marshallers       Generate va_list marshallers
--version
 v_return =
  -v, --version              Print version informations
/* WARNING: This code accesses GValues directly, which is UNSUPPORTED API.
You may redistribute copies of %s under the terms of

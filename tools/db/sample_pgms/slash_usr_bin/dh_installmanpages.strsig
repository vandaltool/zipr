After the man page installation step, B<dh_installmanpages> will check to see
All filenames specified as parameters will be skipped by B<dh_installmanpages>.
	@allpackages=getpackages('');
	# And file does think it's a real man page?
around this, or use the much better L<dh_installman(1)> program instead).
at; symlinks are ignored.) It uses L<file(1)> to verify that the files are
automatically installing man pages into F<usr/share/man/>
B<dh_installmanpages> is a debhelper program that is responsible for
B<dh_installmanpages> scans the current directory and all subdirectories for
B<dh_installmanpages> [S<I<debhelper options>>] [S<I<file> ...>]
B<dh_installmanpages> will install the man pages it finds into B<all> packages
# Check if a file is a man page, for use by File::Find.
# Check if a file is a .so man page, for use by File::Find.
	close SOTEST;
debhelper. It is deprecated, and you are encouraged to use
				$destdir="$tmp/usr/$extdir/man/$langcode/man$section/";
			$destdir=~tr:/:/:s; # just for looks
dh_installmanpages - old-style man page installer (deprecated)
		    dirname($solink)) {
	# Does its filename look like a man page?
					doit "install","-d",$destdir;
				doit "install","-p","-m644",$page,$destdir.$instname;
		doit "ln","-sf",$sodest,$sofile;
		doit "rm","-f",$sofile;
Do not install these files as man pages, even if they look like valid man
		else {
	# .ex files are examples installed by deb-make,
filenames that look like man pages. (Note that only real files are looked
Files ending in F<.man> will be ignored.
Files specified as parameters that contain spaces in their filenames will
	# Find all filenames that look like man pages.
	find(\&find_man,'.'); # populates @manpages
			find(\&find_so_man, "$tmp/$dir");
			# for backwards compatibility.
	foreach my $dir (@allpackages) {
	foreach my $dir (qw{usr/share/man}) {
foreach my $package (@{$dh{DOPACKAGES}}) {
	foreach my $page (@manpages) {
		foreach my $skip (@ARGV) {
	foreach my $sofile (@sofiles) {
	# from configure, nor do we want CVS .#* files.
	# Good enough.
			# Handle translated man pages.
=head1 AUTHOR
=head1 BUGS
=head1 DESCRIPTION
=head1 NAME
=head1 OPTIONS
=head1 SEE ALSO
=head1 SYNOPSIS
if any of the man pages are F<.so> links. If so, it changes them to symlinks.
			if ($basename eq basename($skip)) {
		if (basename($File::Find::dir) eq
				if (! -d $destdir) {
			if (defined $langcode && $langcode ne '') {
			if (! -e "$destdir/$basename" && !-l "$destdir/$basename") {
		if (-e "$tmp/$dir") {
	if (! (-f $_ && /^.*\.[1-9].*$/ && ! /\.(ex|in)$/ && ! /^\.#/)) {
		if ($File::Find::dir=~m:debian/\Q$dir\E:) {
	if ($File::Find::dir=~m:debian/.*tmp.*:) {
	if (! -f $_ || -s $_ > 1024) {
		if ($install) {
	if ($l=~m/\.so\s+(.*)/) {
	if ($type !~ m/:.*roff/) {
in package build directories.
				$install=undef;
				$instname=~s/\.$langcode\./\./;
in the correct format. Then, based on the files' extensions, it installs 
=item I<file> ...
	# It's not in a tmp directory is it?
Joey Hess <joeyh@debian.org>
				last;
L<debhelper(7)>
L<dh_installman(1)> instead.
			# Look at basename of what's on connect line
	@manpages=();
my @allpackages;
		my $basename=basename($page);
			my $destdir="$tmp/usr/$extdir/man/man$section/";
			my $extdir="share";
		my $install=1;
			my $instname=$basename;
			my ($langcode)=$basename=~m/.*\.([a-z][a-z])\.([1-9])/;
	my $l=<SOTEST>;
my @manpages;
			my ($section)=$basename=~m/.*\.([1-9])/;
my @sodests;
		my $sodest=shift(@sodests);
my @sofiles;
		my $solink=$1;
	my $tmp=tmpdir($package);
	my $type=`file -z $_`;
	next if is_udeb($package);
not be processed properly.
	# Now the .so conversion.
	open (SOTEST,$_);
pages belong in. This is almost never what you really want (use B<-p> to work
		$page=~s:^\./::; # just for looks
	push @manpages,"$File::Find::dir/$_";
		push @sodests,$solink;
		push @sofiles,"$File::Find::dir/$_";
			return;
		return;
		# Skip all files listed on command line.
	@sofiles=@sodests=();
			$solink=basename($solink);
			$solink="../$solink";
sub find_man {
sub find_so_man {
	# Test first line of file for the .so thing.
them into the correct man directory.
	# The -s test is becuase a .so file tends to be small. We don't want
This is a DWIM-style program, with an interface unlike the rest of
This is useful if by default it installs some man pages that you do not
This program is a part of debhelper.
		# This test is here to prevent links like ... man8/../man8/foo.8
	# to open every man page. 1024 is arbitrary.
use Debian::Debhelper::Dh_Lib;
use File::Find;
use strict;
#!/usr/bin/perl -w
want to be installed.
warning("This program is deprecated, switch to dh_installman.");
	# we don't want those, or .in files, which are
you tell it to act on, since it can't tell what package the man

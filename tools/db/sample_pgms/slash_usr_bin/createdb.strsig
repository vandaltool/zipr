#  (at your option) any later version.
B<--cluster> is specified, it overrides the value of C<$PGCLUSTER>.
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
# (C) 2005-2009 Martin Pitt <mpitt@debian.org>
# Call a PostgreSQL client program with the version, cluster and default
change this to point to e. g. your home directory, so that you can use the
# Check for --cluster argument and filter it out, and check if --port is specified
# Check for PGCLUSTER in %ENV
# check if we have a network cluster
	    close PS;
configured cluster and database for the user and calls the appropriate version
# database specified in ~/.postgresqlrc or
        # default to cluster specific Unix socket directory
# Determine $version, $cluster, $db, $port from map files
    } else {
	$ENV{'LD_PRELOAD'} = ($ENV{'LD_PRELOAD'} or '') . ':' . $readlines[-1];
$ENV{'PGDATABASE'} = $db if $db && !$ENV{'PGDATABASE'};
        $ENV{'PGHOST'} = get_cluster_socketdir $version, $cluster;
$ENV{'PGHOST'} = $host if $host;
$ENV{'PGPORT'} = $port if $port && !$ENV{'PGPORT'};
$ENV{'PGSYSCONFDIR'} = '/etc/postgresql-common' if !$ENV{'PGSYSCONFDIR'};
        error '--cluster option needs an argument (<version>/<cluster>)' if ($i >= $#ARGV);
error 'Invalid PostgreSQL cluster version' unless -d "/usr/lib/postgresql/$version";
        error 'Invalid version specified with --cluster' unless version_exists $version;
    error 'Invalid version specified with $PGCLUSTER' unless version_exists $version;
        error 'No cluster specified with --cluster' unless $cluster;
    error 'No cluster specified with $PGCLUSTER' unless $cluster;
	error 'No existing local cluster is suitable as a default target. Please see man pg_wrapper(1) how to specify one.';
error 'pg_wrapper: invalid command name' unless $cmd;
	error 'Specified cluster does not exist locally and does not specify a remote cluster';
	error 'You must install at least one postgresql-client-<version> package.';
# /etc/postgresql-common/user_clusters.
exec @ARGV;
explicit specification with the B<--cluster> option
explicit specification with the B<PGCLUSTER> environment variable
file exists
for (my $i = 0; $i <= $#ARGV; ++$i) {
	# get multiarch dir for our architecture
#  GNU General Public License for more details.
=head1 AUTHOR
=head1 DESCRIPTION
=head1 ENVIRONMENT
=head1 FILES
=head1 NAME
=head1 OPTIONS
=head1 SEE ALSO
=head1 SYNOPSIS
	$host = $1;
$host = $ENV{'PGHOST'};
	$host = undef; # --cluster overrides $PGHOST env var
I<client-program> [B<--cluster> I<version>/I<cluster>] [...]
(I<client-program>: B<psql>, B<createdb>, B<dropuser>, and all other client
I<cluster> is either the name of a local cluster, or takes the form
    if ($ARGV[$i] eq '--cluster') {
    if ($cluster =~ /^(\S+):(\d*)$/) {
if ($cmdname eq 'psql') {
If C<$PGCLUSTER> is set, its value (of the form I<version>/I<cluster>)
if (defined $ENV{'PGCLUSTER'}) {
    if (get_versions) {
if (!$host && $cluster) {
if (!$host && $cluster && !cluster_exists $version, $cluster) {
If none of these rules match, B<pg_wrapper> aborts with an error.
If only one local cluster exists, that one will be selected.
	if (open PS, '-|', '/usr/bin/ldd', $cmd) {
    if (@readlines) {
If several local clusters exist, the one listening on the default port 5432
if (!$version and $port_specified) {
# if we only have a port, but no version here, use the latest version
I<host>:I<port> for a remote cluster. If I<port> is left empty (i. e. you just
is usually C</etc/postgresql/>, but for testing/development purposes you can
=item 1.
=item 2.
=item 3.
=item 4.
=item 5.
=item 6.
=item B<--cluster> I<version>B</>I<cluster>
=item B<PGCLUSTER>
=item B<PG_CLUSTER_CONF_ROOT>
=item C</etc/postgresql-common/user_clusters>
=item C<$HOME/.postgresqlrc>
#  it under the terms of the GNU General Public License as published by
        last;
    last if $ARGV[$i] eq '--';
# libreadline is a lot better than libedit, so prefer that
L<user_clusters(5)>), if that file exists
L<user_clusters(5)>, L<postgresqlrc(5)>
Martin Pitt L<E<lt>mpitt@debian.orgE<gt>>
matching entry in C</etc/postgresql-common/user_clusters> (see
matching entry in C<~/.postgresqlrc> (see L<postgresqlrc(5)>), if that
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
my $cmd = get_program_path ($cmdname, $version);
my $cmdname = (split '/', $0)[-1];
	    my ($lib_path) = $out =~ m!(/lib/.*)/libedit.so!;
	    my $out;
my $port_specified = exists $ENV{'PGPORT'};
    my @readlines;
my ($version, $cluster, $db, $port, $host);
    # non-multiarch path
of the desired program to connect to that cluster and database, supplying any
pg_wrapper - wrapper for PostgreSQL client commands
	$port = $2 || 5432;
    $port = get_cluster_port($version, $cluster);
    $port_specified = 1 if $ARGV[$i] eq '--port' || $ARGV[$i] =~ /^-\w*p\w*$/;
# port to a cluster version/name
postgresql-common tools without root privileges.
precedence:
programs in C</usr/lib/postgresql/>I<version>C</bin>. It determines the
programs installed in C</usr/lib/postgresql/>I<version>C</bin>).
    @readlines = sort(</lib/libreadline.so.?>);
	    @readlines = sort(<$lib_path/libreadline.so.?>);
	    read PS, $out, 10000;
specified options to that command.
specifies the desired cluster, similar to the B<--cluster> option. However, if
specify I<host:>), it defaults to 5432.
        splice @ARGV, $i, 2;
stores defaults set by the user himself.
stores the default cluster and database for users and groups as set by
the administrators. 
#  the Free Software Foundation; either version 2 of the License, or
The target cluster is selected by the following means, in descending order of
#  This program is distributed in the hope that it will be useful,
#  This program is free software; you can redistribute it and/or modify
This program is run only as a link to names which correspond to PostgreSQL
This specifies an alternative base directory for cluster configurations. This
# TODO: this could be improved by better argument parsing and mapping back the
    unless ($ENV{'PGHOST'}) {
    unless (@readlines) {
unless ($version) {
unshift @ARGV, $cmd;
use lib '/usr/share/postgresql-common';
use PgCommon;
use POSIX;
use strict;
#!/usr/bin/perl -w
($version, $cluster, $db) = user_cluster_map() unless $cluster;
        ($version, $cluster) = split ('/', $ARGV[$i+1], 2);
    ($version, $cluster) = split ('/', $ENV{'PGCLUSTER'}, 2);
    $version = get_newest_version;
will be selected.

            }
        );
        }
                . (($? & 128) ? ' with coredump' : '') . "!\n";
            . (($? & 128) ? ' with coredump' : '') . "!\n";
#  2008/10/01 v0.1i: First version of the wrapper script.
# along with this program; if not, write to the Free Software
# (at your option) any later version.
            . "but expected size is $size_pdfbox_jar!\n";
                . "but expected size is $size_pdfbox_zip!\n";
# but WITHOUT ANY WARRANTY; without even the implied warranty of
    # Can PDFBox already be found?
    # Check installation result
            check_prg $prg_curl, 0;
    check_prg $prg_java, 1;
    check_prg $prg_kpsewhich, 1;
        check_prg $prg_mktexlsr, 0;
    check_prg $prg_texhash, 0;
    check_prg $prg_unzip, 0;
        check_prg $prg_wget, 0;
        chomp $path;
    $cmd .= $is_win ? " \$$var" : " \\\$$var";
# Copyright (C) 2008 Heiko Oberdiek
    $cp .= "$sep$classpath" if $classpath;
    $cp .= "$sep$path_jar_pdfbox" if $path_jar_pdfbox;
    # Create directories
            '-d',
    debug 'Backticks',  $cmd;
    debug 'Backticks', $cmd;
debug('CLASSPATH', $classpath);
  'debug!' => \$debug,
  --debug     debug informations
        debug 'Exit code', '0/success';
    debug 'Exit code', ($? >> 8);
    debug 'Exit code', $exit_code;
debug('is_win', $is_win);
        debug $jar_name, $path;
            debug $jar_pax, $path_jar_pax;
                debug $jar_pdfbox, $path_jar_pdfbox;
    debug 'mkdir', $dir;
        debug "$pdfbox archive found", $dest_file;
    debug 'PDFBox in CLASSPATH', 'yes';
            debug 'Result', 'ok';
        debug 'Result', 'ok';
        debug 'System', "@cmd";
    debug 'System', "@cmd";
        debug "\$$var", $path;
    debug "Which $prg", '<not found>';
        debug "Which $prg", $path;
            $dest_file,
            die "$error Cannot execute `$prg_download' ($!)!\n";
        die "$error Cannot execute `$prg_java' ($!)!\n";
        die "!!! Error: Cannot execute `$prg_kpsewhich' ($!)!\n";
        die "$error Cannot execute `$prg_tds_update' ($!)!\n";
            die "$error Cannot execute `$prg_unzip' ($!)!\n";
        die "$error Cannot find `$jar_pax'!\n";
        die "$error Cannot find program `$prg'!\n";
    die "$error Installation failed, because $pdfbox library cannot be found!\n";
            die "$error `$prg_download' died with signal " . ($? & 127)
            die "$error `$prg_download' returns error code `$exit_code'!\n";
        die "$error `$prg_java' died with signal " . ($? & 127)
        die "!!! Error: `$prg_kpsewhich' died with signal " . ($? & 127)
        die "$error `$prg_tds_update' died with signal " . ($? & 127)
        die "$error `$prg_tds_update' returns error code `$exit_code'!\n";
            die "$error `$prg_unzip' died with signal " . ($? & 127)
        die "$error `$prg_unzip' not found!\n";
            die "$error `$prg_unzip' returns error code `$exit_code'!\n";
    # Download
        else {
    else {
        elsif ($? == -1) {
    elsif ($? == -1) {
        elsif ($? & 127) {
    elsif ($? & 127) {
END_OF_USAGE
    ensure_dir $tds_pax;
    ensure_dir $tds_pax_lib;
    ensure_dir $tds_root;
            $entry_pdfbox
        exit(0);
exit launch_pax;
              . ' --expand-var';
        -f $dest_file or die "$error Download failed!\n";
    -f $dest_jar or die "$error Unpacking failed!\n";
find_jar_pax;
    find_jar_pdfbox;
    # Find TEXMFVAR
                                   . " for downloading!\n";
    foreach my $dir (@dir_jar) {
        foreach my $jar (@jar_pdfbox) {
    foreach my $jar_pdfbox (@jar_pdfbox) {
    foreach my $var ('TEXMFVAR', 'VARTEXMF') {
            . " --format texmfscripts"
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
GetOptions(
# GNU General Public License for more details.
  'help!' => \$help
!$help or die $usage;
  --help      print usage
# History:
        if ($? == 0) {
    if ($? == 0) {
    if ($? == -1) {
    if ($? & 127) {
    if ($die) {
    if (file_size $dest_file == $size_pdfbox_zip) {
            if (-f $path) {
        if (-f $path) {
if ($install) {
    if ($path) {
    if (!$path_jar_pax) {
    if ($path_jar_pdfbox) {
if ($pdfbox_in_classpath) {
    if ($prg{$prg_texhash}) {
    if ($prg{$prg_unzip}) {
        if ($prg{$prg_wget}) {
!$install and (@ARGV >= 1 or die $usage);
  'install!' => \$install,
# install part
  --install   try installing PDFBox library
$is_win = 1 if $^O =~ /^MSWin(32|64)/i
# it under the terms of the GNU General Public License as published by
            '-j',
            . " $jar_name";
        last if $path_jar_pdfbox;
        last if $tds_root;
# MA 02110-1301  USA
# main program
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    mkdir $dir or die "$error Cannot create directory `$dir'!\n";
my $author      = "Heiko Oberdiek";
my $classpath = defined $ENV{'CLASSPATH'} ? $ENV{'CLASSPATH'} : '';
        my @cmd = (
        my @cmd;
    my $cmd = "kpsewhich"
    my @cmd = ($prg_java);
    my $cmd = $prg_kpsewhich
    my @cmd = ($prg_tds_update, $tds_root);
my $copyright   = "Copyright (c) 2008 by $author.";
    my $cp = "$path_jar_pax";
my $date        = "2008/10/01";
my $debug = 0;
    my $dest_file = "$tds_pax/PDFBox-0.7.3.zip";
    my $dest_jar = "$tds_pax_lib/$name_pdfbox_jar";
    my $die = shift;
my @dir_jar = qw[
    my $dir = shift;
my $entry_pdfbox    = "PDFBox-0.7.3/lib/$name_pdfbox_jar";
my $error = '!!! Error:';
            my $exit_code = $? >> 8;
        my $exit_code = $? >> 8;
    my $exit_code = $? >> 8;
my $file        = "$program.pl";
    my $file = shift;
my $help = 0;
my $install = 0;
my $is_win = 0;
    my $jar_name = shift;
my $jar_pax    = 'pax.jar';
my $jar_pdfbox = 'pdfbox.jar';
my @jar_pdfbox = qw[
    my $key = shift;
my $main_class = 'pax.PDFAnnotExtractor';
my $name        = 'PDFAnnotExtractor';
my $name_pdfbox_jar = 'PDFBox-0.7.3.jar';
    my $path = `$cmd`;
            my $path = "$dir/$jar";
        my $path = "$dir/$jar_pax";
my $path_jar_pax = '';
my $path_jar_pdfbox = '';
    my $path = which($prg);
my $pdfbox_in_classpath = $classpath =~ /PDFBox/ ? 1 : 0;
my $pdfbox = 'PDFBox';
my %prg;
my $prg_curl      = 'curl';
        my $prg_download;
my $prg_java      = 'java';
my $prg_kpsewhich = 'kpsewhich';
my $prg_mktexlsr  = 'mktexlsr';
    my $prg = shift;
    my $prg_tds_update;
my $prg_texhash   = 'texhash';
my $prg_unzip     = 'unzip';
my $prg_wget      = 'wget';
my $program     = "\L$name\E";
my $ret = 0;
    my $sep = $is_win ? ';' : ':';
        my $size = file_size $dest_file;
    my $size = file_size $dest_jar;
my $size_pdfbox_jar = 3321771;
my $size_pdfbox_zip = 22769102;
    my $tds_pax_lib = "$tds_pax/lib";
    my $tds_pax = $tds_root;
    my $tds_root;
my $title = "$name $version, $date - $copyright\n";
my $url_pdfbox = 'http://prdownloads.sourceforge.net/pdfbox/PDFBox-0.7.3.zip?download';
my $usage = <<"END_OF_USAGE";
    my $value = shift;
    my $var = shift;
my $version     = "0.1i";
Options:
                or die "$error File size of $dest_file is $size,\n"
            or die "$error File size of $dest_jar is $size,\n"
) or die $usage;
            or $^O =~ /^dos/i
            or $^O =~ /^os2/i;
    $path_jar_pax = find_jar $jar_pax;
            $path_jar_pax = $path;
        $path_jar_pdfbox = find_jar $jar_pdfbox;
              . "  $path_jar_pdfbox\n";
    $path_jar_pdfbox or die "$error Cannot find $pdfbox library!\n"
                $path_jar_pdfbox = $path;
    pdfbox-0.7.2.jar
    pdfbox-0.7.3.jar
    pdfbox.jar
            $prg_download = $prg_curl;
            $prg_download = $prg_wget;
            $prg{$prg_curl} or die "$error Cannot find programs `wget' or `curl'"
        $prg{$prg_mktexlsr} or die "$error Neither `$prg_texhash' nor `$prg_mktexlsr' found!\n";
        $prg{$prg} = $path;
        $prg_tds_update = $prg_mktexlsr;
       $prg_tds_update = $prg_texhash;
            $prg_unzip,
    print "* Downloaded: $dest_file\n";
    print "* $key: [$value]\n" if $debug;
        print "* Nothing to do, because $pdfbox is already found:\n"
print $title;
    print "* Unpacked: $dest_jar\n";
              . " --progname $program"
            . " --progname $program"
    push @cmd, @ARGV;
    push @cmd, '-cp';
    push @cmd, $cp;
        push @cmd, $dest_file;
            push @cmd, '-L';
    push @cmd, $main_class;
            push @cmd, '-o';
            push @cmd, $prg_curl;
            push @cmd, $prg_wget;
        push @cmd, $url_pdfbox;
                return;
            return;
    return '';
        return 0;
    return 0;
        return 1;
    return 1 if $prg{$prg};
    return -1 unless -f $file;
    return $exit_code;
    return if -d $dir;
    return if $path_jar_pax;
    return if $path_jar_pdfbox;
        return $path;
    return (stat $file)[7];
            . "See README and option `--install'.\n";
    $size == $size_pdfbox_jar
        $size == $size_pdfbox_zip
sub check_prg ($$) {
sub debug ($$) {
sub ensure_dir ($) {
sub expand_var ($) {
sub file_size ($) {
sub find_jar ($) {
sub find_jar_pax () {
sub find_jar_pdfbox () {
sub launch_pax () {
        system @cmd;
    system @cmd;
            $tds_pax_lib,
    $tds_pax .= '/pax';
    $tds_pax =~ s/(\/*)$/\/scripts/;
        $tds_root = expand_var $var;
    $tds_root or die "$error Cannot find settings for `TEXMFVAR' or `VARTEXMF'!\n";
# the Free Software Foundation; either version 2 of the License, or
# This file is part of PDFAnnotExtractor. See README.
# This program is distributed in the hope that it will be useful,
# This program is free software; you can redistribute it and/or modify
${title}Syntax:   $program [options] <PDF files[.pdf]>
    # Unpack jar file
    # Update TDS data base
use File::Which;
use Getopt::Long;
use strict;
#!/usr/bin/env perl
    /usr/local/share/java
    /usr/share/java
# You should have received a copy of the GNU General Public License

} continue {
  dbilogstrip dbitrace.log > dbitrace_stripped.log
dbilogstrip - filter to normalize DBI trace logs for diff'ing
  DBI_TRACE=2 perl yourscript.pl ...args1... 2>&1 | dbilogstrip > dbitrace1.log
  DBI_TRACE=2 perl yourscript.pl ...args2... 2>&1 | dbilogstrip > dbitrace2.log
DBI_TRACE enabled. Filter the output and trace through C<dbilogstrip> into a
  diff -u dbitrace1.log dbitrace2.log
eval 'exec /usr/bin/perl  -S $0 ${1+"$@"}'
=head1 DESCRIPTION
=head1 NAME
=head1 SYNOPSIS
    if 0; # not running under some shell
    # normalize hex addresses: 0xDEADHEAD => 0xN
    # normalize process and thread id number
    print or die "-p destination: $!\n";
Read DBI trace file C<dbitrace.log> and write out a stripped version to C<dbitrace_stripped.log>
Replaces any hex addresses, e.g, C<0x128f72ce> with C<0xN>.
Replaces any references to process id or thread id, like C<pid#6254> with C<pidN>.
Run C<yourscript.pl> twice, each with different sets of arguments, with
    s/ \b 0x [0-9a-f]+ /0xN/gx;
    s/ \b (pid|tid|thr) \W? \d+ /${1}N/gx;
separate file for each run. Then compare using diff. (This example assumes
So a DBI trace line like this:
  -> STORE for DBD::DBM::st (DBI::st=HASH(0x19162a0)~0x191f9c8 'f_params' ARRAY(0x1922018)) thr#1800400
  -> STORE for DBD::DBM::st (DBI::st=HASH(0xN)~0xN 'f_params' ARRAY(0xN)) thrN
use strict;
#!/usr/bin/perl
while (<>) {
will look like this:
you're using a standard shell.)

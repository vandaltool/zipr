        
            
        account = cpurple.PurpleAccountsFindAny(accountname, protocolname)
        account = cpurple.PurpleAccountsFindConnected(accountname, protocolname)
        account = findaccount(accountname, protocol)
    accountname = params.get("account", "")
            accounts = [cpurple.PurpleAccountsFindAny(accountname, protocol)]
                args = []
                args = argstr.split(",")
            argstr = match.group(2)
class CheckedAttribute:
class CheckedObject:
    command = match.group(5)
        connection = cpurple.PurpleAccountGetConnection(account)
        conversation = cpurple.PurpleConversationNew(1, account, params["screenname"])
cpurple = CheckedObject(purple)
        current = purple.PurpleSavedstatusGetCurrent()
            data = dbus.Interface(obj, "org.freedesktop.DBus.Introspectable").\
    def __call__(self, *args):
def convert(value):
def execute(uri):
def extendlist(list, length, fill):
def findaccount(accountname, protocolname):
    def __getattr__(self, attr):
    def __init__(self, cobj, attr):
    def __init__(self, obj):
def show_help(requested=False):
Each command is of one of the three types:
    elif command == "addbuddy":
    elif command == "getinfo":
    elif command == "getstatus":
    elif command == "getstatusmessage":
    elif command == "gochat":
    elif command == "quit":
    elif command == "setstatus":
    elif command == "uri":
elif (obj == None):
elif (sys.argv[1] == "--help" or sys.argv[1] == "-h"):
                            elif type == "i":
                            else:
            else:
        else:
    else:
Examples of commands:
    except:
            fargs = []
                fargs.append(convert(arg.strip()))
            for account in accounts:
            for arg in args:
                    for arg in method.all("arg"):
for arg in sys.argv[1:]:
            for method in introspect.all("method"):
        for param in paramstring.split("&"):
    FunctionName?param1=value1&param2=value2&...
    FunctionName(value1,value2,...)
    getstatus
    getstatusmessage
        if "account" in params:
                        if arg.getAttribute("direction") == "in":
            if argstr == "":
    if command == "goim":
                if command == method.getAttribute("name"):
    if len(list) < length:
if len(sys.argv) == 1:
        if match is not None:
        if "message" in params:
    if (output != None):
    if paramstring is not None:
    if protocol is not None:
    if protocol == "xmpp":
    if (requested):
        if result == 0:
        if "status" in params:
                            if type == "s":
            im = cpurple.PurpleConversationGetImData(conversation)
import codecs
import dbus
import re
import sys
import urllib
import xml.dom.minidom 
                   Introspect()
            # introspect the object to get parameter names and types
            introspect = xml.dom.minidom.parseString(data).documentElement
is not recommended; use purple-send or purple-send-async instead.  The
    jabber:addbuddy?screenname=my friend
    jabber:getinfo?screenname=testone@localhost
    jabber:gochat?room=TestRoom&server=conference.localhost
    jabber:goim?screenname=testone@localhost&message=hi
            key, value = extendlist(param.split("=",1), 2, "")
        match = re.match(r"(\w+)\s*\(([^)]*)\)", command)
    match = re.match(urlregexp, uri)
            message = params["message"];
            message = purple.PurpleSavedstatusGetMessage(current)
                    methodparams = []
                                methodparams.append(int(value))
                                methodparams.append(value)
            name = match.group(1)
    obj = dbus.SessionBus().get_object("im.pidgin.purple.PurpleService", "/im/pidgin/purple/PurpleObject")
obj = None
    output = execute(arg)
    params = {}
                                              params.get("group", ""), "")
            params[key] = urllib.unquote(value)
    paramstring = match.group(7)
    pass
        # prefer connected accounts
    print "No existing libpurple instance detected."
        print output
    print """This program uses D-Bus to communicate with purple.
    [protocol:]commandname?param1=value1&param2=value2&...
        protocol = "jabber"
    protocol = match.group(2)
        protocol = "prpl-" + protocol
    PurpleAccountsFindConnected?name=&protocol=prpl-jabber
    PurpleAccountsFindConnected(,prpl-jabber)
purple = dbus.Interface(obj, "im.pidgin.purple.PurpleInterface")
        purple.PurpleAccountConnect(account)
        purple.PurpleAccountSetStatusVargs(account, "online", 1)
            purple.PurpleConvImSend(im, params["message"])
                purple.PurpleSavedstatusActivateForAccount(current, account)
            purple.PurpleSavedstatusActivate(saved)
            purple.PurpleSavedstatusSetMessage(saved, message)
                purple.PurpleSavedstatusSetSubstatus(current, account, type, message)
    quit
                                raise Exception("Don't know how to handle type \"%s\"" % type)
            raise Exception("Error: %s %s returned %s" %
        result = self.cobj.obj.__getattr__(self.attr)(*args)
        return account
        return CheckedAttribute(self, attr)
        return cpurple.PurpleBlistRequestAddBuddy(account, params["screenname"],
        return int(value)
        return list
        return list + [fill] * (length - len(list))
        return None
                    return purple.__getattr__(command)(*methodparams)
            return purple.__getattr__(name)(*fargs)
        return purple.PurpleCoreQuit()
        return purple.PurpleSavedstatusGetMessage(current)
        return purple.ServGetInfo(connection, params["screenname"])
        return purple.ServJoinChat(connection, params)
        return result
        return status_id
        return value
            saved = purple.PurpleSavedstatusNew("", status_type)
    %s "command1" "command2" ...
second form uses introspection to find out the parameter names and
                            (self.attr, args, result))
        self.attr = attr
        self.cobj = cobj
        self.obj = obj
    setstatus?status=away&message=don't disturb
            show_help()
    show_help()
    show_help(True)
            status_id = params["status"]
            status_id = purple.PurplePrimitiveGetIdFromType(status_type)
        status_id = purple.PurplePrimitiveGetIdFromType(status_type)
                status = purple.PurpleAccountGetStatus(account, status_id)
            status_type = purple.PurplePrimitiveGetTypeFromId(status_id)
            status_type = purple.PurpleSavedstatusGetType(current)
        status_type = purple.PurpleSavedstatusGetType(current)
""" % sys.argv[0]
        sys.exit(0)
        sys.exit(1)
    sys.exit(1);
sys.stdin = codecs.getwriter('utf-8')(sys.stdin);
sys.stdout = codecs.getwriter('utf-8')(sys.stdout);
their types, therefore it is rather slow.
The second and third form are provided for completeness but their use
            # this is slow because the entire introspection info must be downloaded
    try:
        # try to get any account and connect it
                            type = arg.getAttribute("type")
                type = purple.PurpleStatusGetType(status)
urlregexp = r"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?"
#!/usr/bin/env python
                            value = params[arg.getAttribute("name")]
xml.dom.minidom.Element.all   = xml.dom.minidom.Element.getElementsByTagName

			arg=$1
		arg=${1#-o}
		arg="$(parse_mount_options "$arg")"
		args=("${args[@]}" "$1")
			args=("${args[@]}" "-o" "$arg")
#!/bin/bash
	case "$1" in
		case "$option" in
	case "$username" in
# converting those that are not recognized but map to available cifs
# Copyright 2007, Steve Langasek <vorlon@debian.org>
# Debian mount.smbfs compatibility wrapper
	echo $options
	echo "$username"
			echo "Warning: ignoring deprecated smbfs option '$option'" >&2
			echo "Warning: mapping 'guest' to 'guest,sec=none'" >&2
exec /sbin/mount.cifs "${args[@]}"
# exists.
# file /usr/share/common-licenses/GPL or <http://www.gnu.org/copyleft/gpl.txt>.
	for option in $@; do
		guest)
		if [ -n "$arg" ]; then
	if [ -n "$password" ]; then
	if [ -n "$workgroup" ]; then
			IFS=","
	IFS=","
			IFS="$OLD_IFS"
	IFS="$OLD_IFS"
		if [ -z "$arg" ]; then
# known bugs: quoted spaces in arguments are not passed intact
# Licensed under the GNU General Public License, version 2.  See the
	local OLD_IFS IFS options option username
	local workgroup password username
# necessary, convert them for use by mount.cifs
	OLD_IFS="$IFS"
	options=""
# options, and warning about the use of options for which no equivalent
			options="$options${options:+,}guest,sec=none"
			options="$options${options:+,}$option"
			options="$options${options:+,}sec=krb5"
			options="$options${options:+,}username=$username"
parse_mount_options () {
# parse out the mount options that have been specified using -o, and if
# passing through those that are also recognized by mount.cifs,
	password=""
	*%*)	password="${username#*%}"
# reverse the order of username and password in a "username" parameter,
reverse_username_workgroup() {
			shift
		sockopt=* | scope=* | codepage=* | ttl=* | debug=*)
		# so need to be parsed out
# taking care to leave any "%password" bit intact
# This script accepts all documented mount options for mount.smbfs,
		username=*/*)
	username="$1"
		# username and workgroup are reversed in username= arguments,
			username="${option#username=}"
			username="$(reverse_username_workgroup "$username")"
		username="${username%%/*}"
		username="${username%%%*}"
		username="$username%$password"
		username="$workgroup\\$username"
USER="$(reverse_username_workgroup "$USER")"
while [ "$#" -gt 0 ]; do
	workgroup=""
	*/*)	workgroup="${username#*/}"

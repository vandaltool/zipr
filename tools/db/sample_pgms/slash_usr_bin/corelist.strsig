      5.006001   undef
      5.006002   undef
      5.006      undef
      5.007003   1.00
      5.008001   1.02
      5.008002   1.02
      5.008003   1.02
      5.008004   1.03
      5.008005   1.04
      5.008006   1.04
      5.008007   1.05
      5.008008   1.06
      5.008      1.00
      5.009001   1.02
      5.009002   1.04
      5.009003   1.06
      5.009      1.02
all of the help
As a special case, if you specify the module name C<Unicode>, you'll get
    B                        1.09_01
    B::Asmdata               1.01
    B::Assembler             0.07
    B::Bblock                1.02_01
    B::Bytecode              1.01_01
    B::C                     1.04_01
    B::CC                    1.00_01
    B::Concise               0.66
    B::Debug                 1.02_01
    B::Deparse               0.71
    B::Disassembler          1.05
    B::Lint                  1.03
    B::O                     1.00
    B::Showlex               1.02
    B::Stackobj              1.00
    B::Stash                 1.00
    B::Terse                 1.03_01
    B::Xref                  1.01
Copyright (c) 2002-2007 by D.H. aka PodMaster
corelist - a commandline frontend to Module::CoreList
    corelist [-a|-d] <ModuleName> | /<ModuleRegex>/ [<ModuleVersion>] ...
    corelist -a utf8
    $ corelist File::Spec
    $ corelist File::Spec 0.83
    $ corelist File::Spec 0.89
    $ corelist File::Spec::Aliens
    $ corelist /IPC::Open/
    $ corelist /MANIFEST/i
    $ corelist /Template/
    corelist -v
    $ corelist -v 5.8.8 B
    $ corelist -v 5.8.8 /^B::/
    corelist [-v <PerlVersion>] [ <ModuleName> | /<ModuleRegex>/ ] ...
Currently maintained by the perl 5 porters E<lt>perl5-porters@perl.orgE<gt>.
date, and not by version number (as is the default).
        display_a($mod);
    } else {
	    } else {
	} else {
	else { die "Shouldn't happen" }
    eval 'exec /usr/bin/perl -S $0 ${1+"$@"}'
	    eval { $re = $2 ? qr/(?$2)($1)/ : qr/$1/; }; # trap exceptions while building regex
        exit 0;
	exit 0;
        exit 1;
    ExtUtils::Manifest was first released with perl 5.001
    File::Spec 0.83 was released with perl 5.007003
    File::Spec 0.89 was not in CORE (or so I think)
    File::Spec::Aliens  was not in CORE (or so I think)
    File::Spec was first released with perl 5.005
finds the first perl version where a module has been released by
    for my $mod (keys %$versions) {
	for my $mod ( sort keys %$version_hash ) {
    for my $v (grep !/000$/, sort keys %Module::CoreList::version ) {
GetOptions(\%Opts, qw[ help|?! man! v|version:s a! d ] );
	have_version_pm()
=head1 COPYRIGHT
=head1 DESCRIPTION
=head1 EXAMPLES
=head1 NAME
=head1 OPTIONS
=head1 SYNOPSIS
help! help! help! to see more help, try --man.
	    if ($@) {
    if ( !@ARGV ) {
if ( !@ARGV ) {
	if ($ARGV[0] =~ /=/) {
    if( defined $ret ) {
    if(defined $ret and exists $Opts{a} and $Opts{a}){
if(exists $Opts{v} ){
	    if (@mod) {
	if ($mod !~ m|^/(.*)/([imosx]*)$|) { # not a regex
    if ( $Opts{v} ) {
    if( !$Opts{v} ) {
	if $running_under_some_shell;
    if ($ver =~ /\..+\./) {
    if( !$version_hash ) {
	if ($version_hash) {
(If you have the C<version> module, you can also use new-style version numbers,
If you pass a version argument (value of C<$]>, like C<5.00503> or C<5.008008>),
In module filtering context, it can be used as Perl version filter.
    IPC::Open2 was first released with perl 5
    IPC::Open3 was first released with perl 5
=item -a
=item -d
=item -man
=item -? or -help
=item -v
like C<5.8.8>.)
lists all of the perl release versions we got the CoreList for.
lists all versions of the given module (or the matching modules, in case you
        $max = max($max, length $mod);
	    $mod = shift @ARGV;
	: Module::CoreList->first_release(@_);
	? Module::CoreList->first_release_by_date(@_)
	? Module::CoreList->removed_from_by_date($mod)
	: Module::CoreList->removed_from($mod);
	    module_version($mod,$ver);
		module_version($_, $ver) for @mod;
	    ($mod, $ver) = split /=/, shift @ARGV;
        $msg .= " and removed from " . format_perl_version($rem) if $rem;
        $msg .= "first " unless $ver;
        $msg .= "released with perl " . format_perl_version($ret);
    $msg .= " $ver" if $ver;
        $msg .= " was ";
        $msg .= " was not in CORE (or so I think)";
		my $errmsg = $@ =~ /(.*);/ ? $1 : $@;
    my $have_version_pm;
    my $max = 0;
	my $max_mod_len = max_mod_len($version_hash);
	    my @mod = Module::CoreList->find_modules($re);
    my $mod = shift;
    my($mod,$ver) = @_;
	my ($mod, $ver);
        my $mod_v = $Module::CoreList::version{$v}{$mod} || 'undef';
    my $msg = $mod;
	my $numeric_v = numify_version($Opts{v});
    my $num_v = numify_version( $Opts{v} );
my %Opts;
	    my $re;
    my $rem = $Opts{d}
    my $ret = $Opts{d}
    my($this, $that) = @_;
    my $ver = shift;
	my $version_hash = Module::CoreList->find_version($numeric_v);
    my $version_hash = Module::CoreList->find_version($num_v);
    my $versions = shift;
    my $v = shift;
        next unless exists $Module::CoreList::version{$v}{$mod};
	    or die "You need to install version.pm to use dotted version numbers\n";
    pod2usage(0);
pod2usage(1) if $Opts{help};
pod2usage(-verbose=>2) if $Opts{man};
        printf "  %-10s %-10s\n", format_perl_version($v), $mod_v;
	    printf "%-${max_mod_len}s  %s\n", $mod, $version_hash->{$mod} || "";
        print format_perl_version($_)."\n" for sort keys %Module::CoreList::version;
	    print $mod, " ", $version_hash->{$mod} || 'undef', "\n";
        print "\n";
    print "\n";
	print "\n";
        print "\nModule::CoreList has info on the following perl versions:\n";
        print "\nModule::CoreList has no info on perl $Opts{v}\n\n";
		print "\n$mod $ver has no match in CORE (or so I think)\n";
    print "\n",$msg,"\n";
	print "\nThe following modules were in perl $Opts{v} CORE\n";
		# regex errors are usually like 'Quantifier follow nothing in regex; marked by ...'
requested perl versions.
	    return;
        return $have_version_pm = eval { require version; 1 };
        return $have_version_pm if defined $have_version_pm;
    return $max;
    return $that;
    return $this if $this > $that;
    return $ver;
    return version->new($v)->normal;
    return $v if $v < 5.006 or !have_version_pm;
See http://perl.org/ or http://cpan.org/ for more info on that.
See L<Module::CoreList> for one.
sub display_a {
sub format_perl_version {
    sub have_version_pm {
sub max {
sub max_mod_len {
sub module_version {
sub numify_version {
    /Template/  has no match in CORE (or so I think)
		# then we drop text after ';' to shorten message
the version number of the Unicode Character Database bundled with the
This program is distributed under the same terms as perl itself.
used a module regexp) in the perls Module::CoreList knows about.
use Getopt::Long;
use Module::CoreList;
use Pod::Usage;
use strict;
use warnings;
#!/usr/bin/perl
    utf8 was first released with perl 5.006
		$ver |= '';
    $ver += 0;
	    $ver = (@ARGV && $ARGV[0] =~ /^\d/) ? shift @ARGV : "";
        $ver = version->new($ver)->numify;
		warn "\n$mod  is a bad regex: $errmsg\n";
while (@ARGV) {
you get a list of all the modules and their respective versions.

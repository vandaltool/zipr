        ]
          ("1. If no serial number, USB ID, IP, or device node is specified, the USB and parallel busses will be probed for devices.", "", 'note', False),
          ("2. Using 'lsusb' to obtain USB IDs: (example)", "", 'note', False),
          ("3. Parameters -a, -f, -p, or -t are not valid in GUI (-u) mode.", "", 'note', True),
        a = a.strip().lower()
# along with this program; if not, write to the Free Software
            app.exec_()
        app.exec_loop()
                app.installTranslator(trans)
        app = QApplication(sys.argv)
        app.setMainWidget(w)
# (at your option) any later version.
# Author: Don Welch
                       'auto', 'device=', 'rm', 'remove'],
auto = False
          ("Automatic mode:", "-a or --auto (-i mode only)", "option", False),
        auto = True
        back_end, is_hp, bus, model, \
                    break
                        break
                            break
                                break
                                    break
                                        break
          ("         Bus 003 Device 011: ID 03f0:c202 Hewlett-Packard", "", 'note', False),
bus = None
            bus = tui.connection_table()
        bus = [x.lower().strip() for x in a.split(',')]
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# (c) Copyright 2003-2009 Hewlett-Packard Development Company, L.P.
            # Check for duplicate names
                    cmd = 'hp-testpage %s' % param
                    cmd = 'python ./testpage.py %s' % param
# -*- coding: utf-8 -*-
        # ******************************* CONNECTION TYPE CHOOSER
                                    continue
        cups.setPasswordCallback(showPasswordUI)
            cups.setPasswordPrompt("You do not have permission to add a fax device.")
            cups.setPasswordPrompt("You do not have permission to add a printer.")
                                current_phone_num = str(d.getPhoneNum())
                                current_station_name = str(d.getStationName())
                        d.close()
            default_model = utils.xstrip(model.replace('series', '').replace('Series', ''), '_')
        default_model = utils.xstrip(model.replace('series', '').replace('Series', ''), '_')
def plugin_download_callback(c, s, t):
def restart_cups():
def showPasswordUI(prompt):
                                desc = ''
                                desc = nickname_pat.search(nickname).group(1)
        # ******************************* DEVICE CHOOSER
            device.parseDeviceURI(device_uri)
        device_uri = a
            device_uri = mod.getDeviceUri(device_uri, selected_device_name, devices = device.probeDevices(bus))
            device_uri, sane_uri, fax_uri = device.makeURI(param, jd_port)
          ("DEVNODE (parallel only):", '"/dev/parportX", X=0,1,2,...', "option", False),
                d = fax.getFaxDevice(fax_uri, disable_dbus=True)
        dlg = SetupDialog(None, param, jd_port, device_uri, remove)
        dlg.show()
__doc__ = "Installs HPLIP printers and faxes in the CUPS spooler. Tries to automatically determine the correct PPD file to use. Allows the printing of a testpage. Performs basic fax parameter setup."
                    d.open()
                                d.setPhoneNum(phone_num)
                                d.setStationName(station_name)
            elif aa.strip() == 'fax':
    elif o in ('-a', '--auto'):
    elif o in ('-b', '--bus'):
    elif o in ('-d', '--device'):
    elif o in ('-f', '--fax'):
    elif o in ('-P', '-p', '--printer'):
    elif o in ('-r', '--rm', '--remove'):
    elif o in ('-t', '--type'):
    elif o == '--port':
    elif os.path.exists('/etc/init.d/cupsys'):
                                else:
                            else:
                        else:
                else:
            else:
        else:
    else:
            else: # hpijs
else: # INTERACTIVE_MODE
    else: # qt4
                enter_ppd = False
            enter_ppd = False
                enter_ppd = True
            e = 'utf8'
                            except AttributeError:
                            except Error:
                except Error:
        except Error:
            except ImportError:
        except ImportError:
except ImportError:
except IndexError:
        except KeyboardInterrupt:
    except KeyboardInterrupt:
            except locale.Error:
            except ValueError:
        except ValueError:
            fax_default_model = default_model + '_fax'
                            fax_default_model += "_%d" % i
                fax_default_model in installed_fax_devices[fax_uri]:
        # ******************************* FAX HEADER SETUP
        fax_name = a
                fax_name = default_model + '_fax'
                            fax_name = fax_default_model
                fax_name = fax_default_model
fax_name = None
                fax_name not in installed_fax_devices[fax_uri]:
                        fax_name = raw_input(log.bold("\nPlease enter a name for this fax queue (m=use model name:'%s'*, q=quit) ?" % fax_default_model))
                    fax_ppd = f
                    fax_ppd_name = 'HP-Fax2-hpcups'
                    fax_ppd_name = 'HP-Fax2-hpijs'
                    fax_ppd_name = 'HP-Fax-hpcups'
                    fax_ppd_name = 'HP-Fax-hpijs'
        # ******************************* FAX QUEUE SETUP
            fax_type = mq.get('fax-type', FAX_TYPE_NONE)
        fax_uri = device_uri.replace("hp:", "hpfax:")
                        file_path = user_input
                    finally:
        for aa in a.split(','):
                        for c in fax_name:
                        for c in printer_name:
                        for d in installed_fax_devices.keys():
        for d in installed_fax_devices.keys():
                        for d in installed_print_devices.keys():
        for d in installed_print_devices.keys():
                            for f in installed_fax_devices[d]:
            for f in installed_fax_devices[d]:
            for f in ppds:
for o, a in opts:
                            for p in installed_print_devices[d]:
            for p in installed_print_devices[d]:
                                for x in phone_num:
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
from base.g import *
from base import device, utils, tui, models, module
                from fax import fax
from prnt import cups
            from PyQt4.QtGui import QApplication, QMessageBox
            from qt import *
            from ui4.setupdialog import SetupDialog
            from ui import setupform
# GNU General Public License for more details.
                      handle_device_printer=False)
          ("hp-makeuri", "", "seealso", False),
            hp_plugin = utils.which('hp-plugin')
          ("hp-probe", "", "seealso", False),
          ("   $ hp-setup --auto 003:011", "", 'note', False),
                        i += 1
                    i = 2
            if aa.strip() not in ('print', 'fax'):
            if aa.strip() == 'print':
                            if ans: print_ppd = file_path
            if auto:
            if auto: # or fax_name is None:
            if bus is None:
                            if c in (' ', '#', '/', '%'):
                            if c in cups.INVALID_PRINTER_NAME_CHARS:
                                if current_phone_num:
                                if current_phone_num and (not phone_num or phone_num.strip().lower() == 'c'):
                                if current_station_name:
                                if current_station_name and (not station_name or station_name.strip().lower() == 'c'):
                            if desc:
            if device_uri in installed_print_devices and \
                if enter_ppd:
            if enter_ppd:
                                if fax_name == f:
                if fax_name is None:
   if fax_name is not None:
                        if fax_name.lower().strip() == 'q':
                                if fax_name == p:
                if fax_type == FAX_TYPE_SOAP or fax_type == FAX_TYPE_LEDMSOAP:
            if fax_uri in installed_fax_devices and \
            if fax_uri not in installed_fax_devices or \
                if f.find(fax_ppd_name) >= 0:
                            if file_path.endswith('.gz'):
            if hp_plugin:
                    if info.strip().lower() == 'q':
                if len(path) > 0:
                                if len(phone_num) > 50:
                                if len(station_name) > 50:
            if loaded:
                    if location.strip().lower() == 'q':
        if loc == 'c':
        if loc is None:
        if loc.lower() != 'c':
            if loc.lower() == 'system':
if mode == GUI_MODE:
        if mq.get('fax-type', FAX_TYPE_NONE) in (FAX_TYPE_NONE, FAX_TYPE_NOT_SUPPORTED) and setup_fax:
                        if name_ok:
                    if not ans: enter_ppd = True
                if not auto:
            if not auto:
        if not auto:
            if not auto and fax_uri in installed_fax_devices:
            if not auto and print_uri in installed_print_devices:
        if not device_uri:
        if not device_uri and bus is None:
        if not device.validateBusList(bus, False):
                        if not fax_name or fax_name.lower().strip() == 'm':
        if not mq or mq.get('support-type', SUPPORT_TYPE_NONE) == SUPPORT_TYPE_NONE:
                                if not ok:
                            if not ok: sys.exit(0)
                    if not ok: sys.exit(0)
                if not ok: sys.exit(0)
            if not os.path.exists(fax_ppd): # assume foomatic: or some such
            if not os.path.exists(print_ppd): # assume foomatic: or some such
                        if not printer_name or printer_name.lower().strip() == 'm':
                if not prop.fax_build:
                    if not user_input:
        if not utils.canEnterGUIMode():
        if not utils.canEnterGUIMode4():
                        if ok:
    if os.path.exists('/etc/init.d/cups'):
                        if os.path.exists(file_path) and os.path.isfile(file_path):
    if o == '-x':
        if param:
                                if phone_num.strip().lower() == 'q':
        if plugin > PLUGIN_NONE and not plugin_installed:
                if printer_name:
                                if printer_name == f:
                if printer_name is None:
if printer_name is not None:
                        if printer_name.lower().strip() == 'q':
                                if printer_name == p:
            if print_ppd is None:
            if print_test_page:
            if print_uri not in installed_print_devices or \
                if prop.gui_build:
            if prop.hpcups_build:
        if remove:
    if selected_device_name is not None: 
            if setup_fax:
        if setup_fax:
        if setup_fax and not prop.fax_build:
        if setup_print:
                                if station_name.strip().lower() == 'q':
                if testpage_in_auto_mode:
                        if t not in installed_fax_devices[fax_uri]:
                        if t not in installed_print_devices[device_uri]:
                                if tries > 12:
    if ui_toolkit == 'qt3':
                    if user_input in ('y', 'n', 'q'):
                        if user_input.lower().strip() == 'q':
                    if user_input == 'q':
                                    if x not in '0123456789-(+) ':
import getopt
    import getpass
import gzip
import os
import os.path
import re
    import readline
import sys
import time
                    info = raw_input(log.bold("Enter additonal information or notes for this printer (q=quit) ?"))
            installed_fax_devices = device.getSupportedCUPSDevices(['hpfax'])
        installed_fax_devices = device.getSupportedCUPSDevices(['hpfax'])
            installed_print_devices = device.getSupportedCUPSDevices(['hp'])
        installed_print_devices = device.getSupportedCUPSDevices(['hp'])
                    (INTERACTIVE_MODE, GUI_MODE),
          ("IPs (network only):", 'IPv4 address "a.b.c.d" or "hostname"', "option", False),
# it under the terms of the GNU General Public License as published by
jd_port = 1
            jd_port = int(a)
                    ', '.join(installed_print_devices[print_uri]))
                l = loc
            loaded = trans.load(qm_file, prop.localization_dir)
                locale.setlocale(locale.LC_ALL, locale.normalize(loc))
                    location, '', fax_ppd, info)
                    location, fax_ppd, '', info)
                location, info = '', 'Automatically setup by HPLIP'
                    location, '', print_ppd, info)
                    location, print_ppd, '', info)
                    location = raw_input(log.bold("Enter a location description for this printer (q=quit) ?"))
                loc = 'c'
                loc = '.'.join([l, e])
                loc = '.'.join([loc, e])
                loc = str(QTextCodec.locale())
            loc = user_conf.get('ui', 'loc', 'system')
            log.debug("addPrinter() returned (%d, %s)" % (status, status_str))
                log.debug(cmd)
                log.debug("found fax queue '%s'" % f)
                    log.debug("Found PDD file: %s" % fax_ppd)
                log.debug("found print queue '%s'" % p)
            log.debug(installed_fax_devices)
        log.debug("Model=%s" % model)
            log.debug("Name of .qm file: %s" % qm_file)
            log.debug("\nDEVICE CHOOSER setup_fax=%s, setup_print=%s" % (setup_fax, setup_print))
log.debug("param=%s" % param)
            log.debug("Restart CUPS returned: exit=%d output=%s" % (status, output))
            log.debug("Restarting CUPS...")
log.debug("selected_device_name=%s" % selected_device_name)
            log.debug("Starting GUI loop...")
        log.debug("Sys.argv=%s printer_name=%s param=%s jd_port=%s device_uri=%s remove=%s" % (sys.argv, printer_name, param, jd_port, device_uri, remove))
            log.debug("Trying to load .qm file for %s locale." % loc)
            log.debug("Using default 'C' locale")
            log.debug("Using locale: %s" % loc)
                log.debug("Using system locale: %s" % loc)
                                    log.error("A fax queue with that name already exists. Please enter a different name.")
                                    log.error("A print queue with that name already exists. Please enter a different name.")
                    log.error("Cannot enable fax setup - HPLIP not built with fax enabled.")
            log.error("Cannot setup fax - HPLIP not built with fax enabled.")
                                log.error("Could not communicate with device. Device may be busy.")
                                log.error("Could not communicate with device. Device may be busy. Please wait for retry...")
                log.error("Fax queue setup failed. Please restart CUPS and try again.")
                            log.error("File not found or not an appropriate (PPD) file.")
                                log.error("Invalid character '%s' in fax name. Please enter a name that does not contain this character." % c)
                                        log.error("Invalid characters in phone number. Please only use 0-9, -, (, +, and )")
                                log.error("Invalid character '%s' in printer name. Please enter a name that does not contain this character." % c)
            #log.error("Invalid port number. Must be between 1 and 3 inclusive.")
                                    log.error("Name/company length is too long (>50 characters). Please enter a shorter name/company.")
                                log.error("No PPD 'NickName' found. This file may not be a valid PPD file.")
                                    log.error("Phone number length is too long (>50 characters). Please enter a shorter number.")
                    log.error("Please enter 'y' or 'n'")
                    log.error("PPD file required. Setup cannot continue. Exiting.")
                log.error("Printer queue setup failed. Please restart CUPS and try again.")
            log.error("-r/--rm/--remove not supported in -i mode.")
            log.error("%s requires GUI support (try running with --qt3). Also, try using interactive (-i) mode." % __mod__)
            log.error("%s requires GUI support (try running with --qt4). Also, try using interactive (-i) mode." % __mod__)
                    log.error("Unable to communicate with the device. Please check the device and try again.")
            log.error("Unable to connect to HPLIP I/O. Please (re)start HPLIP and try again.")
                log.error("Unable to find an appropriate PPD file.")
                log.error("Unable to find HP fax PPD file! Please check you HPLIP installation and try again.")
            log.error("Unable to load Qt3 support. Is it installed?")
            log.error("Unable to load Qt4 support. Is it installed?")
            log.error("Unsupported printer model.")
        log.error("User exit")
            log.info("")
        log.info("")
log.info("")
                                log.info("Description for the file: %s" % desc)
                log.info("Description: %s" % desc)
            log.info("Device URI: %s" % fax_uri)
            log.info("Device URI: %s" % print_uri)
log.info("Done.")
            log.info("Information: %s" % info)
            log.info("Locating PPD file... Please wait.")
            log.info("Location: %s" % location)
            log.info(log.bold("\nAdding fax queue to CUPS:"))
            log.info(log.bold("\nAdding print queue to CUPS:"))
        log.info(log.bold("\nSetting up device: %s\n" % device_uri))
                log.info("\nFound PPD file: %s" % print_ppd)
                    log.info("\nNote: The model number may vary slightly from the actual model number on the device.")
            log.info("(Note: Defaults for each question are maked with a '*'. Press <enter> to accept the default.)")
                                log.info("\nParameters sent to device.")
            log.info("\nUsing connection type: %s" % bus[0])
                                    log.info("OK, done.")
                            log.info("OK, done.")
                        log.info("OK, done.")
            log.info("PPD file: %s" % fax_ppd)
            log.info("PPD file: %s" % print_ppd)
            log.info("Queue name: %s" % fax_name)
            log.info("Queue name: %s" % printer_name)
            log.info("Using queue name: %s" % fax_name)
            log.info("Using queue name: %s" % printer_name)
            #log.warning("Cannot setup fax - device does not have fax feature.")
                log.warning("Fax setup disabled - Python 2.3+ required.")
                log.warning("One or more fax queues already exist for this device: %s." % ', '.join(installed_fax_devices[fax_uri]))
                log.warning("One or more print queues already exist for this device: %s." %
        log.warning("-p or -f option is not supported")
            log.warn("-r/--rm/--remove not supported in qt3 mode.")
          ("   $ lsusb", "", 'note', False),
                l, x = loc.split('.')
        # ******************************* MAKEURI
makeuri = None
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                      'method=', 'time-out=', 'timeout=',
__mod__ = 'hp-setup'
mod = module.Module(__mod__, __title__, __version__, __doc__, USAGE,
    mod.parseStdOpts('axp:P:f:t:b:d:r',
            mod.usage(error_msg=['Invalid bus name'])
            mod.usage(error_msg=['Invalid port number. Must be between 1 and 3 inclusive.'])
                mod.usage(error_msg=['Invalid type.'])
        mq = device.queryModelByURI(device_uri)
                                    name_ok = False
                                name_ok = False
                        name_ok = True
          ("Network:", "$ hp-setup -i 66.35.250.209", "example", False),
          ("Network, Jetdirect port 2:", "$ hp-setup -i --port=2 66.35.250.209", "example", False),
                                nickname = file(file_path, 'r').read(4096)
                                nickname = gzip.GzipFile(file_path, 'r').read(4096)
nickname_pat = re.compile(r'''\*NickName:\s*\"(.*)"''', re.MULTILINE)
        norm_model = models.normalizeModelName(model).lower()
          ("No testpage in automatic mode:", "-x (-i mode only)", "option", False),
          ("   (Note: You may have to run 'lsusb' from /sbin or another location. Use '$ locate lsusb' to determine this.)", "", 'note', True),
                    ok, ans = tui.enter_yes_no("\nDoes this PPD file appear to be the correct one")
                            ok, ans = tui.enter_yes_no("\nUse this file")
                ok, enter_ppd = tui.enter_yes_no("\nWould you like to specify the path to the correct PPD file to use", 'n')
                                        ok = False
                                ok = False
                    ok = False
                ok, print_test_page = tui.enter_yes_no("\nWould you like to print a test page")
                ok, setup_fax = tui.enter_yes_no("\nWould you like to install another fax queue for this device", 'n')
                ok, setup_print = tui.enter_yes_no("\nWould you like to install another print queue for this device", 'n')
                                ok = True
                        ok = True
          ("One USB printer attached, automatic:", "$ hp-setup -i -a", "example", False),
opts, device_uri, printer_name, mode, ui_toolkit, loc = \
                os.system(cmd)
                    os.system("hp-plugin")
                    os.system("hp-plugin -i")
          ("Parallel, automatic, no testpage:", "$ hp-setup -i -a -x /dev/parport0", "example", False),
          ("Parallel, choose device:", "$ hp-setup -i -b par", "example", False),
          ("Parallel:", "$ hp-setup -i /dev/parport0", "example", False),
    param = ''
                    param = "-d%s" % print_uri
    param = mod.args[0]
                    param = "-p%s" % printer_name
    pass
                pass
    password = getpass.getpass("Password: ")
                path = utils.which('hp-testpage')
                                    phone_num = current_phone_num
                                    phone_num = raw_input(log.bold("\nEnter the fax phone number for this device (c=use current:'%s'*, q=quit) ?" % current_phone_num))
                                    phone_num = raw_input(log.bold("\nEnter the fax phone number for this device (q=quit) ?"))
        # ******************************* PLUGIN
        plugin_installed = utils.to_bool(sys_state.get('plugin', 'installed', '0'))
        plugin = mq.get('plugin', PLUGIN_NONE)
pm = None
    pm.update(int(100*c*s/t),
        ppds = cups.getSystemPPDs()
    print ""
            printer_default_model = default_model
                            printer_default_model += "_%d" % i
                printer_default_model in installed_print_devices[device_uri]:
                      'printer=', 'fax=', 'type=', 'port=',
        printer_name = a
                printer_name = default_model
printer_name = None
                printer_name not in installed_print_devices[print_uri]:
                            printer_name = printer_default_model
                printer_name = printer_default_model
                        printer_name = raw_input(log.bold("\nPlease enter a name for this print queue (m=use model name:'%s'*, q=quit) ?" % printer_default_model))
    print log.bold(prompt)
            print_ppd = cups.getPPDFile2(stripped_model, ppds)
                print_ppd, desc = print_ppd
        # ******************************* PRINT QUEUE SETUP
            print_test_page = False
                    print_test_page = True
        print_uri = device_uri.replace("hpfax:", "hp:")
            prop.locale = loc
            QLocale.setDefault(QLocale(loc))
            qm_file = 'hplip_%s.qm' % l
        QObject.connect(app, SIGNAL("lastWindowClosed()"), app, SLOT("quit()"))
        # ******************************* QUERY MODEL AND COLLECT PPDS
remove = False
          ("Remove printers or faxes instead of setting-up:", "-r or --rm or --remove (-u only)", "option", False),
        remove = True
        return '/etc/init.d/cups restart'
        return '/etc/init.d/cupsys restart'
        return 'killall -HUP cupsd'
    return (username, password)
                    run_as_root_ok=True)
      selected_device_name = fax_name
selected_device_name = None
   selected_device_name = printer_name
            serial, dev_file, host, zc, port = \
          ("SERIAL NO. (usb and parallel only):", '"serial no."', "option", True),
          ("[SERIAL NO.|USB ID|IP|DEVNODE]", "", "heading", False),
                #service.sendEvent(hpssd_sock, EVENT_CUPS_QUEUES_CHANGED, device_uri=fax_uri)
                #service.sendEvent(hpssd_sock, EVENT_CUPS_QUEUES_CHANGED, device_uri=print_uri)
                setup_fax = False
            setup_fax = False
        setup_fax, setup_print = False, False
                    setup_fax = True
setup_fax = True
                    setup_fax = (user_input == 'y')
                setup_print = True
setup_print = True
          ("Setup using GUI mode:", "$ hp-setup", "example", False),
          ("Setup using GUI mode, specifying an IP:", "$ hp-setup 192.168.0.101", "example", False),
          ("Setup using GUI mode, specifying usb:", "$ hp-setup -b usb", "example", False),
                                    station_name = current_station_name
                                    station_name = raw_input(log.bold("\nEnter the name and/or company for this device (c=use current:'%s'*, q=quit) ?" % current_station_name))
                                    station_name = raw_input(log.bold("\nEnter the name and/or company for this device (q=quit) ?"))
            status, output = utils.run(restart_cups())
                status, status_str = cups.addPrinter(fax_name.encode('utf8'), fax_uri,
                status, status_str = cups.addPrinter(printer_name.encode('utf8'), print_uri,
# Std Lib
        stripped_model = cups.stripModel2(default_model)
            stripped_model = default_model.lower().replace('hp-', '').replace('hp_', '')
                                    sys.exit(0)
                            sys.exit(0)
                        sys.exit(0)
                sys.exit(0)
            sys.exit(0)
                    sys.exit(1)
                sys.exit(1)
            sys.exit(1)
        # ******************************* TEST PAGE
        testpage_in_auto_mode = False
testpage_in_auto_mode = True
                        t = fax_default_model + "_%d" % i
# the Free Software Foundation; either version 2 of the License, or
                # This can fail on Python < 2.3 due to the datetime module
# This program is distributed in the hope that it will be useful,
# This program is free software; you can redistribute it and/or modify
                                time.sleep(5)
__title__ = 'Printer/Fax Setup Utility'
                # TODO:
                    # TODO: Validate chars
          ("To specify a CUPS fax queue name:", "-f<fax> or --fax=<fax> (-i mode only)", "option", False),
          ("To specify a CUPS printer queue name:", "-p<printer> or --printer=<printer> (-i mode only)", "option", False),
          ("To specify the device URI to install:", "-d<device> or --device=<device> (--qt4 mode only)", "option", False),
          ("To specify the port on a multi-port JetDirect:", "--port=<port> (Valid values are 1\*, 2, and 3. \*default)", "option", False),
                        t = printer_default_model + "_%d" % i
            trans = QTranslator(None)
                        tries = 0
                            tries += 1
                            try:
                    try:
                try:
            try:
        try:
    try:
                     ['ttl=', 'filter=', 'search=', 'find=',
            tui.header("FAX HEADER SETUP")
            tui.header("FAX QUEUE SETUP")
            tui.header("PLUG-IN INSTALLATION")
            tui.header("PRINTER TEST PAGE")
            tui.header("PRINT QUEUE SETUP")
          ("Type of queue(s) to install:", "-t<typelist> or --type=<typelist>. <typelist>: print*, fax\* (\*default) (-i mode only)", "option", False),
                    (UI_TOOLKIT_QT3, UI_TOOLKIT_QT4),
USAGE = [ (__doc__, "", "name", True),
          ("Usage: %s [MODE] [OPTIONS] [SERIAL NO.|USB bus:device|IP|DEVNODE]" % __mod__, "", "summary", True),
          ("USB, automatic:", "$ hp-setup -i --auto 001:002", "example", False),
          ("USB bus:device (usb only):", """"xxx:yyy" where 'xxx' is the USB bus and 'yyy' is the USB device. (Note: The ':' and all leading zeros must be present.)""", 'option', False),
          ("USB, IDs specified:", "$ hp-setup -i 001:002", "example", False),
          ("USB or parallel, using serial number:", "$ hp-setup -i US12345678A", "example", False),
                        user_input = raw_input(log.bold("\nPlease enter the full filesystem path to the PPD file to use (q=quit) :"))
                    user_input = raw_input(log.bold("\nWould you like to perform fax header setup (y=yes*, n=no, q=quit) ?")).strip().lower()
                        user_input = 'y'
    username = raw_input("Username: ")
          ("", "Use the 'lsusb' command to obtain this information.", "option", False),
#!/usr/bin/python
             utils.format_bytes(c*s))
          utils.USAGE_EXAMPLES,
          utils.USAGE_GUI_MODE,
          utils.USAGE_HELP,
          utils.USAGE_INTERACTIVE_MODE,
          utils.USAGE_LANGUAGE,
          utils.USAGE_LOGGING1, utils.USAGE_LOGGING2, utils.USAGE_LOGGING3,
          utils.USAGE_MODE,
          utils.USAGE_NOTES,
          utils.USAGE_OPTIONS,
          utils.USAGE_SEEALSO,
          utils.USAGE_SPACE,
__version__ = '9.0'
                            while True:
                        while True:
                    while True:
                while True:
            w = setupform.SetupForm(bus, param, jd_port)
        w.show()
# You should have received a copy of the GNU General Public License

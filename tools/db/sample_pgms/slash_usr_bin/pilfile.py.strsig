# 0.0 1995-09-01 fl   Created
# 0.1 1996-05-18 fl   Modified options, added debugging mode
# 0.2 1996-12-29 fl   Added verify mode
# 0.3 1999-06-05 fl   Don't mess up on class exceptions (1.5.2 and later)
# 0.4 2003-09-30 fl   Expand wildcards on Windows; robustness tweaks
# a utility to identify image files
def globfix(files):
    elif o == "-D":
    elif o == "-i":
    elif o == "-q":
    elif o == "-v":
            else:
            except:
    except:
except getopt.error, v:
    except IOError, v:
    # expand wildcards where necessary
        for file in files:
for file in globfix(args):
        for i in id:
for o, a in opt:
from PIL import Image
# History:
        id = Image.ID[:]
        id.sort()
            if glob.has_magic(file):
if len(sys.argv) == 1:
                if not quiet:
        if not quiet:
    if o == "-f":
    if sys.platform == "win32":
        if verbose:
        if verify:
        Image.DEBUG = Image.DEBUG + 1
        Image.init()
        im = Image.open(file)
import getopt, glob, sys
import site
        import traceback
                im.verify()
    opt, args = getopt.getopt(sys.argv[1:], "fqivD")
        out = []
                out.append(file)
                out.extend(glob.glob(file))
# pixel mode information for known file formats.  Note that
        print
                    print "failed to verify image",
            print file, "failed:", "unexpected error"
            print file, "failed:", v
    print "  -f  list supported file formats"
            print i,
            print im.info, im.tile,
    print "  -i  show associated info and tile data"
    print "Options:"
    print "PIL File 0.4/2003-09-30 -- identify image files"
    print "  -q  quiet, don't warn for unidentified/missing/broken files"
        print "%s:" % file, im.format, "%dx%d" % im.size, im.mode,
                    print "(%s:%s)" % (sys.exc_type, sys.exc_value)
        print "Supported formats:"
    print "Usage: pilfile [option] files..."
    print v
    print "  -v  verify file headers"
        quiet = 1
    return files
        return out
        sys.exit(1)
    sys.exit(1)
# The Python Imaging Library.
# this script identifies image files, extracting size and
            traceback.print_exc(file=sys.stdout)
            try:
    try:
#! /usr/bin/python
        verbose = 1
verbose = quiet = verify = 0
        verify = 1
# you don't need the PIL C extension to use this module.

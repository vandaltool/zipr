			addsubstvar($package, "misc:Depends", "ucf");
A dependency on ucf will be generated in B<${misc:Depends}>.
			autoscript($package,"postinst","postinst-ucf","s:#UCFSRC#:$src:;s:#UCFDEST#:$dest:;s/#PACKAGE#/$package/",);
			autoscript($package,"postrm","postrm-ucf","s:#UCFDEST#:$dest:;s/#PACKAGE#/$package/");
B<dh_ucf> is a debhelper program that is responsible for generating the
B<dh_ucf> [S<I<debhelper options>>] [B<-n>]
between invocations of this command. Otherwise, it may cause multiple
dh_ucf - register configuration files with ucf 
Do not modify F<postinst>/F<postrm> scripts. Turns this command into a no-op.
foreach my $package (@{$dh{DOPACKAGES}}) {
		foreach my $set (@ucf) {
F<postinst> and F<postrm> commands that register files with ucf(1) and ucfr(1).
=head1 AUTHOR
=head1 DESCRIPTION
=head1 FILES
=head1 NAME
=head1 NOTES
=head1 OPTIONS
=head1 SEE ALSO
=head1 SYNOPSIS
	if (! $dh{NOSCRIPTS}) {
	if ($file) {
	if (($package eq $dh{FIRSTPACKAGE} || $dh{PARAMS_ALL}) && @ARGV) {
		if (@ucf) {
instances of the same text to be added to maintainer scripts.
=item B<-n>, B<--noscripts>
=item debian/I<package>.ucf
Jeroen Schot <schot@a-eskwadraat.nl>
Joey Hess <joeyh@debian.org>
L<debhelper(7)>
List pairs of source and destination files to register with ucf. Each pair
			my $dest = $set->[1];
	my $file=pkgfile($package,"ucf");
			my $src = $set->[0];
	my $tmp=tmpdir($package);
	my @ucf;
Note that this command is not idempotent. L<dh_prep(1)> should be called
		push @ucf, [@ARGV];
should be a file that is provided by your package, typically in /usr/share/,
should be put on its own line, with the source and destination separated by
This program is a part of debhelper.
		@ucf=filedoublearray($file);
use Debian::Debhelper::Dh_Lib;
use strict;
#!/usr/bin/perl -w
while the destination is typically a file in /etc/.
whitespace. Both source and destination must be absolute paths. The source

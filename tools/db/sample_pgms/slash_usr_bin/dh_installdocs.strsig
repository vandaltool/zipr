acted on.
			addsubstvar($package, "misc:Depends", $dh{LINK_DOC});
and F<TODO> files will be installed as F<TODO.Debian> in non-native packages.
(An older method to accomplish the same thing, which is still supported,
		# back on debian/copyright for all packages, not just the 
B<dh_installdocs> is a debhelper program that is responsible for installing
B<dh_installdocs> [S<I<debhelper options>>] [B<-A>] [B<-X>I<item>] [S<I<file> ...>]
be a binary package that comes from the same source package.
before calling B<dh_installdocs>.)
being installed. Note that this includes doc-base files.
between invocations of this command. Otherwise, it may cause multiple
				chomp $pwd;
	closedir(DEB);
		close IN;
				complex_doit("cd '$dir' && find '$basename' \\( -type f -or -type l \\)$exclude -exec cp --parents -dp {} $pwd/$tmp/usr/share/doc/$package \\;");
			$copyright="debian/copyright";
# Create documentation directories on demand. This allows us to use dangling
		# Create symlink to another documentation directory if
debhelper will try to avoid installing files into linked documentation
debian/control.
	# .Debian is correct, according to policy, but I'm easy.
  debian/notes-for-maintainers.txt
determined from the B<Document:> entry in the doc-base control file in
dh_installdocs - install documentation into package build directories
directories, and F<copyright>, F<changelog>, F<README.Debian>, and F<TODO> files will
directories that would cause conflicts with the linked package. The B<-A>
			# directory a symlink, then you have to depend on
directory, it will install the complete contents of the directory.
doc-base files, and can name them like this.
	$docdir_created{$package}=1;
				$doc_ids{$fn}=$1;
		@docs=filearray($file, ".");
  docs/manual-html/
  docs/manual.pdf
  docs/manual.txt
documentation into F<usr/share/doc/package> in package build directories.
		doit("chmod","-R","go=rX","$tmp/usr/share/doc");
		doit("chmod","-R","u+rw","$tmp/usr/share/doc");
		doit("chown","-R","0:0","$tmp/usr/share/doc");
				doit("cp", "-a", $doc, "$tmp/usr/share/doc/$package");
		doit("install","-g",0,"-o",0,"-d",$target);
			doit("install","-g",0,"-o",0,"-d","$tmp/usr/share/doc");
			doit("install","-g",0,"-o",0,"-d","$tmp/usr/share/doc-base/");
			doit("install","-g",0,"-o",0,"-m","644","-p",$copyright,
		doit("install","-g",0,"-o",0,"-m644","-p","debian/$fn",
		doit("install","-g",0,"-o",0,"-m","644","-p","$readme_debian",
			doit("install","-g",0,"-o",0,"-m","644","-p",$todo,
			doit("ln", "-sf", $dh{LINK_DOC}, "$tmp/usr/share/doc/$package");
Each of these files is automatically installed if present for a
			else {
		else {
			ensure_docdir($package);
		ensure_docdir($package);
		# .EX are example files, generated by eg, dh-make
			$exclude .= ' -and ! \( '.$dh{EXCLUDE_FIND}.' \)';
			$exclude .= ' -and ! -empty';
Exclude files that contain I<item> anywhere in their filename from
exists when B<dh_installdocs> is run. To comply with policy, I<package> must
	# For all packages, we must support both the usual filename format plus
		foreach my $doc (@docs) {
	foreach my $fn (grep {/^${regexp}doc-base(\..*)?$/} readdir(DEB)) {
	foreach my $fn (keys %doc_ids) {
foreach my $package (@{$dh{DOPACKAGES}}) {
	# Handle doc-base files. There are two filename formats, the usual
=head1 AUTHOR
=head1 DESCRIPTION
=head1 EXAMPLES
=head1 FILES
=head1 NAME
=head1 NOTES
=head1 OPTIONS
=head1 SEE ALSO
=head1 SYNOPSIS
		if (! compat(4)) {
		if (! $copyright && -e "debian/copyright") {
		if ($copyright && ! excludefile($copyright)) {
			if (-d $doc && length $exclude) {
		if ($dh{EXCLUDE_FIND}) {
	if ($dh{LINK_DOC} && $dh{LINK_DOC} ne $package) {
	if (%doc_ids) {
	if (@docs) {
			if (/^Document\s*:\s*(.*)/) {
	if (! -d $target && ! -l $target) {
		if (! -d "$tmp/usr/share/doc-base/") {
		if (! -d "$tmp/usr/share/doc" && ! -l "$tmp/usr/share/doc") {
		if (! -d "$tmp/usr/share/doc/$package" &&
		if (! exists $doc_ids{$fn}) {
	if ($file) {
		if (isnative($package)) {
	if ($link_doc) {
	if (! $link_doc && (! -l "$tmp/usr/share/doc/$package" || -d "$tmp/usr/share/doc/$package")) {
	if (! $link_doc && $readme_debian && ! excludefile($readme_debian)) {
	if (! $link_doc && $todo && ! excludefile($todo)) {
	if (($package eq $dh{FIRSTPACKAGE} || ($dh{PARAMS_ALL} && ! $link_doc)) && @ARGV) {
	if ($package eq $dh{MAINPACKAGE}) {
	if (! $readme_debian) {
	# If the "directory" is a dangling symlink, then don't install
	# If this is a symlink, leave it alone.
	# If this is the main package, we need to handle unprefixed filenames.
If your package needs to register more than one document, you need multiple
			# ignore empty files in subdirs
in all packages if B<-A> is specified).
init(options => {
Install all files specified by command line parameters in ALL packages
Installed as doc-base control files. Note that the doc-id will be
Install these files as documentation into the first package acted on. (Or
instances of the same text to be added to maintainer scripts.
I<package>.
I<package> itself, or if the documentation directory to be created already
is to make the documentation directory of a package be a dangling symlink,
=item B<-A>, B<--all>
=item B<--link-doc=>I<package>
=item B<-X>I<item>, B<--exclude=>I<item>
=item debian/I<package>.copyright
=item debian/I<package>.doc-base
=item debian/I<package>.doc-base.*
=item debian/I<package>.docs
=item debian/I<package>.README.Debian
=item debian/I<package>.TODO
=item F<debian/copyright>
=item F<debian/README.Debian>
=item F<debian/TODO>
=item I<file> ...
Joey Hess <joeyh@debian.org>
				last;
L<debhelper(7)>
	"link-doc=s" => \$dh{LINK_DOC},
List documentation files to be installed into I<package>.
		    ! -l "$tmp/usr/share/doc/$package") {
		# main binary package.
		# Make sure that the parent directory exists.
Make the documentation directory of all packages acted on be a symlink to
				my $basename = basename($doc);
		my $copyright=pkgfile($package,'copyright');
				my $dir = ($basename eq '.') ? $doc : "$doc/..";
my %docdir_created;
	my %doc_ids;
	my @docs;
		my $exclude = '';
	my $file=pkgfile($package,"docs");
	my $link_doc=($dh{LINK_DOC} && $dh{LINK_DOC} ne $package);
	my $package=shift;
				my $pwd=`pwd`;
	my $readme_debian=pkgfile($package,'README.Debian');
	my $regexp="\Q$package\E\.";
	my $target;
	my $tmp=tmpdir($package);
	my $todo=pkgfile($package,'TODO');
		# necessary.
			next if -e $doc && ! -s $doc && ! compat(4); # ignore empty files
			next if excludefile($doc);
		next if excludefile($fn);
		next if $fn=~/\.EX$/;
	next if is_udeb($package);
not be installed.
Note that B<dh_installdocs> will happily copy entire directory hierarchies if
Note that F<README.debian> files are also installed as F<README.Debian>,
Note that this command is not idempotent. L<dh_prep(1)> should be called
	opendir(DEB,"debian/") || error("can't read debian directory: $!");
		open (IN, "debian/$fn") || die "Cannot read debian/$fn.";
option will have no effect on packages with linked documentation
		# Parse the file to get the doc id.
	# plus an extended format (debian/package.*).
			# Policy says that if you make your documentation
		push @docs, @ARGV;
question.
  README
		$readme_debian=pkgfile($package,'README.debian');
		$regexp="(|$regexp)";
	return if $docdir_created{$package};
specific copyright file is available.
			s/\s*$//;
sub ensure_docdir {
		# Support debian/package.copyright, but if not present, fall
# symlinks for linked documentation directories unless additional files need
		$target="$tmp/usr/share/doc/$dh{LINK_DOC}";
		$target="$tmp/usr/share/doc/$package";
	# that format with a period an something appended.
	# that share a doc directory.
The copyright file is installed into all packages, unless a more
	# the copyright file. This is useful for multibinary packages 
the documentation directory of I<package>. This has no effect when acting on
These files are installed into the first binary package listed in
			# the target.
This is an example of a F<debian/package.docs> file:
This program is a part of debhelper.
		     "$tmp/usr/share/doc-base/$doc_ids{$fn}");
				"$tmp/usr/share/doc/$package/copyright");
			"$tmp/usr/share/doc/$package/README.Debian");
				"$tmp/usr/share/doc/$package/TODO");
				"$tmp/usr/share/doc/$package/TODO.Debian");
# to be installed.
use Debian::Debhelper::Dh_Lib;
use strict;
#!/usr/bin/perl -w
			warning("Could not parse $fn for doc-base Document id; skipping");
		while (<IN>) {
you ask it to (similar to B<cp -a>). If it is asked to install a

        
        }
    ### add some newlines
    Archive::Tar to extract, create and list tar archives.
    C   CPAN mode - drop 022 from permissions
    c   Create ARCHIVE_FILE or STDOUT (-) from FILE
        ### data dumper output
die usage() if $opts->{h};
    die "You need exactly one of 'x', 't' or 'c' options: " . usage();
} else {
### enable debugging (undocumented feature)
### enable insecure extracting.
    eval 'exec /usr/bin/perl -S $0 ${1+"$@"}'
        ### extract it
        $f->extract if $opts->{'x'};
        $file->fdopen(fileno(STDIN),"r");
        $file->fdopen(fileno(STDOUT),"w");
        $file = IO::Handle->new();
    find( sub { push @files, $File::Find::name;
            $f->mode($f->mode & ~022); # chmod go-w
    f   Name of the ARCHIVE_FILE to use. Default is './default.tar'
        for my $f ($tar->get_files) {
getopts('Ddcvzthxf:IC', $opts) or die usage();
=head1 DESCRIPTION
=head1 NAME
=head1 OPTIONS
=head1 SEE ALSO
=head1 SYNOPSIS
    h   Prints this help message
    if ($file eq '-') {
if( $opts->{c} ) {
    if( $opts->{C} ) {
	if $running_under_some_shell;
local $Archive::Tar::DEBUG                  = 1 if $opts->{d};
local $Archive::Tar::INSECURE_EXTRACT_MODE  = 1 if $opts->{I};
my $compress    = $opts->{z} ? 1 : 0;
my $file        = $opts->{f} ? $opts->{f} : 'default.tar';
    my @files;
    my $iter = Archive::Tar->iter( $file );
my $opts = {};
    my $print = $verbose || $opts->{'t'} || 0;
    my $tar = Archive::Tar->new;
my $tar         = Archive::Tar->new();
    my $usage .= << '=cut';
my $verbose     = $opts->{v} ? 1 : 0;
### pod & usage in one
        print Dumper( $f ) if $opts->{'D'};
        print $f->full_path . $/ if $print;
                print $File::Find::name.$/ if $verbose }, @ARGV );
    ### print the files we're finding?
    ptar - a tar-like program written in perl
    ptar -c [-v] [-z] [-C] [-f ARCHIVE_FILE | -] FILE FILE ...
    ptar -h
    ptar is a small, tar look-alike program that uses the perl module
    ptar -t [-z] [-f ARCHIVE_FILE | -]
    ptar -x [-v] [-z] [-f ARCHIVE_FILE | -]
    return $usage;
### sanity checks ###
### show the help message ###
    ### strip the pod directives
sub usage {
    tar(1), L<Archive::Tar>.
    $tar->add_files(@files);
    $tar->write($file, $compress);
    t   List the contents of ARCHIVE_FILE or STDIN (-)
unless ( 1 == grep { defined $opts->{$_} } qw[x t c] ) {
    $usage .= $/.$/;
    $usage =~ s/=head1 //g;
    $usage =~ s/=pod\n//g;
use Archive::Tar;
use Data::Dumper;
use File::Find;
use Getopt::Std;
        use IO::Handle;
use strict;
#!/usr/bin/perl
    v   Print filenames as they are added or extracted from ARCHIVE_FILE
    while( my $f = $iter->() ) {
    x   Extract from ARCHIVE_FILE or STDIN (-)
    z   Read/Write zlib compressed ARCHIVE_FILE (not always available)

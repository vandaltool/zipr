        {
        }
----------------------------------------------------------------------
############################################################################
## 1.0 first start of the program
## 1.1 some changes from monty and after that
## 1.2a Add Grant, References, Index and Alter privilege handling (Monty)
## 1.2 begin screen now in a loop + quit is using 0 instead of 9
## 1.3 Applied patch provided by Martin Mokrejs <mmokrejs@natur.cuni.cz>
## 1.4 Remove option 6 which attempted to erroneously grant global privileges
	   addall($answer);
##     after ideas of Paul DuBois.
       # all privileges
       # all privileges set to N
# all things which will be added are done here
# a nice quit (first disconnect and then exit
      $answer = $_;
    $answer = $_;
# ask for a host which is already in the user table
# ask for a new database name
# ask for a new password
# ask for a new username
# ask for a password if no password is set already
# ask for a user which is already in the user table
# ask for new hosts
# below all subroutines of the program
# but WITHOUT ANY WARRANTY; without even the implied warranty of
check permissions which already been set in MySQL. So if you can't
      chomp($answer);
    chomp($answer);
  chomp($no);
  chomp($opt_password);
        chomp($second);
      chomp($yes);
  chomp($yes);
  close(TMP);
connect to MySQL using the permission you just added, take a look at
# Copyright (c) 2000, 2007 MySQL AB, 2009 Sun Microsystems, Inc.
    # create the database
  $db = $answer;
    $db = database();
$dbh= DBI->connect("DBI:mysql:mysql:host=$sqlhost:port=$opt_port:mysql_socket=$opt_socket",$opt_user,$opt_password, {PrintError => 0}) ||
  $dbh->disconnect;
  $dbh->do("FLUSH PRIVILEGES") || print STDERR "Can't flush privileges\n";
$dbh=$host=$opt_user= $opt_password= $opt_help= $opt_host= $opt_socket= "";
    $db = newdatabase();
          $db = $r[0];
      die "But then specify databasename, please\n";
  die("Can't make a connection to the mysql server.\n The error: $DBI::errstr");
     die "databasename is not specified nor *\n";
     die "username not specified: $user\n";
directory if it exists.
    else
      else
        else
      } else {
    } else {
  } else {
	} else {
      } elsif ($answer == 0) {
        } elsif ($answer =~ /^[234567]$/) {
	elsif (/^password\s*=\s*(\S+)/i)
	elsif (/^port\s*=\s*(\S+)/i)
	elsif (/^socket\s*=\s*(\S+)/i)
    } elsif ($todo == 4) {
    } elsif ($todo == 5) {
    } elsif ($todo == 6) {
    } elsif ($todo == 7) {
	elsif (/^user\s*=\s*(\S+)/i)
## Emacs, this is -*- perl -*- mode? :-)
# empty ... suggestions ... mail them to me ...
          $end = 1;
	$end = 1;
  exit(0);
exit(0);
exit(0); # the end...
file, then the permission setter will ask for a password.
  foreach $host (@hosts) {
##     (General code cleanup, use the GRANT statement instead of updating
GetOptions("user=s","password=s","help","host=s","socket=s","port=i");
    $good = 0;
          $good = 1;
--help		: print this help message and exit.
## History
        $host = $answer;
      $host .= ",$answer";
  $host = $dbh->quote($host);
  $host = hosts($user);
  $host = newhosts();
  $host =~ s/^,//;
--host		: the host to connect to.
      if ($answer)
    if ($answer)
    if ($answer) {
        if ($answer == 1) {
      if ($answer =~ /^[1234567]$/) {
      if ($answer eq "*") {
        if ($answer ne $second)
    if (/^\[(client|perl)\]/i)
    if ($db) {
  if (!$db) {
    if ($good == 1) {
	if (/^host\s*=\s*(\S+)/i)
  if ($no =~ /n/i)
  if ($no =~ /n/i) {
if ($opt_host eq '')
if ($opt_password eq '')
  if ($pass eq '')
      if ($r[0])
        if ($r[0] eq $answer) {
  if ($todo == 2) {
    if (($todo == 2) || ($todo == 3)) {
  if ( ( !$todo ) or not ( $todo =~ m/^[2-7]$/ ) ) {
  if (!$user) {
  if ($yes =~ /y/)
      if ($yes =~ /y/i)
If you don't give a password and no password is set in your .my.cnf
##     initial release in mysql 3.22.10 (nov 1998)
##        it's made under GPL ...:-))
          last;
        last;
      last;
    last;
    last if ($good == 0);
# Library General Public License for more details.
# License along with this library; if not, write to the Free
# License as published by the Free Software Foundation; version 2
# MA 02110-1301, USA
                 made by: Luuk de Boer <luuk\@wxs.nl>
##        mady by Luuk de Boer (luuk@wxs.nl) 1998.
# make the connection to MySQL
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# modify it under the terms of the GNU Library General Public
  my $answer = "";
  my ($answer,$end);
  my ($answer,$good,$db);
  my ($answer,$good,$db,$user,$pass,$host,$priv);
  my ($answer,$good,$host);
  my ($answer,$user);
  my ($host,$answer,$good);
  my @hosts = split(/,/,$host);
  my $no = <STDIN>;
  my ($pass,$answer,$good,$yes);
      my @r = $sth->fetchrow_array;
        my $second = <STDIN>;
my $sqlhost = "";
    my $sth = $dbh->do("CREATE DATABASE $db") || $dbh->errstr;
  my $sth = $dbh->prepare("select Host,User from user where User = $user") || die $dbh->errstr;
      my $sth = $dbh->prepare("select User from user where User = '$answer'") || die $dbh->errstr;
      my $sth = $dbh->prepare("show databases") || die $dbh->errstr;
  my $sth = $dbh->prepare("show databases") || die $dbh->errstr;
      my $sth = $dbh->prepare("SHOW DATABASES") || die $dbh->errstr;
  my $sth = $dbh->prepare("update user set Password=$pass where User = $user and Host = $host") || die $dbh->errstr;
  my ($todo) = @_;
  my ($user) = @_;
  my $user = "";
my $user = "";
  my ($user,$pass,$host) = "";
      my $yes = <STDIN>;
          next;
        next;
       next;
      next;
# of the License.
  open(TMP,$ENV{'HOME'} . "/.my.cnf") || return 1;
	  $opt_host = $1;
Options for the permission setter:
	  $opt_password = $1;
  $opt_password = <STDIN>;
$opt_port=0;
	  $opt_port = $1;
	  $opt_socket = $1;
	    $opt_socket $opt_port $host $version);
	  $opt_user = $1;
or databases or change passwords in MySQL. Keep in mind that we don't
# or perl groups
    $pass = "''";
    $pass = "";
          $pass = $answer;
  $pass = newpass("$user");
  $pass = newpass($user);
    $pass = "PASSWORD(". $dbh->quote($pass) . ")";
passwords.
--password	: the password of the username.
##        Permission setter for MySQL
--port		: the port number of the host to connect to.
	print $_;
    print "  0. exit this program\n";
    print "  1. Set password for an existing user.\n";
    print "  2. Create a database + user privilege for that database\n";
    print "  3. Create/append user privilege for an existing database\n";
    print "  4. Create/append broader user privileges for an existing\n";
    print "  5. Create/append quite extended user privileges for an\n";
    print "  6. Create/append full privileges for an existing database\n";
    print "  7. Remove all privileges for for an existing database and\n";
		print "     and host combination (user can only do SELECT)\n";
		print "     and host combination (user has FULL privilege)\n";
        print "and that's wrong .... Try again\n";
        print " any of those above but also any which will be created in future!";
  print "Are you pretty sure you would like to implement this [yes/no]: ";
  print "Choose from the following hosts: \n";
        print " contains privilege settings. That is really risky!\n";
		print "     database and host combination\n";
  print <<EOL;
  print "Everything is inserted and mysql privileges have been reloaded.\n\n";
		print "     existing database and host combination (user can do\n";
		print "     host combination.\n";
  print "Keep in mind that % means 'from any host' ...\n";
		print "     LOCK TABLES,CREATE TEMPORARY TABLES)\n";
    print "## made by Luuk de Boer\n";
        print "\n";
      print "\n";
    print "\n";
  print "\n";
  print "\nFor which user do you want to specify a password: ";
    print "\nMake your choice [1,2,3,4,5,6,7,0]: ";
  print "\n\n";
  print "\n\nSetting a (new) password for a user.\n";
          print "\n\nSorry, this database name is already in use; try something else: ";
  print "\n\nWhich database from existing databases would you like to select: \n";
  print "\n\nWhich database would you like to add: ";
  print "\nWhat username is to be created: ";
        print "Okay, give us the host please: ";
    print "Okay ... let's go then ...\n\n";
    print "Okay .. that was it then ... See ya\n\n";
        print "Okay we keep it with this ...\n";
        print "OK, the user entry will NOT be limited to any database";
  print "Password for user $opt_user to connect to MySQL: ";
          print "Password please: ";
          print "Passwords aren't the same; we begin from scratch again.\n";
    print "  - $r[0] \n";
		print "     SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,INDEX,\n";
          print "Sorry, something went wrong. With such option number you should not get here.\n\n";
       print "Sorry, user $answer isn't known in the user table.\nTry again: ";
    print STDERR "Sorry, select option $todo isn't known inside the program .. See ya\n";
      print STDERR "What do you want? You wanted to create new database and add new user, right?\n";
  print "That was it ... here is an overview of what you gave to me:\n";
  print "The database $db will be used.\n";
  print "The database name	: $db\n";
  print "The following host(s) will be used: $host.\n";
  print "The following host will be used: $host.\n";
  print "The host		: $host\n";
  print "The host please: ";
  print "The host please (case sensitive): ";
  print "The host(s)		: $host\n";
  print "The new database $db will be created\n";
#    print "The password for $user is $pass.\n";
  print "The password is set for user $user.\n\n";
#  print "The password		: $pass\n";
  print "The username 		: $user\n";
        print " This option gives a user chance to operate on databse mysql, which";
        print "Type either database name or * meaning any databasename. That means";
        print "Type the password again: ";
		print "     (user can do SELECT,INSERT,UPDATE,DELETE)\n";
  print "Username = $user\n";
    print "     (user will have all permission fields set to N)\n";
        print "We hope we can help you next time \n\n";
    print "## Welcome to the permission setter $version for MySQL.\n";
  print "We now need to know from what host(s) the user will connect.\n";
  print "We now need to know which host for $user we have to change.\n";
    print "We won't set a password so the user doesn't have to use it\n";
    print "What password do you want to specify for $user: ";
    print "What would you like to do:\n";
  print "Which database will it be (case sensitive). Type * for any: \n";
      print "Would you like to add another host [yes/no]: ";
  print "Would you like to set a password for $user [y/n]: ";
    print "#"x70;
  print "#"x70;
  print "You can choose from: \n";
        print "You have to select a host from the list ...\nTry again: ";
      print "You have to type something ...\nTry again: ";
      print "You must select one from the list.\nTry again: ";
        print "You must type something ...\nTry again: ";
      print "You must type something ...\nTry again: ";
        print "Your answer was $answer\n";
    quit();
read_my_cnf();		# Read options from ~/.my.cnf
# Read variables password, port and socket from .my.cnf under the client
        return("*");
    return(0);
  return($db);
  return($host);
  return($pass);
  return($user);
# select a database
server. Keep in mind that the permissions for the user specified via
# set a password for a user
	   setpwd();
--socket	: the socket to connect to.
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
  $sqlhost = "localhost";
  $sqlhost = $opt_host;
       $sth = $dbh->do("GRANT ALL ON $db.* TO \'$user\'\@\'$host\' IDENTIFIED BY \'$pass\'") || die $dbh->errstr;
      $sth = $dbh->do("GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,INDEX,LOCK TABLES,CREATE TEMPORARY TABLES ON $db.* TO $user@\"$host\" IDENTIFIED BY \'$pass\'") || die $dbh->errstr;
      $sth = $dbh->do("GRANT SELECT,INSERT,UPDATE,DELETE ON $db.* TO $user@\"$host\" IDENTIFIED BY \'$pass\'") || die $dbh->errstr;
      $sth = $dbh->do("GRANT SELECT ON $db.* TO $user@\"$host\" IDENTIFIED BY \'$pass\'") || die $dbh->errstr;
       $sth = $dbh->do("REVOKE ALL ON $db.* FROM \'$user\'\@\'$host\'") || die $dbh->errstr;
      $sth = $dbh->prepare("select Host,User from user where Host = '$answer' and User = $user") || die $dbh->errstr;
      $sth->execute || die $dbh->errstr;
  $sth->execute || die $dbh->errstr;
  $sth->finish;
sub addall {
sub database {
sub hosts
sub newdatabase {
sub newhosts
sub newpass
sub newuser
sub q1 { # first question ...
sub quit
sub read_my_cnf
sub setpwd
sub usage
sub user
          system "stty -echo";
        system "stty -echo";
        system "stty echo";
      system "stty echo";
    system "stty -echo";
  system "stty -echo";
  system "stty echo";
# the beginning of the program
# the help text
The options shown below are used for making the connection to the MySQL
The permission setter first reads your .my.cnf file in your Home
                 The permission setter for MySQL.
The permission setter is a little program which can help you add users
the permissions which have already been set in MySQL.
##     the privilege tables directly, added option to revoke privileges)
these options must be sufficient to add users / create databases / set
# the start of the program
# This program is distributed in the hope that it will be useful,
# This program is free software; you can redistribute it and/or
#### TODO
usage() if ($opt_help); # the help function
use DBI;
use Getopt::Long;
# Use is subject to license terms.
      $user = $answer;
  $user = $dbh->quote($user);
--user		: is the username to connect with.
  $user = newuser();
    # user privileges: SELECT
      # user privileges: SELECT,INSERT,UPDATE,DELETE
      # user privileges: SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,INDEX,LOCK TABLES,CREATE TEMPORARY TABLES
        $user = $r[0];
  $user = user();
use strict;
use vars qw($dbh $sth $hostname $opt_user $opt_password $opt_help $opt_host
#!/usr/bin/perl
$version="1.4";
                      version: $version
      while ((defined($_=<TMP>)) && !/^\[\w+\]/)
  while (! $end) {
      while (my @r = $sth->fetchrow_array) {
  while (my @r = $sth->fetchrow_array)
  while (my @r = $sth->fetchrow_array) {
    while (<STDIN>) {
    while(<STDIN>)
  while (<STDIN>) {
  while(<STDIN>)
  while (<TMP>)
  $yes = <STDIN>;
# You should have received a copy of the GNU Library General Public

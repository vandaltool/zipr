# added -v
    ) and $op = shift;
argument is a Perl expression which is expected to modify the C<$_>
    @ARGV = <STDIN>;
B<rename> S<[ B<-v> ]> S<[ B<-n> ]> S<[ B<-f> ]> I<perlexpr> S<[ I<files> ]>
# changed man documentation to POD
    chop(@ARGV);
# corrected usage string
C<rename>
    die $@ if $@;
die "Usage: rename [-v] [-n] [-f] perlexpr [filenames]\n"
    else
    elsif ($no_act or rename $was, $_)
# *** empty log message ***
    eval $op;
	'f|force'   => \$force,
first argument.
for (@ARGV) {
Force: overwrite existing files.
For example, to rename all files matching C<*.bak> to strip the extension,
#  from Larry Wall's original script eg/rename from the perl source.
Getopt::Long::Configure('bundling');
=head1 AUTHOR
=head1 BUGS
=head1 DESCRIPTION
=head1 DIAGNOSTICS
=head1 ENVIRONMENT
=head1 NAME
=head1 OPTIONS
=head1 SEE ALSO
=head1 SYNOPSIS
If a given filename is not modified by the expression, it will not be
if (!@ARGV) {
    if (-e $_ and !$force)
If no filenames are given on the command line, filenames will be read
If you give an invalid Perl expression you'll get a syntax error.
# Initial revision
=item B<-f>, B<--force>
=item B<-n>, B<--no-act>
=item B<-v>, B<--verbose>
# Larry(?)'s RCS header:
Larry Wall
# $Log: rename,v $
# moved to perl/source
mv(1), perl(1)
my ($verbose, $no_act, $force, $op);
    my $was = $_;
    next if $was eq $_; # ignore quietly
	'n|no-act'  => \$no_act,
No Action: show what files would have been renamed.
No environment variables are used.
    print "reading filenames from STDIN\n" if $verbose;
	print "$was renamed as $_\n" if $verbose;
# $RCSfile: rename,v $$Revision: 1.5 $$Date: 1998/12/18 16:16:31 $
#  RCSfile: rename,v   Revision: 4.1   Date: 92/08/07 17:20:30 
renamed.
rename - renames multiple files
	rename 's/\.bak$//' *.bak
renames the filenames supplied according to the rule specified as the
	rename 'y/A-Z/a-z/' *
# Revision 1.1  1997/02/27  15:48:51  rmb1
# Revision 1.2  1997/02/27  16:15:40  rmb1
# Revision 1.3  1997/02/27  16:39:07  rmb1
# Revision 1.4  1997/02/27  17:19:26  rmb1
# Revision 1.5  1998/12/18 16:16:31  rmb1
so had to be used with care.  I hope I've fixed that (Robin Barker).
string in Perl for at least some of the filenames specified.
The I<perlexpr> 
The original C<rename> did not check for the existence of target filenames,
#  This script is free software; you can redistribute it and/or modify it
#  This script was developed by Robin Barker (Robin.Barker@npl.co.uk),
To translate uppercase names to lower, you'd use
#  under the same terms as Perl itself.
    unless GetOptions(
use Getopt::Long;
use strict;
#!/usr/bin/perl -w
$verbose++ if $no_act;
Verbose: print names of files successfully renamed.
via standard input.
	'v|verbose' => \$verbose,
	warn  "Can't rename $was $_: $!\n";
	warn  "$was not renamed: $_ already exists\n";
you might say

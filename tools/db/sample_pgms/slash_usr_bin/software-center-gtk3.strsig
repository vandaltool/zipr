        
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
                       app.available_pane.cat_view.get_visible()):
            app.run(args)
    app.run(args)
        app = SoftwareCenterAppGtk3(datadir, xapian_base_path, options, args)
                    "are now INSECURE and UNENCRYPTED!!")
        atexit.register(stop_dummy_backend)
# Authors:
    #         by default
    # by default (see bugzilla #666280 and #666276)
    # check if running locally
# Copyright (C) 2009-2011 Canonical
    # create the app
    (datadir, xapian_base_path) = mangle_paths_if_running_in_local_checkout()
    # DEBUG/PROFILE mode 
            def are_we_there_yet():
                      default=False)
# details.
    # dummy backend
    else:
    # enable certificates validation in webkit views unless specified otherwise
# Enable Xapian's CJK tokenizer (see LP: #745243)
    # ensure we can actually run
    ExecutionTime, mangle_paths_if_running_in_local_checkout)
    # FIXME:  REMOVE THIS option once launchpad integration is enabled
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# Foundation; version 3.
from gi.repository import Gtk, GObject
    from gi.repository import WebKit as webkit
from optparse import OptionParser
from softwarecenter.enums import *
from softwarecenter.paths import XAPIAN_BASE_PATH
        from softwarecenter.testutils import start_dummy_backend, stop_dummy_backend
    from softwarecenter.ui.gtk3.app import SoftwareCenterAppGtk3
from softwarecenter.utils import (
from softwarecenter.version import *
                global main_visible
            GObject.timeout_add(100, are_we_there_yet)
    Gtk.init_check(sys.argv)
    Gtk.main()
                Gtk.main_iteration_do(True)
        Gtk.Widget.set_default_direction(Gtk.TextDirection.RTL)
                    "has been specified, all purchase transactions " + 
                      help="disable support for apt-xapian-index (technical items)",
                      help="disable support to buy software",
                      help="display a navigation history log (useful for debugging)", 
                      help="enable debug mode", default=False)
                      help="enable launchpad integration (for development use)", 
                      help="force rtl mode (useful for debugging)", 
                      help="open and wait until the window is visible, then close, only useful for profiling",
                      help="run with a dummy backend, this will not actually install or remove anything and is useful for testing",
                      help="show only specific messages. supported currently: "
                      help="use PackageKit backend (experimental)", 
if __name__ == "__main__":
                if not main_visible and app.window_main.get_visible():
    if not "SOFTWARE_CENTER_FORCE_DISABLE_CERTS_CHECK" in os.environ:
    if options.debug:
    if options.debug_filter:
    if options.dummy_backend:
    if options.force_rtl:
    if options.measure_startup_time:
    if options.packagekit_backend:
        # implies general debug
        import atexit
import gettext
import glob
import logging
import os
import softwarecenter.log
import softwarecenter.paths
import sys
import time
    # it can not be set in the global context as this will cause segfaults
            # keep monitoring the loop
        logger.debug("** main window fully ready after: %s seconds" % time_to_ready)
                    logger.debug("** main window visible after: %s seconds" % (
        logger = logging.getLogger("softwarecenter.performance")
        logging.info("Using PackageKit backend")
LOG = logging.getLogger("softwarecenter")
        LOG.warning("SOFTWARE_CENTER_FORCE_DISABLE_CERTS_CHECK " +
            main_visible = False
                    main_visible = True
#  Michael Vogt
    # on exit. However its IMPORTANT to set it as libsoup is *not* secure
    (options, args) = parser.parse_args()
        options.debug_filter = "performance,traceback"
        options.debug = True
os.environ['XAPIAN_CJK_NGRAM'] = '1'
    # override text direction for testing purposes
    # packagekit
    parser.add_option("--debug", action="store_true",
    parser.add_option("--debug-filter", 
    parser.add_option("--disable-apt-xapian-index", action="store_true",
    parser.add_option("--disable-buy", action="store_true",
    parser.add_option("--display-navlog", action="store_true",
    parser.add_option("--dummy-backend", action="store_true",
    parser.add_option("--enable-lp", action="store_true",
    parser.add_option("--force-rtl", action="store_true",
    parser.add_option("--measure-startup-time", action="store_true",
    parser.add_option("--packagekit-backend", action="store_true",
    parser = OptionParser("usage: %prog [options] [package-name | apturl | deb-file]", 
                print time.time()
        print(time_to_ready)
                    return False
                return True
    # run it normally
            # run watcher for main window
        session.set_property("ssl-ca-file", "/etc/ssl/certs/ca-certificates.crt")
        session = webkit.get_default_session()
    # set default ssl-ca-file here because it needs only be set once, but
                """ small helper that monitors the main window appearance """
        softwarecenter.enums.USE_PACKAGEKIT_BACKEND = True
        softwarecenter.log.add_filters_from_string(options.debug_filter)
        softwarecenter.log.root.setLevel(level=logging.DEBUG)
        softwarecenter.log.root.setLevel(level=logging.INFO)
                           "'softwarecenter.performance'")
        start_dummy_backend()
    # statup time measure implies "performance" in debug filters
        sys.exit(0)
# take time stamp as early as python allows this
# the terms of the GNU General Public License as published by the Free Software
# this program; if not, write to the Free Software Foundation, Inc.,
# This program is distributed in the hope that it will be useful, but WITHOUT
# This program is free software; you can redistribute it and/or modify it under
time_entering_main = time.time()
                            time.time() - time_entering_main))
        time_to_ready = time.time() - time_entering_main
                # useful to check how often this is run - not often :/
#!/usr/bin/python
                          version="%prog "+VERSION)
        # WARN the user!! Do not remove this
            while not (app.available_pane.cat_view and
    with ExecutionTime("create SoftwareCenterApp"):
        with ExecutionTime("show() & gtk events until visible"):
# You should have received a copy of the GNU General Public License along with

#############################################################################
@ARGV = qw(-) unless(@ARGV);
# as Perl itself.
Based on code for B<Pod::Text::pod2text(1)> written by
B<podchecker> [B<-help>] [B<-man>] [B<-(no)warnings>] [I<file>S< >...]
B<podchecker> invokes the B<podchecker()> function exported by B<Pod::Checker>
B<podchecker> returns a 0 (zero) exit status if all specified
B<podchecker> returns the exit status 1 if at least one of
B<podchecker> will read the given input files looking for POD
Brad Appleton E<lt>bradapp@enteract.comE<gt>,
# Copyright (c) 1998-2000 by Bradford Appleton. All rights reserved.
## Define options
Directories are ignored, an appropriate warning message is printed.
## Dont default to STDIN if connected to a terminal
    else {
elsif(!defined $options{warnings}) {
    elsif(-d $podfile) {
    elsif($errors < 0) {
          ($errors == 1) ? 'error' : 'errors');
        # errors occurred
    eval 'exec perl -S $0 "$@"'
eval 'exec /usr/bin/perl  -S $0 ${1+"$@"}'
exit $status;
files does not contain I<any> POD commands.
for my $podfile (@ARGV) {
GetOptions(\%options, qw(help man warnings+ nowarnings))  ||  pod2usage(2);
=head1 AUTHORS
=head1 DESCRIPTION
=head1 ERRORS
=head1 NAME
=head1 OPTIONS AND ARGUMENTS
=head1 RETURN VALUE
=head1 SEE ALSO
=head1 SYNOPSIS
        if 0;
    if 0; # not running under some shell
    if($errors > 0) {
if($options{nowarnings}) {
    if($podfile eq '-') {
indicating the number of errors found.
## Invoke podchecker()
=item B<-help>
=item B<-man>
=item B<-warnings> B<-nowarnings>
=item I<file>
it find to STDERR. At the end, it will print a status message
level two causes flagging of unescaped "E<lt>,E<gt>" characters.
L<Pod::Parser> and L<Pod::Checker>
Marek Rouchal E<lt>marekr@cpan.orgE<gt>
    my $errors =
my %options;
my $status = 0;
      next;
        # no pod found
  $options{warnings} = 0;
  $options{warnings} = 1; # default is warnings on
## Parse options
Please report bugs using L<http://rt.cpan.org>.
Please see L<Pod::Checker/podchecker()> for more details.
pod2usage(1)  if ($options{help});
pod2usage(2) if ((@ARGV == 0) && (-t STDIN));
pod2usage(-verbose => 2)  if ($options{man});
podchecker - check the syntax of POD format documentation files
# podchecker -- command to invoke the podchecker function in Pod::Checker
      podchecker($podfile, undef, '-warnings' => $options{warnings});
          $podfile, $errors,
POD files are ok.
      $podfile = '<&STDIN';
Print a brief help message and exit.
        printf STDERR ("%s has %d pod syntax %s.\n",
        print STDERR "$podfile does not contain any pod commands.\n";
        print STDERR "$podfile pod syntax OK.\n";
Print the manual page and exit.
results, call B<podchecker> with one single argument only.
        $status = 1;
Status 1 overrides status 2. If you want unambiguous
        $status = 2 unless($status);
syntax errors in the POD documentation and will print any errors
the given POD files has syntax errors.
The pathname of a POD file to syntax-check (defaults to standard input).
The status 2 indicates that at least one of the specified 
# This file is part of "PodParser". PodParser is free software;
Tom Christiansen E<lt>tchrist@mox.perl.comE<gt>
Turn on/off printing of warnings. Repeating B<-warnings> increases the
#use diagnostics;
use Getopt::Long;
use Pod::Checker;
use Pod::Usage;
use strict;
#!/usr/bin/perl
warning level, i.e. more warnings are printed. Currently increasing to
      warn "podchecker: Warning: Ignoring directory '$podfile'\n";
# you can redistribute it and/or modify it under the same terms

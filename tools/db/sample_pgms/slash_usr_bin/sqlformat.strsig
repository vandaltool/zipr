                 action='store_true', default=False,
_CASE_CHOICES = ['upper', 'lower', 'capitalize']
                       'choices are "python", "php"'))
    """Convert command line options to dictionary."""
# Copyright (C) 2008 Andi Albrecht, albrecht.andi@gmail.com
    d = {}
            data = '\n'.join(open(args[0]).readlines())
        data = sys.stdin.read()
def _build_formatter_opts(options):
def _error(msg, exit_=None):
def main():
                 dest='identifier_case', choices=_CASE_CHOICES,
                 dest='keyword_case', choices=_CASE_CHOICES,
                 dest='output_format', choices=['python', 'php'],
        d[option.dest] = getattr(options, option.dest)
    else:
            _error('Failed to open %s: %s' % (options.outfile, err), exit_=1)
            _error('Failed to read %s: %s' % (args[0], err), exit_=1)
        _error('Invalid options: %s' % err, exit_=1)
        _error('No input data.')
        except OSError, err:
    except sqlparse.SQLParseError, err:
    formatter_opts = _build_formatter_opts(options)
        formatter_opts = sqlparse.formatter.validate_options(formatter_opts)
_FORMATTING_GROUP = group
    for option in _FORMATTING_GROUP.option_list:
group.add_option('-i', '--identifiers', metavar='CHOICE',
group.add_option('--indent_width', dest='indent_width', default=2,
group.add_option('-k', '--keywords', metavar='CHOICE',
group.add_option('-l', '--language', metavar='LANG',
group.add_option('-r', '--reindent', dest='reindent',
group.add_option('--strip-comments', dest='strip_comments',
group = parser.add_option_group('Formatting Options')
                 help=('change case of identifiers, CHOICE is one of %s'
                 help=('change case of keywords, CHOICE is one of %s'
                 help='indentation width (defaults to 2 spaces)')
                 help=('output a snippet in programming language LANG, '
                 help='reindent statements')
                 help='remove comments')
                  help='write output to FILE (defaults to stdout)')
    if exit_ is not None:
    if '-' in args:  # read from stdin
    if len(args) != 1:
if __name__ == '__main__':
    if options.outfile:
    if options.verbose:
import optparse
import os
import sqlparse
import sys
                       % ', '.join('"%s"' % x for x in _CASE_CHOICES)))
    main()
    options, args = parser.parse_args()
parser.add_option('-o', '--outfile', dest='outfile', metavar='FILE',
parser.add_option('-v', '--verbose', dest='verbose', action='store_true')
parser = optparse.OptionParser(usage='%prog [OPTIONS] FILE, ...',
        parser.print_usage()
parser.set_description(('Format FILE according to OPTIONS. Use "-" as FILE '
    """Print msg and optionally exit with return code exit_."""
    print >>sys.stderr, '[ERROR] %s' % msg
        print >>sys.stderr, 'Verbose mode'
                                                                'replace'))
    return d
    stream.flush()
            stream = open(options.outfile, 'w')
        stream = sys.stdout
    stream.write(sqlparse.format(data, **formatter_opts).encode('utf-8',
        sys.exit(1)
        sys.exit(exit_)
# the BSD License: http://www.opensource.org/licenses/bsd-license.php.
# This module is part of python-sqlparse and is released under
                        'to read from stdin.'))
        try:
    try:
#!/usr/bin/python
                               version='%%prog %s' % sqlparse.__version__)

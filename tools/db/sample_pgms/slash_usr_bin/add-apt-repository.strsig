        
  a complete apt line in quotes, 
    # add it
  a PPA shortcut.
    apt-add-repository 'deb http://myserver/path/to/repo stable myrepo'
    apt-add-repository http://extras.ubuntu.com/ubuntu 
    apt-add-repository 'http://myserver/path/to/repo myrepo'
    apt-add-repository 'https://packages.medibuntu.org free non-free'
    apt-add-repository ppa:user/repository
  a repo url and areas in quotes (areas defaults to 'main')
        deb_entry = SourceEntry(deb_line, file)
        deb_line = sp.expand_http_line(line)
        debsrc_entry = SourceEntry(debsrc_line, file)
        debsrc_line = 'deb-src' + deb_line[3:]
def _maybe_suggest_ppa_name_based_on_user(user):
def utf8(s):
        dest="assume_yes", default=False,
        dest="keyserver", default=DEFAULT_KEYSERVER,
        dest="massive_debug", default=False,
        dest="remove", default=False,
    # display PPA info (if needed)
            else:
        else:
    else:
            entity_name = "team" if user_inst.is_team else "user"
                        %(entity_name, user))
                        %(entity_name, user, ppa_name))
  Examples:
    except:
        except HTTPError:
    except ImportError:
        except KeyError:
        except ValueError:
        except (ValueError, URLError):
            # exists. If it exists, list down the PPAs
    # FIXME: provide a --sources-list-file= option that 
    # force new ppa file to be 644 (LP: #399709)
                for ppa in user_inst.ppas:
from aptsources.sourceslist import SourceEntry
from gettext import gettext as _
        from launchpadlib.launchpad import Launchpad
from optparse import OptionParser
from softwareproperties import lp_application_name
from softwareproperties.ppa import DEFAULT_KEYSERVER, expand_ppa_line
        from softwareproperties.ppa import get_ppa_info_from_lp, LAUNCHPAD_PPA_API
from softwareproperties.SoftwareProperties import SoftwareProperties
from urllib2 import HTTPError, URLError
    # get the line
        help="Assume yes to all queries")
        help="Print a lot of debug information to the command line")
        help="remove repository from sources.list.d directory")
        help="URL of keyserver. Default: %default")
    if isinstance(s, unicode):
    if (len(args) != 1):
            if len(user_inst.ppas) > 0:
    if line.startswith("ppa:") and not options.assume_yes:
if __name__ == "__main__":
        if not sp.add_source_from_line(line):
            if options.remove:
        if options.remove:
    if options.remove:
    if os.geteuid() != 0:
        if "private" in ppa_info and ppa_info["private"]:
If --remove is given the tool will remove the given sourceline from your
    if s is None:
        if (sys.stdin.isatty() and
            # If the PPA does not exist, then try to find if the user/team 
            if user.startswith("~"):
import gettext
import locale
import os
import sys
It can be used to add any repository and also provides a shorthand 
                (LAUNCHPAD_PPA_API % (user, ppa_name))
    line = args[0]
        (line, file) = expand_ppa_line(line.strip(), sp.distro.codename)
        locale.setlocale(locale.LC_ALL, "")
        lp = Launchpad.login_anonymously(lp_application_name, "production")
            _maybe_suggest_ppa_name_based_on_user(user)
            not "FORCE_ADD_APT_REPOSITORY" in os.environ):
    (options, args) = parser.parse_args()
    os.umask(0022)
    parser.add_option("-k", "--keyserver",
    parser.add_option ("-m", "--massive-debug", action="store_true",
    parser.add_option("-r", "--remove", action="store_true",
    parser.add_option("-y", "--yes", action="store_true",
    parser = OptionParser(usage)
        pass
            pass
                    "please check your internet connection.") % \
            ppa_info = get_ppa_info_from_lp(user, ppa_name)
        ppa_name = ppa_name or "ppa"
            print _("Adding private PPAs is not supported currently")
            print _("Cannot access PPA (%s) to get PPA information, "
            print _("Cannot add PPA: '%s'.") % line
                print _("Did you mean 'ppa:%s/%s' ?" %(user[1:], ppa_name))
        print _("Error: must run as root")
        print _("Error: need a repository as argument")
            print _("Error: '%s' doesn't exist in a sourcelist file" % deb_line)
            print _("Error: '%s' doesn't exist in a sourcelist file" % debsrc_line)
            print _("Error: '%s' invalid" % line)
        print _(" More info: %s") % ppa_info["web_link"]
        print _("Please check that the PPA name or format is correct.")
                print _("Please choose from the following available PPAs:")
                print _("Press [ENTER] to continue or ctrl-c to cancel adding it")
                print _("Press [ENTER] to continue or ctrl-c to cancel removing it")
                    print _(" * '%s':  %s" %(ppa.name, ppa.displayname))
        print " %s" % utf8(ppa_info["description"] or "")
                print _("The %s named '%s' does not have any PPA"
                print _("The %s named '%s' has no PPA named '%s'" 
            print _("You are about to add the following PPA to your system:")
            print _("You are about to remove the following PPA from your system:")
        # private PPAs are not supported
%prog is a script for adding apt sources.list entries. 
    #        puts the line into a specific file in sources.list.d
repository.
        return None
        return s.encode("utf-8", "ignore")
    return unicode(s, "utf8", "ignore").encode("utf8")
<sourceline> - The apt repository source line to add. This is one of:
sources.list
            sp.remove_source(deb_entry)
            sp.remove_source(debsrc_entry)
    sp = SoftwareProperties(options=options)
        sp.sourceslist.save()
    string, errors are ignored
syntax for adding a Launchpad PPA (Personal Package Archive)
            sys.exit(1)
        sys.exit(1)
                sys.exit(1) # Exit because the user cannot be correct
            sys.stdin.readline()
    Takes a string or unicode object and returns a utf-8 encoded
        try:
    try:
    usage = """Usage: %prog <sourceline>
            user_inst = lp.people[user]
        user, sep, ppa_name = line.split(":")[1].partition("/")
#!/usr/bin/python

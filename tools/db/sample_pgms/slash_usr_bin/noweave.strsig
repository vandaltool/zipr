               ;;
    -)  arg="$arg $1" ;;
    *)  arg="$arg $1" ;;
    -ascii)      wrapper=none
    -autodefs) newfilter="$LIB/autodefs.$2"
    -backend)    backend="$2" ; shift ;;
                 backend="$LIB/toascii" ;;
                 backend="$LIB/tohtml -localindex"
                 backend="$LIB/tohtml -localindex -raw"
                 backend="$LIB/toroff" ;;
                                $backend $noindex $delay $shortxref
#!/bin/sh
  case $1 in
case $wrapper in
# Copyright 1991-1997 by Norman Ramsey.  All rights reserved.
    -delay)   delay="-delay" ; wrapper=none ;;
                   done
                                                    echo "$0: ran out of filters" 1>&2
                                            echo "$0: ran out of filters" 1>&2
    -*) echo "$0: Unrecognized option '$1'" 1>&2 ; echo "Usage: $0 [options] [files]" 1>&2
  echo "$0: you may not use -x with -index or -indexfrom (drop the -x)" 1>&2
    echo ") |" 1>&2
                                                   # echo "-ascii            Emit ASCII." 1>&2
                                                   echo "-autodefs lang    Source is in language 'lang'; find definitions automatically." 1>&2
                                                   echo "-delay            Delay markup until after first documentation chunk." 1>&2
                                                   echo "-filter cmd       Filter through 'cmd' before weaving; cmd could prettyprint" 1>&2
                                                   echo "-html             Emit HTML with headers and trailers." 1>&2
                                                   echo "-index            Create index using identifiers defined in input files." 1>&2
                                                   echo "-indexfrom defs   Create index of identifers listed in file defs." 1>&2
                                                   echo "-latex            Emit LaTeX with headers and trailers (default)." 1>&2
                                                   echo "-latex+html       Assume LaTeX in documentation, but use HTML in code." 1>&2
                                                   echo "-markup frontend  Parse input with frontend (e.g., numarkup)." 1>&2
    echo $markup $markopts $arg '|' 1>&2
                                                   echo " -n               Don't use any header or trailer." 1>&2
                                                   echo "Options recognized are:" 1>&2
                                                   echo "                  or perform other functions." 1>&2
    echo "$parenpfx$markup" $markopts $arg 1>&2
        echo 'RCS id $Id: noweave.nw,v 1.6 1998/08/17 00:10:34 nr Exp nr $' 1>&2
                                                   echo "-showautodefs     List languages that can be used with -autodefs" 1>&2
                                                   echo "-t                Copy tabs to the output" 1>&2
                                                   echo "-tex              Emit plain TeX with headers and trailers." 1>&2
                     echo "This `basename $0` does not support -autodefs"
                       echo "This `basename $0` supports -autodefs $i" | 
                                                   echo "-tk               Expand tab stops every k columns" 1>&2
                                                   echo "-troff            Emit troff (actually GNU groff)." 1>&2
                                                   echo "-v                Print pipeline and RCS info on standard error" 1>&2; exit 1 ;;
                                                   echo "-x                Use the default cross-referencer (needs LaTeX or HTML)." 1>&2
                                                  elif [ -z "$filterb" ]; then
                                          elif [ -z "$filterb" ]; then
elif [ -z "$filterb" ]; then
                                                  elif [ -z "$filterc" ]; then
                                          elif [ -z "$filterc" ]; then
elif [ -z "$filterc" ]; then
                                                  elif [ -z "$filterd" ]; then
                                          elif [ -z "$filterd" ]; then
elif [ -z "$filterd" ]; then
                                                  elif [ -z "$filtere" ]; then
                                          elif [ -z "$filtere" ]; then
elif [ -z "$filtere" ]; then
                                                  elif [ -z "$filterf" ]; then
                                          elif [ -z "$filterf" ]; then
elif [ -z "$filterf" ]; then
                                                  elif [ -z "$filterg" ]; then
                                          elif [ -z "$filterg" ]; then
elif [ -z "$filterg" ]; then
                                          else
                                                  else
               else echo "$0: don't know how to find definitions for '$2'" 1>&2; exit 1
             else noweboptions="$noweboptions,$newopt"
                           eval $filterd
                           eval $filterd | eval $filtere
                           eval $filterd | eval $filtere | eval $filterf
                           eval $filterd | eval $filtere | eval $filterf |
                           eval $filterg
eval $pass2setcmd
                                                    exit 1
                                            exit 1
  exit 1
export PATH
               fi
                     fi
                                          fi
                                                  fi
                                                  fi ;;
             fi ;;
                   fi; exit 1 ;;
    -filter) 
filtera= filterb= filterc= filterd= filtere= filterf= filterg=
                                                    filtera="$newfilter"
                                            filtera="$newfilter"
                                                    filterb="$newfilter"
                                            filterb="$newfilter"
                                                    filterc="$newfilter"
                                            filterc="$newfilter"
                                                    filterd="$newfilter"
                                            filterd="$newfilter"
                                                    filtere="$newfilter"
                                            filtere="$newfilter"
                                                    filterf="$newfilter"
                                            filterf="$newfilter"
                                                    filterg="$newfilter"
                                            filterg="$newfilter"
    -filter)    shift                           ;;
# following supported by change in totex back end
for i do
                   for i in $LIB/autodefs.*; do
                       foundautodefs=$i
  *)  header="@header $wrapper$arg" 
    -html)       if [ "$wrapper" != "none" ]; then wrapper=html; fi; 
# $Id: noweave.nw,v 1.6 1998/08/17 00:10:34 nr Exp nr $
  if   [ -n "$filtera" ]; then echo $filtera '|' 1>&2; fi
  if   [ -n "$filterb" ]; then echo $filterb '|' 1>&2; fi
  if   [ -n "$filterc" ]; then echo $filterc '|' 1>&2; fi
  if   [ -n "$filterd" ]; then echo $filterd '|' 1>&2; fi
  if   [ -n "$filtere" ]; then echo $filtere '|' 1>&2; fi
  if   [ -n "$filterf" ]; then echo $filterf '|' 1>&2; fi
  if   [ -n "$filterg" ]; then echo $filterg '|' 1>&2; fi
  if [ -n "$header" -o -n "$trailer" ]; then
    if [ -n "$header" ]; then echo "(echo $header" 1>&2; parenpfx=" "; fi
if [ -n "$header" ]; then echo "$header"; fi
    if [ -n "$trailer" ]; then echo " echo $trailer" 1>&2; fi
if [ -n "$trailer" ]; then echo $trailer; fi
if [ -n "$using_xref" -a -n "$using_index" ]; then
if [ -n "$verbose" ]; then
if [ -n "$verbose" ]; then echo $backend $noindex $delay $shortxref 1>&2; fi
                     if [ -r $i ]; then
               if [ -r $newfilter ]; then if   [ -z "$filtera" ]; then
             if [ "X$newopt" = "Xlongxref" ];  then shortxref="-longxref";  fi
             if [ "X$newopt" = "Xshortxref" ]; then shortxref="-shortxref"; fi
if   [ -z "$filtera" ]; then
                   if [ -z "$foundautodefs" ]; then
             if [ -z "$noweboptions" ] ; then noweboptions="$newopt"
if [ -z "$wrapper" ]; then wrapper=latex; fi
    -index)  
    -indexfrom)
    -indexfrom) shift; noindex= ; using_index=1 ;;
    -index)            noindex= ; using_index=1 ;;                 
  latex)  header="@header $wrapper $noweboptions" 
    -latex+html) if [ "$wrapper" != "none" ]; then wrapper=latex; fi; 
    -latex)      if [ "$wrapper" != "none" ]; then wrapper=latex; fi ;;
LIB=/usr/lib/noweb
markup=$LIB/markup backend=$LIB/totex
  $markup $markopts $arg
  $markup $markopts $arg | eval $filtera
  $markup $markopts $arg | eval $filtera | eval $filterb
  $markup $markopts $arg | eval $filtera | eval $filterb | eval $filterc
  $markup $markopts $arg | eval $filtera | eval $filterb | eval $filterc |
    -markup)     markup="$2"  ; shift ;;
        newfilter="$2" ; shift ;                  if   [ -z "$filtera" ]; then
        newfilter="$LIB/finduses $noquote $2";    if   [ -z "$filtera" ]; then
        newfilter="$LIB/finduses $noquote" ;      if   [ -z "$filtera" ]; then
        newfilter="$LIB/noidx $docanchor $delay"; if   [ -z "$filtera" ]; then
    # -nodelay) delay= ;;
  none) ;;
noquote=
                 noquote=""; docanchor="-docanchor 10" ;;
noquote="-noquote" docanchor= noindex="-noindex"
    -n)          wrapper=none ;;
    -option) newopt="$2"; shift
    parenpfx="("
  pass2setcmd="$pass2setcmd '$i'"
pass2setcmd="set ignore"
PATH="$PATH:$LIB" 
                                                   printf '-option opt       Add \\noweboptions{opt} to header (latex only)\n' 1>&2
                                           sed "s@$LIB/autodefs\.@@" 1>&2
# See file COPYRIGHT for more information.
               shift
        shift ;;
    -showautodefs) foundautodefs=
    -tex)        wrapper=tex ;;
    -t*) markopts="$markopts $1" ;;
          trailer="@trailer $wrapper" ;;
      trailer="@trailer $wrapper" ;;
    -troff)      wrapper=mm
using_index= using_xref=
    -v) echo 'RCS version name $Name:  $' 1>&2
        verbose=1 ;;
while [ $# -gt 0 ]; do
wrapper= delay= args= markopts= noweboptions= autodefs= verbose= shortxref=
    -x) newfilter="$LIB/noidx $docanchor $delay"; if   [ -z "$filtera" ]; then
    -x)                           using_xref=1  ;;

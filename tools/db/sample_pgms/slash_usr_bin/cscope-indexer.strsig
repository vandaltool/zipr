###############################################################################
# Author:       Darryl Okahata
#          Be verbose.  Output simple progress messages.
#! /bin/sh
#		build a list and database.  This script is not used to
    case "$1" in
# (C) Copyright 2000, Darryl Okahata, all rights reserved.
#		changing sources files are automatically handled.
# Created:      Thu Apr 27 17:12:14 2000
#		cron job, during the night).  It is especially useful
#		"cscope -b".
cscope -b -i $LIST_FILE -f $DATABASE_FILE
#     cscope-indexer [ -v ] [-f database_file ] [-i list_file ] [ -l ] [ -r ]
#		(cscope.out), which is then (optionally) used to
#		Currently, any paths containing "/CVS/" or "/RCS/" are
	DATABASE_FILE="$2"
DATABASE_FILE='cscope.out'
# Description:  Script to index files for cscope
	DIR="$1"
	    echo "$0: No database file specified" >&2
	    echo "$0: No list file specified" >&2
    echo "Creating list of files to index ..."
    echo "Creating list of files to index ... done"
	    echo "$DIR/$f"
    echo "Indexing files ..."
    echo "Indexing files ... done"
    egrep -i '\.([chly](xx|pp)*|cc|hh)$' | \
    else
    esac
    exit 0
	    exit 1
export DIR RECURSE			# Need to pass these to subprocesses
export PATH
#     -f database_file
# File:         cscope-indexer
#          file.  Only a list of files is generated.
#		files added and deleted; by using this script, the
	find $DIR \( -type f -o -type l \)
	for f in *
#		for large projects, which can contstantly have source
#		generate a cscope database.  You can use this script
	if [ "X$2" = "X" ]
if [ "X$LIST_ONLY" != "X" ]
    if [ "X$RECURSE" = "X" ]
if [ "X$VERBOSE" != "X" ]
#		if you need to recurse into subdirectories, or have
#     -i list_file
#		just build a database (skipping the list of files
#     -l
# Language:     Shell-script
	LIST_FILE="$2"
LIST_FILE='cscope.files'
LIST_ONLY=
	LIST_ONLY=1
#		many files to index (you can run this script from a
# May have to edit this:
# Modified:     Tue Jun 19 09:47:45 2001 (Darryl Okahata) darrylo@soco.agilent.com
#		Normally, cscope will do its own indexing, but this
#		not all shells have advanced features.
# Package:      N/A
PATH="/usr/local/bin:/sbin:/usr/sbin:/bin:/usr/bin:$PATH"
#     -r
# RCS:          $Header: /cvsroot/cscope/cscope/contrib/xcscope/cscope-indexer,v 1.2 2001/06/28 04:39:47 darrylo Exp $
RECURSE=
	RECURSE=1
#          Recurse into subdirectories to locate files to index.
#		script can be used to force indexing.  This is useful
#          searched.
    sed -e '/\/CVS\//d' -e '/\/RCS\//d' -e 's/^\.\///' | \
    shift
    sort > $LIST_FILE
#          Specifies the cscope database file (default: cscope.out).
#          Specifies the name of the file into which the list of files
# Status:       Experimental
#		step), as this can be simply done by just calling
#		stripped out (ignored).
#          Suppress the generation/updating of the cscope database
    then
#		This script generates a list of files to index
#		This script is written to use only basic shell features, as
#          to index is placed (default: cscope.files).
#		to just build a list of files, or it can be used to
	# Ugly, inefficient, but it works.
# Usage:
#     -v
VERBOSE=
	VERBOSE=1
# where:
while [ -n "$1" ]
#          Without this option, only the current directory is

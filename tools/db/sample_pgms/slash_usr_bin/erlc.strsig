                                
00000000000000000000000000000000
0123456789abcdef
%-14s %s
add a phony target for each dependency
add path to the end of Erlang's code path
add path to the front of Erlang's code path
change the target of the rule emitted by dependency generation
-compile
compile_cmdline
compile using hybrid-heap emulator
compile using SMP emulator
consider missing headers as generated files and add them to the dependencies
__ctype_b_loc
define name
define name to have value
disable warnings
-Dname=value
enable all warnings
enable warnings (default; same as -W1)
ERLC_EMULATOR
erl_compile
erlc: %s
__errno_location
Error %d executing '%s'.
Failed to get current working directory: %s
__fprintf_chk
generate a rule for make(1) describing the dependencies
generate assembly listing (Erlang compiler)
generate listing of expanded code (Erlang compiler)
generate listing of preprocessed code (Erlang compiler)
GLIBC_2.0
GLIBC_2.3
GLIBC_2.3.4
GLIBC_2.4
__gmon_start__
Insufficient memory
_IO_putc
_IO_stdin_used
_Jv_RegisterClasses
libc.so.6
__libc_start_main
/lib/ld-linux.so.2
libm.so.6
make all warnings into errors
makedep_add_missing
makedep_output
makedep_quote_target
makedep_target
-MF file
-MQ target
-MT target
name output directory or file
-noinput
No value given to -%c option
@optimize
Options:
@output_type
-pa path
pass the Erlang term unchanged to the compiler
__printf_chk
-pz path
same as -M -MT file (with default 'file')
same as -MT but quote characters special to make(1)
set warning level to number
shows this help text
__snprintf_chk
__sprintf_chk
{%s,"%s"}
__stack_chk_fail
standard_io
start_clean
__strcpy_chk
strerror
+T$ ;l$`
turn on debugging of erlc itself
type of output file (e.g. jam or beam)
Usage:	erlc [options] file.ext ...
Value of environment variable ERLC_EMULATOR is too large
@verbose
verbose compiler output
warnings_as_errors
where to search for include files
-Wnumber
write the dependencies to 'file'

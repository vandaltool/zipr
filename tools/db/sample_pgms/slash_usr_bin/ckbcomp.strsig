    # -----------------------------------------
			    );
			    }
			    [0, 0, 0, 0], # gr1 -> gr1 -> gr1 -> gr1
    '0' => '0030',
			    [0, 1, 1, 0], # gr1 -> gr2 -> gr1 -> gr2
			    [0, 1, 2, 0], # gr1 -> gr2 -> gr1 -> gr3
			    [0, 1, 3, 2]);# gr1 -> gr2 -> gr3 -> gr4
				  !~ /^[0-9a-fA-F]{4}$/));
    # 0                 Group1
    '0x1000' => 'VoidSymbol', # Special symbol for X or syntax error?
    '0x13a4' => 'VoidSymbol', # Special symbol for X or syntax error?
	    || 0x61 <= $code && 0x7a >= $code) {
    '0xfe11' => 'VoidSymbol', # Special symbol for X or syntax error?
	'0' => 'zero',
			    ? $1 
			 ? $1
    100 => 105,
    '1' => '0031',
    10 => 2,
    102 => 106,
    103 => 107,
    104 => 108,
    105 => 109,
    106 => 110,
    107 => 111,
    108 => 96,
    109 => 97,
    110 => 119,
    111 => 99,
    112 => 98,
    11 => 3,
    113 => 100,
    114 => 101,
    115 => 125,
    116 => 126,
    117 => 127,
    118 => -1,  # Japanese
    119 => -1,  # Japanese
    120 => -1,  # Japanese
    123 => -1,
			      :([1234])(.*)/$5/x)) {
    12 => 4,
    124 => -1,  # fake key
    125 => -1,  # fake key
    126 => -1,  # fake key
    127 => -1,  # fake key
    128 => -1,  # fake key
    129 => -1,  # Japanese
    131 => -1,  # Japanese
    133 => 124, # Japanese
    134 => 121, # Brasilian ABNT2
    13 => 5,
    144 => -1,  # Japanese
    14 => 6,
    156 => -1,  # fake key
    15 => 7,
    16 => 8,
    # 16 ShiftL         Group2
    17 => 9,
    18 => 10,
    19 => 11,
                       =.*?;(.*)/$1/ix) {
	'1' => 'one',
    # 1  Shift          level 2 (Shift)
                                    (.*)/$1/x);
    '2' => '0032',
 2005,2006 Anton Zinoviev <anton@lml.bas.bg>
    20 => 12,
    208 => -1,  # Japanese
    209 => -1,  # Korean
    210 => -1,  # Korean
    21 => 13,
    211 => 89,  # Brasilian ABNT2
    214 => -1,  # alternate between internal and multimedia display
    215 => -1,  # turn light on/of
    216 => -1,  # brightness down
    217 => -1,  # brightness up
    22 => 14,
    23 => 15,
    24 => 16,
    25 => 17,
    26 => 18,
    27 => 19,
    28 => 20,
    29 => 21,
    # 2  AltGr          levels 3 and 4 (AltGr)
			[^;]*;(.*)/$2/ix)) {
			\{[^\}]*\};(.*)/$2/ix)
	'2' => 'nul',
	'2' => 'two',
                              =\"([^\"]+)\",(.*)/$2/x)) {
                                   (.*)/$2/x);
    '3' => '0033',
    30 => 22,
    31 => 23,
    32 => 24,
    # 32 ShiftR         Group4
    33 => 25,
    34 => 26,
    35 => 27,
    36 => 28,
    37 => 29,
    38 => 30,
    39 => 31,
	'3' => 'Escape',
                        (.*)/$3/ix) {
	'3' => 'three',
			      =\[([^\]]*?)\],(.*)/$3/x)) {
    '4' => '0034',
    40 => 32,
    41 => 33,
    42 => 34,
    43 => 35,
    44 => 36,
    45 => 37,
    46 => 38,
    47 => 39,
    48 => 40,
    # 48 ShiftL+ShiftR  Group3
    49 => 41,
	'4' => 'Control_backslash',
    # 4  Control        Control
	'4' => 'four',
				   (.*)/$4/x)) {
    '5' => '0035',
    50 => 42,
    51 => 43,
    52 => 44,
    53 => 45,
    54 => 46,
    55 => 47,
    56 => 48,
    57 => 49,
    58 => 50,
    59 => 51,
#     59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
	'5' => 'Control_bracketright',
	'5' => 'five',
    '6' => '0036',
    60 => 52,
    61 => 53,
    62 => 54,
    63 => 55,
    64 => 56,
    65 => 57,
    66 => 58,
    67 => 59,
    68 => 60,
    69 => 61,
	'6' => 'Control_asciicircum',
	'6' => 'six',
    '7' => '0037',
    70 => 62,
    71 => 63,
    72 => 64,
    73 => 65,
    74 => 66,
    75 => 67,
    76 => 68,
    77 => 69,
    78 => 70,
    79 => 71,
	'7' => 'Control_underscore',
	'7' => 'seven',
    '8' => '0038',
    80 => 72,
    81 => 73,
    82 => 74,
    83 => 75,
    84 => 76,
    85 => 77,
    86 => 78,
    87 => 79,
    88 => 80,
    89 => 81,
    # 8  Alt            Alt
	'8' => 'Delete',
	'8' => 'eight',
    '9' => '0039',
    90 => 82,
    9 => 1,
    91 => 83,
    92 => 84,
    93 => -1, # fake key (KP_Equal)
    94 => 86,
    95 => 87,
    96 => 88,
    97 => 102,
    98 => 103,
    99 => 104,
	'9' => 'nine',
    'A' => '0041',
    'a' => '0061',
    'Aacute' => '00c1',
    'aacute' => '00e1',
    'Abelowdot' => '1ea0',
    'abelowdot' => '1ea1',
    'abovedot' => '02d9',
		# abracadabra
		# abracadabra = "...."
		# abracadabra = abra<cad>abra
    'Abreve' => '0102',
    'abreve' => '0103',
    'Abreveacute' => '1eae',
    'abreveacute' => '1eaf',
    'Abrevebelowdot' => '1eb6',
    'abrevebelowdot' => '1eb7',
    'Abrevegrave' => '1eb0',
    'abrevegrave' => '1eb1',
    'Abrevehook' => '1eb2',
    'abrevehook' => '1eb3',
    'Abrevetilde' => '1eb4',
    'abrevetilde' => '1eb5',
    'Acircumflex' => '00c2',
    'acircumflex' => '00e2',
    'Acircumflexacute' => '1ea4',
    'acircumflexacute' => '1ea5',
    'Acircumflexbelowdot' => '1eac',
    'acircumflexbelowdot' => '1ead',
    'Acircumflexgrave' => '1ea6',
    'acircumflexgrave' => '1ea7',
    'Acircumflexhook' => '1ea8',
    'acircumflexhook' => '1ea9',
    'Acircumflextilde' => '1eaa',
    'acircumflextilde' => '1eab',
	    $acm = $acmfile;
		     "acm/${charmap}.acm") {
	    $acmtable{$uni} = $c;
    'acute' => '0027', # APOSTROPHE instead of ACUTE ACCENT
    'Adiaeresis' => '00c4',
    'adiaeresis' => '00e4',
    'AE' => '00c6',
    'ae' => '00e6',
    'Agrave' => '00c0',
    'agrave' => '00e0',
    'Ahook' => '1ea2',
    'ahook' => '1ea3',
		$aliases{$alias} = $key;
# all redundant spaces are removed.
#     along with this program, write to the Free Software Foundation, Inc.,
			  |alphanumeric_keys|modifier_keys
# Alphanumeric symbols
                             'alt',
			'Alt' => 0x08,
                             'alt altgr',
                             'alt altgr shift',
                             'alt control',
                             'alt control altgr',
                             'alt control altgr shift',
                             'alt control shift',
			  |alternate_group)\s?(.*)/$2/ix) {
                             'altgr',
			'AltGr' => 0x02,
		# AltGr = 0x02,  ShiftL = 0x10
			'AltGr_Lock' => 0x02,
                             'altgr shift',
    'Alt_L' => 'Alt',
			'Alt_Lock' => 0x08,
    'Alt_R' => 'Alt',
                             'alt shift',
    'Amacron' => '0100',
    'amacron' => '0101',
    # a modifier key such as Control or Alt
	'&' => 'ampersand',
    'ampersand' => '0026',
	    "an keycode alias definition in $filename.\n";
	    @antecedent_patterns == @antecedents 
				       $antecedent_patterns[$i])) {
		    $antecedents[$i] = '';
			$antecedents[$i] = '';
			 || $antecedents[$i] eq 'variant') {
		    $antecedents[$i] = $layouts[0];
			$antecedents[$i] = $layouts[$1 - 1];
		    $antecedents[$i] = $model;
		    $antecedents[$i] = 'OPTIONS';
		    $antecedents[$i] = $variants[0];
			$antecedents[$i] = $variants[$1 - 1];
	    @antecedents = split ' ', $1;
    'any' => 'NoSymbol', # Is this recognised by X ?
    'Aogonek' => '0104',
    'aogonek' => '0105',
	'\'' => 'apostrophe',
    'apostrophe' => '0027',
    'approxeq' => '2248',
    'approximate' => '223c',
		    approximate ($approximated_coord,
			approximate (($approximated_coord | 0x04), 
			approximate (($approximated_coord | 0x08), 
			approximate (($approximated_coord | 0x0c), 
	    approximate ($coord, $kernelkeysym, 0);
					      + ($approximated_group << 4));
    'Arabic_0' => '0660',
    'Arabic_1' => '0661',
    'Arabic_2' => '0662',
    'Arabic_3' => '0663',
    'Arabic_4' => '0664',
    'Arabic_5' => '0665',
    'Arabic_6' => '0666',
    'Arabic_7' => '0667',
    'Arabic_8' => '0668',
    'Arabic_9' => '0669',
    'Arabic_ain' => '0639',
    'Arabic_alef' => '0627',
    'Arabic_alefmaksura' => '0649',
    'Arabic_beh' => '0628',
    'Arabic_comma' => '060c',
    'Arabic_dad' => '0636',
    'Arabic_dal' => '062f',
    'Arabic_damma' => '064f',
    'Arabic_dammatan' => '064c',
    'Arabic_ddal' => '0688',
    'Arabic_farsi_yeh' => '06cc',
    'Arabic_fatha' => '064e',
    'Arabic_fathatan' => '064b',
    'Arabic_feh' => '0641',
    'Arabic_fullstop' => '06d4',
    'Arabic_gaf' => '06af',
    'Arabic_ghain' => '063a',
    'Arabic_ha' => '0647',
    'Arabic_hah' => '062d',
    'Arabic_hamza' => '0621',
    'Arabic_hamza_above' => '0654', # Is this recognised by X ?
    'Arabic_hamza_below' => '0655', # Is this recognised by X ?
    'Arabic_hamzaonalef' => '0623',
    'Arabic_hamzaonwaw' => '0624',
    'Arabic_hamzaonyeh' => '0626',
    'Arabic_hamzaunderalef' => '0625',
    'Arabic_heh' => '0647', # Is this recognised by X ?
    'Arabic_heh_doachashmee' => '06be',
    'Arabic_heh_goal' => '06c1',
    'Arabic_jeem' => '062c',
    'Arabic_jeh' => '0698',
    'Arabic_kaf' => '0643',
    'Arabic_kasra' => '0650',
    'Arabic_kasratan' => '064d',
    'Arabic_keheh' => '06a9',
    'Arabic_khah' => '062e',
    'Arabic_lam' => '0644',
    'Arabic_madda_above' => '0653', # Is this recognised by X ?
    'Arabic_maddaonalef' => '0622',
    'Arabic_meem' => '0645',
    'Arabic_noon' => '0646',
    'Arabic_noon_ghunna' => '06ba',
    'Arabic_peh' => '067e',
    'Arabic_percent' => '066a',
    'Arabic_qaf' => '0642',
    'Arabic_question_mark' => '061f',
    'Arabic_ra' => '0631',
    'Arabic_rreh' => '0691',
    'Arabic_sad' => '0635',
    'Arabic_seen' => '0633',
    'Arabic_semicolon' => '061b',
    'Arabic_shadda' => '0651',
    'Arabic_sheen' => '0634',
    'Arabic_sukun' => '0652',
    'Arabic_superscript_alef' => '0670', # Is this recognised by X ?
    'Arabic_tah' => '0637',
    'Arabic_tatweel' => '0640',
    'Arabic_tcheh' => '0686',
    'Arabic_teh' => '062a',
    'Arabic_tehmarbuta' => '0629',
    'Arabic_thal' => '0630',
    'Arabic_theh' => '062b',
    'Arabic_tteh' => '0679',
    'Arabic_veh' => '06a4',
    'Arabic_waw' => '0648',
    'Arabic_yeh' => '064a',
    'Arabic_yeh_baree' => '06d2',
    'Arabic_zah' => '0638',
    'Arabic_zain' => '0632',
    $arch = 'amiga';
    $arch = 'ataritt';
    $arch = 'evdev';
    $arch = 'macintosh';
    $arch = 'sun';
########### ARGUMENTS ###############################################
	    $ARGV[0] =~ s/[[:space:]]//g;
    'Aring' => '00c5',
    'aring' => '00e5',
    'Armenian_accent' => '055b',
    'Armenian_amanak' => '055c',
    'Armenian_apostrophe' => '055a',
    'Armenian_AT' => '0538',
    'Armenian_at' => '0568',
    'Armenian_AYB' => '0531',
    'Armenian_ayb' => '0561',
    'Armenian_BEN' => '0532',
    'Armenian_ben' => '0562',
    'Armenian_but' => '055d',
    'Armenian_CHA' => '0549',
    'Armenian_cha' => '0579',
    'Armenian_DA' => '0534',
    'Armenian_da' => '0564',
    'Armenian_DZA' => '0541',
    'Armenian_dza' => '0571',
    'Armenian_E' => '0537',
    'Armenian_e' => '0567',
    'Armenian_exclam' => '055c',
    'Armenian_FE' => '0556',
    'Armenian_fe' => '0586',
    'Armenian_full_stop' => '0589',
    'Armenian_GHAT' => '0542',
    'Armenian_ghat' => '0572',
    'Armenian_GIM' => '0533',
    'Armenian_gim' => '0563',
    'Armenian_HI' => '0545',
    'Armenian_hi' => '0575',
    'Armenian_HO' => '0540',
    'Armenian_ho' => '0570',
    'Armenian_hyphen' => '058a',
    'Armenian_INI' => '053b',
    'Armenian_ini' => '056b',
    'Armenian_JE' => '054b',
    'Armenian_je' => '057b',
    'Armenian_KE' => '0554',
    'Armenian_ke' => '0584',
    'Armenian_KEN' => '053f',
    'Armenian_ken' => '056f',
    'Armenian_KHE' => '053d',
    'Armenian_khe' => '056d',
    'Armenian_ligature_ew' => '0587',
    'Armenian_LYUN' => '053c',
    'Armenian_lyun' => '056c',
    'Armenian_MEN' => '0544',
    'Armenian_men' => '0574',
    'Armenian_NU' => '0546',
    'Armenian_nu' => '0576',
    'Armenian_O' => '0555',
    'Armenian_o' => '0585',
    'Armenian_paruyk' => '055e',
    'Armenian_PE' => '054a',
    'Armenian_pe' => '057a',
    'Armenian_PYUR' => '0553',
    'Armenian_pyur' => '0583',
    'Armenian_question' => '055e',
    'Armenian_RA' => '054c',
    'Armenian_ra' => '057c',
    'Armenian_RE' => '0550',
    'Armenian_re' => '0580',
    'Armenian_SE' => '054d',
    'Armenian_se' => '057d',
    'Armenian_separation_mark' => '055d',
    'Armenian_SHA' => '0547',
    'Armenian_sha' => '0577',
    'Armenian_shesht' => '055b',
    'Armenian_TCHE' => '0543',
    'Armenian_tche' => '0573',
    'Armenian_TO' => '0539',
    'Armenian_to' => '0569',
    'Armenian_TSA' => '053e',
    'Armenian_tsa' => '056e',
    'Armenian_TSO' => '0551',
    'Armenian_tso' => '0581',
    'Armenian_TYUN' => '054f',
    'Armenian_tyun' => '057f',
    'Armenian_verjaket' => '0589',
    'Armenian_VEV' => '054e',
    'Armenian_vev' => '057e',
    'Armenian_VO' => '0548',
    'Armenian_vo' => '0578',
    'Armenian_VYUN' => '0552',
    'Armenian_vyun' => '0582',
    'Armenian_YECH' => '0535',
    'Armenian_yech' => '0565',
    'Armenian_yentamna' => '058a',
    'Armenian_ZA' => '0536',
    'Armenian_za' => '0566',
    'Armenian_ZHE' => '053a',
    'Armenian_zhe' => '056a',
	'^' => 'asciicircum',
    'asciicircum' => '005e',
	'~' => 'asciitilde',
    'asciitilde' => '007e',
	'*' => 'asterisk',
    'asterisk' => '002a',
    'asterix' => '002a', # Is this recognised by X ? (speling error)
	'@' => 'at',
    'at' => '0040',
    'Atilde' => '00c3',
    'atilde' => '00e3',
#     (at your option) any later version.
# $augment_method, $replace_method, or $override_method.  If $stream
# A vector of symbol codes for a key
# A vector with same length as @vector.  Measures how well each element of
    'B' => '0042',
    'b' => '0062',
    'Babovedot' => '1e02', # Is this recognised by X ?
    'babovedot' => '1e03', # Is this recognised by X ?
    'backlash' => '005c',   # Is this recognised by X ? (speling error)
	'\\' => 'backslash',
    'backslash' => '005c',
    'BackSpace' => 'Delete',  # 0008
    'ballotcross' => '2717',
	'|' => 'bar',
    'bar' => '007c',
	    $base_group = $3 - 1 + $base_group;
	    $base_group = $4 - 1 + $base_group;
	$base_group = $oldbase_group;
    'because' => '2235',
    'Begin' => 'VoidSymbol',
	    $block = '';
	    $block = $3;
    'botintegral' => '2321',
    'botleftparens' => '239d',
    'botleftsqbracket' => '23a3',
    'botrightparens' => '23a0',
    'botrightsqbracket' => '23a6',
    'bott' => '2534',
	$bottom = $bottom & 0x0f;
	'{' => 'braceleft',
    'braceleft' => '007b',
	'}' => 'braceright',
    'braceright' => '007d',
	'[' => 'bracketleft',
    'bracketleft' => '005b',
	']' => 'bracketright',
    'bracketright' => '005d',
    'braille_blank' => '2800',
    'braille_dot_10' => 'Brl_dot10',
    'braille_dot_1' => 'Brl_dot1',
    'braille_dot_2' => 'Brl_dot2',
    'braille_dot_3' => 'Brl_dot3',
    'braille_dot_4' => 'Brl_dot4',
    'braille_dot_5' => 'Brl_dot5',
    'braille_dot_6' => 'Brl_dot6',
    'braille_dot_7' => 'Brl_dot7',
    'braille_dot_8' => 'Brl_dot8',
    'braille_dot_9' => 'Brl_dot9',
    'braille_dots_12' => '2803',
    'braille_dots_123' => '2807',
    'braille_dots_1234' => '280f',
    'braille_dots_12345' => '281f',
    'braille_dots_123456' => '283f',
    'braille_dots_1234567' => '287f',
    'braille_dots_12345678' => '28ff',
    'braille_dots_1234568' => '28bf',
    'braille_dots_123457' => '285f',
    'braille_dots_1234578' => '28df',
    'braille_dots_123458' => '289f',
    'braille_dots_12346' => '282f',
    'braille_dots_123467' => '286f',
    'braille_dots_1234678' => '28ef',
    'braille_dots_123468' => '28af',
    'braille_dots_12347' => '284f',
    'braille_dots_123478' => '28cf',
    'braille_dots_12348' => '288f',
    'braille_dots_1235' => '2817',
    'braille_dots_12356' => '2837',
    'braille_dots_123567' => '2877',
    'braille_dots_1235678' => '28f7',
    'braille_dots_123568' => '28b7',
    'braille_dots_12357' => '2857',
    'braille_dots_123578' => '28d7',
    'braille_dots_12358' => '2897',
    'braille_dots_1236' => '2827',
    'braille_dots_12367' => '2867',
    'braille_dots_123678' => '28e7',
    'braille_dots_12368' => '28a7',
    'braille_dots_1237' => '2847',
    'braille_dots_12378' => '28c7',
    'braille_dots_1238' => '2887',
    'braille_dots_124' => '280b',
    'braille_dots_1245' => '281b',
    'braille_dots_12456' => '283b',
    'braille_dots_124567' => '287b',
    'braille_dots_1245678' => '28fb',
    'braille_dots_124568' => '28bb',
    'braille_dots_12457' => '285b',
    'braille_dots_124578' => '28db',
    'braille_dots_12458' => '289b',
    'braille_dots_1246' => '282b',
    'braille_dots_12467' => '286b',
    'braille_dots_124678' => '28eb',
    'braille_dots_12468' => '28ab',
    'braille_dots_1247' => '284b',
    'braille_dots_12478' => '28cb',
    'braille_dots_1248' => '288b',
    'braille_dots_125' => '2813',
    'braille_dots_1256' => '2833',
    'braille_dots_12567' => '2873',
    'braille_dots_125678' => '28f3',
    'braille_dots_12568' => '28b3',
    'braille_dots_1257' => '2853',
    'braille_dots_12578' => '28d3',
    'braille_dots_1258' => '2893',
    'braille_dots_126' => '2823',
    'braille_dots_1267' => '2863',
    'braille_dots_12678' => '28e3',
    'braille_dots_1268' => '28a3',
    'braille_dots_127' => '2843',
    'braille_dots_1278' => '28c3',
    'braille_dots_1' => '2801',
    'braille_dots_128' => '2883',
    'braille_dots_13' => '2805',
    'braille_dots_134' => '280d',
    'braille_dots_1345' => '281d',
    'braille_dots_13456' => '283d',
    'braille_dots_134567' => '287d',
    'braille_dots_1345678' => '28fd',
    'braille_dots_134568' => '28bd',
    'braille_dots_13457' => '285d',
    'braille_dots_134578' => '28dd',
    'braille_dots_13458' => '289d',
    'braille_dots_1346' => '282d',
    'braille_dots_13467' => '286d',
    'braille_dots_134678' => '28ed',
    'braille_dots_13468' => '28ad',
    'braille_dots_1347' => '284d',
    'braille_dots_13478' => '28cd',
    'braille_dots_1348' => '288d',
    'braille_dots_135' => '2815',
    'braille_dots_1356' => '2835',
    'braille_dots_13567' => '2875',
    'braille_dots_135678' => '28f5',
    'braille_dots_13568' => '28b5',
    'braille_dots_1357' => '2855',
    'braille_dots_13578' => '28d5',
    'braille_dots_1358' => '2895',
    'braille_dots_136' => '2825',
    'braille_dots_1367' => '2865',
    'braille_dots_13678' => '28e5',
    'braille_dots_1368' => '28a5',
    'braille_dots_137' => '2845',
    'braille_dots_1378' => '28c5',
    'braille_dots_138' => '2885',
    'braille_dots_14' => '2809',
    'braille_dots_145' => '2819',
    'braille_dots_1456' => '2839',
    'braille_dots_14567' => '2879',
    'braille_dots_145678' => '28f9',
    'braille_dots_14568' => '28b9',
    'braille_dots_1457' => '2859',
    'braille_dots_14578' => '28d9',
    'braille_dots_1458' => '2899',
    'braille_dots_146' => '2829',
    'braille_dots_1467' => '2869',
    'braille_dots_14678' => '28e9',
    'braille_dots_1468' => '28a9',
    'braille_dots_147' => '2849',
    'braille_dots_1478' => '28c9',
    'braille_dots_148' => '2889',
    'braille_dots_15' => '2811',
    'braille_dots_156' => '2831',
    'braille_dots_1567' => '2871',
    'braille_dots_15678' => '28f1',
    'braille_dots_1568' => '28b1',
    'braille_dots_157' => '2851',
    'braille_dots_1578' => '28d1',
    'braille_dots_158' => '2891',
    'braille_dots_16' => '2821',
    'braille_dots_167' => '2861',
    'braille_dots_1678' => '28e1',
    'braille_dots_168' => '28a1',
    'braille_dots_17' => '2841',
    'braille_dots_178' => '28c1',
    'braille_dots_18' => '2881',
    'braille_dots_2' => '2802',
    'braille_dots_23' => '2806',
    'braille_dots_234' => '280e',
    'braille_dots_2345' => '281e',
    'braille_dots_23456' => '283e',
    'braille_dots_234567' => '287e',
    'braille_dots_2345678' => '28fe',
    'braille_dots_234568' => '28be',
    'braille_dots_23457' => '285e',
    'braille_dots_234578' => '28de',
    'braille_dots_23458' => '289e',
    'braille_dots_2346' => '282e',
    'braille_dots_23467' => '286e',
    'braille_dots_234678' => '28ee',
    'braille_dots_23468' => '28ae',
    'braille_dots_2347' => '284e',
    'braille_dots_23478' => '28ce',
    'braille_dots_2348' => '288e',
    'braille_dots_235' => '2816',
    'braille_dots_2356' => '2836',
    'braille_dots_23567' => '2876',
    'braille_dots_235678' => '28f6',
    'braille_dots_23568' => '28b6',
    'braille_dots_2357' => '2856',
    'braille_dots_23578' => '28d6',
    'braille_dots_2358' => '2896',
    'braille_dots_236' => '2826',
    'braille_dots_2367' => '2866',
    'braille_dots_23678' => '28e6',
    'braille_dots_2368' => '28a6',
    'braille_dots_237' => '2846',
    'braille_dots_2378' => '28c6',
    'braille_dots_238' => '2886',
    'braille_dots_24' => '280a',
    'braille_dots_245' => '281a',
    'braille_dots_2456' => '283a',
    'braille_dots_24567' => '287a',
    'braille_dots_245678' => '28fa',
    'braille_dots_24568' => '28ba',
    'braille_dots_2457' => '285a',
    'braille_dots_24578' => '28da',
    'braille_dots_2458' => '289a',
    'braille_dots_246' => '282a',
    'braille_dots_2467' => '286a',
    'braille_dots_24678' => '28ea',
    'braille_dots_2468' => '28aa',
    'braille_dots_247' => '284a',
    'braille_dots_2478' => '28ca',
    'braille_dots_248' => '288a',
    'braille_dots_25' => '2812',
    'braille_dots_256' => '2832',
    'braille_dots_2567' => '2872',
    'braille_dots_25678' => '28f2',
    'braille_dots_2568' => '28b2',
    'braille_dots_257' => '2852',
    'braille_dots_2578' => '28d2',
    'braille_dots_258' => '2892',
    'braille_dots_26' => '2822',
    'braille_dots_267' => '2862',
    'braille_dots_2678' => '28e2',
    'braille_dots_268' => '28a2',
    'braille_dots_27' => '2842',
    'braille_dots_278' => '28c2',
    'braille_dots_28' => '2882',
    'braille_dots_3' => '2804',
    'braille_dots_34' => '280c',
    'braille_dots_345' => '281c',
    'braille_dots_3456' => '283c',
    'braille_dots_34567' => '287c',
    'braille_dots_345678' => '28fc',
    'braille_dots_34568' => '28bc',
    'braille_dots_3457' => '285c',
    'braille_dots_34578' => '28dc',
    'braille_dots_3458' => '289c',
    'braille_dots_346' => '282c',
    'braille_dots_3467' => '286c',
    'braille_dots_34678' => '28ec',
    'braille_dots_3468' => '28ac',
    'braille_dots_347' => '284c',
    'braille_dots_3478' => '28cc',
    'braille_dots_348' => '288c',
    'braille_dots_35' => '2814',
    'braille_dots_356' => '2834',
    'braille_dots_3567' => '2874',
    'braille_dots_35678' => '28f4',
    'braille_dots_3568' => '28b4',
    'braille_dots_357' => '2854',
    'braille_dots_3578' => '28d4',
    'braille_dots_358' => '2894',
    'braille_dots_36' => '2824',
    'braille_dots_367' => '2864',
    'braille_dots_3678' => '28e4',
    'braille_dots_368' => '28a4',
    'braille_dots_37' => '2844',
    'braille_dots_378' => '28c4',
    'braille_dots_38' => '2884',
    'braille_dots_4' => '2808',
    'braille_dots_45' => '2818',
    'braille_dots_456' => '2838',
    'braille_dots_4567' => '2878',
    'braille_dots_45678' => '28f8',
    'braille_dots_4568' => '28b8',
    'braille_dots_457' => '2858',
    'braille_dots_4578' => '28d8',
    'braille_dots_458' => '2898',
    'braille_dots_46' => '2828',
    'braille_dots_467' => '2868',
    'braille_dots_4678' => '28e8',
    'braille_dots_468' => '28a8',
    'braille_dots_47' => '2848',
    'braille_dots_478' => '28c8',
    'braille_dots_48' => '2888',
    'braille_dots_5' => '2810',
    'braille_dots_56' => '2830',
    'braille_dots_567' => '2870',
    'braille_dots_5678' => '28f0',
    'braille_dots_568' => '28b0',
    'braille_dots_57' => '2850',
    'braille_dots_578' => '28d0',
    'braille_dots_58' => '2890',
    'braille_dots_6' => '2820',
    'braille_dots_67' => '2860',
    'braille_dots_678' => '28e0',
    'braille_dots_68' => '28a0',
    'braille_dots_7' => '2840',
    'braille_dots_78' => '28c0',
    'braille_dots_8' => '2880',
    'Break' => 'Pause',
    'breve' => '02d8',
    'brokenbar' => '00a6',
		    $broken_caps = 1;
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
    'Byelorussian_SHORTU' => '040e',
    'Byelorussian_shortu' => '045e',
    'C' => '0043',
    'c' => '0063',
    'Cabovedot' => '010a',
    'cabovedot' => '010b',
    'Cacute' => '0106',
    'cacute' => '0107',
    'Cancel' => 'VoidSymbol',
    'Caps_Lock' => 'Caps_Lock',
		$capsvector[$mask] = $1 ."U+". sprintf ("%04x", $c);
    'careof' => '2105',
    'caret' => '2038',
    'caron' => '02c7',
    'Ccaron' => '010c',
    'ccaron' => '010d',
    'Ccedilla' => '00c7',
    'ccedilla' => '00e7',
    'Ccircumflex' => '0108',
    'ccircumflex' => '0109',
    'cedilla' => '00b8',
    'cent' => '00a2',
		     "${charmap}.acm", "${charmap}.acm.gz",
	    $charmap = $ARGV[0];
-charmap <name>     Specifies the encoding to use
    'checkerboard' => '2592',
    'checkmark' => '2713',
	chr(0x08) => 'BackSpace',
	chr(0x09) => 'Tab',
	chr(0x0a) => 'Linefeed',
	chr(0x0d) => 'Control_m',
	chr(0x1b) => 'Escape',
	chr(0x7f) => 'BackSpace', # instead of 'Delete'
	chr(0x7f) => 'Delete',
    'circle' => '25cb',
    'circumflex' => '005e',
#     ckbcomp -- compile XKB keyboard definitions to loadkeys format
    'Clear' => 'VoidSymbol',
    close ACM;
    close FILE;
    close RULES;
    'club' => '2663',
    'Codeinput' => 'VoidSymbol',
	':' => 'colon',
    'colon' => '003a',
    'ColonSign' => '20a1',
	',' => 'comma',
    'comma' => '002c',
	    $compact = 1;
-compact            Generate compact keymap
	'.' => 'Compose',
########### COMPUTE ARCH ###########################################
	    @consequents = split ' ', $2;
		@consequent_values == @consequents
				$consequent_values[$i];
		    $consequent_values[$i] =~ s/_;;//g;
		    $consequent_values[$i] =~ s/;//g;
		    $consequent_values[$i] =~ s/\(;;\)//g;
		    $consequent_values[$i] =~ s/%_/_;%/g;
		    $consequent_values[$i] =~ s/%\(/\(;%/g;
		    $consequent_values[$i] =~ s/%l\[1\]/$layouts[0]/g;
		    $consequent_values[$i] =~ s/%l\[2\]/$layouts[1]/g;
		    $consequent_values[$i] =~ s/%l\[3\]/$layouts[2]/g;
		    $consequent_values[$i] =~ s/%l\[4\]/$layouts[3]/g;
		    $consequent_values[$i] =~ s/%l/$layouts[0]/g;
		    $consequent_values[$i] =~ s/(%[lvm](\[[1-4]\])?)/$1;/g;
		    $consequent_values[$i] =~ s/%m/$model/g;
		    $consequent_values[$i] =~ s/%v\[1\]/$variants[0]/g;
		    $consequent_values[$i] =~ s/%v\[2\]/$variants[1]/g;
		    $consequent_values[$i] =~ s/%v\[3\]/$variants[2]/g;
		    $consequent_values[$i] =~ s/%v\[4\]/$variants[3]/g;
		    $consequent_values[$i] =~ s/%v/$variants[0]/g;
    'containsas' => '220B',
                             'control',
			'Control' => 0x04,
                             'control altgr',
                             'control altgr shift',
	'^' => 'Control_asciicircum',
	'\\' => 'Control_backslash',
	']' => 'Control_bracketright',
	'\'' => 'Control_g', # apostrophe
    'Control_L' => 'Control',
			'Control_Lock' => 0x04,
    'Control_R' => 'Control',
                             'control shift',
# Control symbols
    $controlsyms[0] = 'NoSymbol';
				     $controlsyms[$ascii + 1], $distance + 1);
	    $controlsyms[$code + 1] = "Control_". $sym;
	    $controlsyms[$code + 1] = $special;
	    $controlsyms[$code + 1] = 'VoidSymbol';
	'_' => 'Control_underscore',
		    $coord = ($group << 4) + $level;
			$coord = ($group << 4) + $level;
			$coord = ($group << 4) + $level + 11;
			$coord = ($group << 4) + $level + 3;
			$coord = ($group << 4) + $level + 7;
			$coord = ($group << 4) + $level + 8;
#     Copyright 
    'copyright' => '00a9',
    'cr' => '240d',
    'crossinglines' => '253c',
    'CruzeiroSign' => '20a2',
                             'ctrll',
			'CtrlL' => 0x40,
                             'ctrll alt',
                             'ctrll alt altgr',
                             'ctrll alt altgr shift',
                             'ctrll alt control',
                             'ctrll alt control altgr',
                             'ctrll alt control altgr shift',
                             'ctrll alt control shift',
                             'ctrll altgr',
                             'ctrll altgr shift',
                             'ctrll alt shift',
                             'ctrll control',
                             'ctrll control altgr',
                             'ctrll control altgr shift',
                             'ctrll control shift',
			'CtrlL_Lock' => 0x40,
                             'ctrll shift',
                             'ctrll shiftl',
                             'ctrll shiftl alt',
                             'ctrll shiftl alt altgr',
                             'ctrll shiftl alt altgr shift',
                             'ctrll shiftl alt control',
                             'ctrll shiftl alt control altgr',
                             'ctrll shiftl alt control altgr shift',
                             'ctrll shiftl alt control shift',
                             'ctrll shiftl altgr',
                             'ctrll shiftl altgr shift',
                             'ctrll shiftl alt shift',
                             'ctrll shiftl control',
                             'ctrll shiftl control altgr',
                             'ctrll shiftl control altgr shift',
                             'ctrll shiftl control shift',
                             'ctrll shiftl shift',
                             'ctrll shiftr',
                             'ctrll shiftr alt',
                             'ctrll shiftr alt altgr',
                             'ctrll shiftr alt altgr shift',
                             'ctrll shiftr alt control',
                             'ctrll shiftr alt control altgr',
                             'ctrll shiftr alt control altgr shift',
                             'ctrll shiftr alt control shift',
                             'ctrll shiftr altgr',
                             'ctrll shiftr altgr shift',
                             'ctrll shiftr alt shift',
                             'ctrll shiftr control',
                             'ctrll shiftr control altgr',
                             'ctrll shiftr control altgr shift',
                             'ctrll shiftr control shift',
                             'ctrll shiftr shift',
                             'ctrll shiftr shiftl',
                             'ctrll shiftr shiftl alt',
                             'ctrll shiftr shiftl alt altgr',
                             'ctrll shiftr shiftl alt altgr shift',
                             'ctrll shiftr shiftl alt control',
                             'ctrll shiftr shiftl alt control altgr',
                             'ctrll shiftr shiftl alt control altgr shift',
                             'ctrll shiftr shiftl alt control shift',
                             'ctrll shiftr shiftl altgr',
                             'ctrll shiftr shiftl altgr shift',
                             'ctrll shiftr shiftl alt shift',
                             'ctrll shiftr shiftl control',
                             'ctrll shiftr shiftl control altgr',
                             'ctrll shiftr shiftl control altgr shift',
                             'ctrll shiftr shiftl control shift',
                             'ctrll shiftr shiftl shift',
			'CtrlR' => 0x80,
			'CtrlR_Lock' => 0x80);
    'cuberoot' => '221b',
    'currency' => '00a4',
    'Cyrillic_A' => '0410',
    'Cyrillic_a' => '0430',
    'Cyrillic_BE' => '0411',
    'Cyrillic_be' => '0431',
    'Cyrillic_CHE' => '0427',
    'Cyrillic_che' => '0447',
    'Cyrillic_CHE_descender' => '04b6',
    'Cyrillic_che_descender' => '04b7',
    'Cyrillic_CHE_vertstroke' => '04b8', # Is this recognised by X ?
    'Cyrillic_che_vertstroke' => '04b9', # Is this recognised by X ?
    'Cyrillic_DE' => '0414',
    'Cyrillic_de' => '0434',
    'Cyrillic_DZHE' => '040f',
    'Cyrillic_dzhe' => '045f',
    'Cyrillic_E' => '042d',
    'Cyrillic_e' => '044d',
    'Cyrillic_EF' => '0424',
    'Cyrillic_ef' => '0444',
    'Cyrillic_EL' => '041b',
    'Cyrillic_el' => '043b',
    'Cyrillic_EM' => '041c',
    'Cyrillic_em' => '043c',
    'Cyrillic_EN' => '041d',
    'Cyrillic_en' => '043d',
    'Cyrillic_EN_descender' => '04a2', # Is this recognised by X ?
    'Cyrillic_en_descender' => '04a3', # Is this recognised by X ?
    'Cyrillic_ER' => '0420',
    'Cyrillic_er' => '0440',
    'Cyrillic_ES' => '0421',
    'Cyrillic_es' => '0441',
    'Cyrillic_GHE' => '0413',
    'Cyrillic_ghe' => '0433',
    'Cyrillic_GHE_bar' => '0492', # Is this recognised by X ?
    'Cyrillic_ghe_bar' => '0493', # Is this recognised by X ?
    'Cyrillic_HA' => '0425',
    'Cyrillic_ha' => '0445',
    'Cyrillic_HA_descender' => '04b2', # Is this recognised by X ?
    'Cyrillic_ha_descender' => '04b3', # Is this recognised by X ?
    'Cyrillic_HARDSIGN' => '042a',
    'Cyrillic_hardsign' => '044a',
    'Cyrillic_I' => '0418',
    'Cyrillic_i' => '0438',
    'Cyrillic_IE' => '0415',
    'Cyrillic_ie' => '0435',
    'Cyrillic_I_macron' => '04e2',
    'Cyrillic_i_macron' => '04e3',
    'Cyrillic_IO' => '0401',
    'Cyrillic_io' => '0451',
    'Cyrillic_JE' => '0408',
    'Cyrillic_je' => '0458',
    'Cyrillic_KA' => '041a',
    'Cyrillic_ka' => '043a',
    'Cyrillic_KA_descender' => '049a', # Is this recognised by X ?
    'Cyrillic_ka_descender' => '049b', # Is this recognised by X ?
    'Cyrillic_KA_vertstroke' => '049c', # Is this recognised by X ?
    'Cyrillic_ka_vertstroke' => '049d', # Is this recognised by X ?
    'Cyrillic_LJE' => '0409',
    'Cyrillic_lje' => '0459',
    'Cyrillic_NJE' => '040a',
    'Cyrillic_nje' => '045a',
    'Cyrillic_O' => '041e',
    'Cyrillic_o' => '043e',
    'Cyrillic_O_bar' => '04e8', # Is this recognised by X ?
    'Cyrillic_o_bar' => '04e9', # Is this recognised by X ?
    'Cyrillic_PE' => '041f',
    'Cyrillic_pe' => '043f',
    'Cyrillic_SCHWA' => '04d8', # Is this recognised by X ?
    'Cyrillic_schwa' => '04d9', # Is this recognised by X ?
    'Cyrillic_SHA' => '0428',
    'Cyrillic_sha' => '0448',
    'Cyrillic_SHCHA' => '0429',
    'Cyrillic_shcha' => '0449',
    'Cyrillic_SHHA' => '04ba', # Is this recognised by X ?
    'Cyrillic_shha' => '04bb', # Is this recognised by X ?
    'Cyrillic_SHORTI' => '0419',
    'Cyrillic_shorti' => '0439',
    'Cyrillic_SOFTSIGN' => '042c',
    'Cyrillic_softsign' => '044c',
    'Cyrillic_TE' => '0422',
    'Cyrillic_te' => '0442',
    'Cyrillic_TSE' => '0426',
    'Cyrillic_tse' => '0446',
    'Cyrillic_U' => '0423',
    'Cyrillic_u' => '0443',
    'Cyrillic_U_macron' => '04ee',
    'Cyrillic_u_macron' => '04ef',
    'Cyrillic_U_straight' => '04ae', # Is this recognised by X ?
    'Cyrillic_u_straight' => '04af', # Is this recognised by X ?
    'Cyrillic_U_straight_bar' => '04b0', # Is this recognised by X ?
    'Cyrillic_u_straight_bar' => '04b1', # Is this recognised by X ?
    'Cyrillic_VE' => '0412',
    'Cyrillic_ve' => '0432',
    'Cyrillic_YA' => '042f',
    'Cyrillic_ya' => '044f',
    'Cyrillic_YERU' => '042b',
    'Cyrillic_yeru' => '044b',
    'Cyrillic_YU' => '042e',
    'Cyrillic_yu' => '044e',
    'Cyrillic_ZE' => '0417',
    'Cyrillic_ze' => '0437',
    'Cyrillic_ZHE' => '0416',
    'Cyrillic_zhe' => '0436',
    'Cyrillic_ZHE_descender' => '0496',
    'Cyrillic_zhe_descender' => '0497',
    'D' => '0044',
    'd' => '0064',
    'Dabovedot' => '1e0a', # Is this recognised by X ?
    'dabovedot' => '1e0b', # Is this recognised by X ?
    'dagger' => '2020',
    'Dcaron' => '010e',
    'dcaron' => '010f',
    'dead_abovedot' => '002e',       # period
    'dead_abovering' => '002a',      # asterisk
    'dead_acute' => 'dead_acute',
    'dead_belowcomma' => 'VoidSymbol',
    'dead_belowdot' => '0323',       # ???? Vietnamese
    'dead_breve' => 'dead_breve',
    'dead_caron' => 'dead_caron',
    'dead_cedilla' => 'dead_cedilla',
    'dead_circumflex' => 'dead_circumflex',
    'dead_currency' => 'VoidSymbol',
    'dead_dasia' => 'VoidSymbol',    # ???? Greek
    'dead_diaeresis' => 'dead_diaeresis',
    'dead_doubleacute' => 'dead_doubleacute',
    'dead_doublegrave' => 'VoidSymbol',
    'dead_grave' => 'dead_grave',
    'dead_hook' => '0309',           # ???? Vietnamese
    'dead_horn' => '031b',           # ???? Greek
    'dead_invertedbreve' => 'VoidSymbol',
    'dead_iota' => '03b9',           # ???? Greek
    'dead_macron' => '005f',         # underscore
    'dead_ogonek' => 'dead_ogonek',
    'dead_psili' => 'VoidSymbol',    # ???? Greek
    'dead_stroke' => '002d',         # hyphen
# Dead symbols
# Dead symbols with no support in the kernel
    'dead_tilde' => 'dead_tilde',
	$default = 1 if ($1 =~ /default/i);
	    $default_key_type = $1;
		    && ! defined $keycodes_table{$alias})) {
		    && ! defined $keycodes_table{$key})) {
	    && ! defined $kp) {
	    ! defined $symbols_table{$code})) {
	    && (@_ || ! defined $symbols_table{$code}[$group]))
		    || ! defined $symbols_table{$code}[$group][$level])) {
			    && ! defined $types_table{$code})) {
		&& (! defined $xkbsym_table{$symbol}
			      && defined $xkbsym_table{$xkeysym}
    'degree' => '00b0',
	'?' => 'Delete',
		delete $aliases{$key};
    'Delete' => 'Remove',
    'diaeresis' => '00a8',
    'diamond' => '2666',
	    die "$0: bad include list $include_list.\n";
	die "$0: Bad xkb file type $file_type\n";
    die "$0: Can not find file \"$file\" in any known directory\n";
		die "$0: garbage in a key definition: \"$list\""
    die "$0: instead of \"". (substr ($stream, 0, 50))
		die "$0: missing quote in ". (substr ($1, 0, 50)) ."...\n";
    die "$0: No keycodes, nor layout specified\n";
		die "$0: No more than one -charmap option is allowed\n";
		die "$0: No more than one -keycodes option is allowed\n";
		die "$0: No more than one -layout option is allowed\n";
		die "$0: No more than one -model option is allowed\n";
		die "$0: No more than one -rules option is allowed\n";
		die "$0: No more than one -symbols option is allowed\n";
		die "$0: No more than one -variant option is allowed\n";
		die "$0: No more than one -verbose option is allowed\n";
    die "$0: No symbols, nor layout specified\n";
	    die "$0: Syntax error in ACM file: $_\n";
	die "$0: undefined keyname $aliases{$alias} in ".
	    die "$0: Unknown option -$_\n";
    die "$0: Unsupported keyboard type $arch\n";
	die "Syntax error in the rules file: $_\n";
		    die "Unknown name $antecedents[$i]\n";
    'digitspace' => '2007',
    'dintegral' => '222c',
				     $distance + 1);
    'division' => '00f7',
# does not start with a method name, return the default method (i.e. $method)
	'$' => 'dollar',
    'dollar' => '0024',
    'DongSign' => '20ab', # Is this recognised by X ?
    'doubbaselinedot' => '2025',
    'doubleacute' => '02dd',
    'doubledagger' => '2021',
    'doublelowquotemark' => '201e',
    'downarrow' => '2193',
    'downcaret' => '2228',
    'Down' => 'Down',
    'downshoe' => '222a',
    'downstile' => '230a',
    'downtack' => '22a5',
    'Dstroke' => '0110',
    'dstroke' => '0111',
    'E' => '0045',
    'e' => '0065',
    'Eabovedot' => '0116',
    'eabovedot' => '0117',
    'Eacute' => '00c9',
    'eacute' => '00e9',
    'Ebelowdot' => '1eb8',
    'ebelowdot' => '1eb9',
    'Ecaron' => '011a',
    'ecaron' => '011b',
    'Ecircumflex' => '00ca',
    'ecircumflex' => '00ea',
    'Ecircumflexacute' => '1ebe',
    'ecircumflexacute' => '1ebf',
    'Ecircumflexbelowdot' => '1ec6',
    'ecircumflexbelowdot' => '1ec7',
    'Ecircumflexgrave' => '1ec0',
    'ecircumflexgrave' => '1ec1',
    'Ecircumflexhook' => '1ec2',
    'ecircumflexhook' => '1ec3',
    'Ecircumflextilde' => '1ec4',
    'ecircumflextilde' => '1ec5',
    'EcuSign' => '20a0',
    'Ediaeresis' => '00cb',
    'ediaeresis' => '00eb',
    'Egrave' => '00c8',
    'egrave' => '00e8',
    'Ehook' => '1eba',
    'ehook' => '1ebb',
                      |EIGHT_LEVEL|EIGHT_LEVEL_ALPHABETIC
    'eightsubscript' => '2088',
    'eightsuperior' => '2078',
    'Eisu_toggle' => 'VoidSymbol', # Is this recognised by X ?
    'elementof' => '2208',
    'ellipsis' => '2026',
    } else {
 	} else {
} else {
	    } else {
	} else {
		    } else {
		} else {
	} elsif (0x40 <= $code && 0x5f >= $code      
	    } elsif ($1 eq '|') {
		} elsif ($antecedents[$i] eq 'layout'
		} elsif ($antecedents[$i] eq 'layout' && @layouts == 1) {
		} elsif ($antecedents[$i] eq 'option') {
		} elsif ($antecedents[$i] eq 'variant' && @variants == 1) {
		} elsif ($antecedents[$i] =~ /layout\[([1-4])\]/) {
		} elsif ($antecedents[$i] =~ /variant\[([1-4])\]/) {
} elsif ($arch eq 'amiga') {
} elsif ($arch eq 'ataritt') {
} elsif ($arch eq 'macintosh') {
} elsif ($arch eq 'sun') {
	} elsif (/^compact$/) {
			} elsif ($consequents[$i] eq 'symbols') {
	} elsif ($control eq 'NoSymbol') {
	} elsif ($control eq 'VoidSymbol') {
		} elsif (/^CTRL\+ALT$/) {
	} elsif (defined $acmtable{$uni}) {
		    } elsif (/^Down$/) {
		    } elsif (/^End$/) {
    } elsif ($file_type eq 'keycodes') {
	} elsif (/^help$|^-help$|^\?$/) {
		    } elsif (/^Home$/) {
	} elsif (/^I(.*)$/) {
	} elsif ($include_list =~ (s/^(\^|\+|\|)([^\(\|\+]+)\(([^\)]+)\)
	} elsif ($include_list =~ s/^(\^|\+|\|)([^\(\|\+]+):([1234])(.*)/$4/) {
	} elsif ($include_list =~ s/^(\^|\+|\|)([^\(\|\+]+)(.*)/$3/) {
		    } elsif (/^Insert$/) {
		    } elsif ($is_special) {
 	} elsif ($kernel_code == 101) {
 	} elsif ($kernel_code == 119) {
 	} elsif ($kernel_code == 99) {
	} elsif ($kernelkeysym !~ /^[0-9a-fA-F]{4}$/) {
	} elsif ($kernelkeysym eq 'BackSpace') {
	} elsif ($kernelkeysym eq 'Escape') {
	} elsif ($kernelkeysym eq 'Linefeed') {
	} elsif ($kernelkeysym eq 'NoSymbol') {
	} elsif ($kernelkeysym eq 'Return') {
	} elsif ($kernelkeysym eq 'Tab') {
	} elsif (/^keycodes$/) {
} elsif ($keycodes =~ /(^|\+|\|)amiga(\([^\)]*\))?($|\+|\|)/) {
} elsif ($keycodes =~ /(^|\+|\|)ataritt(\([^\)]*\))?($|\+|\|)/) {
} elsif ($keycodes =~ /(^|\+|\|)evdev(\([^\)]*\))?($|\+|\|)/) {
} elsif ($keycodes =~ /(^|\+|\|)sun(\(type[45][^\)]*\))?($|\+|\|)/) {
	} elsif (/^layout$/) {
		    } elsif (/^Left$/) {
	} elsif ($mainsym eq 'KP_Add') {
	} elsif ($mainsym eq 'KP_Divide') {
	} elsif ($mainsym eq 'KP_Enter') {
	} elsif ($mainsym eq 'KP_Multiply') {
	} elsif ($mainsym eq 'KP_Subtract') {
	} elsif ($mainsym eq 'Left') {
	} elsif ($mainsym eq 'Next' || $mainsym eq 'PageDown') {
	} elsif ($mainsym eq 'Num_Lock') {
	} elsif ($mainsym eq 'Prior' || $mainsym eq 'PageUp') {
	} elsif ($mainsym eq 'Right') {
	} elsif ($mainsym eq 'Scroll_Lock' || $mainsym eq 'Help') {
	} elsif ($mainsym eq 'Up') {
	} elsif ($mainsym =~ /^KP_([0-9])$/) {
		} elsif ($mask & 0x02) {
		} elsif ($mask & 0x10) {
	    } elsif ($method == $alternate_method) {
	    } elsif ($method_name =~ /augment/i) {
	    } elsif ($method_name =~ /override/i) {
	} elsif (/^model$/) {
		    } elsif (/^Next$/) {
	} elsif (/^option$/) {
		} elsif (/^(PC_BREAK|PC_CONTROL_LEVEL2
		} elsif (/^(PC_SYSRQ|PC_ALT_LEVEL2
		    } elsif (/^Prior$/) {
		    } elsif (/^(Return|Enter)$/) {
		    } elsif (/^Right$/) {
	} elsif (/^rules$/) {
		} elsif (/^SHIFT\+ALT$/) {
    } elsif ($stream =~ s/^augment ?(.*)/$1/i) {
    } elsif ($stream =~ s/^override ?(.*)/$1/i) {
    } elsif ($stream =~ s/^replace ?(.*)/$1/i) {
	} elsif (/^symbols$/) {
	    } elsif ($types_table{$key} eq 'THREE_LEVEL') {
	    } elsif ($types_table{$key} eq 'TWO_LEVEL') {
	    } elsif ($uni <= 0x1f) {
		    } elsif (/^Up$/) {
	} elsif (/^variant$/) {
	} elsif (! @variants) {
	    } elsif ($vector[$coord] eq 'AltGr') {
	    } elsif ($vector[$coord] eq 'ShiftL') {
	} elsif (/^v(erbose)?$/) {
		    } elsif (/$xkbsym_table{'0'}/) {
		    } elsif (/$xkbsym_table{'1'}/) {
		    } elsif (/$xkbsym_table{'2'}/) {
		    } elsif (/$xkbsym_table{'3'}/) {
		    } elsif (/$xkbsym_table{'4'}/) {
		    } elsif (/$xkbsym_table{'5'}/) {
		    } elsif (/$xkbsym_table{'6'}/) {
		    } elsif (/$xkbsym_table{'7'}/) {
		    } elsif (/$xkbsym_table{'8'}/) {
		    } elsif (/$xkbsym_table{'9'}/) {
		    } elsif (/$xkbsym_table{'asterisk'}/) {
		    } elsif (/$xkbsym_table{'comma'}/) {
		    } elsif (/$xkbsym_table{'minus'}/) {
		    } elsif (/$xkbsym_table{'period'}/) {
		    } elsif (/$xkbsym_table{'plus'}/) {# not anchored match!
		    } elsif (/$xkbsym_table{'slash'}/) {
    'em3space' => '2004',
    'em4space' => '2005',
    'Emacron' => '0112',
    'emacron' => '0113',
    'emdash' => '2014',
    'emfilledcircle' => '25cf',
    'emfilledrect' => '25ae',
    'emopencircle' => '25cb',
    'emopenrectangle' => '25af',
    'emptyset' => '2205',
                    # empty strings if %v is an empty string
    'emspace' => '2003',
    'endash' => '2013',
    'End' => 'End',
    'enfilledcircbullet' => '2022',
    'enfilledsqbullet' => '25aa',
    'ENG' => '014a',
    'eng' => '014b',
    'enopencircbullet' => '25e6',
    'enopensquarebullet' => '25ab',
    'enspace' => '2002',
    'Eogonek' => '0118',
    'eogonek' => '0119',
	'=' => 'equal',
    'equal' => '003d',
	'[' => 'Escape',
    'Escape' => 'Escape',     # 001b
	     '/etc/X11/xkb',
    'Eth' => '00d0',
    'eth' => '00f0',
    'Etilde' => '1ebc',
    'etilde' => '1ebd',
    'Euro' => '20ac',
    'EuroSign' => '20ac',
	'!' => 'exclam',
    'exclam' => '0021',
    'exclamdown' => '00a1',
    'Execute' => 'VoidSymbol',
            exit 0;
# expected at $stream.
    'F' => '0046',
    'f' => '0066',
    'F10' => 'F10',
    'F11' => 'F11',
    'F12' => 'F12',
    'F13' => 'F13',
    'F14' => 'F14',
    'F15' => 'F15',
    'F16' => 'F16',
    'F17' => 'F17',
    'F18' => 'F18',
    'F19' => 'F19',
    'F1' => 'F1',
    'F20' => 'F20',
    'F21' => 'F21',
    'F22' => 'F22',
    'F23' => 'F23',
		       'F246', 'F246', 'F246', 'F246', 
		       'F246', 'F246', 'F246', 'F246') x 4;
    'F24' => 'F24',
    'F25' => 'F25',
    'F26' => 'F26',
    'F27' => 'F27',
    'F28' => 'F28',
    'F29' => 'F29',
    'F2' => 'F2',
    'F30' => 'F30',
    'F31' => 'F31',
    'F32' => 'F32',
    'F33' => 'F33',
    'F34' => 'F34',
    'F35' => 'F35',
    'F3' => 'F3',
    'F4' => 'F4',
    'F5' => 'F5',
    'F6' => 'F6',
    'F7' => 'F7',
    'F8' => 'F8',
    'F9' => 'F9',
    'Fabovedot' => '1e1e', # Is this recognised by X ?
    'fabovedot' => '1e1f', # Is this recognised by X ?
    (-f $acm) or die "$0: no ACM for ${charmap} exists\n";
    'Farsi_0' => '06f0',
    'Farsi_1' => '06f1',
    'Farsi_2' => '06f2',
    'Farsi_3' => '06f3',
    'Farsi_4' => '06f4',
    'Farsi_5' => '06f5',
    'Farsi_6' => '06f6',
    'Farsi_7' => '06f7',
    'Farsi_8' => '06f8',
    'Farsi_9' => '06f9',
    'Farsi_yeh' => '06cc',
    'femalesymbol' => '2640',
    'ff' => '240c',
    'FFrancSign' => '20a3',
    'figdash' => '2012',
	    $file = $2;
# file name
	$filename = $file;
	$filename = $oldfilename;
    'filledlefttribullet' => '25c0',
    'filledrectbullet' => '25ac',
    'filledrighttribullet' => '25b6',
    'filledtribulletdown' => '25bc',
    'filledtribulletup' => '25b2',
# Fill @{$symbols_table{$code}[$group]} with symbols
# Fill @vector with data for key number $_[0]
	    $final_letter = 0;
	    $final_letter = ($1 =~ /[a-zA-Z0-9_]$/);
    'Find' => 'Find',
	$first = 0;
    'fiveeighths' => '215d',
    'fivesixths' => '215a',
    'fivesubscript' => '2085',
    'fivesuperior' => '2075',
	$forbidden{$i} = 1;
foreach my $alias (keys %aliases) {
    foreach my $group (0 .. $#{$symbols_table{$key}}) {
	    foreach my $i (0 .. $#antecedents) {
foreach my $key (keys %symbols_table) {
    foreach my $key (sort {$a <=> $b} (keys %symbols_table)) {
	    foreach my $level (0 .. $#{$symbols_table{$key}[$group]}) {
    for my $acmfile ("${charmap}", "${charmap}.gz",
	    for my $approximated_group (0 .. 3) {
		for my $approximated_level (0 .. 3) {
    for my $code (0 .. 255) {
    for my $code (1 .. 256) {
	for my $code (@{$keycodes_table{$key}}) {
	for my $coord (0 .. 15) {
	    for my $coord (0, 16, 32, 48) {
    for my $coord (0 .. 63) {
	for my $coord (16 .. 63) {
    for my $dir (@xdirs) {
    for my $group (0 .. 3) {
    for my $group (0..3) {
	    for my $i (0 .. $#antecedents) {
		for my $i (0 .. $#consequents) {
    for my $i (0 .. $#layouts) {
    for my $i (0xf000..0xffff) {
	for my $level (0..3) {
    for my $mask (0 .. 63) {
	    for my $mask (0 .. 63) {
	for my $mask (0 .. 63) {
	    for my $member (@{$rules_variables{$1}}) {
	for my $mod (4, 8, 12) {
	for my $option (@options) {
	for my $symbol (@_) {
	    for my $x (0 .. 15) {
	for my $x (0 .. 15) {
	    for ($types_table{$key}) {
		for ($vector[$coord]) {
    'fourfifths' => '2158',
                      |FOUR_LEVEL|FOUR_LEVEL_ALPHABETIC
		      |FOUR_LEVEL_KEYPAD|LOCAL_EIGHT_LEVEL
		                    |FOUR_LEVEL_KEYPAD)$/x
                                    |FOUR_LEVEL_MIXED_KEYPAD
                      |FOUR_LEVEL_PLUS_LOCK
                      |FOUR_LEVEL_SEMIALPHABETIC
    'foursubscript' => '2084',
    'foursuperior' => '2074',
    'fourthroot' => '221c',
    'function' => '0192',
    'G' => '0047',
    'g' => '0067',
    'Gabovedot' => '0120',
    'gabovedot' => '0121',
    'Gbreve' => '011e',
    'gbreve' => '011f',
    'Gcaron' => '01e6', # Is this recognised by X ?
    'gcaron' => '01e7', # Is this recognised by X ?
    'Gcedilla' => '0122',
    'gcedilla' => '0123',
    'Gcircumflex' => '011c',
    'gcircumflex' => '011d',
    'Georgian_an' => '10d0',
    'Georgian_ban' => '10d1',
    'Georgian_can' => '10ea',
    'Georgian_char' => '10ed',
    'Georgian_chin' => '10e9',
    'Georgian_cil' => '10ec',
    'Georgian_don' => '10d3',
    'Georgian_en' => '10d4',
    'Georgian_fi' => '10f6',
    'Georgian_gan' => '10d2',
    'Georgian_ghan' => '10e6',
    'Georgian_hae' => '10f0',
    'Georgian_har' => '10f4',
    'Georgian_he' => '10f1',
    'Georgian_hie' => '10f2',
    'Georgian_hoe' => '10f5',
    'Georgian_in' => '10d8',
    'Georgian_jhan' => '10ef',
    'Georgian_jil' => '10eb',
    'Georgian_kan' => '10d9',
    'Georgian_khar' => '10e5',
    'Georgian_las' => '10da',
    'Georgian_man' => '10db',
    'Georgian_nar' => '10dc',
    'Georgian_on' => '10dd',
    'Georgian_par' => '10de',
    'Georgian_phar' => '10e4',
    'Georgian_qar' => '10e7',
    'Georgian_rae' => '10e0',
    'Georgian_san' => '10e1',
    'Georgian_shin' => '10e8',
    'Georgian_tan' => '10d7',
    'Georgian_tar' => '10e2',
    'Georgian_un' => '10e3',
    'Georgian_vin' => '10d5',
    'Georgian_we' => '10f3',
    'Georgian_xan' => '10ee',
    'Georgian_zen' => '10d6',
    'Georgian_zhar' => '10df',
############ GLOBAL FUNCTIONS #########################################
########### GLOBAL VARIABLES #########################################
#     GNU General Public License for more details.
	'`' => 'grave',
    'grave' => '0060',
	'>' => 'greater',
    'greater' => '003e',
    'greaterthanequal' => '2265',
    'Greek_accentdieresis' => '0385',
    'Greek_ALPHA' => '0391',
    'Greek_alpha' => '03b1',
    'Greek_ALPHAaccent' => '0386',
    'Greek_alphaaccent' => '03ac',
    'Greek_BETA' => '0392',
    'Greek_beta' => '03b2',
    'Greek_CHI' => '03a7',
    'Greek_chi' => '03c7',
    'Greek_DELTA' => '0394',
    'Greek_delta' => '03b4',
    'Greek_EPSILON' => '0395',
    'Greek_epsilon' => '03b5',
    'Greek_EPSILONaccent' => '0388',
    'Greek_epsilonaccent' => '03ad',
    'Greek_ETA' => '0397',
    'Greek_eta' => '03b7',
    'Greek_ETAaccent' => '0389',
    'Greek_etaaccent' => '03ae',
    'Greek_finalsmallsigma' => '03c2',
    'Greek_GAMMA' => '0393',
    'Greek_gamma' => '03b3',
    'Greek_horizbar' => '2015',
    'Greek_IOTA' => '0399',
    'Greek_iota' => '03b9',
    'Greek_IOTAaccent' => '038a',
    'Greek_iotaaccent' => '03af',
    'Greek_iotaaccentdieresis' => '0390',
    'Greek_IOTAdiaeresis' => '03aa',
    'Greek_iotadieresis' => '03ca',
    'Greek_KAPPA' => '039a',
    'Greek_kappa' => '03ba',
    'Greek_LAMBDA' => '039b',
    'Greek_lambda' => '03bb',
    'Greek_LAMDA' => '039b',   # Is this recognised by X ? (speling error)
    'Greek_lamda' => '03bb', # Is this recognised by X ? (speling error)
    'Greek_MU' => '039c',
    'Greek_mu' => '03bc',
    'Greek_NU' => '039d',
    'Greek_nu' => '03bd',
    'Greek_OMEGA' => '03a9',
    'Greek_omega' => '03c9',
    'Greek_OMEGAaccent' => '038f',
    'Greek_omegaaccent' => '03ce',
    'Greek_OMICRON' => '039f',
    'Greek_omicron' => '03bf',
    'Greek_OMICRONaccent' => '038c',
    'Greek_omicronaccent' => '03cc',
    'Greek_PHI' => '03a6',
    'Greek_phi' => '03c6',
    'Greek_PI' => '03a0',
    'Greek_pi' => '03c0',
    'Greek_PSI' => '03a8',
    'Greek_psi' => '03c8',
    'Greek_RHO' => '03a1',
    'Greek_rho' => '03c1',
    'Greek_SIGMA' => '03a3',
    'Greek_sigma' => '03c3',
    'Greek_TAU' => '03a4',
    'Greek_tau' => '03c4',
    'Greek_THETA' => '0398',
    'Greek_theta' => '03b8',
    'Greek_UPSILON' => '03a5',
    'Greek_upsilon' => '03c5',
    'Greek_UPSILONaccent' => '038e',
    'Greek_upsilonaccent' => '03cd',
    'Greek_upsilonaccentdieresis' => '03b0',
    'Greek_UPSILONdieresis' => '03ab',
    'Greek_upsilondieresis' => '03cb',
    'Greek_XI' => '039e',
    'Greek_xi' => '03be',
    'Greek_ZETA' => '0396',
    'Greek_zeta' => '03b6',
		    $group++;
    'guillemotleft' => '00ab',
    'guillemotright' => '00bb',
    'guilsinglleft' => '2039',
    'guilsinglright' => '203a',
    'guj_llla' => 'VoidSymbol', # Is this recognised by X ?
    'guj_nnna' => 'VoidSymbol', # Is this recognised by X ?
    'guj_rra' => 'VoidSymbol', # Is this recognised by X ?
    'gur_visarga' => 'VoidSymbol', # Is this recognised by X ?
    'gur_v_r_s' => 'VoidSymbol', # Is this recognised by X ?
    'gur_v_r' => 'VoidSymbol', # Is this recognised by X ?
    'H' => '0048',
    'h' => '0068',
    'hairspace' => '200a',
    'Hangul_A' => '314f',
    'Hangul_AE' => '3150',
    'Hangul_AraeA' => '318d',
    'Hangul_AraeAE' => '318e',
    'Hangul_Cieuc' => '314a',
    'Hangul_Dikeud' => '3137',
    'Hangul_E' => '3154',
    'Hangul_EO' => '3153',
    'Hangul_EU' => '3161',
    'Hangul_Hanja' => 'VoidSymbol', # Is this recognised by X ?
    'Hangul_Hieuh' => '314e',
    'Hangul_I' => '3163',
    'Hangul_Ieung' => '3147',
    'Hangul_J_Cieuc' => '11be',
    'Hangul_J_Dikeud' => '11ae',
    'Hangul_J_Hieuh' => '11c2',
    'Hangul_Jieuj' => '3148',
    'Hangul_J_Ieung' => '11bc',
    'Hangul_J_Jieuj' => '11bd',
    'Hangul_J_Khieuq' => '11bf',
    'Hangul_J_Kiyeog' => '11a8',
    'Hangul_J_KiyeogSios' => '11aa',
    'Hangul_J_KkogjiDalrinIeung' => '11f0',
    'Hangul_J_Mieum' => '11b7',
    'Hangul_J_Nieun' => '11ab',
    'Hangul_J_NieunHieuh' => '11ad',
    'Hangul_J_NieunJieuj' => '11ac',
    'Hangul_J_PanSios' => '11eb',
    'Hangul_J_Phieuf' => '11c1',
    'Hangul_J_Pieub' => '11b8',
    'Hangul_J_PieubSios' => '11b9',
    'Hangul_J_Rieul' => '11af',
    'Hangul_J_RieulHieuh' => '11b6',
    'Hangul_J_RieulKiyeog' => '11b0',
    'Hangul_J_RieulMieum' => '11b1',
    'Hangul_J_RieulPhieuf' => '11b5',
    'Hangul_J_RieulPieub' => '11b2',
    'Hangul_J_RieulSios' => '11b3',
    'Hangul_J_RieulTieut' => '11b4',
    'Hangul_J_Sios' => '11ba',
    'Hangul_J_SsangKiyeog' => '11a9',
    'Hangul_J_SsangSios' => '11bb',
    'Hangul_J_Tieut' => '11c0',
    'Hangul_J_YeorinHieuh' => '11f9',
    'Hangul_Khieuq' => '314b',
    'Hangul_Kiyeog' => '3131',
    'Hangul_KiyeogSios' => '3133',
    'Hangul_KkogjiDalrinIeung' => '3181',
    'Hangul_Mieum' => '3141',
    'Hangul_Nieun' => '3134',
    'Hangul_NieunHieuh' => '3136',
    'Hangul_NieunJieuj' => '3135',
    'Hangul_O' => '3157',
    'Hangul_OE' => '315a',
    'Hangul_PanSios' => '317f',
    'Hangul_Phieuf' => '314d',
    'Hangul_Pieub' => '3142',
    'Hangul_PieubSios' => '3144',
    'Hangul_Rieul' => '3139',
    'Hangul_RieulHieuh' => '3140',
    'Hangul_RieulKiyeog' => '313a',
    'Hangul_RieulMieum' => '313b',
    'Hangul_RieulPhieuf' => '313f',
    'Hangul_RieulPieub' => '313c',
    'Hangul_RieulSios' => '313d',
    'Hangul_RieulTieut' => '313e',
    'Hangul_RieulYeorinHieuh' => '316d',
    'Hangul_Sios' => '3145',
    'Hangul_SsangDikeud' => '3138',
    'Hangul_SsangJieuj' => '3149',
    'Hangul_SsangKiyeog' => '3132',
    'Hangul_SsangPieub' => '3143',
    'Hangul_SsangSios' => '3146',
    'Hangul_SunkyeongeumMieum' => '3171',
    'Hangul_SunkyeongeumPhieuf' => '3184',
    'Hangul_SunkyeongeumPieub' => '3178',
    'Hangul_Tieut' => '314c',
    'Hangul_U' => '315c',
    'Hangul' => 'VoidSymbol', # Is this recognised by X ?
    'Hangul_WA' => '3158',
    'Hangul_WAE' => '3159',
    'Hangul_WE' => '315e',
    'Hangul_WEO' => '315d',
    'Hangul_WI' => '315f',
    'Hangul_YA' => '3151',
    'Hangul_YAE' => '3152',
    'Hangul_YE' => '3156',
    'Hangul_YEO' => '3155',
    'Hangul_YeorinHieuh' => '3186',
    'Hangul_YI' => '3162',
    'Hangul_YO' => '315b',
    'Hangul_YU' => '3160',
	'h' => 'BackSpace',
    'Hcircumflex' => '0124',
    'hcircumflex' => '0125',
    'heart' => '2665',
    'hebrew_aleph' => '05d0',
    'hebrew_ayin' => '05e2',
    'hebrew_bet' => '05d1',
    'hebrew_chet' => '05d7',
    'hebrew_dalet' => '05d3',
    'hebrew_doublelowline' => '2017',
    'hebrew_finalkaph' => '05da',
    'hebrew_finalmem' => '05dd',
    'hebrew_finalnun' => '05df',
    'hebrew_finalpe' => '05e3',
    'hebrew_finalzade' => '05e5',
    'hebrew_gimel' => '05d2',
    'hebrew_he' => '05d4',
    'hebrew_kaph' => '05db',
    'hebrew_lamed' => '05dc',
    'hebrew_mem' => '05de',
    'hebrew_nun' => '05e0',
    'hebrew_pe' => '05e4',
    'hebrew_qoph' => '05e7',
    'hebrew_resh' => '05e8',
    'hebrew_samech' => '05e1',
    'hebrew_shin' => '05e9',
    'hebrew_taw' => '05ea',
    'hebrew_tet' => '05d8',
    'hebrew_waw' => '05d5',
    'hebrew_yod' => '05d9',
    'hebrew_zade' => '05e6',
    'hebrew_zain' => '05d6',
    'Help' => 'Help',
-?,-help            Print this message
    'Henkan' => 'VoidSymbol',
# hidden, etc.) Returns true if the "default" flag was among them.
    'Hiragana_Katakana' => 'VoidSymbol',
    'Hiragana' => 'VoidSymbol',
    'Home' => 'Home',
    'horizconnector' => '2500',
    'horizlinescan1' => '23ba',
    'horizlinescan3' => '23bb',
    'horizlinescan5' => '2500',
    'horizlinescan7' => '23bc',
    'horizlinescan9' => '23bd',
    'Hstroke' => '0126',
    'hstroke' => '0127',
    'ht' => '2409',
    'Hyper_L' => 'Alt',
    'Hyper_R' => 'Alt',
    'hyphen' => '00ad',
    'I' => '0049',
    'i' => '0069',
    'Iabovedot' => '0130',
    'Iacute' => '00cd',
    'iacute' => '00ed',
    'Ibelowdot' => '1eca',
    'ibelowdot' => '1ecb',
    'Ibreve' => '012c',
    'ibreve' => '012d',
    'Icircumflex' => '00ce',
    'icircumflex' => '00ee',
    'identical' => '2261',
    'Idiaeresis' => '00cf',
    'idiaeresis' => '00ef',
-I<dir>             Add <dir> to list of directories to be used
# I do not know the Unicodes of these
    'idotless' => '0131',
	if (/^! ?(.+)= ?(.+)$/) {
	if (/^(.+)= ?(.+)$/) {
	if (0x00 <= $uni && 0x7f >= $uni) {
	    if ($1 eq '+') {
	    if ($2 ne '"') {
    if ($acm) {
    if ($acm =~ /gz$/) {
		if ($antecedents[$i] eq 'model') {
if ($arch eq 'at' || $arch eq 'evdev') {
	    if ($ARGV[0] =~ /^[0-9]|10$/) {
	if (/^! ?\$([a-zA-Z0-9_]+) ?= ?(.+)$/) {
if ($broken_caps) {
	    if ($capsvector[$mask] =~ /^(\+?)U\+([0-9a-fA-F]+)$/) {
	    if ($charmap) {
	if (/^charmap$/) {
if ($charmap) {
if ($charmap && -f "/etc/console-setup/compose.${charmap}.inc") {
    if (! $compact) {
    if ($compact) {
	    if ($compact) {
if ($compact) {
if (! $compact && -f "/etc/console-setup/remap.inc") {
			if ($consequents[$i] eq 'keycodes') {
		    if ($consequent_values[$i] =~ /^\+/) {
	if ($control eq 'Compose') {
    if ($debug_flag) {
		if (/^(DEFAULT|ONE_LEVEL|TWO_LEVEL
		if (! defined $antecedents[$i]) {
		    if (defined $ascii) {
	if (defined $forbidden{$uni}) {
    if (defined $kernelkeysym) {
    if (! defined $keycodes_table{$aliases{$alias}}) {
	if (defined $mask) {
	if (defined (my $special = $controlsyms_hash{$sym})) {
	if (defined (my $special = $metasyms_hash{$sym})) {
    if ((! defined $quality[$coord] 
	if (! defined $symbols_table{$key}[$group]) {
		if (! defined $symbols_table{$key}[$group][$level]) {
	    if (! defined $types_table{$code}
    if (! defined $types_table{$key}) {
	if (! defined $variants[$i]) {
	if (! defined $vector[$coord]) {
	if (-f $acmfile) {
	if (-f "$dir/$base") {
	if (-f "$dir/$file") {
	if ($file =~ /^\.?\//) {
    if ($file_type eq 'symbols') {
    # If groups differ prefer the zero group
	if ($include_list =~ (s/^(\^|\+|\|)([^\(\|\+]+)\(([^\)]+)\)
	if ($kernel_code == 50) {
	if ($kernel_code == 60) {
	if ($kernel_code == 83 || $kernel_code == 111) {
	if ($kernel_code == 83 || $kernel_code == 113) {
 	if ($kernel_code == 84) {
	if ($kernel_code == 97) {
        if ($kernelkeysym !~ /^[0-9a-fA-F]{4}$/) {
	if ($kernelkeysym eq 'Delete') {
    if (! $keycodes) {
	    if ($keycodes) {
if (! $keycodes) {
if ($keycodes =~ /(^|\+|\|)macintosh\(old\)($|\+|\|)/) {
	if ($kp) {
	    if (@layouts) {
	if (! @layouts) {
if (@layouts) {
		    if (@layouts > 1) {
		if ($legacy ne 'VoidSymbol') {
		    if ($level == 0 || $level == 2) {
		if ($list =~ s/^\[([^\]]*?)\],(.*)/$2/) {
		if ($list =~ (s/^symbols\[Group([1-4])\]
		if ($list =~ (s/^type(?:\[Group1\])?
	if ($mainsym =~ /^F([0-9]+)$/) {
		if (($mask & 0x02) && ($mask & 0x10)) {
	    if ($matches) {
		if (! matches_pattern ($antecedents[$i], 
	if ($method != $ignore_method) {
	    if ($method_name =~ /replace/i) {
    if ($method == $replace_method
	    if ($method == $replace_method
	    if ($method == $replace_method) {
		    if ($method == $replace_method
	    if ($model) {
		    if ($modifier_combinations[$mask] =~ /plain/) {
	if ($name eq $block || ($first && ! $block)) {
	if ($no_NoSymbol) {
    if (! $ok) {
	if ($oldline) {
    'ifonlyif' => '21d4',
	    if (pack("U", $uni) =~ /\p{IsAlpha}/) {
	if ($pattern =~ /^\$([a-zA-Z0-9_]+)$/) {
	if ($pattern eq '*') {
	    if ($pattern eq $option) {
		if ($real_level > 1) {
		if ($real_level == 2) {
		if ($real_level > 2) {
	    if ($rules) {
			    if (! $rules_keycodes) {
			    if (! $rules_symbols) {
    if (s/^-//) {
	if (s/\\$/ /) {
	if (/^\s*0x([0-9a-fA-F]{1,2})\s+\'([^\']+)\'\s*$/) {
    if ($stream =~ /^\"([^\"]*)\"(.*)/) {
	if ($stream =~ /^<([^>]*)>=/) {
	if ($stream =~ /^alias/) {
    if ($stream =~ /^key</i) {
	if ($stream =~ /^(modifier_map|modmap|mod_map)/i) {
	if ($stream =~ /^name/i) {
	if ($stream =~ s/^\{//) {
    if ($stream =~ s/^alternate ?(.*)/$1/i) {
    if ($stream =~ s/^([a-zA-Z0-1_]+) ?(.*)/$2/) {
	if ($stream =~ s/^[a-zA-Z0-9_]+\.[a-zA-Z0-9_]+=.*?;(.*)/$1/i) {
	if ($stream =~ s/^[a-zA-Z0-9_]+\.[a-zA-Z0-9_]+\[[a-zA-Z0-9_]+\]
    if ($stream =~ s/^(include|replace|augment|override)\"([^\"]*)\";?
	if ($stream =~ (s/^key\.type(?:\[Group1\])?=\"([^\"]+)\";(.*)/$2/)) {
	if ($stream =~ (s/^(minimum|maximum|indicator|virtual\sindicator)
# If $stream starts with an include statement - process it and return true.
	if ($stream =~ /^virtual_modifiers/i) {
		if ($string eq $member) {
    if ($string eq 'OPTIONS') {
	if ($string eq $pattern) {
	if ($string =~ s/^(\"[^\"]*(\"|$))//) {
	if ($string =~ s/^([^\"\s]+)//) {
	if ($string =~ s/^\s+// && $final_letter && $string =~ /^[a-zA-Z0-9_]/) {
	    if ($structured) {
    if (! $symbols) {
	    if ($symbols) {
if (! $symbols) {
	    if ($symbol !~ /\(/ && $symbol =~ /./
# If the string is 'OPTIONS' then match the pattern against any of the
	    if ($types_table{$key} eq 'ONE_LEVEL') {
	if ($types_table{$key} =~ /^(KEYPAD|FOUR_LEVEL_X
	if ($uni <= 0x7f) {
	    if (@variants) {
		    if (@variants > 1) {
		if ($v != $c && $v gt 0x7f) {
	    if ($vector[$coord] =~ /^(AltGr|AltGr_Lock)$/) {
	    if ($vector[$coord] eq 'AltGr_Lock') {
	    if ($vector[$coord] eq 'ShiftL_Lock') {   #  0 => 16
	    if ($vector[$coord] =~ /^KP_/) {
	    if ($vector[$coord + $mod] eq 'VoidSymbol'
	    if ($vector[$coord] =~ /^(ShiftL|ShiftL_Lock)$/) {
	if ($vector[$mask] eq 'NoSymbol') {
		if ($vector[$mask] ne 'NoSymbol') {
	if ($vector[$mask] ne 'VoidSymbol' && $vector[$mask] ne 'NoSymbol') {
	    if ($verbosity) {
    if ($verbosity >= 1) {
	if ($verbosity >= 4 && ! defined $keycodes_table{$key}) {
	    if ($verbosity >= 8) {
		    if (/^VoidSymbol$/) {
    if (($x | 0x0f) != ($y | 0x0f)) {
	if (!xkb_block_list ($file_type, $block)) {
	if (xkb_include ('keycodes')) {
	if (xkb_include ('symbols')) {
	if (xkb_key $default_key_type) {
#     If you have not received a copy of the GNU General Public License
    'Igrave' => '00cc',
    'igrave' => '00ec',
    'Ihook' => '1ec8',
    'ihook' => '1ec9',
    'Imacron' => '012a',
    'imacron' => '012b',
    'implies' => '21d2',
    'includedin' => '2282',
    'includes' => '2283',
	    &include_xkb_file ($file_type, $include_request);
include_xkb_file 'keycodes', $keycodes;
include_xkb_file 'symbols', $symbols;
	."\" in $filename expected $_[0].\n";
		    ." in $filename.\n";
    'infinity' => '221e',
    'Insert' => 'Insert',
    'integral' => '222b',
    'intersection' => '2229',
				 ."in the legacy encoding\n", $uni);
    'Iogonek' => '012e',
    'iogonek' => '012f',
    'ISO_First_Group_Lock' => 'ShiftL_Lock',
    'ISO_First_Group' => 'ShiftL_Lock',
    'ISO_Group_Latch' => 'ShiftL',
    'ISO_Group_Lock' => 'ShiftL_Lock',
    'ISO_Group_Shift' => 'ShiftL',
    'ISO_Last_Group_Lock' => 'ShiftL_Lock',
    'ISO_Last_Group' => 'ShiftL_Lock',
    'ISO_Left_Tab' => 'Tab',
    'ISO_Level2_Latch' => 'Shift',
    'ISO_Level3_Latch' => 'AltGr',
    'ISO_Level3_Lock' => 'AltGr_Lock',
    'ISO_Level3_Shift' => 'AltGr',
    'ISO_Lock' => 'Caps_Lock',
    'ISO_Next_Group_Lock' => 'ShiftL_Lock',
    'ISO_Next_Group' => 'ShiftL_Lock',
    'ISO_Prev_Group_Lock' => 'ShiftL_Lock',
    'ISO_Prev_Group' => 'ShiftL_Lock',
	'i' => 'Tab',
    'Itilde' => '0128',
    'itilde' => '0129',
#     it under the terms of the GNU General Public License as published by
    'J' => '004a',
    'j' => '006a',
    'Jcircumflex' => '0134',
    'jcircumflex' => '0135',
	'j' => 'Linefeed',
    'jot' => '2218',
    'K' => '004b',
    'k' => '006b',
    'kana_a' => '30a1',
    'kana_A' => '30a2',
    'kana_CHI' => '30c1',
    'kana_closingbracket' => '300d',
    'kana_comma' => '3001',
    'kana_conjunctive' => '30fb',
    'kana_e' => '30a7',
    'kana_E' => '30a8',
    'kana_FU' => '30d5',
    'kana_fullstop' => '3002',
    'kana_HA' => '30cf',
    'kana_HE' => '30d8',
    'kana_HI' => '30d2',
    'kana_HO' => '30db',
    'kana_i' => '30a3',
    'kana_I' => '30a4',
    'kana_KA' => '30ab',
    'kana_KE' => '30b1',
    'kana_KI' => '30ad',
    'kana_KO' => '30b3',
    'kana_KU' => '30af',
    'kana_MA' => '30de',
    'kana_ME' => '30e1',
    'kana_MI' => '30df',
    'kana_middledot' => '30fb', # Is this recognised by X ?
    'kana_MO' => '30e2',
    'kana_MU' => '30e0',
    'kana_N' => '30f3',
    'kana_NA' => '30ca',
    'kana_NE' => '30cd',
    'kana_NI' => '30cb',
    'kana_NO' => '30ce',
    'kana_NU' => '30cc',
    'kana_o' => '30a9',
    'kana_O' => '30aa',
    'kana_openingbracket' => '300c',
    'kana_RA' => '30e9',
    'kana_RE' => '30ec',
    'kana_RI' => '30ea',
    'kana_RO' => '30ed',
    'kana_RU' => '30eb',
    'kana_SA' => '30b5',
    'kana_SE' => '30bb',
    'kana_SHI' => '30b7',
    'kana_SO' => '30bd',
    'kana_SU' => '30b9',
    'kana_TA' => '30bf',
    'kana_TE' => '30c6',
    'kana_TO' => '30c8',
    'kana_tsu' => '30c3',
    'kana_TSU' => '30c4',
    'kana_u' => '30a5',
    'kana_U' => '30a6',
    'kana_WA' => '30ef',
    'kana_WO' => '30f2',
    'kana_ya' => '30e3',
    'kana_YA' => '30e4',
    'kana_yo' => '30e7',
    'kana_YO' => '30e8',
    'kana_yu' => '30e5',
    'kana_YU' => '30e6',
    'Kanji' => 'VoidSymbol', # Is this recognised by X ?
    'Katakana' => 'VoidSymbol',
# kbd 1.15-1 (deliberately) fails on anything in the range 0xf000..0xffff;
    'Kcedilla' => '0136',
    'kcedilla' => '0137',
				 $kernelkeysym, $distance);
				     $kernelkeysym, $distance + 1);
	$kernelkeysym = ($xkeysym =~ /^0x0?100([0-9a-fA-F]{4})/
	$kernelkeysym = ($xkeysym =~ /^0x0?100([0-9a-fA-F]{4})$/
    #    Kernel         X
keycode 127 =
			    ." keycode $kernel_code = $capsvector[$mask]\n";
			." keycode $kernel_code = $vector[$mask]\n";
                 # keycodes
	    $keycodes = $ARGV[0];
-keycodes <name>    Specifies keycodes component name
	$keycodes = $rules_keycodes;
	    ." keycodes = $rules_keycodes\n"
		$keycodes_table{$alias} = [];
				@{$keycodes_table{$aliases{$alias}}} ];
    $keycodes_table{$alias} = [ @{$keycodes_table{$alias}},
		$keycodes_table{$key} = [ $code ];
    $KEYMAP .= '\
			$KEYMAP .= "ctrll"
			$KEYMAP .= "ctrll $modifier_combinations[$mask]"
	$KEYMAP .= "keycode $kernel_code = $line\n";
	    $KEYMAP .= "keycode $kernel_code = @vector @capsvector\n";
    $KEYMAP .= "keymaps 0-127\n";
    $KEYMAP .= "keymaps 0-4,6,8,10,12,14\n";
		    $KEYMAP .= "$modifier_combinations[$mask]"
    $KEYMAP =~ s/Caps_Lock/CtrlL_Lock/g;
		      |KEYPAD|FOUR_LEVEL_X|FOUR_LEVEL_MIXED_KEYPAD
# Keypad keys
# Keypad keys (alternate level)
			  |keypad_keys|function_keys
# Keypad keys with missing support in the kernel
    'Korean_Won' => '20a9',
    'KP_0' => 'KP_0',
    'KP_1' => 'KP_1',
    'KP_2' => 'KP_2',
    'KP_3' => 'KP_3',
    'KP_4' => 'KP_4',
    'KP_5' => 'KP_5',
    'KP_6' => 'KP_6',
    'KP_7' => 'KP_7',
    'KP_8' => 'KP_8',
    'KP_9' => 'KP_9',
    'KP_Add' => 'KP_Add',
			# KP_Begin and KP_Delete are mapped to VoidSymbol
    'KP_Begin' => 'VoidSymbol', # What does correspond to this?
    'KP_Decimal' => 'KP_Period',
    'KP_Delete' => 'VoidSymbol', # has to be 'KP_Period' or 'KP_Decimal'
    'KP_Divide' => 'KP_Divide',
    'KP_Down' => 'KP_2',
    'KP_End' => 'KP_1',
    'KP_Enter' => 'KP_Enter',
    'KP_Equal' => 'equal',
    'KP_F1' => 'F1',
    'KP_F2' => 'F2',
    'KP_F3' => 'F3',
    'KP_F4' => 'F4',
    'KP_Home' => 'KP_7',
    'KP_Insert' => 'KP_0',
    'KP_Left' => 'KP_4',
    'KP_Multiply' => 'KP_Multiply',
    'KP_Next' => 'KP_3',
    'KP_Page_Down' => 'KP_3',
    'KP_Page_Up' => 'KP_9',
    'KP_Prior' => 'KP_9',
    'KP_Right' => 'KP_6',
    'KP_Separator' => 'KP_Comma',
    'KP_Seprator' => 'KP_Comma', # Is this recognised by X ?
    'KP_Space' => 'space',
    'KP_Subtract' => 'KP_Subtract',
    'KP_Tab' => 'Tab',
    'KP_Up' => 'KP_8',
		$kp = $vector[$coord];
	    $kp = 'VoidSymbol';
    'kra' => '0138',
    'L' => '004c',
    'l' => '006c',
    'L10' => 'F20',
    'L1' => 'F11',
    'L2' => 'F12',
    'L3' => 'F13',
    'L4' => 'F14',
    'L5' => 'F15',
    'L6' => 'F16',
    'L7' => 'F17',
    'L8' => 'F18',
    'L9' => 'F19',
    'Lacute' => '0139',
    'lacute' => '013a',
	    last;
		    last;
		       'Last_Console', 'F246', 'F246', 'F246', 
# later we use that the distance is an even number less than 1000000
    'latincross' => '271d',
-layout <name>      Specifies layout used to choose component names
	    @layouts = split (/,/, $_, -1);
	    @layouts = split (/,/, $ARGV[0], -1);
	    @layouts = ('us') if (! @layouts);
    'Lbelowdot' => '1e36',
    'lbelowdot' => '1e37',
    'Lcaron' => '013d',
    'lcaron' => '013e',
    'Lcedilla' => '013b',
    'lcedilla' => '013c',
    'leftanglebracket' => '2329',
    'leftarrow' => '2190',
    'leftcaret' => 'VoidSymbol', # Is this recognised by X ?
    'leftdoublequotemark' => '201c',
    'Left' => 'Left',
    'leftmiddlecurlybrace' => '23a8',
    'leftopentriangle' => '25c1',
    'leftpointer' => '261c',
    'leftradical' => '23b7',
    'leftshoe' => '2282',
    'leftsinglequotemark' => '2018',
    'leftt' => '251c',
    'lefttack' => '22a2',
	'<' => 'less',
    'less' => '003c',
    'lessthanequal' => '2264',
                     # letters.  1 = the keymap contains non-ascii letters.
	    $level++;
		    # Level1: plain
		    # Level2: alt
		    # Level2: control
		    # Level2: control+alt
		    # Level2: shift
		    # Level2: shift+alt
		    # Level3: altgr
		    # Level4: shift+altgr
    'lf' => '240a',
    'Linefeed' => 'Linefeed', # 000a
	$line =~ s/NoSymbol/VoidSymbol/g;
    'LiraSign' => '20a4',
    'logicaland' => '2227',
    'logicalor' => '2228',
# Looks for $_[0] in the known directories and returns ready to use
    'lowleftcorner' => '2514',
    'lowrightcorner' => '2518',
    'Lstroke' => '0141',
    'lstroke' => '0142',
    'M' => '004d',
    'm' => '006d',
    'Mabovedot' => '1e40', # Is this recognised by X ?
    'mabovedot' => '1e41', # Is this recognised by X ?
    'Macedonia_DSE' => '0405',
    'Macedonia_dse' => '0455',
    'Macedonia_GJE' => '0403',
    'Macedonia_gje' => '0453',
    'Macedonia_KJE' => '040c',
    'Macedonia_kje' => '045c',
    'macron' => '00af',
    'malesymbol' => '2642',
    'maltesecross' => '2720',
    'masculine' => '00ba',
		    $matches = 0;
	    $match_found = 0;
		$match_found = $antecedents[0] ne 'OPTIONS';
# mean lower quality.
    'Menu' => 'VoidSymbol',
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    $metacontrolsyms[0] = 'NoSymbol';
				     $metacontrolsyms[$ascii + 1], 
	    $metacontrolsyms[$code] = 'Compose';
	    $metacontrolsyms[$code] = 'Meta_'. $control;
	    $metacontrolsyms[$code] = 'NoSymbol';
	    $metacontrolsyms[$code] = 'VoidSymbol';
    'Meta_L' => 'Alt',
    'Meta_R' => 'Alt',
    $metasyms[0] = 'NoSymbol';
				     $metasyms[$ascii + 1], $distance + 1);
	$metasyms[$code + 1] = "Meta_". $sym;
	|| ($method == $augment_method &&
		|| ($method == $augment_method
		$method = $augment_method;
			|| ($method == $augment_method
    $method = $oldmethod;
	    $method = $oldmethod;
	$method = $oldmethod;
	|| ($method == $override_method
		|| $method == $override_method
		$method = $override_method;
			|| $method == $override_method
		$method = $replace_method;
	$method = xkb_method ();
    'MillSign' => '20a5',
	'-' => 'minus',
    'minus' => '002d',
    'minutes' => '2032',
	    $model = $ARGV[0];
-model <name>       Specifies model used to choose component names
$model = 'pc104' if (! $model);
	    $model =~ s/[[:space:]]//g;
    'Mode_switch' => 'ShiftL',
# Modifiers
                    more messages
    'mu' => '00b5',
    'Muhenkan' => 'VoidSymbol',
    'Multi_key' => 'Compose',
    'MultipleCandidate' => 'VoidSymbol',
    'multiply' => '00d7',
    'musicalflat' => '266d',
    'musicalsharp' => '266f',
my $acm;
my %acmtable; # Unicode -> legacy code (defined only when -charmap is given)
	    my $alias = $1;
my %aliases;        # x keysym -> x keysym
my $alternate_method = 4;
	    my @antecedent_patterns = split ' ', $1;
    my @antecedents;
		    my $approximated_coord = ($approximated_level
my $arch = 'at'; # The name of a mapping between X key codes and kernel
	    my $ascii = x_to_ascii ($xkeysym);
my %at_scancodes = (
my $augment_method = 1;   # Constants for different XKB include methods
    (my $base = $file) =~ s/.*\/(.+)/$1/;
my $base_group = 0; # The base group to include in (for "symbols" files only)
	my $block;
    my $block = $_[1];
    my $bottom = $x & $y;
my $broken_caps = 0; # In unicode mode Caps_Lock doesn't work for non-ASCII
	my @capsvector = @vector;
my $charmap;
	    my $c = hex ($1);
	    my $code = $2;
    my $code = shift;
my $compact = 0;
    my @consequents;
	    my $consequent_str = $2;
		my @consequent_values = split ' ', $2;
	my $control = $controlsyms[$code];
my @controlsyms;
    my %controlsyms_hash = (
	    my $coord;
	    my $coord = 16 * $group + $x;
		my $coord = 16 * $group + $x;
	my $coord = $group << 4;
    my ($coord, $new_sym, $new_quality) = @_;
		my $c = ($v == $l ? $u : $l);
my $debug_flag = 1;
    my $default = 0;
    my $default_key_type = $_[0];
    my $default_key_type = 'DEFAULT';
	my $default = xkb_flags();
		    my $distance = distance ($approximated_coord, $coord);
	my $file;
    my $file = $_[0];
my $filename;       # The name of the currently read file
    my $file_type = $_[0];
    my $final_letter = 0;
    my $first = 1;
my %forbidden;
		    my $group = $1 - 1 + $base_group;
	    my $group = $base_group;
    my $group = shift;
		    my @groupsymbols = split ' ', $symbols;
my $ignore_method = 5;    # This is not a XKB method and means "don't include"
    my $include_list = '^'. $_[1];
	my $include_request = $2;
	    my $is_special = ($xkeysym !~ /^U[0-9a-fA-F]+$/
    my $kernel_code = $_[0];
	my $kernel_code = (($arch eq 'at') ? $at_scancodes{$key} : $key - 8);
	my $kernel_code = $key - 7;
	my $kernel_code = $key - 8;
    my $kernelkeysym = $xkbsym_table{$xkeysym};
	    my $kernelkeysym = x_to_kernelsym ($xkeysym);
my %kernel_modifiers = ('Shift' => 0x01,
    my $key = $_[0];
	    my $key = $1;
	my $key = $1;
	    my $key = $2;
my $keycodes;
my %keycodes_table; # x keysym -> x key code
my $KEYMAP = ''; # This variable contains the generated keymap
	my $kp = undef;
my @layouts;
		my $legacy = uni_to_legacy ($uni);
	my $level = 0;
	my $line = ($symbols =~ /:2/ # true if the keymap is non-latin
	my $list = $2 .",";
		my $l = ord (lc (pack ("U", $v)));
	my $mainsym = $vector[$coord];
	my $mask = $kernel_modifiers{$vector[$coord]};
	    my $matches = 1;
    my $match_found = 0;
my @metacontrolsyms;
my @metasyms;
    my %metasyms_hash = (
	my $method_name = $1;
my $method = $override_method; # The current method (by default "override")
my $model;
my @modifier_combinations = ('plain',
    my $mystream = $stream;
	my $name = xkb_string();
    my $no_NoSymbol = 1;
    my $normalized = '';
	    my $num = $1;
    my $ok = 0;
    my $oldbase_group = $base_group;
	my $oldfilename = $filename;
    my $oldline = '';
    my $oldmethod = $method;
	    my $oldmethod = $method;
	my $oldstream = $stream;
    my $only_VoidSymbol = 1;
my @options = ();
my $override_method = 2;
my @quality;
	my $real_group = $real_group_table[1+$#{$symbols_table{$key}}][$group];
    my @real_group_table = ([-1, -1, -1, -1],
	    my $real_level = $level;
my $replace_method = 3;
my $rules;
    my $rules_keycodes;
    my $rules_symbols;
my %rules_variables = (); # The variables defined in the rules file
my $stream = '';    # The contents of $filename that still has not been parsed
    my $string = '';
    my ($string, $pattern) = @_;
	my $structured;
my $symbols;
		    (my $symbols = $1) =~ s/,/ /g;
		    (my $symbols = $2) =~ s/,/ /g;
my %symbols_table;   # x key code -> [[symbols for group0,...],
	my $sym = chr ((0x41 <= $code && 0x5a >= $code) ? $code + 0x20 : $code);
	my $sym = chr($code);
my %types_table;     # x key code -> key type (i.e. "TWO_LEVEL")
    my $uni = $_[0];
	my $uni = hex ($kernelkeysym);
	    my $uni = ord ($2);
		my $u = ord (uc (pack ("U", $v)));
my @variants = ();
my @vector;
my $verbosity = 0;
		my $v = hex ($2);
    my $x = $_[0];
my @xdirs = ('/etc/console-setup/ckb',
my %xkbsym_table = (
    my $xkeysym = $_[0];
	    my $xkeysym = $symbols_table{$key}[$real_group][$real_level];
    my $y = $_[1];
    'N' => '004e',
    'n' => '006e',
    'nabla' => '2207',
    'Nacute' => '0143',
    'nacute' => '0144',
    'NairaSign' => '20a6',
    'Ncaron' => '0147',
    'ncaron' => '0148',
    'Ncedilla' => '0145',
    'ncedilla' => '0146',
    'NewSheqelSign' => '20aa',
	&& $new_sym ne 'VoidSymbol') {
    # $new_sym represents the xkb symbol for position $coord in @vector
	    next;
		    next;
	next if ($coord & 0x0c); # If Control and/or Alt
	next if (! defined $kernel_code || $kernel_code < 0);
		next if ($list =~ s/^[a-zA-Z0-9_]+=\"[^\"]+\",(.*)/$1/);
		next if ($list =~ s/^[a-zA-Z0-9_]+(=[a-zA-Z0-9_<>]+)?,
		next if ($list =~ s/^type\[[a-zA-Z0-9_]+\]=\"[^\"]+\",
	    next if ($match_found);
	    next if ($option eq '');
	next if ($real_group < 0);
	    next if ($real_level < 0);
	next if (/^\s*$/);
	next if (/^\s*\/\//);
    'Next' => 'Next',
	next unless (defined $mask);
	next unless (/[^\s]/);
    'ninesubscript' => '2089',
    'ninesuperior' => '2079',
    'nl' => '2424',
    'NoAction' => 'NoSymbol', # Is this recognised by X ?
    'nobreakspace' => '00a0',
	    $no_NoSymbol = 0;
	    $normalized = $normalized .' ';
	    $normalized = $normalized . $1;
    'NoSymbol' => 'NoSymbol',
    'nosymbol' => 'NoSymbol', # Is this recognised by X ?
    'notapproxeq' => '2247',
    'notelementof' => '2209',
    'notequal' => '2260',
			# notice that $level is 1 or 3
    'notidentical' => '2262',
    'notsign' => '00ac',
    'Ntilde' => '00d1',
    'ntilde' => '00f1',
	' ' => 'nul',
	'@' => 'nul',
	'`' => 'nul', # grave
	'#' => 'numbersign',
    'numbersign' => '0023',
    'numerosign' => '2116',
    'Num_Lock' => 'Num_Lock',
    'O' => '004f',
    'o' => '006f',
    'Oacute' => '00d3',
    'oacute' => '00f3',
    'Obarred' => '019f',
    'obarred' => '0275',
    'Obelowdot' => '1ecc',
    'obelowdot' => '1ecd',
    'Ocaron' => '01d1',
    'ocaron' => '01d2',
    'Ocircumflex' => '00d4',
    'ocircumflex' => '00f4',
    'Ocircumflexacute' => '1ed0',
    'ocircumflexacute' => '1ed1',
    'Ocircumflexbelowdot' => '1ed8',
    'ocircumflexbelowdot' => '1ed9',
    'Ocircumflexgrave' => '1ed2',
    'ocircumflexgrave' => '1ed3',
    'Ocircumflexhook' => '1ed4',
    'ocircumflexhook' => '1ed5',
    'Ocircumflextilde' => '1ed6',
    'ocircumflextilde' => '1ed7',
    'Odiaeresis' => '00d6',
    'odiaeresis' => '00f6',
    'Odoubleacute' => '0150',
    'odoubleacute' => '0151',
    'OE' => '0152',
    'oe' => '0153',
    'ogonek' => '02db',
    'Ograve' => '00d2',
    'ograve' => '00f2',
    'Ohook' => '1ece',
    'ohook' => '1ecf',
    'Ohorn' => '01a0', # Is this recognised by X ?
    'ohorn' => '01a1', # Is this recognised by X ?
    'Ohornacute' => '1eda',
    'ohornacute' => '1edb',
    'Ohornbelowdot' => '1ee2',
    'ohornbelowdot' => '1ee3',
    'Ohorngrave' => '1edc',
    'ohorngrave' => '1edd',
    'Ohornhook' => '1ede',
    'ohornhook' => '1edf',
    'Ohorntilde' => '1ee0',
    'ohorntilde' => '1ee1',
	    $ok = 1;
	    $_ = $oldline . $_;
	    $oldline = '';
	    $oldline = $_;
    'Omacron' => '014c',
    'omacron' => '014d',
    'oneeighth' => '215b',
    'onefifth' => '2155',
    'onehalf' => '00bd',
    'onequarter' => '00bc',
    'onesixth' => '2159',
    'onesubscript' => '2081',
    'onesuperior' => '00b9',
    'onethird' => '2153',
	    $only_VoidSymbol = 0;
    'Ooblique' => '00d8',
    'ooblique' => '00f8',
	open (ACM, '<:utf8', $acm) or die "$0: $acm: $!\n";
	open (ACM, '-|:utf8', "zcat $acm") or die "$0: $acm: $!\n";
    open (FILE, "$file") or die "$0: $file: $!\n";
    'openrectbullet' => '25ad',
    open (RULES, xfilename ("rules/$rules"))
    'openstar' => '2606',
# Opens the text file $_[0], reads it and saves its contents in $stream
    'opentribulletdown' => '25bd',
    'opentribulletup' => '25b3',
-option <name>      Adds an option used to choose component names
# options from @options.
	    @options = (@options, split (/,/, $_, -1));
	    @options = (@options, split (/,/, $ARGV[0], -1));
    'ordfeminine' => '00aa',
	or die "$0: ". xfilename ("rules/$rules") .": $!\n";
		or die "Bad number of antecedents";
		    or die sprintf ("Bad number of consequents: %d != %d",
		or syntax_error "alias definition";
		or syntax_error "group name";
		or syntax_error "keycode definition";
	    or syntax_error "key definition";
		or syntax_error "modifier_map";
		or syntax_error "virtual_modifiers";
	    or syntax_error "xkb_". $file_type;
    'Oslash' => '00d8',
    'oslash' => '00f8',
# Other symbols
# Otherwise return false. $_[0] is the file type ("symbols" or "keycodes")
    'Otilde' => '00d5',
    'otilde' => '00f5',
    'overbar' => '00af',
    'overline' => '203e',
    'P' => '0050',
    'p' => '0070',
    'Pabovedot' => '1e56', # Is this recognised by X ?
    'pabovedot' => '1e57', # Is this recognised by X ?
    'Page_Down' => 'PageDown',
    'Page_Up' => 'PageUp',
    'paragraph' => '00b6',
    'parenlef' => '0028', # Is this recognised by X ? (speling error)
	'(' => 'parenleft',
    'parenleft' => '0028',
	')' => 'parenright',
    'parenright' => '0029',
########### PARSING ###############################################
    'partdifferential' => '2202',
    'partialderivative' => '2202',
    'Pause' => 'Pause',
                           |PC_LALT_LEVEL2|PC_RALT_LEVEL2)$/x) {
                           |PC_LCONTROL_LEVEL2|PC_RCONTROL_LEVEL2)$/x) {
	'%' => 'percent',
    'percent' => '0025',
	'.' => 'period',
    'period' => '002e',
    'periodcentered' => '00b7',
    'PesetaSign' => '20a7',
    'phonographcopyright' => '2117',
    'pipe' => '007c', # Is this recognised by X ?
	'+' => 'plus',
    'plus' => '002b',
    'plusminus' => '00b1',
    'Pointer_EnableKeys' => 'VoidSymbol',
    'prescription' => '211e',
    'PreviousCandidate' => 'VoidSymbol',
	    print <<EOT;
print $KEYMAP;
	print STDERR "@_";
	print STDERR  "Acording to the rules file:\n"
    print STDERR  "WARNING: @_";
print "strings as usual\n";
	print_vector $kernel_code;
    'Print' => 'VoidSymbol',
    'Prior' => 'Prior',
    'prolongedsound' => '30fc',
    'punctspace' => '2008',
		push @{$keycodes_table{$key}}, $code;
    'Q' => '0051',
    'q' => '0071',
    'quad' => '2395',
    @quality = ();
	 || $quality[$coord] > $new_quality)
	$quality[$coord] = $new_quality;
	'?' => 'question',
    'question' => '003f',
    'questiondown' => '00bf',
	'"' => 'quotedbl',
    'quotedbl' => '0022',
    'quoteleft' => '0060',
    'quoteright' => '0027',
    'R' => '0052',
    'r' => '0072',
    'R10' => 'F30',
    'R11' => 'F31',
    'R12' => 'F32',
    'R13' => 'F33',
    'R14' => 'F34',
    'R15' => 'F35',
    'R1' => 'F21',
    'R2' => 'F22',
    'R3' => 'F23',
    'R4' => 'F24',
    'R5' => 'F25',
    'R6' => 'F26',
    'R7' => 'F27',
    'R8' => 'F28',
    'R9' => 'F29',
    'Racute' => '0154',
    'racute' => '0155',
    'radical' => '221a',
    'Rcaron' => '0158',
    'rcaron' => '0159',
    'Rcedilla' => '0156',
    'rcedilla' => '0157',
########### READ ACM ###############################################
########### READ THE RULES FILE #######################################
		$real_level = 0;
		    $real_level = 1;
		    $real_level = 2;
		    $real_level = $real_level - 1;
		    $real_level = $real_level - 2;
    'Redo' => 'VoidSymbol',
    'registered' => '00ae',
# Remove from $stream the characters up to the first unmatched "}"
# Removes and returns a string from $stream.
# Removes and returns identifier from $stream. 
# Removes an include method name from $stream and returns $alternate_method,
# removes from $stream initial sequence of xkb flags (default, partial,
# Report a syntax error in $filename. $_[0] should describe what was
    return 0;
	    return 0;
	return 0;
	    return 0x08;
	    return 0x09;
	    return 0x0a;
	    return 0x0d;
	    return 0x1b;
	    return 0x7f;
	    return -1;
	    return 1;
		    return 1;
		return 1;
	return $1;
	return 1;
	return $alternate_method;
	return $augment_method;
		return $controlsyms[$uni + 1];
    return $default;
	    return "$dir/$base";
	    return "$dir/$file";
    return if ($only_VoidSymbol);
	    return $kernelkeysym;
		    return '+'. $legacy;
		    return $legacy;
	return $method;
    return $ok;
	return $override_method;
	return $replace_method;
    'Return' => 'Return',     # 000d
	    return sprintf "0x%02x", $acmtable{$uni};
	    return sprintf "0x%02x", $uni;
	    return $string ne '';
    return undef;
	    return undef;
	    return $uni;
		return uni_to_legacy ($uni);
	return 'U+'. sprintf ("%04x", $uni);
    return @vector;
	    return 'VoidSymbol';
	return 'VoidSymbol';
    return  ((($y - $bottom) << 6) | ($x - $bottom)) << 1;
    'rightanglebracket' => '232a',
    'rightarrow' => '2192',
    'rightdoublequotemark' => '201d',
    'rightmiddlecurlybrace' => '23ac',
    'rightopentriangle' => '25b7',
    'rightpointer' => '261e',
    'Right' => 'Right',
    'rightshoe' => '2283',
    'rightsinglequotemark' => '2019',
    'rightt' => '2524',
    'righttack' => '22a3',
	    $rules = $ARGV[0];
				$rules_keycodes = $consequent_values[$i];
			    $rules_keycodes = $rules_keycodes .
-rules <name>       Name of rules file to use
				$rules_symbols = $consequent_values[$i];
			    $rules_symbols = $rules_symbols .
	    $rules_variables{$1} = [ split ' ', $2 ];
$rules = 'xorg' if (! $rules);
    'RupeeSign' => '20a8',
	s/\#.*//;
	s{//.*}{};
	s{\#.*}{};
    'S' => '0053',
    's' => '0073',
    'Sabovedot' => '1e60', # Is this recognised by X ?
    'sabovedot' => '1e61', # Is this recognised by X ?
    'Sacute' => '015a',
    'sacute' => '015b',
				    scalar (@consequents));
				    scalar (@consequent_values),
    'Scaron' => '0160',
    'scaron' => '0161',
    'Scedilla' => '015e',
    'scedilla' => '015f',
    'SCHWA' => '018f',
    'Schwa' => '018f', # Is this recognised by X ?
    'schwa' => '0259', # Is this recognised by X ?
    'Scircumflex' => '015c',
    'scircumflex' => '015d',
    'script_switch' => 'VoidSymbol',
    'Scroll_Lock' => 'Scroll_Lock',
    'seconds' => '2033',
    'section' => '00a7',
# see http://bugs.debian.org/500116.
                     # See http://bugzilla.kernel.org/show_bug.cgi?id=7746#c21
    'Select' => 'Select',
	';' => 'semicolon',
    'semicolon' => '003b',
    'semivoicedsound' => '309c',
                      |SEPARATE_CAPS_AND_SHIFT_ALPHABETIC
    'Serbian_DJE' => '0402',
    'Serbian_dje' => '0452',
    'Serbian_TSHE' => '040b',
    'Serbian_tshe' => '045b',
    'seveneighths' => '215e',
    'sevensubscript' => '2087',
    'sevensuperior' => '2077',
                             'shift',
    $_ = shift @ARGV;
	    shift @ARGV;
		shift @ARGV;
        shift   control keycode 127 = Boot
                             'shiftl',
			'ShiftL' => 0x10,
                             'shiftl alt',
                             'shiftl alt altgr',
                             'shiftl alt altgr shift',
                             'shiftl alt control',
                             'shiftl alt control altgr',
                             'shiftl alt control altgr shift',
                             'shiftl alt control shift',
                             'shiftl altgr',
                             'shiftl altgr shift',
                             'shiftl alt shift',
                             'shiftl control',
                             'shiftl control altgr',
                             'shiftl control altgr shift',
                             'shiftl control shift',
			'ShiftL_Lock' => 0x10,
			'Shift_Lock' => 0x01,
    'Shift_Lock' => 'Shift_Lock',
                             'shiftl shift',
    'Shift_L' => 'Shift',
                             'shiftr',
			'ShiftR' => 0x20,
                             'shiftr alt',
                             'shiftr alt altgr',
                             'shiftr alt altgr shift',
                             'shiftr alt control',
                             'shiftr alt control altgr',
                             'shiftr alt control altgr shift',
                             'shiftr alt control shift',
                             'shiftr altgr',
                             'shiftr altgr shift',
                             'shiftr alt shift',
                             'shiftr control',
                             'shiftr control altgr',
                             'shiftr control altgr shift',
                             'shiftr control shift',
			'ShiftR_Lock' => 0x20,
                             'shiftr shift',
    'Shift_R' => 'Shift',
                             'shiftr shiftl',
                             'shiftr shiftl alt',
                             'shiftr shiftl alt altgr',
                             'shiftr shiftl alt altgr shift',
                             'shiftr shiftl alt control',
                             'shiftr shiftl alt control altgr',
                             'shiftr shiftl alt control altgr shift',
                             'shiftr shiftl alt control shift',
                             'shiftr shiftl altgr',
                             'shiftr shiftl altgr shift',
                             'shiftr shiftl alt shift',
                             'shiftr shiftl control',
                             'shiftr shiftl control altgr',
                             'shiftr shiftl control altgr shift',
                             'shiftr shiftl control shift',
                             'shiftr shiftl shift',
    'signaturemark' => '2613',
    'similarequal' => '2243',
    'SingleCandidate' => 'VoidSymbol',
    'singlelowquotemark' => '201a',
    'sixsubscript' => '2086',
    'sixsuperior' => '2076',
	&skip_to_brace;
		skip_to_brace;
	'/' => 'slash',
    'slash' => '002f',
    'soliddiamond' => '25c6',
# Some Unicodes cause the kernel/loadkeys to issue "Segmentation fault"
	' ' => 'space',
    'space' => '0020',
    'squareroot' => '221a',
	s/^\s*//;
	s/\s+/ /g;
    'ssharp' => '00df',
	    $_ =~ s/[[:space:]]//g;
    'sterling' => '00a3',
		$stream = '';
	$stream = $2;
	    $stream = file_to_string ("$file");
	    $stream = file_to_string (xfilename "$file_type/$file");
	$stream = $mystream;
    $stream = $normalized;
	$stream = $oldstream;
    $stream =~ s/^[^\}\{]*(\}|$)//;
	    $stream =~ s/^<([^>]+)>=([0-9]*);(.*)/$3/
	    $stream =~ s/^alias<([^>]+)>=<([^>]+)>;(.*)/$3/
	$stream =~ s/^key<([^>]+)>\{([^\}]*?)\};(.*)/$3/i
	    $stream =~ (s/^(modifier_map|modmap|mod_map)\s?[a-zA-Z0-9_]+
	    $stream =~ s/^name\[[a-zA-Z0-9_]+\]=\"[^\"]*\";(.*)/$1/i
		$stream =~ s/^;// or syntax_error ";";
		$stream =~ s/^\};.*// or syntax_error "};";
	    $stream =~ (s/^virtual_modifiers\s?[a-zA-Z0-9_,]+;(.*)/$1/ix)
    'stricteq' => '2263',
	(! $string ) or die "Internal error";
	$string = $string . $_ .' ';
	    $structured = 0;
	    $structured = 1;
sub approximate {
sub debug {
sub distance {
sub file_to_string {
sub flatten {
sub include_xkb_file {
sub matches_pattern {
sub print_vector {
sub skip_to_brace {
sub symbols_for_group {
sub syntax_error {
sub uni_to_legacy {
sub warning {
sub xfilename {
sub xkb_block_list {
sub xkb_definitions {
sub xkb_flags {
sub xkb_identifier {
sub xkb_include {
sub xkb_key {
sub xkb_keycodes_definitions {
sub xkb_method {
sub xkb_string {
sub xkb_symbols_definitions {
sub x_to_ascii {
sub x_to_kernelsym {
    'SunAgain' => 'VoidSymbol',
    'SunAudioLowerVolume' => 'VoidSymbol',
    'SunAudioMute' => 'VoidSymbol',
    'SunAudioRaiseVolume' => 'VoidSymbol',
    'SunCopy' => 'VoidSymbol',
    'SunCut' => 'VoidSymbol',
    'SunF36' => 'VoidSymbol',
    'SunF37' => 'VoidSymbol',
    'SunFA_Acute' => 'dead_acute', # Is this recognised by X ?
    'SunFA_Cedilla' => 'dead_cedilla', # Is this recognised by X ?
    'SunFA_Circum' => 'dead_circumflex', # Is this recognised by X ?
    'SunFA_Diaeresis' => 'dead_diaeresis', # Is this recognised by X ?
    'SunFA_Grave' => 'dead_grave', # Is this recognised by X ?
    'SunFA_Tilde' => 'dead_tilde',
    'SunFind' => 'VoidSymbol',
    'SunFront' => 'VoidSymbol',
    'SunOpen' => 'VoidSymbol',
    'SunPaste' => 'VoidSymbol',
    'SunPowerSwitchShift' => 'VoidSymbol',
    'SunPowerSwitch' => 'VoidSymbol',
    'SunProps' => 'VoidSymbol',
    'SunStop' => 'VoidSymbol',
    'SunSys_Req' => 'VoidSymbol',
    'SunUndo' => 'VoidSymbol',
    'SunVideoDegauss' => 'VoidSymbol',
    'SunVideoLowerBrightness' => 'VoidSymbol',
    'SunVideoRaiseBrightness' => 'VoidSymbol',
    'Super_L' => 'Alt',
    'Super_R' => 'Alt',
	    $symbols = $ARGV[0];
                     #                [symbols for group1,...], ...]
		    symbols_for_group $code, $group, @groupsymbols;
		# symbols[GroupN] = [ X1, X2, ... ]
-symbols <name>     Specifies symbols component name
	$symbols = $rules_symbols;
	    ." symbols = $rules_symbols\n";
		$symbols_table{$code} = [];
		$symbols_table{$code}[$group][$level] = $symbol;
	    $symbols_table{$key}[$group] = [];
		    $symbols_table{$key}[$group][$level] = 'NoSymbol';
	    $sym = $special;
	syntax_error "identifier";
	syntax_error "string";
    'Sys_Req' => 'VoidSymbol',
    system("cat", "/etc/console-setup/compose.${charmap}.inc");
    system("cat", "/etc/console-setup/remap.inc");
    'T' => '0054',
    't' => '0074',
    'Tabovedot' => '1e6a', # Is this recognised by X ?
    'tabovedot' => '1e6b', # Is this recognised by X ?
    'Tab' => 'Tab',           # 0009
    'Tcaron' => '0164',
    'tcaron' => '0165',
    'Tcedilla' => '0162',
    'tcedilla' => '0163',
    'telephone' => '260e',
    'telephonerecorder' => '2315',
    'Terminate_Server' => 'VoidSymbol',
    'Thai_baht' => '0e3f',
    'Thai_bobaimai' => '0e1a',
    'Thai_chochan' => '0e08',
    'Thai_chochang' => '0e0a',
    'Thai_choching' => '0e09',
    'Thai_chochoe' => '0e0c',
    'Thai_dochada' => '0e0e',
    'Thai_dodek' => '0e14',
    'Thai_fofa' => '0e1d',
    'Thai_fofan' => '0e1f',
    'Thai_hohip' => '0e2b',
    'Thai_honokhuk' => '0e2e',
    'Thai_khokhai' => '0e02',
    'Thai_khokhon' => '0e05',
    'Thai_khokhuat' => '0e03',
    'Thai_khokhwai' => '0e04',
    'Thai_khorakhang' => '0e06',
    'Thai_kokai' => '0e01',
    'Thai_lakkhangyao' => '0e45',
    'Thai_lekchet' => '0e57',
    'Thai_lekha' => '0e55',
    'Thai_lekhok' => '0e56',
    'Thai_lekkao' => '0e59',
    'Thai_leknung' => '0e51',
    'Thai_lekpaet' => '0e58',
    'Thai_leksam' => '0e53',
    'Thai_leksi' => '0e54',
    'Thai_leksong' => '0e52',
    'Thai_leksun' => '0e50',
    'Thai_lochula' => '0e2c',
    'Thai_loling' => '0e25',
    'Thai_lu' => '0e26',
    'Thai_maichattawa' => '0e4b',
    'Thai_maiek' => '0e48',
    'Thai_maihanakat' => '0e31',
    'Thai_maitaikhu' => '0e47',
    'Thai_maitho' => '0e49',
    'Thai_maitri' => '0e4a',
    'Thai_maiyamok' => '0e46',
    'Thai_moma' => '0e21',
    'Thai_ngongu' => '0e07',
    'Thai_nikhahit' => '0e4d',
    'Thai_nonen' => '0e13',
    'Thai_nonu' => '0e19',
    'Thai_oang' => '0e2d',
    'Thai_paiyannoi' => '0e2f',
    'Thai_phinthu' => '0e3a',
    'Thai_phophan' => '0e1e',
    'Thai_phophung' => '0e1c',
    'Thai_phosamphao' => '0e20',
    'Thai_popla' => '0e1b',
    'Thai_rorua' => '0e23',
    'Thai_ru' => '0e24',
    'Thai_saraa' => '0e30',
    'Thai_saraaa' => '0e32',
    'Thai_saraae' => '0e41',
    'Thai_saraaimaimalai' => '0e44',
    'Thai_saraaimaimuan' => '0e43',
    'Thai_saraam' => '0e33',
    'Thai_sarae' => '0e40',
    'Thai_sarai' => '0e34',
    'Thai_saraii' => '0e35',
    'Thai_sarao' => '0e42',
    'Thai_sarau' => '0e38',
    'Thai_saraue' => '0e36',
    'Thai_sarauee' => '0e37',
    'Thai_sarauu' => '0e39',
    'Thai_sorusi' => '0e29',
    'Thai_sosala' => '0e28',
    'Thai_soso' => '0e0b',
    'Thai_sosua' => '0e2a',
    'Thai_thanthakhat' => '0e4c',
    'Thai_thonangmontho' => '0e11',
    'Thai_thophuthao' => '0e12',
    'Thai_thothahan' => '0e17',
    'Thai_thothan' => '0e10',
    'Thai_thothong' => '0e18',
    'Thai_thothung' => '0e16',
    'Thai_topatak' => '0e0f',
    'Thai_totao' => '0e15',
    'Thai_wowaen' => '0e27',
    'Thai_yoyak' => '0e22',
    'Thai_yoying' => '0e0d',
# The comments are removed, all new lines are replaced by spaces and
# The following are Linux specific
#     the Free Software Foundation; either version 2 of the License, or
# The pattern may be "*", a variable name, or a plain string.
                    # The purpose of the semicolons is to make %(v) and %_v
    'therefore' => '2234',
# The string $_[0] matches the pattern $_[1]. 
    'thinspace' => '2009',
#     This program is distributed in the hope that it will be useful,
#     This program is free software; you can redistribute it and/or modify
    'Thorn' => '00de',
    'thorn' => '00fe',
    'threeeighths' => '215c',
    'threefifths' => '2157',
                      |THREE_LEVEL|ALPHABETIC
    'threequarters' => '00be',
    'threesubscript' => '2083',
    'threesuperior' => '00b3',
    'tintegral' => '222d',
    'topintegral' => '2320',
    'topleftparens' => '239b',
    'topleftradical' => '250c',
    'topleftsqbracket' => '23a1',
    'toprightparens' => '239e',
    'toprightsqbracket' => '23a4',
    'topt' => '252c',
    'trademark' => '2122',
    'Tslash' => '0166',
    'tslash' => '0167',
    'twofifths' => '2156',
    'twosubscript' => '2082',
    'twosuperior' => '00b2',
    'twothirds' => '2154',
		# type = "...."
		# type[...] = "..."
			$types_table{$code} = $1;
		$types_table{$code} = $default_key_type;
		|| $types_table{$code} eq 'DEFAULT') {
	$types_table{$key} = 'DEFAULT';
    'U' => '0055',
    'u' => '0075',
    'Uacute' => '00da',
    'uacute' => '00fa',
    'Ubelowdot' => '1ee4',
    'ubelowdot' => '1ee5',
    'Ubreve' => '016c',
    'ubreve' => '016d',
    'Ucircumflex' => '00db',
    'ucircumflex' => '00fb',
    'Udiaeresis' => '00dc',
    'udiaeresis' => '00fc',
    'Udoubleacute' => '0170',
    'udoubleacute' => '0171',
    'Ugrave' => '00d9',
    'ugrave' => '00f9',
    'Uhook' => '1ee6',
    'uhook' => '1ee7',
    'Uhorn' => '01af',
    'uhorn' => '01b0',
    'Uhornacute' => '1ee8',
    'uhornacute' => '1ee9',
    'Uhornbelowdot' => '1ef0',
    'uhornbelowdot' => '1ef1',
    'Uhorngrave' => '1eea',
    'uhorngrave' => '1eeb',
    'Uhornhook' => '1eec',
    'uhornhook' => '1eed',
    'Uhorntilde' => '1eee',
    'uhorntilde' => '1eef',
    'Ukrainian_GHE_WITH_UPTURN' => '0490', # Is this recognised by X ?
    'Ukrainian_ghe_with_upturn' => '0491', # Is this recognised by X ?
    'Ukrainian_I' => '0406',
    'Ukrainian_i' => '0456',
    'Ukrainian_IE' => '0404',
    'Ukrainian_ie' => '0454',
    'Ukrainian_YI' => '0407',
    'Ukrainian_yi' => '0457',
    'Umacron' => '016a',
    'umacron' => '016b',
			    : undef));
	'_' => 'underscore',
    'underscore' => '005f',
    'Undo' => 'VoidSymbol',
    'union' => '222a',
    'Uogonek' => '0172',
    'uogonek' => '0173',
    'uparrow' => '2191',
    'upcaret' => '2227',
    'upleftcorner' => '250c',
    'uprightcorner' => '2510',
    'upshoe' => '2229',
    'upstile' => '2308',
    'uptack' => '22a4',
    'Up' => 'Up',
    'Uring' => '016e',
    'uring' => '016f',
Usage: ckbcomp [args] [<layout> [<variant> [<option> ... ]]]
use locale;
use strict;
use warnings 'all';
#!/usr/bin/perl
		     "/usr/share/consoletrans/${charmap}",
		     "/usr/share/consoletrans/${charmap}.acm",
		     "/usr/share/consoletrans/${charmap}.acm.gz",
		     "/usr/share/consoletrans/${charmap}.gz",
	     '/usr/share/X11/xkb',
	     '/usr/X11R6/lib/X11/xkb');
    'Utilde' => '0168',
    'utilde' => '0169',
    'V' => '0056',
    'v' => '0076',
-variant <name>     Specifies layout variant used to choose component names
	    $variants[$i] = '';
	    @variants = ('') if (! @variants);
	    @variants = split (/,/, $_, -1);
	    @variants = split (/,/, $ARGV[0], -1);
    'variation' => '221d',
    @vector = ();
		    ? "@vector[0, 1, 16, 17, 4, 20, 8, 24, 12, 28]"
		    : "@vector[0, 1, 2, 3, 4, 6, 8, 10, 12, 14]");
 	    @vector = ('Break') x 64;
 	    @vector = ('Control_backslash') x 64;
		$vector[$coord + 12] = 'Boot';
	    $vector[$coord + 12] = 'Console_'. $num; # control + alt
	    $vector[$coord + 13] = 'Console_'. ($num + 12); # control+alt+shift
		$vector[$coord + 14] = 'Boot';
		$vector[$coord + 16] = 'AltGr';
		$vector[$coord + 16] = 'AltGr_Lock';
		$vector[$coord + 16] = 'ShiftL';
		$vector[$coord + 16] = 'ShiftR_Lock'; # 16 => 48
	    $vector[$coord + 1] = 'F'. ($num + 12); # shift
	    $vector[$coord + 1] = 'Scroll_Backward';
	    $vector[$coord + 1] = 'Scroll_Forward';
	    $vector[$coord + 1] = 'Show_Memory';
		$vector[$coord + 1] = 'VoidSymbol';
	    $vector[$coord + 2] = 'Console_'. ($num + 12); # altgr
	    $vector[$coord + 2] = 'Hex_A';
	    $vector[$coord + 2] = 'Hex_B';
	    $vector[$coord + 2] = 'Hex_C';
	    $vector[$coord + 2] = 'Hex_D';
	    $vector[$coord + 2] = 'Hex_E';
	    $vector[$coord + 2] = 'Hex_F';
	    $vector[$coord + 2] = 'Hex_'. $num;
	    $vector[$coord + 2] = 'Show_Registers';
		$vector[$coord + 32] = 'AltGr';
		$vector[$coord + 32] = 'AltGr_Lock';
		$vector[$coord + 32] = 'ShiftL';
		$vector[$coord + 32] = 'ShiftR_Lock'; # 32 => 0
	    $vector[$coord + 3] = 'Console_'. ($num + 24); # altgr + shift
		$vector[$coord + 48] = 'AltGr';
		$vector[$coord + 48] = 'AltGr_Lock';
		$vector[$coord + 48] = 'ShiftL';
		$vector[$coord + 48] = 'ShiftL_Lock'; # 48 => 32
	    $vector[$coord + 4] = 'F'. ($num + 24); # control
	    $vector[$coord + 4] = 'Show_State';
	    $vector[$coord + 5] = 'F'. ($num + 36); # control + shift
		$vector[$coord + 6] = 'Boot';
	    $vector[$coord + 6] = 'Console_'. ($num + 12); # control + altgr
	    $vector[$coord + 7] = 'Console_'. ($num + 24); # control+altgr+shift
	    $vector[$coord + 8] = 'Ascii_'. $num;
	    $vector[$coord + 8] = 'Console_'. $num; # alt
	    $vector[$coord + 8] = 'Decr_Console';
	    $vector[$coord + 8] = 'Incr_Console';
	    $vector[$coord + 8] = 'KeyboardSignal';
	    $vector[$coord + 8] = 'Show_Registers';
	    $vector[$coord + 9] = 'Console_'. ($num + 12); # alt + shift
	    $vector[$coord + 9] = 'Hex_A';
	    $vector[$coord + 9] = 'Hex_B';
	    $vector[$coord + 9] = 'Hex_C';
	    $vector[$coord + 9] = 'Hex_D';
	    $vector[$coord + 9] = 'Hex_E';
	    $vector[$coord + 9] = 'Hex_F';
	    $vector[$coord + 9] = 'Hex_'. $num;
			$vector[$coord] = $kp;
			$vector[$coord] = 'KP_0';
			$vector[$coord] = 'KP_1';
			$vector[$coord] = 'KP_2';
			$vector[$coord] = 'KP_3';
			$vector[$coord] = 'KP_4';
			$vector[$coord] = 'KP_5';
			$vector[$coord] = 'KP_6';
			$vector[$coord] = 'KP_7';
			$vector[$coord] = 'KP_8';
			$vector[$coord] = 'KP_9';
			$vector[$coord] = 'KP_Add';
			$vector[$coord] = 'KP_Comma';
			$vector[$coord] = 'KP_Divide';
			$vector[$coord] = 'KP_Enter';
			$vector[$coord] = 'KP_Multiply';
			$vector[$coord] = 'KP_Period';
			$vector[$coord] = 'KP_Subtract';
		    $vector[$coord ^ $mask ^ 0x02 ^ 0x10] = $vector[$coord];
		    $vector[$coord ^ $mask ^ 0x02] = $vector[$coord];
		    $vector[$coord ^ $mask ^ 0x10 ^ 0x02] = $vector[$coord];
		    $vector[$coord ^ $mask ^ 0x10] = $vector[$coord];
	    $vector[$coord ^ $mask] = $vector[$coord];
		&& ($vector[($coord + $mod) ^ $mask] eq 'VoidSymbol')) {
		$vector[$coord + $mod] = $vector[$coord];
	$vector[$coord] = $new_sym;
	    $vector[$coord] = 'VoidSymbol';
		$vector[$coord] = 'VoidSymbol';
	    @vector = ('F246', 'Break', 'F246', 'F246',
 	    @vector = flatten ($key);
	    @vector = flatten ($key);
	@vector = flatten ($key);
 	    @vector = ('Last_Console') x 64;
 	    @vector = ('Pause') x 64;
# @vector represents the xkb symbol for the particular key.  Bigger values
-v[erbose] [<lvl>]  Sets verbosity (1..10).  Higher values yield
		$verbosity = 5;
		$verbosity = $ARGV[0];
    'vertbar' => '2502',
    'vertconnector' => '2502',
    'voicedsound' => '309b',
    'VoidSymbol' => 'VoidSymbol',
    'voidsymbol' => 'VoidSymbol', # Is this recognised by X ?
    'vt' => '240b',
    'W' => '0057',
    'w' => '0077',
    'Wacute' => '1e82',
    'wacute' => '1e83',
	    warning "Can not find \"$block\" in \"$file\".\n";
#	    warning "Forbidden Unicode \"U+$kernelkeysym\"\n";
	    warning "No scan code for <$key> is defined.\n";
		warning sprintf ("Unicode U+%04x does not exist "
		    warning "Unknown key type $types_table{$key}\n";
	warning "Unknown X keysym \"$xkeysym\"\n";
    'Wcircumflex' => '0174',
    'wcircumflex' => '0175',
    'Wdiaeresis' => '1e84',
    'wdiaeresis' => '1e85',
    'Wgrave' => '1e80',
    'wgrave' => '1e81',
Where legal args are:
    while (<ACM>) {
while (@ARGV) {
    while (<FILE>) {
    while ($include_list) {
	    while ($list =~ /[^ ]/) {
	    while ($real_level > $#{$symbols_table{$key}[$real_group]}) {
    while (<RULES>) {
    while ($stream) {
    while ($stream =~ s/^(default|partial|hidden
    while ($stream && ($stream =~ s/^[^\}\{]*\{//)) {
    while ($string) {
    # Without this it would be possible to lock permanently
    # with quality $new_quality
    'WonSign' => '20a9',
                      )$/x) {
    'X' => '0058',
    'x' => '0078',
		# [ X1, X2, ... ]
    'Xabovedot' => '1e8a',
    'xabovedot' => '1e8b',
	    @xdirs = ($1, @xdirs);
    'XF86AudioForward' => 'VoidSymbol',
    'XF86AudioLowerVolume' => 'VoidSymbol',
    'XF86AudioMedia' => 'VoidSymbol',
    'XF86AudioMute' => 'VoidSymbol',
    'XF86AudioNext' => 'VoidSymbol',
    'XF86AudioPause' => 'VoidSymbol',
    'XF86AudioPlay' => 'VoidSymbol',
    'XF86AudioPrev' => 'VoidSymbol',
    'XF86AudioRaiseVolume' => 'VoidSymbol',
    'XF86AudioRecord' => 'VoidSymbol',
    'XF86AudioRewind' => 'VoidSymbol',
    'XF86AudioStop' => 'VoidSymbol',
    'XF86Back' => 'VoidSymbol',
    'XF86Battery' => 'VoidSymbol',
    'XF86Bluetooth' => 'VoidSymbol',
    'XF86Calculator' => 'VoidSymbol',
    'XF86_ClearGrab' => 'VoidSymbol',
    'XF86Close' => 'VoidSymbol',
    'XF86Copy' => 'VoidSymbol',
    'XF86Cut' => 'VoidSymbol',
    'XF86Display' => 'VoidSymbol',
    'XF86Documents' => 'VoidSymbol',
    'XF86DOS' => 'VoidSymbol',
    'XF86Eject' => 'VoidSymbol',
    'XF86Explorer' => 'VoidSymbol',
    'XF86Favorites' => 'VoidSymbol',
    'XF86Finance' => 'VoidSymbol',
    'XF86Forward' => 'VoidSymbol',
    'XF86HomePage' => 'VoidSymbol',
    'XF86KbdBrightnessDown' => 'VoidSymbol',
    'XF86KbdBrightnessUp' => 'VoidSymbol',
    'XF86KbdLightOnOff' => 'VoidSymbol',
    'XF86Launch1' => 'VoidSymbol',
    'XF86Launch2' => 'VoidSymbol',
    'XF86Launch3' => 'VoidSymbol',
    'XF86Launch4' => 'VoidSymbol',
    'XF86MailForward' => 'VoidSymbol',
    'XF86Mail' => 'VoidSymbol',
    'XF86MenuKB' => 'VoidSymbol',
    'XF86MonBrightnessDown' => 'VoidSymbol',
    'XF86MonBrightnessUp' => 'VoidSymbol',
    'XF86MyComputer' => 'VoidSymbol',
    'XF86New' => 'VoidSymbol',
    'XF86_Next_VMode' => 'VoidSymbol',
    'XF86Paste' => 'VoidSymbol',
    'XF86Phone' => 'VoidSymbol',
    'XF86PowerOff' => 'VoidSymbol',
    'XF86_Prev_VMode' => 'VoidSymbol',
    'XF86Reload' => 'VoidSymbol',
    'XF86Reply' => 'VoidSymbol',
    'XF86RotateWindows' => 'VoidSymbol',
    'XF86Save' => 'VoidSymbol',
    'XF86ScreenSaver' => 'VoidSymbol',
    'XF86ScrollDown' => 'VoidSymbol',
    'XF86ScrollUp' => 'VoidSymbol',
    'XF86Search' => 'VoidSymbol',
    'XF86Send' => 'VoidSymbol',
    'XF86Shop' => 'VoidSymbol',
    'XF86Sleep' => 'VoidSymbol',
    'XF86Suspend' => 'VoidSymbol',
    'XF86_Switch_VT_10' => 'Console_10',
    'XF86_Switch_VT_11' => 'Console_11',
    'XF86_Switch_VT_12' => 'Console_12',
    'XF86_Switch_VT_1' => 'Console_1',
    'XF86_Switch_VT_2' => 'Console_2',
    'XF86_Switch_VT_3' => 'Console_3',
    'XF86_Switch_VT_4' => 'Console_4',
    'XF86_Switch_VT_5' => 'Console_5',
    'XF86_Switch_VT_6' => 'Console_6',
    'XF86_Switch_VT_7' => 'Console_7',
    'XF86_Switch_VT_8' => 'Console_8',
    'XF86_Switch_VT_9' => 'Console_9',
    'XF86Tools' => 'VoidSymbol',
    'XF86TouchpadToggle' => 'VoidSymbol',
    'XF86_Ungrab' => 'VoidSymbol',
    'XF86WakeUp' => 'VoidSymbol',
    'XF86WebCam' => 'VoidSymbol',
    'XF86WLAN' => 'VoidSymbol',
    'XF86WWW' => 'VoidSymbol',
    'XF86Xfer' => 'VoidSymbol',
# XFree86 does not recognise these
	    xkb_block_list ($file_type, '');
	    xkb_definitions ($file_type);
	xkb_identifier() eq "xkb_". $file_type
	xkb_keycodes_definitions();
	xkb_symbols_definitions();
    $xkbsym_table{'ISO_First_Group'} = 'AltGr_Lock';
    $xkbsym_table{'ISO_First_Group_Lock'} = 'AltGr_Lock';
    $xkbsym_table{'ISO_Group_Latch'} = 'AltGr';
    $xkbsym_table{'ISO_Group_Lock'} = 'AltGr_Lock';
    $xkbsym_table{'ISO_Group_Shift'} = 'AltGr';
    $xkbsym_table{'ISO_Last_Group'} = 'AltGr_Lock';
    $xkbsym_table{'ISO_Last_Group_Lock'} = 'AltGr_Lock';
    $xkbsym_table{'ISO_Next_Group'} = 'AltGr_Lock';
    $xkbsym_table{'ISO_Next_Group_Lock'} = 'AltGr_Lock';
    $xkbsym_table{'ISO_Prev_Group'} = 'AltGr_Lock';
    $xkbsym_table{'ISO_Prev_Group_Lock'} = 'AltGr_Lock';
    $xkbsym_table{'Mode_switch'} = 'AltGr';
		    || $xkbsym_table{$symbol} ne 'NoSymbol'
			      && ($xkbsym_table{$xkeysym}
			 : ($xkeysym =~ /^U([0-9a-fA-F]+)/
			 : ($xkeysym =~ /^U([0-9a-fA-F]+)$/
    'Y' => '0059',
    'y' => '0079',
    'Yacute' => '00dd',
    'yacute' => '00fd',
    'Ybelowdot' => '1ef4',
    'ybelowdot' => '1ef5',
    'Ycircumflex' => '0176',
    'ycircumflex' => '0177',
    'ydiaeresis' => '00ff',
    'Ydiaeresis' => '0178',
    'yen' => '00a5',
    'Ygrave' => '1ef2',
    'ygrave' => '1ef3',
    'Yhook' => '1ef6',
    'yhook' => '1ef7',
    'Ytilde' => '1ef8',
    'ytilde' => '1ef9',
    'Z' => '005a',
    'z' => '007a',
    'Zabovedot' => '017b',
    'zabovedot' => '017c',
    'Zacute' => '0179',
    'zacute' => '017a',
    'Zcaron' => '017d',
    'zcaron' => '017e',
    'Zenkaku_Hankaku' => 'VoidSymbol', # Is this recognised by X ?
    'zerosubscript' => '2080',
    'zerosuperior' => '2070',
    'Zstroke' => '01b5',
    'zstroke' => '01b6',

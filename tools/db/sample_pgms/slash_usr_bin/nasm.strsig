0123456789
0123456789 
0123456789ABCDEF
:%02X%04X%02X
%08llX  %s
%08X %-*s
    %-10s%s
$_%1 $%1
16-bit addressing is not supported in 64-bit mode
%16llX  %16llX  %16llX  %08llX  
%16llX  %16llX  %s
%1,default
%1,generic
%1,nodaz
    %-23s %s (default %s)
%2,nojmp
32-bit ELF format does not support 64-bit relocations
64-bit addressing is only supported in 64-bit mode
%6d          
	6RtcZO"
8- or 16-bit relocations in ELF32 is a GNU extension
8- or 16-bit relocations in ELF is a GNU extension
.absolut
absolute
absolute=
absolute 1+.nolist
[absolute %2]
absolute address can not be RIP-relative
AD8,4,L.
addr %08x (seg %08x, wrt %08x)
addr <= s->start
    -a          don't preprocess (assemble only)
align:     
align 1-2+.nolist
align 1-2+.nolist nop
__ALIGN_16BIT_1B__ 0x90
__ALIGN_16BIT_2B__ 0x66,0x90
__ALIGN_16BIT_2B__ 0x89,0xf6
__ALIGN_16BIT_3B__ 0x0f,0x1f,0x00
__ALIGN_16BIT_3B__ 0x66,0x66,0x90
__ALIGN_16BIT_3B__ 0x8d,0x74,0x00
__ALIGN_16BIT_4B__ 0x0f,0x1f,0x40,0x00
__ALIGN_16BIT_4B__ 0x66,0x66,0x66,0x90
__ALIGN_16BIT_4B__ 0x8d,0xb4,0x00,0x00
__ALIGN_16BIT_5B__ 0x8d,0xb4,0x00,0x00,0x90
__ALIGN_16BIT_6B__ 0x8d,0xb4,0x00,0x00,0x89,0xff
__ALIGN_16BIT_7B__ 0x8d,0xb4,0x00,0x00,0x8d,0x7d,0x00
__ALIGN_16BIT_8B__ 0x8d,0xb4,0x00,0x00,0x8d,0xbd,0x00,0x00
__ALIGN_16BIT_GROUP__ 1
__ALIGN_16BIT_GROUP__ 4
__ALIGN_16BIT_GROUP__ 8
__ALIGN_32BIT_1B__ 0x90
__ALIGN_32BIT_2B__ 0x66,0x90
__ALIGN_32BIT_2B__ 0x89,0xf6
__ALIGN_32BIT_2B__ 0x8b,0xc0
__ALIGN_32BIT_3B__ 0x0f,0x1f,0x00
__ALIGN_32BIT_3B__ 0x66,0x66,0x90
__ALIGN_32BIT_3B__ 0x8d,0x04,0x20
__ALIGN_32BIT_3B__ 0x8d,0x76,0x00
__ALIGN_32BIT_4B__ 0x0f,0x1f,0x40,0x00
__ALIGN_32BIT_4B__ 0x66,0x66,0x66,0x90
__ALIGN_32BIT_4B__ 0x8d,0x44,0x20,0x00
__ALIGN_32BIT_4B__ 0x8d,0x74,0x26,0x00
__ALIGN_32BIT_5B__ 0x0f,0x1f,0x44,0x00,0x00
__ALIGN_32BIT_5B__ 0x8d,0x44,0x20,0x00,0x90
__ALIGN_32BIT_5B__ 0x90,0x8d,0x74,0x26,0x00
__ALIGN_32BIT_6B__ 0x66,0x0f,0x1f,0x44,0x00,0x00
__ALIGN_32BIT_6B__ 0x8d,0x80,0x00,0x00,0x00,0x00
__ALIGN_32BIT_6B__ 0x8d,0xb6,0x00,0x00,0x00,0x00
__ALIGN_32BIT_7B__ 0x0f,0x1f,0x80,0x00,0x00,0x00,0x00
__ALIGN_32BIT_7B__ 0x8d,0x04,0x05,0x00,0x00,0x00,0x00
__ALIGN_32BIT_7B__ 0x8d,0xb4,0x26,0x00,0x00,0x00,0x00
__ALIGN_32BIT_8B__ 0x0f,0x1f,0x84,0x00,0x00,0x00,0x00,0x00
__ALIGN_32BIT_GROUP__ 1
__ALIGN_32BIT_GROUP__ 4
__ALIGN_32BIT_GROUP__ 7
__ALIGN_32BIT_GROUP__ 8
__ALIGN_64BIT_1B__ 0x90
__ALIGN_64BIT_2B__ 0x66,0x90
__ALIGN_64BIT_3B__ 0x0f,0x1f,0x00
__ALIGN_64BIT_3B__ 0x66,0x66,0x90
__ALIGN_64BIT_4B__ 0x0f,0x1f,0x40,0x00
__ALIGN_64BIT_4B__ 0x66,0x66,0x66,0x90
__ALIGN_64BIT_5B__ 0x0f,0x1f,0x44,0x00,0x00
__ALIGN_64BIT_6B__ 0x66,0x0f,0x1f,0x44,0x00,0x00
__ALIGN_64BIT_7B__ 0x0f,0x1f,0x80,0x00,0x00,0x00,0x00
__ALIGN_64BIT_8B__ 0x0f,0x1f,0x84,0x00,0x00,0x00,0x00,0x00
__ALIGN_64BIT_GROUP__ 1
__ALIGN_64BIT_GROUP__ 4
__ALIGN_64BIT_GROUP__ 8
alignb 1-2+.nolist
__ALIGN_JMP_THRESHOLD__ -1
__ALIGN_JMP_THRESHOLD__ 16
__ALIGN_JMP_THRESHOLD__ != -1 && %$pad > __ALIGN_JMP_THRESHOLD__
__ALIGN_JMP_THRESHOLD__ %2
__ALIGN_JMP_THRESHOLD__ 8
alignment constraint `%s' is not a power of two
alignment constraint `%s' is not a valid number
alignment of %d (for section "%s") is not a power of two
alignmode 1-2.nolist
__ALIGNMODE__ %1,__ALIGN_JMP_THRESHOLD__
alignmode generic
`align' value conflicts with section start address
anonymous
a.out format cannot produce non-PC-relative PLT references
a.out format cannot produce PC-relative GOT references
a.out format does not support segment base references
a.out format does not support this use of WRT
`%%arg' missing argument parameter
`%%arg' missing size type parameter
argument to `absolute' segment attribute should be numeric
argument to `align' is not a power of two
argument to `align' is not numeric
argument to `valign' is not a power of two
as86 format does not support any special symbol types
as86 format does not support segment base references
ASG,R%X,%lX,+.
ASI%X,%lX,%lX,+.
ASI%X,R%X,%lX,+.
ASL%X,%lX.
ASN%X,%lX,%lX,+.
ASN%X,R%X,%lX,+.
assertion %s failed at %s:%d
%%assign %%$localsize %%$localsize+%d
ASS%X,%X.
at 1-2+.nolist
ATI%X,T%X.
ATI%X,%X.
ATN%X,T%X.
ATN%X,%X.
attempt to assemble code in [ABSOLUTE] space
attempt to assemble code in ABSOLUTE space
attempt to assemble code in section %d: defaulting to `.text'
attempt to assemble code in segment %d: defaulting to `.text'
attempt to change section type from nobits to progbits
attempt to change section type from progbits to nobits
attempt to declare local symbol `%s' as global
attempt to define a local label as a common variable
attempt to define a local label before any non-local labels
attempt to initialize memory in a nobits section: ignored
attempt to initialize memory in BSS section `%s': ignored
attempt to initialize memory in the BSS section: ignored
attempt to redefine reserved sectionname `%s'
attempt to reserve non-constant quantity of BSS space
bad syntax for EQU
bb0_reset
bb1_reset
beroset-p-592-invalid effective address
beroset-p-603-invalid effective address
beroset-p-630-invalid effective address
beroset-p-637-invalid effective address
beroset-p-650-invalid effective address
beroset-p-663-invalid effective address
binary format does not support any special symbol types
binary output format does not support common variables
binary output format does not support external references
binary output format does not support segment base references
__BITS__
[bits %1]
[bits 16]
bits 1+.nolist
[bits 32]
[bits 64]
bizarre 386 segment register received
bizarre 8086 segment register received
bizarre relocation size %d
Borland Debug Records
braces do not enclose all of macro parameter
BSS segments may not be initialized
byte value exceeds bounds
C0105,%02X%s.
  %c %-10s%s
cannot apply SEG to a non-relocatable value
cannot combine `start' and `follows' section attributes
cannot combine `vstart' and `vfollows' section attributes
cannot compute vstart for section %s
cannot mix real and virtual attributes in nobits section (%s)
cannot open file `%s' for error messages
cannot specify 32-bit segment on processor below a 386
cannot specify 64-bit segment on processor below an x86-64
cannot use high register in drex instruction
cannot use high register in rex instruction
cannot use high register in vex instruction
cannot use non-relocatable expression as ABSOLUTE address
cannot use relocatable expression as common-variable element size
cannot use relocatable expression as symbol size
can't find label `%s' on pass two
can't find segment %d
Can't find valid values for all labels after %d passes, giving up.
character constant too long
circular vfollows path detected
class:     
cmpxchg16b
cmpxchg486
cmpxchg8b
CO0,%02X%s.
CO100,06ENDSYM.
CO101,07ENDHEAD.
code directed to nonexistent segment?
COFF format does not support 16-bit relocations
COFF format does not support any special symbol types
COFF format does not support non-32-bit relocations
COFF format does not support segment base references
COFF format does not support WRT types
COFF (i386) object files (e.g. DJGPP for DOS)
COFF section names limited to 8 characters: truncating
comma, colon or end of line expected
comma expected after operand %d
comma or end of line expected
.comment
[common %1]
common 1-*.nolist
condition code `%s' is not invertible
conflicting address size specifications
context-local macro expansion fall-through (automatic searching of outer contexts) will be deprecated starting in NASM 2.10, please see the NASM Manual for more information
[cpu %1]
cpu 1+.nolist
cpu_read
cpu_write
cs segment base generated, but will be ignored in 64-bit mode
__ctype_b_loc
__ctype_tolower_loc
__ctype_toupper_loc
cvtpd2pi
cvtpi2pd
cvtpi2ps
cvtps2pi
cvttpd2pi
cvttps2pi
cyclic macro references
__DATE_NUM__=%Y%m%d
__DATE__="%Y-%m-%d"
db __ALIGN_%[__BITS__]BIT_%[%$pad]B__
dbgdirective [%s] value [%s]
dbglabel %s := %08x:%016llx %s (%d)%s%s
dbglinenum %s(%d) := %08x
%d+%d %s
.debug_abbrev
.debug_aranges
.debug_frame
DEBUG identifier too long
.debug_info
.debug_line
.debug_loc
.debug_pubnames
[default %1]
default 1+.nolist
default WRT specification for external `%s' unresolved
%%define %s (%s-%d)
%%define %s (%s+%d)
defining with name in expansion
deflabel %s := %08x:%016llx %s (%d)%s%s
denormal floating-point constant
%$dep %1
%? %$dep,%2
`%%depend' expects a file name
directive [%s] value [%s] (pass %d)
displacement size ignored on absolute address
division by zero
division operator may only be applied to scalar values
    -D<macro>[=<value>] pre-defines a macro
.drectve
ds segment base generated, but will be ignored in 64-bit mode
DT%04d%02d%02d%02d%02d%02d.
ELF32 (i386) dwarf debug format for Linux/Unix
ELF32 (i386) object files (e.g. Linux)
ELF32 (i386) stabs debug format for Linux/Unix
ELF64 format does not support segment base references
ELF64 format does not support this use of WRT
ELF64 requires ..gotoff references to be absolute
ELF64 requires ..gotoff references to be qword
ELF64 requires ..gotoff references to be qword absolute
ELF64 requires ..gottpoff references to be dword
ELF64 (x86-64) dwarf debug format for Linux/Unix
ELF64 (x86_64) object files (e.g. Linux)
ELF64 (x86-64) stabs debug format for Linux/Unix
ELF format cannot produce non-PC-relative PLT references
ELF format cannot produce PC-relative GOT references
ELF format does not support segment base references
ELF format does not support this use of WRT
ELF (short name for ELF32)
`%%elif' after `%%else' ignored
%elifctx
%elifdef
%elifempty
%elifenv
%elifidn
%elifidni
%elifmacro
%elifnctx
%elifndef
%elifnempty
%elifnenv
%elifnid
%elifnidn
%elifnidni
%elifnmacro
%elifnnum
%elifnstr
%elifntoken
%elifnum
%elifstr
%eliftoken
`%%else' after `%%else' ignored.
`%%else': no matching `%%if'
`%%endif': no matching `%%if'
%endmacro
end of file while still defining macro `%s'
end of file while still in %%rep
`%%endrep': no matching `%%rep'
endstruc 0.nolist
entry point is not in this module
    -E (or -e)  preprocess only (writes output to stdout by default)
EQU not preceded by label
erm... 4 byte segment base ref?
errors made it through from pass one
es segment base generated, but will be ignored in 64-bit mode
%exitmacro
`%%exitmacro' not within `%%macro' block
%exitrep
`%%exitrep' not within `%%rep' block
expected `%%endif' before end of file
`:' expected in special symbol text for `%s'
`)' expected to terminate macro template
expecting `('
expecting `)'
expecting floating-point number
expecting section name for `follows' attribute
expecting section name for `vfollows' attribute
expecting string
exponent
-export:
[export %1]
export 1+.nolist
`export' directive requires export name
expression syntax error
[extern %1]
extern 1-*.nolist
  extern and global variables
failure to define FLAT?!
far-absolute relocations not supported by OBJ format
fcmovnbe
@feat.00
    -F format   select a debugging format
__FILE__
file name already ends in `%s': output will be in `nasm.out'
file name already has no extension: output will be in `nasm.out'
file name too long
file `%s' is both input and output file
flat-form binary files (e.g. DOS .COM, .SYS)
[float %1]
__float128h__
float128h(x)	__float128h__(x)
__float128l__
float128l(x)	__float128l__(x)
__float16__
float16(x)	__float16__(x)
float 1-*.nolist
__float32__
float32(x)	__float32__(x)
__float64__
float64(x)	__float64__(x)
__float8__
__float80e__
float80e(x)	__float80e__(x)
__float80m__
float80m(x)	__float80m__(x)
float8(x)	__float8__(x)
__FLOAT_DAZ__ daz
__FLOAT_DAZ__ nodaz
float-denorm
__FLOAT__ __FLOAT_DAZ__,__FLOAT_ROUND__
floating-point constant: `%c' is invalid character
floating-point constant encountered in DY instruction
floating-point constant encountered in unknown instruction
floating-point constant significand contains more than %i digits
floating point denormal
floating point overflow
floating point underflow
float-overflow
__FLOAT_ROUND__ down
__FLOAT_ROUND__ near
__FLOAT_ROUND__ up
__FLOAT_ROUND__ zero
float-toolong
float-underflow
follows:   
For a list of debug formats, use -f <form> -y.
For a list of valid output formats, use -hf.
four-bit argument exceeds bounds
__fprintf_chk
__fread_chk
fxrstor64
fxsave64
    -g          generate debug information in selected format
GLIBC_2.0
GLIBC_2.1
GLIBC_2.3
GLIBC_2.3.4
GLIBC_2.4
GLIBC_2.7
[global %1]
global 1-*.nolist
__gmon_start__
gnu-elf-extensions
..gotoff
`..gotoff' relocations require a non-global symbol in the section
..gotpcrel
..gottpoff
[group %1]
group 1+.nolist
group `%s' contains undefined segment `%s'
group `%s' defined twice
hashtbl.c
hint_nop0
hint_nop1
hint_nop10
hint_nop11
hint_nop12
hint_nop13
hint_nop14
hint_nop15
hint_nop16
hint_nop17
hint_nop18
hint_nop19
hint_nop2
hint_nop20
hint_nop21
hint_nop22
hint_nop23
hint_nop24
hint_nop25
hint_nop26
hint_nop27
hint_nop28
hint_nop29
hint_nop3
hint_nop30
hint_nop31
hint_nop32
hint_nop33
hint_nop34
hint_nop35
hint_nop36
hint_nop37
hint_nop38
hint_nop39
hint_nop4
hint_nop40
hint_nop41
hint_nop42
hint_nop43
hint_nop44
hint_nop45
hint_nop46
hint_nop47
hint_nop48
hint_nop49
hint_nop5
hint_nop50
hint_nop51
hint_nop52
hint_nop53
hint_nop54
hint_nop55
hint_nop56
hint_nop57
hint_nop58
hint_nop59
hint_nop6
hint_nop60
hint_nop61
hint_nop62
hint_nop63
hint_nop7
hint_nop8
hint_nop9
%iassign
%idefine
%idefstr
%ideftok
identifier expected after COMMON
identifier expected after DEBUG
identifier expected after EXTERN
identifier expected after GLOBAL
identifier length exceed %i bytes
IEEE-695 (LADsoft variant) object file format
IEEE format can only handle 2-byte segment base references
iend 0.nolist
%ifempty
%ifmacro
%ifnempty
%ifnidni
%ifnmacro
%ifntoken
%iftoken
ignoring unknown section attribute: "%s"
..imagebase
[import %1]
import 1+.nolist
`import' directive requires symbol name and library name
impossible combination of address sizes
<incbin>
incbin 1-2+.nolist 0
`incbin' expects a file name
`incbin': more than three parameters
`incbin': second parameter is non-numeric
`incbin': third parameter is non-numeric
`incbin': unable to open file `%s'
`incbin': unable to seek on file `%s'
`incbin': unexpected EOF while reading file `%s'
%include
`%%include' expects a file name
incompatible section attributes ignored on redeclaration of section `%s'
in-file index for section %d not found
Inf		__Infinity__
__infinity__
info: assembly required 1+%d+1 passes
instruction cannot use high registers
instruction has conflicting prefixes
instruction has conflicting segment overrides
instruction has redundant prefixes
instruction not supported in %d-bit mode
instruction->times < 0 (%ld) in assemble()
integer supplied to a DT, DO or DY instruction
Intel hex
interminable macro recursion
internal
internal error elf64-hpa-871
internal error elf64-hpa-903
internal error: unknown FP constant token `%s'
internal errror: empty string passed to float_const
internal instruction table corrupt: instruction code \%o (0x%02X) given
intra-section OUT_REL2ADR
intra-section OUT_REL4ADR
intra-segment OUT_REL1ADR
intra-segment OUT_REL2ADR
intra-segment OUT_REL4ADR
intra-segment OUT_REL8ADR
invalid ABI version number (valid: 0 to 255)
invalid ABSOLUTE address in pass two
invalid access to an external symbol
invalid alignment value %d
Invalid amount of bytes (%d) for offset?!
Invalid attribute value specified in `section' directive.
invalid character `%c' in packed BCD constant
invalid character in floating-point constant %s: '%c'
invalid combination of opcode and operands
invalid effective address
invalid ..got reference
invalid instruction prefix
invalid operand passed to op_rexflags()
invalid operand passed to regflag()
invalid operand passed to regval()
invalid operands in non-64-bit mode
Invalid operand size prefix
)invalid operand size specification
invalid operand type
invalid option to `-w'
invalid parameter to [%s] directive
invalid right-hand operand to WRT
invalid section name %s
invalid segment override
invalid size specification in effective address
invalid size specified in COMMON declaration
Invalid size type for `%%arg' missing directive
Invalid size type for `%%local' missing directive
invalid %s prefix
invalid string for transform
invalid syntax in `section' directive
invalid use of FAR operand specifier
Invalid value %d passed to prefix_slot()
invalid warning id in WARNING directive
invalid warning `%s'
_IO_putc
_IO_stdin_used
    -I<path>    adds a pathname to the include file path
%irmacro
is_power2(size)
istruc 1.nolist
%ixdefine
jmp %$end
Jul 15 2011
label alone on a line without a colon might be in error
label or instruction expected at start of line
labels alone on lines without trailing `:'
labels.c
label size exceeds %d bytes
LADsoft Debug Records
lcomment
len <= 255
length:    %16llX
len <= PERMTS_SIZE
libc.so.6
__libc_start_main
/lib/ld-linux.so.2
[library %1]
library 1+.nolist
__LINE__
%%line %d+%d %s
linedebug
%%line %d %.*s
`%%line' expects line increment
`%%line' expects line number
lineno directed to nonexistent segment?
Linux a.out does not support symbol size information
Linux a.out format does not support any use of WRT
Linux a.out object files
Linux as86 (bin86 version 0.3) object files
listing.c
..@%llu.
loadall286
`%%local' missing argument parameter
`%%local' missing size type parameter
localtime
.lrodata
LR(%s,%X).
L%X,10,/
Mach-O 64-bit format does not support 32-bit absolute addresses
Mach-O format does not support section base references
Mach-O format does not support this use of WRT
MACHO (short name for MACHO32)
macro call expects terminating `)'
macro calls with wrong parameter count
macro-defaults
macro parameter %d is not a condition code
macro-params
macro-selfref
macro `%s' exists, but not taking %d parameters
macros with more default than optional parameters
map file already specified
maskmovq
MBFNASM,%02X%s.
    -MD <file>  assemble and generate dependencies
__memcpy_chk
    -MF <file>  set Makefile dependency file
    -MG         d:o, missing files assumed generated
    -M          generate Makefile dependencies on stdout
Microsoft Win32 (i386) object files
Microsoft Win64 (x86-64) object files
minimum parameter count exceeds maximum
mismatch in operand sizes
[module %1]
module 1+.nolist
more than one input file specified
Motorola S-records
    -MP         emit phony target
    -MQ <file>  dependency target name (quoted)
MS-DOS 16-bit/32-bit OMF object files
    -MT <file>  dependency target name
name size exceeds %d bytes
NaN		__QNaN__
NASM 2.09.10
__NASM_CDecl__ 1
__NASMDEFSEG
__NASM_MAJOR__ 2
- NASM Map file 
__NASM_MINOR__ 9
NASM Output format debug dump
__NASM_PATCHLEVEL__ 0
__NASM_SUBMINOR__ 10
__NASM_VER__ "2.09.10"
__NASM_VERSION_ID__ 002090A00h
NASM version %s compiled on %s%s
NetBSD/FreeBSD a.out object files
new segment declared without type code
new type: %s(%X)
NeXTstep/OpenStep/Rhapsody/Darwin/MacOS X (i386) object files
NeXTstep/OpenStep/Rhapsody/Darwin/MacOS X (x86_64) object files
NI%X,%02X%s.
NN%X,%02X%s.
nobits    
no input file specified
no instruction for this cpu level
non-absolute expression not permitted as argument %d
non-constant argument supplied to TIMES
non-constant BSS size in pass two
non-constant value given to `%%rep'
non-constant value given to `%%rotate'
non-constant value given to `%s'
non-constant value given to `%%%sassign'
non-constant value given to `%%substr`
nonexistent environment variable `%s'
non-string passed to `%%strcat' (%d)
no operand for data declaration
No or invalid offset specified in ORG directive.
---- No Section 
no sections?
no size specified in COMMON declaration
no special symbol features supported here
not defined
No value given to attribute in `section' directive
NUL character in `%s' directive
NUL character in %! string
Null debug format
number-overflow
numeric constant does not fit
numeric constant %s does not fit in 64 bits
NX%X,%02X%s.
                -O0: No optimization (default)
                -O1: Minimal optimization
OBJ: 4-byte segment base fixup got through sanity check
OBJ format cannot handle complex dword-size segment base references
OBJ format can only handle 16- or 32-byte relocations
OBJ format does not support alignment of 8: rounding up to 16
OBJ format does not support alignment of %d: rounding up to 256
OBJ format does not support alignment of %d: rounding up to 4096
`obj' output driver does not support %d-bit relocations
OBJ supports no special symbol features for this symbol type
    -O<digit>   optimize branch offsets
oOfpPdDiIlFXuUZwW
operand %d: expression is not simple or relocatable
operand size mismatch: 'wrt ..imagebase' is a 32-bit operand
operation size not specified
`^' operator may only be applied to scalar values
`~' operator may only be applied to scalar values
`|' operator may only be applied to scalar values
`!' operator may only be applied to scalar values
`&' operator may only be applied to scalar values
option `-%c' requires an argument
option `-M%c' requires a parameter
            [options...] [--] filename
option `--%s' requires an argument
[org %1]
org 1+.nolist
org value must be a critical expression
    or nasm -v   for version info
orphan-labels
[osabi %1]
osabi 1+.nolist
`osabi' directive requires a parameter
OUT_ADDRESS with size > 8
out of memory
Output file:  %s
__OUTPUT_FORMAT__=%s
output/outbin.c
output/outelf32.c
output/outobj.c
OUT_RAWDATA with other than NO_SEG
out to %x, len = %llu: 
overflow in floating-point constant
overlay=
                -Ox: Multipass optimization (recommended)
packed BCD requires an 80-bit format
packed BCD truncated to 18 digits
%$pad > 0
%$pad (((%1) - (($-$$) % (%1))) % (%1))
%$pad %$pad % __ALIGN_%[__BITS__]BIT_GROUP__
parameter identifier expected
parser: expecting ]
parser: instruction expected
__PASS__
pass0 == 0
%pathsearch
`%%pathsearch' expects a file name
`%%pathsearch' expects a macro identifier as first parameter
pcomment
pentiumpro
    -P<file>    pre-includes a file
pfrcpit1
pfrcpit2
pfrsqit1
pfrsqrtv
phase error detected at end of assembly.
pmachriw
pmulhriw
pmulhrwa
pmulhrwc
`%%pop' in wrong context: %s, expected %s
__POSIX_TIME__=%lld
posn >= 0
posn + len <= s->datalen
posn <= s->datalen
Possible causes: recursive EQUs, macro abuse.
prefetch
prefetchnta
prefetcht0
prefetcht1
prefetcht2
prefetchw
--prefix,--postfix
preprocessor directive `%s' not yet implemented
prescott
__printf_chk
progbits
progbits  
-- Program origin 
program origin redefined
protected
__qnan__
QNaN		__QNaN__
r10l r10b
r11l r11b
r12l r12b
r13l r13b
r14l r14b
r15l r15b
r8l  r8b
r9l  r9b
raw data = 
__rawmemchr
r->bytes <= 8
rdfsbase
rdf segment numbers not allocated as expected (%d,%d,%d)
rdgsbase
reached compiled-in maximum segment limit (%d)
reached maximum recursion depth of %i
Real              Virtual           Name
redefining multi-line macro `%s'
register size specification ignored
rel1adr %02x (seg %08x)
rel2adr %04x (seg %08x)
rel4adr %08x (seg %08x)
rel8adr %016llx (seg %08x)
relative call to absolute address not supported by IEEE format
relative call to absolute address not supported by OBJ format
Relocatable Dynamic Object File Format v2.0
Relocation type not supported by output format
`%%rep' expects a repeat count
`%%rep' value exceeds limit
`%%rep' without `%%endrep' within expansion of macro `%s'
<res %08llX>
resb (((%1) - (($-$$) % (%1))) % (%1))
reserved.
resident
response files should contain command line parameters, one per line.
`%%rotate' invoked outside a macro call
`%%rotate' invoked within macro without parameters
`%%rotate' missing rotate count
R%X,%X,+
R%X,%X,+,L%X,+,L%X,-
R%X,%X,+,L%X,+,%X,-
R%X,%X,+,P,-,%X,-
[safeseh %1]
safeseh 1.nolist
`safeseh' directive requires valid symbol
`%s': already defining a macro
`%%%sassign' expects a macro identifier
SA%X,%lX.
S%c%02X%0*X
`%s': context-local macro expansion fall-through
`%s': context stack is empty
`%s': context stack is only %d level%s deep
%s(%d) : 
%s data exceeds bounds
(%s:%d) %s
__SECT__
__SECT__ [absolute %1]
sectalign
[sectalign %1]
sectalign %1
sectalign 1.nolist
__SECTALIGN_ALIGN_UPDATES_SECTION__ 0
__SECTALIGN_ALIGN_UPDATES_SECTION__ 1
__SECTALIGN_ALIGN_UPDATES_SECTION__ = 1
section 1+.nolist
section alignment %lld is not a power of two
section attributes ignored on redeclaration of section `%s'
section attribute value must be a critical expression
section_name on init: returning %d
section_name %s (pass %d): returning %d
sections
---- Section %s 
section %s begins before program origin
section %s beings before program origin
-- Sections (detailed) 
section %s follows an invalid or unknown section (%s)
section "%s" has already been specified with alignment %d, conflicts with new alignment of %d
sections %s and %s can't both follow section %s
sections %s and %s overlap!
sections %s ~ %s and %s overlap!
-- Sections (summary) 
section start address redefined
section %s vfollows unknown section (%s)
section virtual start address (vstart) redefined
__SECT__ [section %1]
__SECT__ [section .text]
__SECT__ [segment %1]
seg_alloc() returned odd number
SEG applied to something which is already a segment base
segment 1+.nolist
segment alignment should be numeric
segment alignment `%s' is not power of two
segment attributes specified on redeclaration of segment
segment attributes specified on redeclaration of segment: ignoring
segment name `%s' not recognized
Segment of a rel not supported in ieee_write_fixup
segments
segment != segto
segment `%s' is already part of a group: first one takes precedence
segment `%s' requires more alignment than OBJ format supports
segr6 and segr7 cannot be used as prefixes
`%s': element-size specifications only apply to common variables
set alignment (%d) for segment (%d)
`%s' expects a context identifier
`%s' expects a macro identifier
`%s' expects a macro identifier as first parameter
`%s' expects a macro name
`%s' expects a parameter count
`%s' expects a parameter count after `-'
`%s' expects a parameter count or nothing
`%s' expects context identifiers
`%s' expects environment variable names
`%s' expects macro identifiers
`%s' expects two comma-separated arguments
`%s': `far' keyword may only be applied to common variables
shift operator may only be applied to scalar values
short jump is out of range
.shstrtab
signed byte value exceeds bounds
signed dword immediate exceeds bounds
significand
single-line macro `%s' defined both with and without parameters
`%s' is not a valid segment size; must be 16, 32 or 64
size <= 8
(size_t)(q-nstr) == qlen+3
`%%{%s}': macro parameters out of range
smartalign
smintold
`%s': more than one comma on line
%s must be followed by a string constant
__snan__
SNaN		__SNaN__
`%s': no matching `%%if'
`%s': not defining a macro
`%s': not in a macro call
%s not supported in preprocess-only mode
__snprintf_chk
`%s': operands differ by a non-scalar
Source file:  %s
Source of WRT must be an offset
%s output format does not support 64-bit code
`%s': parameter identifier expected
specified segment not supported by rdf output format
__sprintf_chk
    -s          redirect error messages to stdout
`%s` requires string as second parameter
(s->rpos % s->elem_len) == 0
s->rptr + len <= s->datalen
ss segment base generated, but will be ignored in 64-bit mode
.stabstr
__stack_chk_fail
%stacksize
`%%stacksize' invalid size type
`%%stacksize' missing size parameter
standard COFF does not support informational sections
standard COFF does not support read-only data sections
standard COFF does not support section alignment specification
start:     %16llX
`start' address conflicts with section alignment
Start address records are incorrect
start_of_program
strange segment conditions in COFF driver
strange segment conditions in ELF driver
strange segment conditions in IEEE driver
strange segment conditions in OBJ driver
strange value %d passed to float_const
strcasecmp
__strcat_chk
`%%strcat' expects a macro identifier as first parameter
__strcpy_chk
strftime
`%%strlen' expects a macro identifier as first parameter
`%%strlen` requires string as second parameter
strncasecmp
__strncpy_chk
struc 1-2.nolist 0
%$strucname:
%$strucname %1
%{$strucname}_size equ ($-%$strucname)
%$strucstart:
ST%X,A,%02X%s.
ST%X,%c,%02X%s.
`%%substr' expects a macro identifier as first parameter
`%%substr` requires string as second parameter
s->wpos == s->blk_len
(s->wpos % s->elem_len) == 0
symbol references
-- Symbols 
symbol `%s': GLOBAL directive after symbol definition is an experimental feature
symbol `%s' redefined
symbol `%s%s' not defined before use
symbol `%s%s' undefined
symbol type conflict - EXTERN cannot be EXPORT
symbol type conflict - GLOBAL cannot be IMPORT
symdebug
Syntax error processing `%%arg' directive
Syntax error processing `%%local' directive
sysenter
t4<`tp<"t,
target of WRT must be a section 
    -t          assemble in SciTech TASM compatible mode
text section not found
tF<#tB<~t><"
<"tG<'tC<`t?
<(tg<)tK<'t
The Mach-O format does not (yet) support forward reference fixups.
The Mach-O output format does not support any special symbol types
The Netwide Assembler 2.09.10
  this options prepend or append the given argument to all
__TIME__="%H:%M:%S"
__TIME_NUM__=%H%M%S
times (((%1) - (($-$$) % (%1))) % (%1)) %2
times (((%1) - (($-$$) % (%1))) % (%1)) nop
times (%1-%$strucname)-($-%$strucstart) db 0
times (%$pad / __ALIGN_%[__BITS__]BIT_GROUP__)         db __ALIGN_%[__BITS__]BIT_%[__ALIGN_%[__BITS__]BIT_GROUP__]B__
times %{$strucname}_size-($-%$strucstart) db 0
TIMES value %lld is negative
<"tK<'tG<`tC
too many default macro parameters
too many digits in floating-point number
too many periods in floating-point constant
Too many relocations (%d) for section `%s'
too many sections (>255) - clipped by fileindex
Trace of all info passed to debug stage
Trace of all info passed to output stage
trailing garbage after `%%clear' ignored
trailing garbage after `%%depend' ignored
trailing garbage after `%%else' ignored
trailing garbage after `%%endif' ignored
trailing garbage after expression ignored
trailing garbage after %%ifmacro ignored
trailing garbage after `%%include' ignored
trailing garbage after macro name ignored
trailing garbage after `%%pathsearch' ignored
trailing garbage after `%s' ignored
trailing garbage after `%%use' ignored
treat warnings as errors
t*< t&<	t"
type `nasm -h' for help
TY%X,20,%X,%lX.
u0<_t,<.t(<?t$<@t 
u4<_t0<.t,<?f
ug<_tc<.t_<?
    -U<macro>   undefines a macro
unable to determine segment base
unable to find a suitable global symbol for this reference
unable to multiply two non-scalar objects
unable to open include file `%s'
unable to open input file `%s'
unable to open listing file `%s'
unable to open map file `%s'
unable to open output file `%s'
unable to open response file `%s'
unable to parse parameter count `%s'
unable to write dependency file `%s'
`%%undef' expects a macro identifier
underflow in floating-point constant
%unimacro
uninitialised space declared in non-BSS section `%s': zeroing
uninitialized space declared in non-BSS section `%s': zeroing
uninitialized space declared in %s section: zeroing
unknown alignment mode: %1
unknown 'cpu' type
unknown dependency option `-M%c'
unknown 'float' directive: %s
unknown optimization option -O%c
unknown or missing alignment value "%s" specified for section "%s"
unknown output type?
unknown preprocessor directive `%s'
unknown section attribute %s for section %s
Unknown section attribute '%s' ignored on declaration of section `%s'
unknown `%%use' package: %s
%unmacro
unrecognised directive [%s]
unrecognised export qualifier `%s'
unrecognised option `-%c'
unrecognised option `--%s'
unrecognised output format `%s' - use -hf for a list
unrecognised RDF segment type (%s)
unrecognised segment value in ieee_write_fixup
unrecognised segment value in obj_write_fixup
unrecognised special symbol `%s'
unrecognised symbol type `%.*s'
unrecognised symbol type `%s'
unrecognised WRT value in ieee_write_fixup
unrecognised WRT value in obj_write_fixup
unrecognized debug format `%s' for output format `%s'
unrecognized error reporting format `%s'
unrecognized export qualifier `%s'
unrecognized special symbol `%s'
unsigned byte value exceeds bounds
Unsupported non-32-bit ELF relocation
Unsupported non-32-bit Macho-O relocation [2]
unsupported relocation type %d
unterminated %[ construct
unterminated %{ construct
unterminated %s function
unterminated string
unterminated %! string
uppercase
uppercase 0+.nolist
[uppercase %1]
usage: nasm [-@ response file] [-o outfile] [-f format] [-l listfile]
use16 0.nolist
use32 0.nolist
use64 0.nolist
__USE_ALTREG__
`%%use' expects a package name
__USE_FP__
__USE_SMARTALIGN__
using 8- or 16-bit relocation in ELF32, a GNU extension
__UTC_DATE_NUM__=%Y%m%d
__UTC_DATE__="%Y-%m-%d"
__UTC_TIME__="%H:%M:%S"
__UTC_TIME_NUM__=%H%M%S
__utf16__
__utf32__
u,<_t(<.t$<?f
u-<_t)<.t%<?t!<@t
vaddsubpd
vaddsubps
vaesdeclast
vaesenclast
vaeskeygenassist
valid debug formats for '%s' output format are ('*' denotes default):
valid osabi numbers are 0 to 255
valid output formats for -f are (`*' denotes default):
valign:    
`valign' value conflicts with `vstart' address
value following comma must be numeric
Value     Name
value referenced by FAR is not relocatable
value `%s' for `parm' is non-numeric
vblendpd
vblendps
vblendvpd
vblendvps
vbroadcastf128
vbroadcastsd
vbroadcastss
vcmpeq_ospd
vcmpeq_osps
vcmpeq_ossd
vcmpeq_osss
vcmpeqpd
vcmpeqps
vcmpeqsd
vcmpeqss
vcmpeq_uqpd
vcmpeq_uqps
vcmpeq_uqsd
vcmpeq_uqss
vcmpeq_uspd
vcmpeq_usps
vcmpeq_ussd
vcmpeq_usss
vcmpfalse_oqpd
vcmpfalse_oqps
vcmpfalse_oqsd
vcmpfalse_oqss
vcmpfalse_ospd
vcmpfalse_osps
vcmpfalse_ossd
vcmpfalse_osss
vcmpfalsepd
vcmpfalseps
vcmpfalsesd
vcmpfalsess
vcmpge_oqpd
vcmpge_oqps
vcmpge_oqsd
vcmpge_oqss
vcmpge_ospd
vcmpge_osps
vcmpge_ossd
vcmpge_osss
vcmpgepd
vcmpgeps
vcmpgesd
vcmpgess
vcmpgt_oqpd
vcmpgt_oqps
vcmpgt_oqsd
vcmpgt_oqss
vcmpgt_ospd
vcmpgt_osps
vcmpgt_ossd
vcmpgt_osss
vcmpgtpd
vcmpgtps
vcmpgtsd
vcmpgtss
vcmple_oqpd
vcmple_oqps
vcmple_oqsd
vcmple_oqss
vcmple_ospd
vcmple_osps
vcmple_ossd
vcmple_osss
vcmplepd
vcmpleps
vcmplesd
vcmpless
vcmplt_oqpd
vcmplt_oqps
vcmplt_oqsd
vcmplt_oqss
vcmplt_ospd
vcmplt_osps
vcmplt_ossd
vcmplt_osss
vcmpltpd
vcmpltps
vcmpltsd
vcmpltss
vcmpneq_oqpd
vcmpneq_oqps
vcmpneq_oqsd
vcmpneq_oqss
vcmpneq_ospd
vcmpneq_osps
vcmpneq_ossd
vcmpneq_osss
vcmpneqpd
vcmpneqps
vcmpneqsd
vcmpneqss
vcmpneq_uqpd
vcmpneq_uqps
vcmpneq_uqsd
vcmpneq_uqss
vcmpneq_uspd
vcmpneq_usps
vcmpneq_ussd
vcmpneq_usss
vcmpngepd
vcmpngeps
vcmpngesd
vcmpngess
vcmpnge_uqpd
vcmpnge_uqps
vcmpnge_uqsd
vcmpnge_uqss
vcmpnge_uspd
vcmpnge_usps
vcmpnge_ussd
vcmpnge_usss
vcmpngtpd
vcmpngtps
vcmpngtsd
vcmpngtss
vcmpngt_uqpd
vcmpngt_uqps
vcmpngt_uqsd
vcmpngt_uqss
vcmpngt_uspd
vcmpngt_usps
vcmpngt_ussd
vcmpngt_usss
vcmpnlepd
vcmpnleps
vcmpnlesd
vcmpnless
vcmpnle_uqpd
vcmpnle_uqps
vcmpnle_uqsd
vcmpnle_uqss
vcmpnle_uspd
vcmpnle_usps
vcmpnle_ussd
vcmpnle_usss
vcmpnltpd
vcmpnltps
vcmpnltsd
vcmpnltss
vcmpnlt_uqpd
vcmpnlt_uqps
vcmpnlt_uqsd
vcmpnlt_uqss
vcmpnlt_uspd
vcmpnlt_usps
vcmpnlt_ussd
vcmpnlt_usss
vcmpordpd
vcmpordps
vcmpord_qpd
vcmpord_qps
vcmpord_qsd
vcmpord_qss
vcmpordsd
vcmpord_spd
vcmpord_sps
vcmpordss
vcmpord_ssd
vcmpord_sss
vcmptruepd
vcmptrueps
vcmptruesd
vcmptruess
vcmptrue_uqpd
vcmptrue_uqps
vcmptrue_uqsd
vcmptrue_uqss
vcmptrue_uspd
vcmptrue_usps
vcmptrue_ussd
vcmptrue_usss
vcmpunordpd
vcmpunordps
vcmpunord_qpd
vcmpunord_qps
vcmpunord_qsd
vcmpunord_qss
vcmpunordsd
vcmpunord_spd
vcmpunord_sps
vcmpunordss
vcmpunord_ssd
vcmpunord_sss
vcvtdq2pd
vcvtdq2ps
vcvtpd2dq
vcvtpd2ps
vcvtph2ps
vcvtps2dq
vcvtps2pd
vcvtps2ph
vcvtsd2si
vcvtsd2ss
vcvtsi2sd
vcvtsi2ss
vcvtss2sd
vcvtss2si
vcvttpd2dq
vcvttps2dq
vcvttsd2si
vcvttss2si
vextractf128
vextractps
vfmadd123pd
vfmadd123ps
vfmadd123sd
vfmadd123ss
vfmadd132pd
vfmadd132ps
vfmadd132sd
vfmadd132ss
vfmadd213pd
vfmadd213ps
vfmadd213sd
vfmadd213ss
vfmadd231pd
vfmadd231ps
vfmadd231sd
vfmadd231ss
vfmadd312pd
vfmadd312ps
vfmadd312sd
vfmadd312ss
vfmadd321pd
vfmadd321ps
vfmadd321sd
vfmadd321ss
vfmaddpd
vfmaddps
vfmaddsd
vfmaddss
vfmaddsub123pd
vfmaddsub123ps
vfmaddsub132pd
vfmaddsub132ps
vfmaddsub213pd
vfmaddsub213ps
vfmaddsub231pd
vfmaddsub231ps
vfmaddsub312pd
vfmaddsub312ps
vfmaddsub321pd
vfmaddsub321ps
vfmaddsubpd
vfmaddsubps
vfmsub123pd
vfmsub123ps
vfmsub123sd
vfmsub123ss
vfmsub132pd
vfmsub132ps
vfmsub132sd
vfmsub132ss
vfmsub213pd
vfmsub213ps
vfmsub213sd
vfmsub213ss
vfmsub231pd
vfmsub231ps
vfmsub231sd
vfmsub231ss
vfmsub312pd
vfmsub312ps
vfmsub312sd
vfmsub312ss
vfmsub321pd
vfmsub321ps
vfmsub321sd
vfmsub321ss
vfmsubadd123pd
vfmsubadd123ps
vfmsubadd132pd
vfmsubadd132ps
vfmsubadd213pd
vfmsubadd213ps
vfmsubadd231pd
vfmsubadd231ps
vfmsubadd312pd
vfmsubadd312ps
vfmsubadd321pd
vfmsubadd321ps
vfmsubaddpd
vfmsubaddps
vfmsubpd
vfmsubps
vfmsubsd
vfmsubss
vfnmadd123pd
vfnmadd123ps
vfnmadd123sd
vfnmadd123ss
vfnmadd132pd
vfnmadd132ps
vfnmadd132sd
vfnmadd132ss
vfnmadd213pd
vfnmadd213ps
vfnmadd213sd
vfnmadd213ss
vfnmadd231pd
vfnmadd231ps
vfnmadd231sd
vfnmadd231ss
vfnmadd312pd
vfnmadd312ps
vfnmadd312sd
vfnmadd312ss
vfnmadd321pd
vfnmadd321ps
vfnmadd321sd
vfnmadd321ss
vfnmaddpd
vfnmaddps
vfnmaddsd
vfnmaddss
vfnmsub123pd
vfnmsub123ps
vfnmsub123sd
vfnmsub123ss
vfnmsub132pd
vfnmsub132ps
vfnmsub132sd
vfnmsub132ss
vfnmsub213pd
vfnmsub213ps
vfnmsub213sd
vfnmsub213ss
vfnmsub231pd
vfnmsub231ps
vfnmsub231sd
vfnmsub231ss
vfnmsub312pd
vfnmsub312ps
vfnmsub312sd
vfnmsub312ss
vfnmsub321pd
vfnmsub321ps
vfnmsub321sd
vfnmsub321ss
vfnmsubpd
vfnmsubps
vfnmsubsd
vfnmsubss
vfollows=
vfollows:  
vinsertf128
vinsertps
vldmxcsr
vmaskmovdqu
vmaskmovpd
vmaskmovps
vmlaunch
vmovddup
vmovhlps
vmovlhps
vmovmskpd
vmovmskps
vmovntdq
vmovntdqa
vmovntpd
vmovntps
vmovntqq
vmovshdup
vmovsldup
vmpsadbw
vmresume
vpackssdw
vpacksswb
vpackusdw
vpackuswb
vpaddusb
vpaddusw
vpalignr
vpblendvb
vpblendw
vpclmulhqhqdq
vpclmulhqlqdq
vpclmullqhqdq
vpclmullqlqdq
vpclmulqdq
vpcmpeqb
vpcmpeqd
vpcmpeqq
vpcmpeqw
vpcmpestri
vpcmpestrm
vpcmpgtb
vpcmpgtd
vpcmpgtq
vpcmpgtw
vpcmpistri
vpcmpistrm
vperm2f128
vpermilpd
vpermilps
vphaddbd
vphaddbq
vphaddbw
vphadddq
vphaddsw
vphaddubd
vphaddubq
vphaddubw
vphaddudq
vphadduwd
vphadduwq
vphaddwd
vphaddwq
vphminposuw
vphsubbw
vphsubdq
vphsubsw
vphsubwd
vpmacsdd
vpmacsdqh
vpmacsdql
vpmacssdd
vpmacssdqh
vpmacssdql
vpmacsswd
vpmacssww
vpmacswd
vpmacsww
vpmadcsswd
vpmadcswd
vpmaddubsw
vpmaddwd
vpmovmskb
vpmovsxbd
vpmovsxbq
vpmovsxbw
vpmovsxdq
vpmovsxwd
vpmovsxwq
vpmovzxbd
vpmovzxbq
vpmovzxbw
vpmovzxdq
vpmovzxwd
vpmovzxwq
vpmulhrsw
vpmulhuw
vpmuludq
vpshufhw
vpshuflw
vpsubusb
vpsubusw
vpunpckhbw
vpunpckhdq
vpunpckhqdq
vpunpckhwd
vpunpcklbw
vpunpckldq
vpunpcklqdq
vpunpcklwd
vroundpd
vroundps
vroundsd
vroundss
vrsqrtps
vrsqrtss
__vsnprintf_chk
vstart:    %16llX
`vstart' address conflicts with `valign' value
Vstart            Start             Stop              Length    Class     Name
vstmxcsr
vucomisd
vucomiss
vunpckhpd
vunpckhps
vunpcklpd
vunpcklps
vzeroall
vzeroupper
%warning
warning: 
%warning directives
Warnings:
    -w-foo      disable warning foo (equiv. -Wno-foo)
    -w+foo      enables warning foo (equiv. -Wfoo)
willamette
Win32 cannot align sections to better than 64-byte boundaries
Win32 COFF does not correctly support relative references to absolute addresses
WIN (short name for WIN32)
   With debug info
wrfsbase
wrgsbase
write error on output file `%s'
WRT not supported by as86 output format
WRT not supported by binary output format
WRT not supported by COFF output formats
WRT not supported by Mach-O output format
WRT not supported by rdf output format
xcryptcbc
xcryptcfb
xcryptctr
xcryptecb
xcryptofb
%xdefine
    -X<format>  specifies error reporting format (gnu or vc)
xsaveopt
xsaveopt64
X%X,P,-,%X,-
X%X,Y%X,+,L%X,-
X%X,Y%X,+,%X,-
Y%X,10,/
zero-length label
    -Z<file>    redirect error messages to file

                ;;
                "-")
                "/")
                "\\")
                *)
##########################################################################
	$1 > $2 2>/dev/null
#	1) We don't expect VERY large files
#	2) Since /proc files can be copied this preserves the tree without
#	3) tar barfs on open files like logs if it changes while it's tar'ing.
# Add /proc with some exceptions.  stdout redirected to /dev/null.  Some files
# Add services
#	Add system configuration and log files. Wildcards
		addtar "$2"
	addtar "/boot/grub/grub.conf"
        addtar "/boot/grub/menu.lst"
addtar "/etc/cron.daily"
addtar "/etc/cron.hourly"
addtar "/etc/cron.monthly"
addtar "/etc/crontab"
addtar "/etc/cron.weekly"
        addtar "/etc/grub.conf"
	addtar "/etc/lilo.conf"
addtar "/etc/modules.conf"
addtar "/etc/ntp.conf"
addtar "/etc/security/*"
addtar "/etc/services"
addtar "/etc/vmware-tools/*"
	addtar "$procfile"
addtar "/var/log/boot*"
addtar "/var/log/messages*"
addtar "/var/log/secure*"
addtar "/var/run/vmware-*"
# And for grub we are not sure about the exact default location so collect them
# are good citizens).
#	a self contained output directory for later tar'ing
						banner "Could not copy $line \
			banner "Could not create ./${OUTPUT_DIR}$DIR... " \
	banner "Could not create ./${OUTPUT_DIR}... Exiting..." \
			banner "Could not delete $2.  Continuing..." 
        banner "could not transmit logs successfully, either the xmitLogs"\
		banner "Either could not run $1 or could not write to $2" \
	banner "$OUTPUT_DIR was not successfully removed.  Please remove manually."
	banner "The tar did not successfully complete!" \
banner "VMware Linux Support Script $VER"
        banner "You are not root, some system information can't be collected."
        "binary is not in the path, or you are not in a virtual machine"
#!/bin/bash
        case $option in
        case $SPINNER in
#	Check for root privledge
#	Clean up temporary files
#	Collects various configuration and log files
# come and go and confuse find.  Just send whatever works and don't scare user.
#	Commands to run ($1) and redirect to logs ($2) for 
#          Copying file first makes sure tar doesn't complain
# Copyright 2006-2008 VMware, Inc.  All rights reserved. -- VMware Confidential
	cp -pr "$FILE" "${OUTPUT_DIR}$DIR" 2>/dev/null
				cp -pr "$line" "${OUTPUT_DIR}$DIR" 2>/dev/null
	DIR=$(dirname "$FILE")
		done # for each file in the list
"Do you have a full disk?" "Continuing..."
	echo ""
        echo -en "\rPreparing Files: $SPINNER"
	echo "	-h prints this usage statement"
					echo "$line" | grep ^/proc > /dev/null
		echo $option
	echo "Usage: $0 [-h]"
        esac
	. /etc/profile
			fi # does file exist
	fi # if copy failed
				fi # is it proc
	FILE=$1
		FILENAME=${FILE##*/}
#	file to the list of files to tar. 
					fi	# Not proc
		for line in "$DIR"/$FILENAME
	for option in "$@"
for option in $@
for procfile in `find /proc -type f 2>/dev/null| egrep -v kcore\|kmsg\|acpi\|pagemap\|/proc/$$`
#	for use when troubleshooting the Linux guests.
function addtar {
#	Function: addtar copies whatever files and directories you give it to 
function banner {
#	Function: banner prints any number of strings padded with 
function runcmd {
#	Function: runcmd executes the command ($1) 
function UpdateSpinner {
function UpdateState {
function usage {
#	Function: usage prints how to use this script
                "-h")
				"Have you run out of disk space?" "Continuing"
#	   having to cat them all into a file.
					if [ $? != 0 ]; then
				if [ $? != 0 ]; then
		if [ $? != 0 ]; then
	if [ $? != 0 ]; then
if [ $? != 0 ]; then
				# If a file from /proc does not copy,
	if [ ! -d "${OUTPUT_DIR}$DIR" ]; then
if [ -e /boot/grub/grub.conf ]; then
if [ -e /boot/grub/menu.lst ]; then
if [ -e /etc/grub.conf ]; then
if [ -e /etc/lilo.conf ]; then
			if [ -e "$line" ]; then
if [ -f /etc/profile ]; then
if [ $(id -u) != "0" ]; then
"If tar reports that a file changed while reading, please attempt to rerun this script."
   if [ $update -eq 1 ]; then
	# If we path had a shell special character (* ? .)
	# Ignore stdout and handle errors.
				# Ignore stdout and handle errors.
				# ignore - they're funny.  
#	inclusion. 
#	in sync with VMware Workstation implementation
#	It then deletes the temp file since addtar makes a copy in its own
#	make a subdir to put all your files in.  die if it does not create
#	may be used.
mkdir $OUTPUT_DIR
		mkdir -p "${OUTPUT_DIR}$DIR"
#	newlines before and after.
	# or if the file is in /proc
				# Otherwise, exit for failed copy.
OUTPUT_DIR=vm-support.$$
# Parse args
#	Perform the tar ('S' for sparse core files)
"Please cd to a directory to which you can write" # Thanks Adam!
#	Port from ESX server support script for collecting guest logs
# Protect against non-default values of $IFS (Not all scripts in /etc/profile.d/ 
#	redirected to a file ($2) and then adds that 
			return
						return
		rm "$2"
rm -rf $OUTPUT_DIR
rm -rf $TARFILE
runcmd "cat /etc/issue" "/tmp/issue.$$.txt"
runcmd "date" "/tmp/date.$$.txt"
runcmd "df" "/tmp/df.$$.txt"
runcmd "dmesg" "/tmp/dmesg.$$.txt"
runcmd "echo vm-support version: $VER" "/tmp/vm-support-version.$$.txt"
runcmd "free" "/tmp/free.$$.txt"
runcmd "ifconfig -a" "/tmp/ifconfig.$$.txt"
runcmd "lspci -H1 -M" "/tmp/lspci1.$$.txt"
runcmd "lspci -H1 -M -vn" "/tmp/lspci2.$$.txt"
runcmd "mount" "/tmp/mount.$$.txt"
runcmd "netstat -lan" "/tmp/netstat-lan.$$.txt"
runcmd "ps auwwx" "/tmp/ps-auwwx.$$.txt"
runcmd "route" "/tmp/route.$$.txt"
runcmd "rpm -qa" "/tmp/rpm-qa.$$.txt"
runcmd "/sbin/lsmod" "/tmp/modules.$$.txt"
runcmd "ulimit -a" "/tmp/ulimit-a.$$.txt"
runcmd "umask" "/tmp/umask.$$.txt"
runcmd "uname -a" "/tmp/uname.$$.txt"
runcmd "uptime" "/tmp/uptime.$$.txt"
#	selft contained area.
# Source /etc/profile.  If we can't find it, it's the users problem to get
                        SPINNER="|"
                        SPINNER="-"
                        SPINNER="/"
                        SPINNER="\\"
#	Start message
tar -czSvf $TARFILE $OUTPUT_DIR
TARFILE=vm-$(date -I).$$.tgz
# their paths straight.
#	The status constants are important and have to be kept
							to the tar area."
# Try to collect bootloader config.
                "-u")
unset IFS
update = 0
                        update=1
	UpdateSpinner
				UpdateSpinner
UpdateState $VMSUPPORT_BEGINNING
UpdateState $VMSUPPORT_ENDING
UpdateState $VMSUPPORT_RUNNING
#	Updates the VM with the current state
                        usage
VER=0.87
VMSUPPORT_BEGINNING=1
#	vm-support collection not supported
VMSUPPORT_ENDING=3
VMSUPPORT_ERROR=10
VMSUPPORT_NOT_RUNNING=0
VMSUPPORT_RUNNING=2
#	vm-support script failed
#	vm-support script is beginning
#	vm-support script is ending
#	vm-support script is not running
#	vm-support script running in progress
VMSUPPORT_UNKNOWN=100
#	VMware Linux Support Script
vmware-xferlogs enc $TARFILE &>/dev/null
     vmware-xferlogs upd $1
	# We could have failed to copy for several reasons
#	Working on copies could slow this down with VERY large files but:

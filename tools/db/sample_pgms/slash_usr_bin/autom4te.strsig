  # ----------------------------------
# --------
# -------------
# ----------------
# -----------------
# ------------------------
# --------------------------
# ----------------------------
# -----------------------------
# ------------------------------------
# ------------------------------------------
## ---------- ##
## -------------- ##
## --------------------- ##
		'$' => '$');
	     [[[$2]][$1]$0([$1], at_shift(at_shift($@)))])])
	     [[$2][$1]$0([$1], at_shift(at_shift($@)))])])
	     [$#], [2], [[[$2]]],
	     [$#], [2], [[$2]],
	     [$#], [2], [at_flatten([$2])],
# Actually, all the low level processing macros are in `at_' (and `_at_').
    # Actual M4 expansion, if the user wants it, or if $output is old
# Add the new trace requests.
all the previous files.
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
  # (also handled by `find_file').
# alternate name too.
    # Always produce traces, since even if the output is young enough,
  # And it implies melting: there is risk not to update properly using
  #                and no new line remains.
  # a pain since it introduces a useless difference in the path which
# Are the cache files of $REQ up to date?
	  $arg = "--reload-state=$arg";
	  $arg .= " --undefine=__m4_version__"
  @ARGV = @argv;
	      @argv = ($file);
a single character for that character, or {STRING} to use a string.
  # as it's part of the key for caching.  And some files are optional
       {AT_$4([$1], [$2], [$3], [$4], $5};
       {AT_$4([$1], [$2], [$3], [$4])\n};
  # | AT_AC_SUBST([configure.ac], [3], [1], [AC_SUBST], [exec_prefix], [NONE])
  #    AT_define([m4sugar.m4], [115], [1], [define], [m4_exit], <m4exit>)
	     [at_flatten([$2])[$1]$0([$1], at_shift(at_shift($@)))])])
  [at_ifelse([$#], [1], [],
  # _at_MODE(SEPARATOR, ELT1, ELT2...)
        $atomic_replace = 0;
      $atomic_replace = 0;
        $atomic_replace = 1;
  [at_patsubst(at_patsubst([[[$1]]], [\\\n]), [[\n\t ]+], [ ])])
  #  `at'       -- the elements are enclosed in brackets.
# (at your option) any later version.
  \`Autoconf\'   create Autoconf configure scripts
                && Autom4te::C4che->good_version ($icache_file);
Autom4te::C4che->load ($icache_file)
Autom4te::C4che->save ($icache_file);
" . Autom4te::ChannelDefs::usage . "
autom4te (GNU Autoconf) 2.68
# autom4te - Wrapper around M4 libraries.
  \`Autotest\'   create Autotest test suites
# been hit with AC_OUTPUT.  Don't override the user's choice.
      # better, don't consider `#include' etc. are comments.
	  # better, don't consider `#include' etc. to be comments.
  -B, --prepend-include=DIR  prepend directory DIR to search path
     "B|prepend-include=s" => \@prepend_include,
# but are not wanted now.
# but WITHOUT ANY WARRANTY; without even the implied warranty of
   "## By default neutralize all the traces.  ##\n",
     # by hand.
  $cache = $tmp
     # Caching.
  -C, --cache=DIRECTORY    preserve results for future runs in DIRECTORY
     "C|cache=s" => \$cache,
  changequote([, ])
      chomp;
  chomp @patterns;
      # Comments.
	  # Complain once per word, but possibly several times per line.
  # consensus seeems to be that traces are more useful this way.
# Convert a trace $FORMAT into a M4 trace processing macro's body.
  # Convert @trace to %trace, and work around the M4 builtins tracing
# Copyright (C) 2001, 2002, 2003, 2005, 2006, 2007, 2008, 2009, 2010
Copyright (C) 2010 Free Software Foundation, Inc.
## cperl-brace-offset: 0
## cperl-continued-brace-offset: 0
## cperl-continued-statement-offset: 2
## cperl-extra-newline-before-brace: t
## cperl-indent-level: 2
## cperl-label-offset: -2
## cperl-merge-trailing-else: nil
	  # current M4 version.
		'd' => '$3',
# Data directory.
  -d, --debug              don\'t remove temporary files
	   . ' --debug=aflq'
	   . " --debugfile=" . shell_quote ("$tcache" . $req->id . "t")
  # --debug is useless: it is parsed below.
  define([at_args],    [at_shift(at_shift(at_shift(at_shift(at_shift($@)))))])
  define([_at_at],
  define([at_at],      [_$0([$1], at_args($@))])
  define([at_flatten],
  define([_at_percent],
  define([at_percent], [_$0([$1], at_args($@))])
  define([_at_star],
  define([at_star],    [_$0([$1], at_args($@))])
		    . ' --define=divert'
  # definitions.  Beware that there can be several --language
	      delete $prohibited{$word};
		# Depth.
	   . ' </dev/null');
		    . ' </dev/null');
  # discarded: the frozen file is supposed to include them all.
# discarded them (-f), declare it invalid.
  divert(-1)
  \$d     nesting depth of macro call
# does not mean it is up to date.  It is up to date if, in addition,
      # Don't complain in comments.  Well, until we have something
	  # Don't complain in comments.  Well, until we have something
      # don't say it's missing (it might no longer be included).  But
# Do we freeze?
  # e.g.: COMMAND.COM.  For DJGPP always use the shell that configure
    # (e.g., `-t FOO:foo' and `-t FOO:bar' are both using the same M4
      else
      } else {
      elsif (/^(\$.)/)
	  elsif ($2 eq '*')
	  elsif ($2 eq '%')
      elsif (/\.m4f$/)
      elsif (s/^\$\{([^}]*)\}([@*%])//
      elsif (s/^\$([fldn\$])//)
      elsif ($type eq 'args:')
      elsif ($type eq 'end-language:')
  $ENV{'SHELL'} = '/bin/bash' if ($^O eq 'dos');
  $_ = <<'EOF';
	  error "$file:$.: end-language mismatch: $lang"
	  error "$file:$.: unknown directive: $type";
	  error "invalid escape: $1";
	error "unknown language: $_"
		# Escaped dollar.
eval 'case $# in 0) exec /usr/bin/perl -S "$0";; *) exec /usr/bin/perl -S "$0" "$@";; esac'
  # Everything went ok: preserve the outputs.
	   . (!exists $ENV{'AUTOM4TE_NO_FATAL'} ? ' --fatal-warning' : '')
  $exit_code = 1;
    exit $exit_code;
exit $exit_code;
		'f' => '$1',
  fatal "cannot create $output: $!"
  fatal "cannot freeze and trace"
	  fatal "$file:$.: end-language missing for: $lang"
	  fatal "$file:$.: no current language"
  fatal "freezing produced output:\n$result"
fatal "need GNU m4 1.4 or later: $m4"
  fatal "too few arguments
	   . ' --fatal-warning'
		    . ' --fatal-warning'
  \$f     file where macro was called
  -f, --force              don\'t rely on cached values
     "F|freeze" => \$freeze,
  -F, --freeze   produce an M4 frozen state file for FILES
# file) into a suitable command line for M4 (e.g., using --reload-state).
# files, but the index is the first and last file to be updated, so
  # Files may include others.  We can use traces since we just checked
  # files, so we use `find_file' here.  Try to get a canonical name,
	   . " " . files_to_options (@ARGV)
		    . " " . files_to_options (@ARGV)
# files_to_options (@FILE)
  # first.
      $first_warn_forbidden = 0;
  # FIXME: Is this still needed, now that we rely on M4 1.4.5?
# FIXME: This is not enough: in the output `$0' will be `BUILTIN'
# FIXME: To be absolutely rigorous, I would say that given that we
# FIXME: Trace status of renamed builtins was fixed in M4 1.4.5, which
# FIXME: What about `sinclude'?
  # FLATTEN quotes its result.
# %FORBIDDEN, otherwise a simple `error: possibly undefined macro'
# forbidden tokens, and save into $OUTPUT.
  foreach (@ARGV)
  foreach (grep { !/m4wrap|m4exit|dnl|ifelse|__.*__/ } @m4_builtin);
    foreach (@language)
      foreach my $arg (@ARGV)
  foreach my $file (@file)
  foreach my $file (map { $_ . $req->id } ($tcache, $ocache))
    foreach (sort keys %forbidden);
    foreach (sort keys %{$req->macro});
  foreach (sort keys %trace)
    foreach (sort { $prohibited{$a} <=> $prohibited{$b} } keys %prohibited);
      foreach (split (/\W+/))
  foreach (@trace)
  # for instance, so we don't use `[^:]+'.
  $_ = $format;
FORMAT defaults to \`\$f:\$l:\$n:\$%\', and can use the following escapes:
  for my $re (sort keys %forbidden)
for (split (/\n*$separator\n*/o, contents ("$tmp/warnings")))
  for (split /\n/, $stacktrace)
# Free Software Foundation, Inc.
    freeze ($output);
# freeze ($OUTPUT)
	   . " --freeze-state=" . shell_quote ($output)
     # Freezing.
  # Freezing:
## Freezing.  ##
Freezing:
# Freezing does not involve the cache.
	  # Frozen files are optional => pass a `?' to `find_file'.
frozen files of all the previous files (which are therefore not loaded).
General help using GNU software: <http://www.gnu.org/gethelp/>.
# Generated from autom4te.in; do not edit by hand.
  getopt
    GetOptions ("l|language=s" => \@language);
    Getopt::Long::Configure ("pass_through", "permute");
GNU Autoconf home page: <http://www.gnu.org/software/autoconf/>.
# GNU General Public License for more details.
  # GNU m4 appends when using --debugfile/--error-output.
	grep { exists $m4_builtin_alternate_name{$_} } @preselect);
handle_m4 ($req, keys %{$req->macro})
# handle_m4 ($REQ, @MACRO)
    handle_output ($req, $output)
# handle_output ($REQ, $OUTPUT)
    handle_traces ($req, $output, %trace);
# handle_traces($REQ, $OUTPUT, %TRACE)
  handle_traces ($req, "$tmp/dependencies",
  handle_traces ($req, "$tmp/patterns",
handle_traces ($req, "$tmp/warnings",
## Handling the traces.  ##
  # has detected.
# have changed, which would corrupt its processing.
  # have to use the 2nd arg to have Autom4te::XFile honor the third, but then
# Having $REQ is needed to neutralize the macros which have been traced,
$help = "Usage: $0 [OPTION]... [FILES]
  -h, --help               print this help, then exit
<http://gnu.org/licenses/gpl.html>, <http://gnu.org/licenses/exceptions.html>
  $icache = "$cache/requests";
$icache_file->lock (LOCK_EX)
$icache_file = new Autom4te::XFile $icache, O_RDWR|O_CREAT;
    if 0;
	  if ($2 eq '@')
      # If a file which used to be included is no longer there, then
# if a frozen file is present, it is the first argument.
  if ($ARGV[$#ARGV] ne '-')
  if ($atomic_replace && !rename("$output.tmp", "$output")) {
# If autom4te is younger, then some structures such as C4che might
if (! -d "$cache")
	    if defined $lang;
      if ($_ eq '-')
  if (exists $ENV{'AUTOM4TE_DEBUG'})
  if exists $ENV{'HOME'} && -f "$ENV{'HOME'}/.autom4te.cfg";
	if exists $m4_builtin_alternate_name{$1};
  if -f ".autom4te.cfg";
  if -f $icache && mtime ($icache) > mtime ($0)
	    if $file;
	if ! $file;
  # If $FILE is younger than one of its dependencies, it is outdated.
      if ($file =~ /\.m4f$/)
If \`FILE.m4f\' is not found, then \`FILE.m4\' will be used, together with
  if ($first_warn_forbidden)
  if ($flock_implemented eq "yes");
	    if !/^$/ && /$forbidden/o && !/$allowed/o && ! exists $prohibited{$_};
      if $force || mtime ($output) < mtime ($ocache . $req->id);
  if $force || ! $req->valid;
  if $force || ! up_to_date ($req);
    if $freeze;
if ($freeze)
    if $freeze && @trace;
  # If freezing produces output, something went wrong: a bad `divert',
    if ! -f $tfile || ! -f $ofile;
  if (grep { $_ eq '-' } @dep)
	    if $lang ne lc $words[0];
  if " $m4 " !~ / (--nesting-limit(=[0-9]+)?|-L[0-9]*) /;
# If melt, don't use frozen files.
	  if (!$melt && $file)
  # If no forbidden words, we're done.
      if ($out) {
  if ($output eq '-' || (-e $output && ! -f $output))
    if ! %prohibited;
		if ! %prohibited;
# If $REQ's cache files are not up to date, or simply if the user
    if ! $req->valid;
    if $result;
	if /^\s*(\#.*)?$/;
      if (s/^\$(\d+)//)
If some of the FILES are named \`FILE.m4f\' they are considered to be M4
  if system "$m4 --help </dev/null 2>&1 | grep reload-state >/dev/null";
	  # If the user downgraded M4 from 1.6 to 1.4.x after freezing
  # if they are available.
      If this token and others are legitimate, please use m4_pattern_allow.
if (%trace)
      if ($type eq 'begin-language:')
  # If we find frozen files, then all the files before it are
# If we ran up to here, the cache is valid.
	      # If we're done, exit.
      if ($word =~ $re)
  # If you trace `define', then on `define([m4_exit], defn([m4exit])' you
  -I, --include=DIR          append directory DIR to search path
     "I|include=s"         => \@include,
  # Implement traces for current requests (%TRACE).
# implement tracing are in `AT_'.
		 ('include'    => '$1',
  @include = grep { !/^\.$/ } uniq (reverse(@prepend_include), @include);
include path, but then must end in \`.m4?\';  the question mark is not part of
  # In particular, m4_warn guarantees that either $stackdump is empty, or
  # | input.as:2: bar is expanded from...
  # | input.as:3: foo is expanded from...
  # | ::input.as:4: baz is expanded from...
  # | input.as:5: the top level
     # instead of mapping `FOO' to undef, Getopt maps it to `1', preventing
  # in the configuration file.  Prepend to the user arguments.
  # into
# invalid.
  # invalidates the cache.  And strip `.' which is implicit and always
  # invocations.
# Issue the warnings each time autom4te was run.
  # it consists of lines where only the last line ends in "top level".
      # It makes no sense to try to transform __oline__.
# its files are younger than its dependencies.
# it under the terms of the GNU General Public License as published by
	   . join (' --include=', '', map { shell_quote ($_) } @include)
		    . join (' --include=', '', map { shell_quote ($_) } @include)
	   . join (' --trace=', '', map { shell_quote ($_) } sort @macro)
		'l' => '$2',
	  $lang = lc $words[0];
    @language = ();
# $LANGUAGE{LANGUAGE} -- Automatic options for LANGUAGE.
Languages include:
	  $lang = undef;
	  last;
# *last* trace specification.
     # Library directories:
Library directories:
License GPLv3+/Autoconf: GNU GPL version 3 or later
		# Line number.
	  # $%, list of flattened unquoted effective arguments.
	  # $@, list of quoted effective arguments.
	  # $*, list of unquoted effective arguments.
  # List the elements, separating then with SEPARATOR.
  \$\$     literal \$
  -l, --language=LANG      specify the set of M4 macros to use
  \$l     line where macro was called
load_configuration (".autom4te.cfg")
load_configuration ($ENV{'AUTOM4TE_CFG'} || "$pkgdatadir/autom4te.cfg");
load_configuration ("$ENV{'HOME'}/.autom4te.cfg")
# load_configuration ($FILE)
# Load the configuration $FILE.
  # Load the forbidden/allowed patterns.
## Local Variables:
  # Locate the forbidden words in the last input file.
# locking it is sufficient.
# %M4_BUILTIN_ALTERNATE_NAME
@m4_builtin_alternate_name{"ifelse", "m4_if"}   = ("m4_if", "ifelse");
@m4_builtin_alternate_name{"m4exit", "m4_exit"} = ("m4_exit", "m4exit");
@m4_builtin_alternate_name{"$_", "m4_$_"} = ("m4_$_", "$_")
@m4_builtin_alternate_name{"m4wrap", "m4_wrap"} = ("m4_wrap", "m4wrap");
# @M4_BUILTIN -- M4 builtins and a useful comment.
# `m4_BUILTIN' will be the same: tracing both, but honoring the
		  'm4_include' => '$1'));
# M4 include path.
# $M4_MACRO
$m4 .= ' --nesting-limit=1024'
		  'm4_pattern_allow'  => 'allow:$1'));
		 'm4_pattern_allow', 'm4_pattern_forbid',
# `m4_pattern_allow' to check the output.
		 ('m4_pattern_forbid' => 'forbid:$1:$2',
  \`M4sh\'       create M4sh shell scripts
  \`M4sugar\'    create M4sugar output
  # | m4trace:configure.ac:3: -1- AC_SUBST([exec_prefix], [NONE])
		 '_m4_warn');
	       ('_m4_warn' => "\$1::\$f:\$l::\$2::\$3$separator"));
				    'macro' => [keys %trace, @preselect]);
## Main program.  ##
    map { /^forbid:([^:]+):.+$/ => /^forbid:[^:]+:(.+)$/ } @patterns;
	map { $m4_builtin_alternate_name{$_} }
  map { print $trace_m4 "at_undefine([$_])\n" } @m4_builtin;
  map { print $trace_m4 "define([at_$_], defn([$_]))\n" } @m4_builtin;
map { s/:.*//;s/\W// } @m4_builtin;
  $melt = 1
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	  $message = $forbidden{$re};
  $message ||= "possibly undefined macro: $word";
    mkdir "$cache", 0755
mktmpdir ('am4t');
  -M, --melt               don\'t use M4 frozen files
     "M|melt"       => \$melt,
  -m, --mode=OCTAL         change the non trace output file mode (0666)
     "m|mode=s"     => \$mode,
  # MODE can be:
# Mode of the output file except for traces.
      move ("${file}t", "$file")
    move ("${output}.tmp", "$output")
      /^([^:]+)(?::(.*))?$/ms;
      msg $cat, $loc, $trace, partial => ($trace !~ /top level$/) + 0;
  msg $cat, $loc, "warning: $msg",
  my $allowed   = join ('|', map { /^allow:([^:]+)/  } @patterns) || "^\$";
      my $arg = shell_quote ($file);
  my @argv;
  my $atomic_replace;
my $cache;
  my ($cat, $loc, $msg, $stacktrace) = split ('::', $_, 4);
  my $cfg = new Autom4te::XFile ("< " . open_quote ($file));
      (my $comment = "Trace $_:$trace{$_}") =~ s/^/\# /;
  my @dep = @ARGV;
  my $deps = new Autom4te::XFile ("< " . open_quote ("$tmp/dependencies"));
  my %escape = (# File name.
  my (@file) = @_;
  my ($file) = @_;
      my $file = find_file ("$_?", @include);
	  my $file = find_file ("$_?", @include);
	  my $file = find_file ($_, @include);
  my ($file, $mtime) = ($tmtime < $omtime
      my $file = new Autom4te::XFile ("< " . open_quote ($ARGV[$#ARGV]));
my $first_warn_forbidden = 1;
my $flock_implemented = 'yes';
  my %forbidden =
  my $forbidden = join ('|', map { /^forbid:([^:]+)/ } @patterns) || "^\$";
  my ($format) = @_;
my $freeze = 0;
my $icache;
my $icache_file;
my @include;
  my $in = new Autom4te::XFile ("$m4 " . shell_quote ("$tmp/traces.m4") . " |");
  my $in = new Autom4te::XFile ("< " . open_quote ($ocache . $req->id));
  my $lang;
  my @language;
my %language;
      my ($loc, $trace) = split (': ', $_, 2);
my %m4_builtin_alternate_name;
my @m4_builtin = `echo dumpdef | $m4 2>&1 >/dev/null`;
my $m4 = $ENV{"M4"} || '/usr/bin/m4';
my $melt = 0;
  my $message;
my $mode = "0666";
my $ocache;
  my $ofile = $ocache . $req->id;
  my $omtime = mtime ($ofile);
  my $out = new Autom4te::XFile;
  my $out = new Autom4te::XFile ("> " . open_quote ($output));
  my ($output) = @_;
my $output = '-';
  my @patterns = new Autom4te::XFile ("< " . open_quote ("$tmp/patterns"))->getlines;
my $pkgdatadir = $ENV{'AC_MACRODIR'} || '/usr/share/autoconf';
  my $pkgdatadir = $ENV{'autom4te_perllibdir'} || '/usr/share/autoconf';
  my @prepend_include;
my @preselect = ('include',
  my %prohibited;
      my $prohibited = '\b(' . join ('|', keys %prohibited) . ')\b';
  my ($req) = @_;
my $req = Autom4te::C4che->request ('input' => \@ARGV,
  my ($req, @macro) = @_;
  my ($req, $output) = @_;
  my ($req, $output, %trace) = @_;
  my @res;
  my $res = '';
  my $res;
  my $result = xqx ("$m4"
my $separator = "\n" . ('-' x 25) . " END OF WARNING " . ('-' x 25) . "\n\n";
my $tcache;
  my $tfile = $tcache . $req->id;
  my $tmtime = mtime ($tfile);
  my @trace;
my %trace;
  my $trace_m4 = new Autom4te::XFile ("> " . open_quote ("$tmp/traces.m4"));
  my $traces = new Autom4te::XFile ("< " . open_quote ($tcache . $req->id));
      my $type = shift @words;
  my $underscore = $_;
  my ($where, $word, %forbidden) = @_;
	      my $word = $1;
      my @words = shellwords ($_);
    "\n";
    "## ------------------------- ##\n",
   "\n";
   "## -------------------------------------- ##\n",
		'n' => '$4',
		# Name (also available as $0).
  # Names of the cache directory, cache directory index, trace cache
# Names of the cache directory, cache directory index, trace cache
  # need to know what other files were included.  Actually, if any of
  # Neutralize traces: we don't want traces of cached requests (%REQUEST).
      next
      # $n -> $(n + 4)
  \$n     name of the macro
      --no-cache           disable the cache
     "no-cache"  => sub { $cache = undef; },
  # Normalize the includes: the first occurrence is enough, several is
	  # not cause m4_init to make the wrong decision about the
  # Note that the second pattern is `newline, tab or space'.  Don't lose
# Now output...
  \$NUM   argument NUM, unquoted and with newlines
  $ocache = "$cache/output.";
      # of course, that causes the output to be outdated (as if the
			? ($ofile, $omtime) : ($tfile, $tmtime));
  # old frozen files, and worse yet: we could load a frozen file and
  # on exit).
  -o, --output=FILE        save output in FILE (defaults to \`-\', stdout)
     "o|output=s"   => \$output,
# Open the index for update, and lock it.  autom4te handles several
     # Operation modes:
Operation modes:
# $OPTION
  # or an improper paren etc.
      or -d "$cache"
      or fatal "cannot create $cache: $!";
	or fatal "cannot rename ${file}t as $file: $!";
      or fatal "cannot rename ${output}.tmp as $output: $!";
  $out->close();
      $out->open (">$output");
        $out->open($output, O_CREAT | O_WRONLY | O_TRUNC, oct ($mode));
      $out->open("$output.tmp", O_CREAT | O_WRONLY | O_TRUNC, oct ($mode));
  # output but comments and empty lines.
  # Override SHELL.  On DJGPP SHELL may not be set to a shell
# parse_args ()
parse_args;
# parse_args guarantees that we will see at most one frozen file, and that
  parse_WARNINGS;
    partial => ($stacktrace =~ /top level$/) + 0;
				    'path'  => \@include,
  # Pay attention that the file name might include colons, if under DOS
  #  `percent'  -- the elements are `flattened': spaces are singled out,
      # Performed *last*: the empty quadrigraph.
  # Perform this repeatedly so that we can use --language in language
# -*- perl -*-
## perl-brace-imaginary-offset: 0
## perl-brace-offset: 0
## perl-continued-brace-offset: 0
## perl-continued-statement-offset: 2
## perl-indent-level: 2
## perl-label-offset: -2
  -p, --preselect=MACRO       prepare to trace MACRO in a future run
     "p|preselect=s" => \@preselect,
# prefix, and output cache prefix.  And the IO object for the index.
  # prefix, and output cache prefix.  If the cache is not to be
  # preserved, default to a temporary directory (automatically removed
      print $out $_;
      print $out "$res\n";
	  print STDERR "| $arg\n";
      print STDERR "$me: concrete arguments:\n";
      print $trace_m4 "$_";
  print $trace_m4
  print $trace_m4 $_;
  print $trace_m4 "at_define([AT_$_], [at_dnl])\n"
      print $trace_m4 "at_define([AT_$_],\n";
  print $trace_m4 "at_divert(0)at_dnl\n";
      print $trace_m4 "$comment\n";
  print $trace_m4 "# Copy the builtins.\n";
  print $trace_m4 "# Disable them.\n";
  print $trace_m4 "\n";
      print $trace_m4 trace_format_to_m4 ($trace{$_}) . ")\n\n";
  # problem.
# Process any command line arguments.
  # Processing the traces.
# processing the traces, the builtins are disabled, and moved into `at_'.
  # Process the arguments for real this time.
	  $prohibited{$_} = $.
	      $prohibited = '\b(' . join ('|', keys %prohibited) . ')\b';
	  push @argv, $_;
	  push @argv, $file
	      push @argv, find_file ($_, @include);
      push @dep, $file;
	  push @{$language{$lang}}, @words;
  push (@preselect,
      push @res, $arg;
  # Read the (cached) raw M4 output, produce the actual result.  We
# Read the cache index if available and older than autom4te itself.
# _redefine_ divert (instead of _copying_ it), divert and the like
  # Reenable output.
  # refreeze it!  A sort of caching :)
Report bugs to <bug-autoconf\@gnu.org>.
# $REQ is `valid' if it corresponds to the request and exists, which
$req->valid (0)
$req->valid (1);
      $res = $_;
	  $res .= $1;
	  $res .= "\$" . ($1 + 4);
	      $res .= ']at_at([' . ($1 ? $1 : ',') . '], $@)[';
	      $res .= ']at_percent([' . ($1 ? $1 : ':') . '], $@)[';
	      $res .= ']at_star([' . ($1 ? $1 : ',') . '], $@)[';
	  $res .= $escape{$1};
      $res =~ s/\@&t\@//g;
  $result =~ s/#.*\n//g;
  $result =~ s/^\n//mg;
  return
	      return
      return 0
    { return 0 }
  return 0
  return join ' ', @res;
  return '[[' . $res . ']]';
  return up_to_date_p ($file, @dep);
## Routines.  ##
Run GNU M4 on the FILES, avoiding useless runs.  Output the traces if tracing,
  # Run m4.
# Run m4 on the input files, and save the traces on the @MACRO.
# Run m4 on the input files, perform quadrigraphs substitution, check for
      s/\#.*//
	    || s/^\$(.?)([@*%])//)
	  s/^([^\$]+)//;
	  s/\#.*//
      See the Autoconf documentation.
  \$SEP\@  all arguments, with newlines, quoted, and separated by SEP
  \$SEP*  all arguments, with newlines, unquoted, and separated by SEP
  \$SEP%  all arguments, without newlines, unquoted, and separated by SEP
      # separate line.
SEP can be empty for the default (comma for \@ and *, colon for %),
# Set some high recursion limit as the default limit, 250, has already
### Setup "GNU" style for perl-mode and cperl-mode.
      s/\@<:\@/[/g;
      s/\@:>\@/]/g;
      s/\@:\}\@/)/g;
      s/\@\{:\@/(/g;
      s/\@%:\@/#/g;
	   . " > " . shell_quote ("$ocache" . $req->id . "t"));
# should not be part of this list.
  # Since `<m4exit>' is not quoted, the outer m4, when processing
	      s/\.m4f$/.m4/;
      s{^m4trace:(.+):(\d+): -(\d+)- ([^(]+)\((.*)$}
      s{^m4trace:(.+):(\d+): -(\d+)- ([^)]*)\n$}
  s/^  //mg;s/\\t/\t/mg;s/\\n/\n/mg;
      s/__oline__/$./g;
# So map `define' to `m4_define' and conversely.
Some files may be optional, i.e., will only be processed if found in the
# Some macros don't follow this scheme: be sure to properly map to their
# Some non-GNU m4's don't reject the --help option, so give them /dev/null.
# sometimes and `m4_BUILTIN' at others.  We should return a unique name,
# So we will merge them, i.e., tracing `BUILTIN' or tracing
      s/\s+$//;
      s/\@S\|\@/\$/g;
  #  `star'     -- the elements are listed as are.
  # stdin is always out of date.
    # (STDOUT is pretty old).
  # stdout is to be handled by hand :(.  Don't use fdopen as it means
      s/\@&t\@//g;
sub files_to_options (@)
sub freeze ($)
sub handle_m4 ($@)
sub handle_output ($$)
sub handle_traces ($$%)
sub load_configuration ($)
sub parse_args ()
sub trace_format_to_m4 ($)
sub up_to_date ($)
sub warn_forbidden ($$%)
# Swallow excessive newlines.
  # | syntax::input.as:5::ouch
  $tcache = "$cache/traces.";
  # that can handle redirection and quote arguments correctly,
the actual file name.
  # the `at_' name space.
# The builtins are renamed, e.g., `define' is renamed `m4_define'.
  # the cache files is missing, we are not up to date.
  # The default format is `$f:$l:$n:$%'.
  # the dependencies.
The environment variables \`M4\' and \`WARNINGS\' are honored.
	  # the file, then we ensure the frozen __m4_version__ will
# the Free Software Foundation, either version 3 of the License, or
the frozen file if freezing, otherwise the expansion of the FILES.
# The macros the user will want to trace in the future.
# The macros to trace mapped to their format, as specified by the
  # The message looks like:
# the one specified by the user.
    # there is no guarantee that the traces use the same *format*
There is NO WARRANTY, to the extent permitted by law.
  # the tab!
  # The youngest of the cache files must be older than the oldest of
  # This is dubious: should we really transform the quadrigraphs in
This is free software: you are free to change and redistribute it.
  # This is unsatisfying but...
# This program is distributed in the hope that it will be useful,
# This program is free software: you can redistribute it and/or modify
      # time stamp of that missing file was newer).
# To avoid clashes between user macros and `at_' macros, the macros which
      # to match the trailing parenthesis as it might be on a
      $trace{$1} = defined $2 ? $2 : '$f:$l:$n:$%';
# trace_format_to_m4 ($FORMAT)
      $trace{$m4_builtin_alternate_name{$1}} = $trace{$1}
  $trace_m4->close;
  # `trace.m4' will exit prematurely.  Hence, move all the builtins to
    "## Trace processing macros.  ##\n",
      # Trace request can be embed \n.
    # traces, hence the M4 traces cache is usable, but its formatting
  # traces?  It might break balanced [ ] etc. in the output.  The
      # Traces without arguments, always on a single line.
      # Trace with arguments, as the example above.  We don't try
     # Tracing:
Tracing:
# Transform Autom4te conventions (e.g., using foo.m4f to designate a frozen
  # Transform the traces from m4 into an m4 input file.
Try `$me --help' for more information."
  -t, --trace=MACRO[:FORMAT]  report the MACRO invocations
     "t|trace=s"     => \@trace,
  # Typically, transform:
  $_ = $underscore;
    unless @ARGV;
    unless $cache;
	    unless defined $lang;
	  unless exists $language{lc $_};
	    unless grep {/__m4_version__/} @m4_builtin;
	    unless /^\#(if|include|endif|ifdef|ifndef|define)\b/;
    unless $out;
	unless /^\#\s*(if|include|endif|ifdef|ifndef|define)\b/;
  unlink ($tcache . $req->id . "t");
	unshift @ARGV, @{$language{lc $_}};
  unshift @INC, $pkgdatadir;
# up_to_date ($REQ)
use Autom4te::C4che;
use Autom4te::ChannelDefs;
use Autom4te::Channels;
use Autom4te::FileUtils;
use Autom4te::General;
use Autom4te::XFile;
use File::Basename;
      use File::Copy;
    use Getopt::Long;
use strict;
  use Text::ParseWords;
     # us from distinguishing `-t FOO' from `-t FOO=1'.  So let's do it
     # Using a hash for traces is seducing.  Unfortunately, upon `-t FOO',
#! /usr/bin/perl -w
  verb "allowed   tokens: $allowed";
  verb "creating $output";
  verb "forbidden token : $_ => $forbidden{$_}"
  verb "forbidden tokens: $forbidden";
  verb "formatting traces for `$output': " . join (', ', sort keys %trace);
verb "the trace request object is:\n" . $req->marshall;
# $VERSION
$version =  <<"EOF";
  -v, --verbose            verbosely report processing
  -V, --version            print version number, then exit
      warn <<EOF;
	      warn_forbidden ("$ARGV[$#ARGV]:$.", $word, %forbidden);
  warn_forbidden ("$output:$prohibited{$_}", $_, %forbidden)
# warn_forbidden ($WHERE, $WORD, %FORBIDDEN)
  warn "$where: error: $message\n";
  # We cannot trace at the same time (well, we can, but it sounds insane).
  # We can't answer properly if the traces are not computed since we
  # We depend at least upon the arguments.
  # We don't output directly to the cache files, to avoid problems
  # We don't want to depend upon m4's --include to find the top level
# We need `include' to get the included file, `m4_pattern_forbid' and
# We need our cache directory.  Don't fail with parallel creation.
# We need to run M4 if (i) the user wants it (--force), (ii) $REQ is
# we now depend on; do we still need to do this mapping?
# We now know whether we can trust the Request object.  Say it.
# We use M4 itself to process the traces.  But to avoid name clashes when
  # We want to look for the early options, which should not be found
  # we will close STDOUT, which we already do in END.
  # When processing the file with diversion disabled, there must be no
  # when we are interrupted (that leaves corrupted files).
  while ($_)
  while ($_ = $cfg->getline)
  while ($_ = $deps->getline)
      while ($_ = $file->getline)
  while ($_ = $in->getline)
  } while @language;
	  while (/$prohibited/)
  while ($_ = $traces->getline)
# will do.
  # will produce
    # will yield different results).
# $WORD is forbidden.  Warn with a dedicated error message if in
  # Work around the M4 builtins tracing problem for @PRESELECT.
Written by Akim Demaille.
  -W, --warnings=CATEGORY  report the warnings falling in CATEGORY
     "W|warnings=s" => \&parse_warnings,
      # $x, no separator given.
      # $.x or ${sep}x.
  xsystem ("$m4"
  xsystem ("$m4 --gnu"
# You should have received a copy of the GNU General Public License

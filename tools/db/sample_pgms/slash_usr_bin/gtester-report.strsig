      0   : 'bgcolor="red"',
	  0   : 'bgcolor="red"',
      100 : 'bgcolor="lightgreen"',
	  100 : 'bgcolor="lightgreen"',
    """A representation of a gtester test result as a pyunit TestCase."""
  attr = node.attributes.get (aname, '')
# Authors: Tim Janik
    """Base class for reporting."""
# base class to handle processing/traversion of XML nodes
    bin = find_child (node, 'binary')
# Boston, MA 02111-1307, USA.
# but WITHOUT ANY WARRANTY; without even the implied warranty of
        """Calculate a details dict for the test - attachments etc."""
    c = find_node (child, name)
class GTestCase(object):
class HTMLReportWriter(ReportWriter):
class ReportReader (TreeProcess):
class ReportWriter(object):
class SubunitWriter(ReportWriter):
class TestBinary:
class TreeProcess:
# Copyright (C) 2007 Imendio AB
        """Create a GTestCase for case `case` from binary program `binary`."""
  cssjs = r'''
def attribute_as_text (node, aname, node_name = None):
  def binary_list (self):
    def _error_text(self, node):
def find_child (node, child_name):
def find_node (node, name = None):
    def _get_details(self):
  def get_info (self):
    def _get_outcome(self):
  def handle_binary (self, binary):
  def handle_info (self):
  def handle_info (self, node):
  def handle_testbinary (self, node):
  def handle_testcase (self, node):
  def handle_testcase (self, node, binary):
  def handle_text (self, node):
  def handle_totals (self):
def html_indent_string (n):
    def id(self):
  def __init__ (self):
    def __init__(self, binary_list):
    def __init__(self, case, binary):
  def __init__ (self, info, binary_list):
  def __init__ (self, name):
def list_children (node, child_name):
def main():
def node_as_text (node, name = None):
  def oprint (self, message):
def parse_opts():
    def printout(self):
  def printout (self):
  def process_children (self, node):
  def process_recursive (self, node_name, node):
    def run(self, result):
  def trampoline (self, node):
        details = {}
            details['error'] = Content(mime_utf8, lambda:[txt])
        details['filename'] = Content(mime_utf8, lambda:[self._binary.file])
                details['performance'] = Content(mime_utf8, lambda:perf_details)
        details['random_seed'] = Content(mime_utf8,
            details = self._get_details()
    dn = find_child (node, 'duration')
    dn = find_child (node, 'package')
    dn = find_child (node, 'revision')
    dn = find_child (node, 'version')
      doc.close();
      doc.write ("<a href=\'javascript:window.close()\'>Close Window</a>\n");
      doc.write ("<h2>File: " + file + "</h2>\n");
      doc.write ("<h3>Case: " + tcase + "</h3>\n");
      doc.write ("<pre>");
      doc.write ("</pre>\n");
      doc.write ("<strong>" + msgtitle + "</strong><br />\n");
      doc.write ("<strong>Random Seed:</strong> <code>" + random_seed + "</code> <br /><br />\n");
      doc.write (txt);
                duration = duration * 1000000
                duration = float(node_as_text(self._case, 'duration'))
      duration = '-'    # ignore bogus durations
    duration = node_as_text (node, 'duration')
    dur = node_as_text (dn)
    elif perflist:
        else
        else:
      else:
    else:
      erlink = 'href="javascript:toggle_display (\'ResultTable\', \'tr\', \'b%u_\', \'failed\')"' % self.bcounter
    erlink, oklink = ('', '')
    except:     dur = 0
except ImportError:
      except:	method = None
            # Extract the error details. Skips have no details because its not
      'failed':  'bgcolor="red"',
        finally:
        for binary in self.binaries:
    for child in node.childNodes:
  for child in node.childNodes:
        for enode in rlist:
  for i in range (0, (n + 1) / 2):
    for name in self.binary_names:
                for perf in perflist:
      for perf in perflist:
    for tb in self.binaries:
            for tc in binary.testcases:
    for tc in binary.testcases:
    for (var i = 0; i < tags.length; i++) {
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    from subunit import iso8601
    from testtools.content import Content, ContentType
  function toggle_display (parentid, tagtype, idmatch, keymatch) {
  function view_testlog (wname, file, random_seed, tcase, msgtitle, msgid) {
        """Get a string representing the error children of node."""
            getattr(result, outcome)(self, details=details)
    }.get (int (perc), 'bgcolor="yellow"')
	}.get (int (perc), 'bgcolor="yellow"')
    }.get (result, '')
# GLib Testing Framework Utility			-*- Mode: python; -*-
        help="Output subunit [See https://launchpad.net/subunit/"
        help="Show program version.")
    .HiddenSection  { display: none; }
      HTMLReportWriter(rr.get_info(), rr.binary_list()).printout()
# HTML utilities
    if bin:
    if binary.success_cases:
    if binary.success_cases < real_cases:
    if bool (int (attribute_as_text (node, 'skipped') + '0')):
    if c:
    if child.nodeName == child_name:
    if dn is not None:
    if dur:
  if hasattr (attr, 'value'):
        if int(attribute_as_text(self._case, 'skipped') + '0'):
    if len(files) != 1:
    if message:
      if method:
  if name:
if __name__ == '__main__':
    if name == '#text':
  if node:
    if node.nodeValue:
  if not node:
  if not node or node.nodeName == name or not name:
  if not options.subunit:
  if options is None:
    if options.subunit and subunit is None:
    if options.version:
            if outcome == 'addSuccess':
        if outcome == 'success':
            if perflist:
    if real_cases != 0:
    if result == 'success':
    if result != 'success':
    if rseed:
    if self.binaries.get (path, -1) == -1:
        if self._get_outcome() == 'addFailure':
        if self._get_outcome() == 'addSuccess':
    if self.info['revision']:
    if self.total_tcounter != 0:
    if skipped:
        if (tag.className.indexOf ("HiddenSection") >= 0)
      if (tag.id.indexOf (idmatch) == 0 && key && key.match (keymatch)) {
            if txt and txt[-1] != '\n':
import datetime
import optparse
    import subunit
import sys, re, xml.dom.minidom
  # Javascript/CSS snippet to toggle element visibility
            lambda:[self._binary.random_seed])
# Lesser General Public License for more details.
# License along with this library; if not, write to the
# License as published by the Free Software Foundation; either
    lst = []
      lst += [ self.binaries[name] ]
  main()
# main program handling
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  message_array = Array();
    mime_utf8 = ContentType('text', 'plain', {'charset': 'utf8'})
# modify it under the terms of the GNU Lesser General Public
    name = node.nodeName
            " Needs python-subunit]")
    node = find_node (node, name)
  node = find_node (node, node_name)
      oklink = 'href="javascript:toggle_display (\'ResultTable\', \'tr\', \'b%u_\', \'success\')"' % self.bcounter
            # Only provide a duration IFF outcome == 'addSuccess' - the main
  options, files = parse_opts()
    options, files = parser.parse_args()
        outcome = attribute_as_text(self._case, 'result', 'status')
            outcome = self._get_outcome()
    """Parse program options.
    parser.add_option("-s", "--subunit", action="store_true", dest="subunit", default=False,
    parser.add_option("-v", "--version", action="store_true", dest="version", default=False,
            # parser claims bogus results otherwise: in that case emit time as
    parser.description = "Generate HTML reports from the XML log files generated by gtester."
    parser.epilog = "gtester-report (GLib utils) version %s."% (parser.version,)
        parser.error("Must supply a log file to parse.")
        parser.error("python-subunit is not installed.")
    parser = optparse.OptionParser()
    parser.usage = "%prog [OPTIONS] <gtester-log.xml>"
    parser.version =  pkginstall_configvars.get ('glib-version', '0.0-uninstalled')
    pass
    path = attribute_as_text (node, 'path')
    path = node.attributes.get ('path', None).value
    pcolor = {
	pcolor = {
        perc = 0.0
	perc = binary.success_cases * 100.0 / real_cases
        perc = (self.total_tcounter - self.total_fcounter) * 100.0 / self.total_tcounter
                perf_details = [e[1] for e in presults]
    perflist = list_children (node, 'performance')
            perflist = list_children(self._case, 'performance')
pkginstall_configvars = {
  #@PKGINSTALL_CONFIGVARS_IN24LINES@ # configvars are substituted upon script installation
                    pmax = bool (int (attribute_as_text (perf, 'maximize')))
        pmax = bool (int (attribute_as_text (perf, 'maximize')))
                    pmin = bool (int (attribute_as_text (perf, 'minimize')))
        pmin = bool (int (attribute_as_text (perf, 'minimize')))
                presults = []
      presults = []
                    presults += [(pval, txt)]
        presults += [ (pval, txt) ]
                presults.sort()
      presults.sort()
        print parser.epilog
    ptag = document.getElementById (parentid);
      ptxt = ''.join ([e[1] for e in presults])
                    pval = float (attribute_as_text (perf, 'value'))
        pval = float (attribute_as_text (perf, 'value'))
    rcolor = {
    real_cases = len (binary.testcases) - binary.skipped_cases
        reporter = subunit.TestProtocolClient(sys.stdout)
    """Reporter to output a subunit stream."""
    ReportWriter.__init__(self, binary_list)
                           "resizable,scrollbars,status,width=790,height=400");
    result = attribute_as_text (node, 'result', 'status')
        result = attribute_as_text(self._case, 'result', 'status')
        result.startTest(self)
            result.stopTest(self)
                result.time(time)
        result.time(time)
    return ''
  return ''
    return 0
            return 'addFailure'
            return 'addSkip'
            return 'addSuccess'
    :return: An options object and the program arguments.
    return attr.value
      return c
      return child
        return details
    return lst
        return method (node)
    return node
  return None
        return None, None
    return options, files
  return rlist
    return self.info
        return self._path
        return self.process_recursive (name, node)
      return            # skipped tests are uninteresting for HTML reports
  return string
        return txt
  return txt
  rlist = []
      rlist += [ child ]
        rlist = list_children(node, 'error')
  rr = ReportReader()
  rr.trampoline (xd)
    rseed = find_child (node, 'random-seed')
  --></script>
  <script language="javascript" type="text/javascript"><!--
    self.bcounter = 0
    self.bcounter += 1
                 (self.bcounter, self.total_tcounter, self.total_fcounter, self.total_tcounter - self.total_fcounter))
    self.binaries = {}
        self.binaries = binary_list
      self.binaries[path] = TestBinary (path)
        self._binary = binary
    self.binary_names = []
      self.binary_names += [ path ]
        self._case = case
    self.duration = 0
    self.file = '???'
      self.handle_binary (tb)
    self.handle_info ()
      self.handle_testcase (tc, binary)
      self.handle_text (node)
    self.handle_totals()
    self.indent_depth = 0
    self.info = {}
    self.info = info
    self.info['package'] = node_as_text (dn)
        self.info['revision'] = node_as_text (dn)
    self.info['version'] = node_as_text (dn)
      self.last_binary.duration += dur
      self.last_binary.file = attribute_as_text (bin, 'file')
    self.last_binary = None
      self.last_binary.random_seed = node_as_text (rseed)
    self.last_binary = self.binaries[path]
      self.last_binary.skipped_cases += 1
      self.last_binary.success_cases += 1
    self.last_binary.testcases += [ node ]
    self.lastchar = ''
      self.lastchar = message[-1]
    self.name = name
    self.nest_level = 0
    self.nest_level += 1
	self.oprint ('<a %s>ER</a>\n' % erlink)
	self.oprint ('<a %s>OK</a>\n' % oklink)
    self.oprint ('</body>\n')
    self.oprint ('<body>\n')
	self.oprint ('Empty\n')
    self.oprint ('<h2>GTester Unit Test Report</h2>\n')
    self.oprint ('<h3>Package: %(package)s, version: %(version)s</h3>\n' % self.info)
        self.oprint ('<h5>Report generated from: %(revision)s</h5>\n' % self.info)
    self.oprint ('</head>\n')
    self.oprint ('<html><head>\n')
    self.oprint ('</html>\n')
    self.oprint (node.nodeValue)
      self.oprint ('<script language="javascript" type="text/javascript">message_array["b%u_t%u_"] = "%s";</script>\n' % (self.bcounter, self.tcounter, ptxt))
      self.oprint ('<script language="javascript" type="text/javascript">message_array["b%u_t%u_"] = "%s";</script>\n' % (self.bcounter, self.tcounter, txt))
    self.oprint (self.cssjs)
    self.oprint ('<table id="ResultTable" width="100%" border="1">\n<tr>\n')
    self.oprint ('</table>\n')
      self.oprint ('<td align="center"><a href="javascript:view_testlog (\'%s\', \'%s\', \'%s\', \'%s\', \'Output:\', \'b%u_t%u_\')">Details</a></td>\n' %
      self.oprint ('<td align="center"><a href="javascript:view_testlog (\'%s\', \'%s\', \'%s\', \'%s\', \'Test Results:\', \'b%u_t%u_\')">Details</a></td>\n' %
      self.oprint ('<td align="center">-</td>\n')
    self.oprint ('<td align="center">-</td>\n')
    self.oprint ('<td align="right">%f</td>\n' % self.total_duration)
    self.oprint ('<td align="right" %s>%.2f%%</td>\n' % (pcolor, perc))
	self.oprint ('<td align="right" %s>%.2f%%</td>\n' % (pcolor, perc))
    self.oprint ('<td align="right" %s>%s</td>\n' % (rcolor, result))
	self.oprint ('</td>\n')
    self.oprint ('<td>%s %s</td> <td align="right">%s</td> \n' % (html_indent_string (4), path, duration))
    self.oprint ('<td><strong>Totals:</strong> %u Binaries, %u Tests, %u Failed, %u Succeeded</td>' %
    self.oprint ('<th>Program / Testcase </th>\n')
    self.oprint ('<th style="width:5em">Result</th>\n')
    self.oprint ('<th style="width:5em">View</th>\n')
    self.oprint ('<th style="width:8em">Duration (sec)</th>\n')
    self.oprint ('<title>GTester Unit Test Report</title>\n')
    self.oprint ('<tr>')
    self.oprint ('<tr id="b%u_t%u_" keywords="%s all" class="HiddenSection">\n' % (self.bcounter, self.tcounter, result))
    self.oprint ('</tr>\n')
	self.oprint ('</tr>\n')
    self.oprint ('<tr><td><strong>%s</strong></td><td align="right">%f</td> <td align="center">\n' % (binary.name, binary.duration))
        self._path = attribute_as_text(self._case, 'path')
    self.process_children (node)
    self.random_seed = ''
    self.skipped_cases = 0
    self.success_cases = 0
    self.tcounter = 0
    self.tcounter = 1
    self.tcounter += 1
    self.testcases = []
    self.total_duration = 0
    self.total_duration += binary.duration
    self.total_fcounter = 0
    self.total_fcounter += result != 'success'
    self.total_tcounter = 0
    self.total_tcounter += 1
      self.trampoline (child)
            # skip like unittest does, instead the runner just bypasses N test.
    skipped = bool (int (attribute_as_text (node, 'skipped') + '0'))
  string = ''
    string += uncollapsible_space
  </style>
  <style type="text/css" media="screen">
    subunit = None
      SubunitWriter(rr.get_info(), rr.binary_list()).printout()
      'success': 'bgcolor="lightgreen"',
            # Sucessful tests may have performance metrics.
    sys.stdout.write (message)
          tag.className = "HiddenSection";
          tag.className = "VisibleSection";
    tags = ptag.getElementsByTagName (tagtype);
      tag = tags[i];
# TestBinary object, instantiated per test binary in the log file
                test = GTestCase(tc, binary)
# test report reader, this class collects some statistics and merges duplicate test binary runs
                   ('TestResultWindow', binary.file, binary.random_seed, path, self.bcounter, self.tcounter))
                test.run(reporter)
        # the name of the case - e.g. /dbusmenu/glib/objects/menuitem/props_boolstr
# This library is distributed in the hope that it will be useful,
# This library is free software; you can redistribute it and/or
        time = datetime.datetime.utcnow().replace(tzinfo=iso8601.Utc())
                timedelta = datetime.timedelta(0, 0, duration)
                time = time + timedelta
    TreeProcess.__init__ (self)
        try:
    try:        dur = float (dur)
      try:	method = getattr (self, 'handle_' + re.sub ('[^a-zA-Z0-9]', '_', name))
        txt = ''
  txt = ''
      txt = message_array[msgid];
                txt += '\n'
      txt += node_as_text (child)
            txt += node_as_text (enode)
                    txt = node_as_text (perf)
        txt = node_as_text (perf)
      txt += node.nodeValue
                    txt = 'Performance(' + (pmin and 'minimized' or 'maximized'
        txt = re.sub (r'\n', r'\\n', txt)
      txt = re.sub (r'\n', r'\\n', txt)
        txt = re.sub (r'&', r'&amp;', txt)
      txt = re.sub (r'&', r'&amp;', txt)
        txt = re.sub (r'<', r'&gt;', txt)
      txt = re.sub (r'<', r'&lt;', txt)
        txt = re.sub (r'"', r'\\"', txt)
      txt = re.sub (r'"', r'\\"', txt)
      txt = self._error_text(node)
            txt = self._error_text(self._case)
                        ) + '): ' + txt.strip() + '\n'
        txt = '<strong>Performance(' + (pmin and '<em>minimized</em>' or '<em>maximized</em>') + '):</strong> ' + txt.strip() + '<br />\n'
  uncollapsible_space = ' &nbsp;' # HTML won't compress alternating sequences of ' ' and '&nbsp;'
#!/usr/bin/python
      var doc = w.document;
      var key = tag.getAttribute ("keywords");
      var w = window.open ("", // URI
# version 2 of the License, or (at your option) any later version.
    .VisibleSection { }
        """What test is this? Returns the gtester path for the testcase."""
                           wname,
  xd = xml.dom.minidom.parse (files[0])
# xml utilities
# You should have received a copy of the GNU Lesser General Public
            # zero perhaps.

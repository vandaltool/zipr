#                2004-2008 Michael Vogt
#                2004 Michiel Sikkes
#  along with this program; if not, write to the Free Software
    app.main(options)
    app = UpdateManager(data_dir, options)
#  Author: Michiel Sikkes <michiel@eyesopened.nl>
  # Begin parsing of options
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
    controller = DistUpgradeController(view, datadir=data_dir)
    controller.doPartialUpgrade()
#  Copyright (c) 2004-2008 Canonical
  #       correctly, see http://bugs.python.org/issue4391
  data_dir = os.path.normpath(options.data_dir)+"/"
  #data_dir="/tmp/xxx/share/update-manager/"
  #data_dir="/usr/share/update-manager/"
                     default="/usr/share/update-manager/",
                     dest="check_dist_upgrades", default=False,
                     dest="devel_release", default=False,
                     dest="dist_upgrade", default=False,
                     dest="no_focus_on_map", default=False,
                     dest="no_update", default=False,
                     dest="show_version", default=False,
                     dest="use_proposed", default=False,
  enc = locale.getpreferredencoding()
  except:
                     # first time (see also the gtk devhelp page)
    # FIXME: Having a "partial upgrade" view here would make it possible
  #FIXME: Workaround a bug in optparser which doesn't handle unicode/str
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
    from DistUpgrade.DistUpgradeController import DistUpgradeController
from DistUpgrade.DistUpgradeVersion import VERSION
    from DistUpgrade.DistUpgradeViewGtk3 import DistUpgradeViewGtk3
from gettext import gettext as _
from gi.repository import Gtk
from optparse import OptionParser
from UpdateManager.UpdateManager import UpdateManager
  gettext.bindtextdomain("update-manager", "/usr/share/locale")
  gettext.textdomain("update-manager")
gi.require_version("Gtk", "3.0")
#  GNU General Public License for more details.
  Gtk.init_check(sys.argv)
                     help=_("Check if a new Ubuntu release is available").decode(enc))
                     help=_("Check if upgrading to the latest devel release "
                     help=_("Directory that contains the data files").decode(enc))
                     help=_("Do not check for updates when starting").decode(enc))
                     help=_("Do not focus on map when starting").decode(enc))
                     help=_("Show version and exit").decode(enc))
                     help=_("Test upgrade with a sandbox aufs overlay").decode(enc))
                     help=_("Try to run a dist-upgrade").decode(enc))
                     help=_("Upgrade using the latest proposed version of the release upgrader").decode(enc))
if __name__ == "__main__":
  if options.dist_upgrade == True:
  if options.show_version:
import gettext
import gi
import locale
    #import logging
import os
import sys
                     # input focus control when it is displayed for the
                          "is possible").decode(enc))
#  License, or (at your option) any later version.
    locale.setlocale(locale.LC_ALL, "")
    #logging.basicConfig(level=logging.DEBUG)
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#          Michael Vogt <mvo@debian.org>
#  modify it under the terms of the GNU General Public License as 
  (options, args) = parser.parse_args()
  parser.add_option ("-c", "--check-dist-upgrades", action="store_true",
  parser.add_option ("--data-dir", "", 
  parser.add_option ("-d", "--devel-release", action="store_true",
  parser.add_option ("--dist-upgrade", action="store_true",
  parser.add_option ("--no-focus-on-map", action="store_true",
  parser.add_option ("--no-update", action="store_true",
  parser.add_option ("-p","--proposed", action="store_true",
  parser.add_option ("-s","--sandbox", action="store_true", default=False,
  parser.add_option ("-V", "--version", action="store_true",
  parser = OptionParser()
    pass
    print "%s: version %s" % (os.path.basename(sys.argv[0]), VERSION)
                     # property that controls if a new window takes the
#  published by the Free Software Foundation; either version 2 of the
  #       Should be resolved by Python3
    sys.exit(0)
                     # that is used to create the overlay
#  This program is distributed in the hope that it will be useful,
#  This program is free software; you can redistribute it and/or 
    #        to get rid of the ugly hideStep() stuff
                     # TRANSLATORS: aufs is the name of the filesystem
                     # TRANSLATORS: this describes the "focus-on-map" gtk
# update-manager.in - easy updating application
#!/usr/bin/python
    view = DistUpgradeViewGtk3(data_dir)
    view.label_title.set_markup("<b><big>%s</big></b>" % _("Running partial upgrade"))
#  You should have received a copy of the GNU General Public License

#!/bin/sh
cat <<EOF
  # check if we have 2 parameters left, if so the first is the new ID file
  echo "$0: ERROR: No identities found" >&2
  echo "Usage: $0 [-i [identity_file]] [user@]machine" >&2
    else
{ eval "$GET_ID" ; } | ssh $host "umask 077; test -d ~/.ssh || mkdir ~/.ssh ; cat >> ~/.ssh/authorized_keys" || exit 1
  exit 1
  GET_ID="cat \"${ID_FILE}\""
    GET_ID="$GET_ID ssh-add -L"
host=`echo $1 | sed 's/:$//'`
      ID_FILE="$1"
      ID_FILE="$1.pub"
ID_FILE="${HOME}/.ssh/id_rsa.pub"
    if expr "$1" : ".*\.pub" > /dev/null ; then
if [ "-i" = "$1" ]; then
if [ "$#" -lt 1 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
  if [ -n "$2" ]; then
  if [ x$SSH_AUTH_SOCK != x ] && ssh-add -L >/dev/null 2>&1; then
if [ -z "`eval $GET_ID`" ] && [ -r "${ID_FILE}" ] ; then
if [ -z "`eval $GET_ID`" ]; then
Now try logging into the machine, with "ssh '$host'", and check in:
# Obviously, the remote machine must accept password authentication,
# or one of the other keys in your ssh-agent, for this to work.
# Shell script to install your public key on a remote machine
    shift         # and this should leave $1 as the target name
  ~/.ssh/authorized_keys
# strip any trailing colon
# Takes the remote machine name as an argument.
to make sure we haven't added extra keys that you weren't expecting.

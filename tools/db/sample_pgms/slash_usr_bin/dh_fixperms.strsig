			"2>/dev/null | xargs -0r chmod 440");
		"2>/dev/null | xargs -0r chmod 644");
			"2>/dev/null | xargs -0r chmod 644");
		"2>/dev/null | xargs -0r chmod a-X");
		"2>/dev/null | xargs -0r chmod go=rX,u+rw,a-s");
		"2>/dev/null | xargs -0r chmod uga-w");
		"2>/dev/null | xargs -0r chown --no-dereference 0:0");
	# ADA ali files should be mode 444 to avoid recompilation
	# ..and desktop files ..
	# ..and header files ..
	# (and .la files from libtool) ..
	# ..and OCaml native-code shared objects ..
	# .. and perl modules.
	# ..and so are executable shared and static libraries 
B<dh_fixperms> is a debhelper program that is responsible for setting the
B<dh_fixperms> makes all files in F<usr/share/doc> in the package build directory
B<dh_fixperms> [S<I<debhelper options>>] [B<-X>I<item>]
by root, and it removes group and other write permission from all files. It
				complex_doit("find $tmp/$dir -type f $find_options -print0 2>/dev/null",
		complex_doit("find $tmp/etc/sudoers.d",
	complex_doit("find $tmp $find_options -print0",
	complex_doit("find $tmp -perm -5 -type f",
	complex_doit("find $tmp ! -type l $find_options -print0",
	complex_doit("find $tmp/usr/include -type f $find_options -print0",
	complex_doit("find $tmp/usr/lib/perl5 $tmp/usr/share/perl5 -type f",
	complex_doit("find $tmp/usr/lib -type f",
	complex_doit("find $tmp/usr/share/applications -type f $find_options -print0",
	complex_doit("find $tmp/usr/share/doc -type d $find_options -print0 2>/dev/null",
	complex_doit("find $tmp/usr/share/doc -type f $find_options ! -regex '$tmp/usr/share/doc/[^/]*/examples/.*' -print0 2>/dev/null",
		complex_doit("find $tmp/usr/share/lintian/overrides",
	complex_doit("find $tmp/usr/share/man $tmp/usr/man/ $tmp/usr/X11*/man/ -type f",
desktop files that have it set. It makes all files in the standard F<bin> and
dh_fixperms - fix permissions of files in package build directories
Exclude files that contain I<item> anywhere in their filename from having
(excluding files in the F<examples/> directory) be mode 644. It also changes
	# executable by default, but leave examples directories alone.
	# Executable man pages are a bad thing..
	# Files in $tmp/etc/sudoers.d/ must be mode 440.
		$find_options="! \\( $dh{EXCLUDE_FIND} \\)";
		"$find_options -print0 2>/dev/null | xargs -0r chmod 644");
	# Fix up premissions in usr/share/doc, setting everything to not
foreach my $package (@{$dh{DOPACKAGES}}) {
		for my $dir (qw{usr/bin bin usr/sbin sbin usr/games etc/init.d}) {
F<sbin> directories, F<usr/games/> and F<etc/init.d> executable (since v4). Finally,
	# General permissions fixing.
=head1 AUTHOR
=head1 DESCRIPTION
=head1 NAME
=head1 OPTIONS
=head1 SEE ALSO
=head1 SYNOPSIS
	if (! compat(3)) {
	if (defined($dh{EXCLUDE_FIND}) && $dh{EXCLUDE_FIND} ne '') {
			if (-d "$tmp/$dir") {
	if (-d "$tmp/etc/sudoers.d") {
	if (-d "$tmp/usr/share/lintian") {
=item B<-X>I<item>, B<--exclude> I<item>
it removes the setuid and setgid bits from all files in the package.
Joey Hess <joeyh@debian.org>
L<debhelper(7)>
	# Lintian overrides should never be executable, too.
	my $find_options='';
	my $tmp=tmpdir($package);
		"-name '*.ali' $find_options -print0",
		"\\( -name '*.cmxs' \\) $find_options -print0",
		"\\( -name '*.so.*' -or -name '*.so' -or -name '*.la' -or -name '*.a' \\) $find_options -print0",
		"-perm -5 -name '*.pm' $find_options -print0",
permissions of files and directories in package build directories to a
		# Programs in the bin and init.d dirs should be executable..
removes execute permissions from any libraries, headers, Perl modules, or
sane state -- a state that complies with Debian policy.
their permissions changed. You may use this option multiple times to build
the permissions of all man pages to mode 644. It makes all files be owned
This program is a part of debhelper.
			"-type f $find_options -print0",
			"-type f ! -perm 440 $find_options -print0",
up a list of things to exclude.
use Debian::Debhelper::Dh_Lib;
use strict;
#!/usr/bin/perl -w
	# v4 and up
		"| xargs -0r chmod 644");
		"| xargs -0r chmod 755");
					"| xargs -0r chmod a+x");

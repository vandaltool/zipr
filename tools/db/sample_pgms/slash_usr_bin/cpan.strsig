	1	An unknown error
	2	The was an external problem
	4	There was an internal problem with the script
	8	A module failed to install
Adam Kennedy pointed out that exit() causes problems on Windows
brian d foy, C<< <bdfoy@cpan.org> >>
C<$CPAN::Config> as an anonymous hash.
comes directly from CPAN.pm.
config with C<-j>, and that config sets up its own work directories.
Copyright (c) 2001-2009, brian d foy, All Rights Reserved.
	cpan -a
	cpan [-ahrvACDlLO]
	cpan [-cfgimt] module_name [ module_name ... ]
cpan - easily interact with CPAN from the command line
	cpan -fi CGI::Minimal URI
	% cpan -f -i Module::Foo
	cpan -h
	cpan -i Netscape::Booksmarks Business::ISBN
	cpan -J
	cpan -j some/other/file Module::Foo
	cpan module_name [ module_name ... ]
	cpan -r
	cpan -v
	# create an autobundle
Creates a CPAN.pm autobundle with CPAN::Shell->autobundle.
	# current directory
distribution.
Downloads to the current directory the latest distribution of the module.
Download to the current directory the latest distribution of the
	# dump the configuration
Dump the configuration in the same format that CPAN.pm uses. This is useful
Each line has three columns: module name, local version, and CPAN
    eval 'exec /usr/bin/perl -S $0 ${1+"$@"}'
exit( $rc || 0 );
for a new, custom configuration.
	# force install modules ( must use -i )
Force the specified action, when it normally would have failed. Use this
for checking the configuration as well as using the dump as a starting point
	git://github.com/briandfoy/cpan_script.git
=head1 AUTHOR
=head1 BUGS
=head1 COPYRIGHT
=head1 CREDITS
=head1 DESCRIPTION
=head1 EXIT VALUES
=head1 NAME
=head1 SEE ALSO
=head1 SOURCE AVAILABILITY
=head1 SYNOPSIS
=head1 TO DO
=head2 Examples
=head2 Options
	if $running_under_some_shell;
If you want this feature, check out Yanick Champoux's C<Git::CPAN::Patch>
-i is not optional for installing a module when you need to force it:
in some cases it has to divine a failure by the output of things it does
	# install modules ( sole -i is optional )
Install the specified modules.
=item -a
=item -A module [ module ... ]
=item -c module
=item -C module [ module ... ]
=item -D module [ module ... ]
=item -f
=item -g module [ module ... ]
=item -h
=item -i
=item -J
=item -j Config.pm
=item -L author [ author ... ]
=item -m
=item -O
=item -r
=item -t
=item -v
Japheth Cleaver added the bits to allow a forced install (-f).
Jim Brandt suggest and provided the initial implementation for the
List the modules by the specified authors.
	# load a different configuration to install Module::Foo
Load the file that has the CPAN configuration data. This should have the
Make the specified modules.
(meaning, modules locally installed but have newer versions on CPAN).
modules, unpack each distribution, and create a git repository for each
moment it uses CPAN.pm to do the work, but it is not a one-shot command
Most behaviour, including environment variables and configuration,
my $rc = App::Cpan->run( @ARGV );
* none noted
not control. For now, the exit codes are vague:
of the other options and arguments.
* one shot configuration values from the command line
positive number if it thinks that something failed. Note, however, that
	# print a help message
Print a help message and exit. When you specify C<-h>, it ignores all
Print the script version and CPAN.pm version then exit.
	# print the version numbers
	# recompile modules
Recompiles dynamically loaded modules with CPAN::Shell->recompile.
Run a `make test` on the specified modules.
runner for CPAN.pm.
Runs a `make clean` in the specified module's directories.
same directory. This isn't so much of a concern if you're loading a special
same format as the standard F<CPAN/Config.pm> file, which defines 
Shows the primary maintainers for the specified modules.
Show the F<Changes> files for the specified modules
Show the module details. This prints one line for each out-of-date module
Show the out-of-date modules.
The script exits with zero if it thinks that everything worked, or a 
This code is in Github:
This script provides a command interface (not a shell) to CPAN. At the
this since you might end up with multiple scripts trying to muck in the
to install a module even if its tests fail. When you use this option,
Turn off CPAN.pm's attempts to lock anything. You should be careful with 
UNIMPLEMENTED
up-to-date and Changes features.
use App::Cpan;
use strict;
use vars qw($VERSION);
#!/usr/bin/perl
#!/usr/local/bin/perl
version.
$VERSION = '1.57';
where this script ends up with a .bat extension
# will this work under Strawberry Perl?
	# with arguments and no switches, installs specified modules
	# with just the dot, install from the distribution in the
	# without arguments, but some switches
	# without arguments, starts CPAN.pm shell
	# with switches, installs modules with extra behavior
You may redistribute this under the same terms as Perl itself.

                 );
              );
            }
       }
  $" = ' ';
#########################
#############################################################################
	      }
	  @$_[0, 1], "$item->[2]_$_->[2]", "$item->[2].$_->[2]",
    (\$] >= 5.005 ?     ## Add these new keywords supported since 5.005
5.6.2.  C<Test::More> will be added to PREREQ_PM in the generated
      (ABSTRACT_FROM  => '$modpmname', # retrieve abstract from module
a C enumeration. Otherwise skip only those constants that are defined in an
#a combination
	'add_cppflags' => $addflags, 'c_styles' => \@styles;
    # additional directory /opt/net/lib
Additional flags to specify to C preprocessor when scanning header for
Additionally, F<h2xs> has no facilities to intuit that a function
    # Add some other possible but meaningless values for macros
	$after = '=cut';
	$after = '__END__';
    -a, --gen-accessors   Generate get/set accessors for struct and union members
# -A implies -c.
Allows an extension to be created for a header even if that header is
Allows a pre-existing extension directory to be overwritten.
also the section on L<LIMITATIONS of B<-x>>.
an additional argument. Embedded structures and unions are returned as a
and C<sub AUTOLOAD> for constants.
# and it doesn't hurt to have one
	     and not ($image eq 'T_PACKED' and $typemap eq $stdtypemap)) {
#(and return the new value) if called with an additional argument.
and the corresponding header files.  How to create an extension which
      and $typedef_rex and $type =~ s/($typedef_rex)/$typedefs_pre{$1}/go) {
    -A, --omit-autoload   Omit all autoloading facilities (implies -c).
a perl variable of the same name magically tied to the C variable.
#Applicable to objects of type C<$ptrname>.
appropriate VERSION class method, users may not be able to specify a
archive can use it get an idea of the modules uses. It is usually a
A README file is required for CPAN modules since CPAN extracts the
         are any libraries that might be needed for loading the
are using to run h2xs will have no effect.  If unspecified h2xs will default
# Are we using AutoLoader or not?
    $argnames[-1] = '...';
#  @ARGS
  @ARGS = map {/[\s\"\'\`\$*?^|&<>\[\]\{\}\(\)]/ ? "'$_'" : $_} @ARGS;
	$argtypes[$arg]	$argnames[$arg]$argarrays[$arg]
# As Ilya suggested, use a name that contains - and then it can't clash with
assumes that the header files are F<interface_simple.h> and
As usual, run
Attempting to test constant code in $ext$modpname/Makefile.PL:
at your option, any later version of Perl 5 you may have available.
$author ||= "A. U. Thor";
       AUTHOR         => '$author <$email>') : ()),
#$author, E<lt>${email}E<gt>
#author of the extension was negligent enough to leave the stub
$author =~ s/'/\\'/g if defined $author;
	   $author =~ s/,.*$//; # in case of sub fields
                'autogen-xsubs|x'    => \$opt_x,
# Autoload methods go after $after, and are processed by the autosplit program.
Automatically generate XSUBs basing on function declarations in the
	$bad_macs{$k} = $td{$k} = $td{$v} if exists $td{$v};
    -B, --beta-version    Use beta \$VERSION of 0.00_01 (ignored if -v).
    -b, --compat-version  Specify a perl version to be backwards compatible with.
    = "(?:\\b(?:(?:__const__|const)$keep_deep_const|static|inline|__inline__)\\b\\s*)*";
be "0.00_01" unless B<-v> is specified.
    #  be added automatically to include path.
# Before `make install' is performed this script should be runnable with
BEGIN { plan tests => $tests };
BEGIN { use_ok('$module') };
## Below is stub documentation for your module. You'd better edit it!
                'beta-version|B'     => \$opt_B,
better interfaces than what h2xs could guess.
#better survive longer than \$obj.
between them).
B<Experimental>: for each variable declared in the header file(s), declare
B<h2xs> B<-h>|B<-?>|B<--help>
B<h2xs> [B<OPTIONS> ...] [headerfile ... [extra_libraries]]
#  blah blah blah
#Blah blah blah.
# block is that all the hashes are then s///g out.
bootstrap $module \$VERSION;
by at least one other switch if you omit I<regular expression> and have some
by including arguments of the form B<-L/another/library/path> in the
can easily merge(1) your changes to autogenerated files if you decide
	    # Cannot do: (-1) and ((LHANDLE)3) are OK:
C<AUTOLOAD> from the .pm file.
C<-c> and C<-f> are implicitly enabled.
$Ccomment    ${Cpre}OBJECT            => '\$(O_FILES)', # link all the C files too
  cd Ext/Ension
C<Ext::Ension>.  If you need some preprocessor directives and/or
      $c->get('keywords')->{'__restrict'} = 1;
  # changes.
# change 'tests => $tests' to 'tests => last_test_to_print';
	char *addr
	char *CLASS = NO_INIT
	    char *s;
	char *s = SvPV(sv,len);
	    char  *s = SvPV((SV*)SvRV($arg), len);
	    char *s = SvPV((SV*)SvRV(ST(0)), len);
chdir($modpname) || die "Can't chdir $ext$modpname: $!\n";
    # check if it is numeric
    # Clip trailing '.' for portability -- non-VMS OSs don't expect it
        close CH;
        close(CH);
  close(EX) || die "Can't close $ext$modpname/Changes: $!\n";
close(EX) || die "Can't close $ext$modpname/$testfile: $!\n";
close MANI;
close(PL) || die "Can't close $ext$modpname/Makefile.PL: $!\n";
close PM;
close(RM) || die "Can't close $ext$modpname/README: $!\n";
  close TM or die "Cannot close typemap file for write: $!";
    close(TYPEMAP) or die "Cannot close $typemap: $!";
close XS;
C<Makefile.PL>.
C<NAME1,NAME2>. In this case NAME1 is used instead of the specified
#C<$name>, the internal representation of which is a reference to a
      $c = new C::Scan 'filename' => $filename, 'filename_filter' => $filter,
    CODE:
  # code embedded into Makefile.PL
    -C, --omit-changes    Omit creating the Changes file, add HISTORY heading
    -c, --omit-constant   Omit the constant() function and specialised AUTOLOAD
        $compat_version =
                'compat-version|b=s' => \$opt_b,
        $compat_version = sprintf("%d.%03d%03d",$maj,$min,$sub);
Consider the autogenerated files as skeletons only, you may invent
Consider this section as a guideline only, some other options of h2xs
    # Constants are created for all #defines and enums h2xs can find
    # Constants are created for all #defines but only for enums
	@const_names
		$const_names{$_}++;
                $const_names{$key} = { name => $key, macro => 1 };
                'const-subs|s=s'     => \$opt_s,
%const_xsub = map { $_,1 } split(/,+/, $opt_s) if $opt_s;
#Converts an object of type C<$name> to an object of type C<$ptrname>.
    copy (\$fallback, \$file) or die "Can't copy \$fallback to \$file: \$!";
COPYRIGHT AND LICENCE
Copyright (C) ${\(1900 + (localtime) [5])} by $author
Copy your header files and C files to this directory F<Ext/Ension>.
correctly.
                'cpp-flags|F=s'      => \$opt_F,
Create a perl subroutine for the specified macros rather than autoload
# Create a simple README since this is a CPAN requirement
#Creates an empty object of type C<$name>.  The corresponding packed
    # Creates templates for an extension named RPC
		croak("Size \%d of packed data != expected \%d",
		croak(\"Size %d of packed data != expected %d\",
	    croak("THIS is not of type $name");
	    croak(\"$var is not of type ${ntype}\")
	croak("Your vendor has not defined the $module macro $_");
C::Scan required if you use -x option.
C::Scan v. 0.70 or later required unless you use -o . option.
C::Scan v. 0.73 or later required to use -m or -a options.
    $C::Scan::VERSION >= 0.70
      $c->set('includeDirs' => ["$Config::Config{archlib}/CORE", $cwd]);
C<Test::More> rather than C<Test> which is the default for versions before
    -d, --debugging       Turn on debugging messages.
                'debugging|d'        => \$opt_d,
decide whether fixes for the module are worth downloading.
	    $_ = $def;
    # Default behavior, extension is Rusers
Defaulting to backwards compatibility with perl %d.%d.%d
                          (default is select all).
                           DEFAULT_TYPE => $opt_t,
                   DEFAULT_TYPE => $opt_t,
                'default-type|t=s'   => \$opt_t,
#define MY_CXT_KEY "${module}::_guts" XS_VERSION
    DEFINE            => '$opt_F', # e.g., '-DHAVE_SOMETHING'
    defines:
#define statement which was in the C header files.
      delete $const_names{$prefixless{$k}};
DEPENDENCIES
# Determine @ISA.
    Devel::PPPort::WriteFile('ppport.h')
        || die "Can't create $ext$modpname/ppport.h: $!\n";
      die "Can't find $tmp_path_h in @dirs\n"
    die <<EOD;
    die <<EOFUSAGE;
	die "Won't overwrite existing $ext$modpname\n" if -e $modpname;
directory, so it will find your header files OK.
-d $modpmdir || mkpath([$modpmdir], 0, 0775);
-d "$modpname"   || mkpath([$modpname], 0, 0775);
                          does not exist.
	   $domain =~ s/^\.//;
Do not forget to edit the documentation in the generated F<.pm> file.
# Do not simply export all your public functions/methods/constants.
Do not use C<Devel::PPPort>: no portability to older version.
Do not use C<Exporter> and/or export any symbol.
Do not use the module C<AutoLoader>; but keep the constant() function
Do not use the pragma C<strict>.
Do not use the pragma C<warnings>.
    dSP;
e.g., S<-p sec_rgy_> This sets up the XS B<PREFIX> keyword and removes
      } else {
      else {
    } else {
    else {
  } else {
  else {
} else {
	      else {
elsif ( $compat_version < 5.006002 )
      elsif ($mode eq 'Typemap') {
elsif ($opt_o or $opt_F) {
      elsif (/^OUTPUT\s*$/)  { $mode = 'Output'; next; }
  elsif ($typedef_rex and $type =~ s/($typedef_rex)/$typedefs_pre{$1}/go) {
      elsif (/^TYPEMAP\s*$/) { $mode = 'Typemap'; next; }
$email  ||= 'a.u.thor@a.galaxy.far.far.away';
	   $email = "$username\@$domain";
    $entry = assign_typemap_entry($type);
    $entry = (td_is_struct($type) ? "T_OPAQUE_STRUCT" : "T_PTROBJ");
  $entry ||= $typemap{$otype}
enum whose name matches I<regular expression>.
EOFUSAGE
    -e, --omit-enums      Omit constants from enums in the constant() function.
	$epath = File::Spec->catdir('ext', $epath) if -d 'ext';
    eval 'exec /usr/bin/perl -S $0 ${1+"$@"}'
  eval $generate_code;
  eval {opendir(D,'.');};
  eval {require C::Scan; 1}
	# eval {require 'dumpvar.pl'; ::dumpValue($td)} or warn $@ if $opt_d;
    # eval {require 'dumpvar.pl'; ::dumpValue( [\@td, \%td] ); 1} or warn $@;
example C compilers and installed libraries) and any other information
#  $exp_doc .= <<EOD if $opt_p;
  $exp_doc .= <<EOD unless $skip_exporter;
$exp_doc$meth_doc$revhist
	@exported_names
expression, even if these types are C<typedef>-equivalent to types
    # extension directory...
         extension, e.g. -lm would try to link in the math library.
    # Extension is a pure Perl module with no XS code.
    # Extension is DCE::rgynbase
    # Extension is Lib::Foo which works at least with Perl5.005_03.
    # Extension is ONC::RPC.
    # Extension is ONC::RPC.  Still finds <rpcsvc/rusers.h>
    # Extension is rpcsvc::rusers. Still finds <rpcsvc/rusers.h>
Extensions that do no make use of static data can ignore this option.
    # Extra backslashes below because the string is passed to shell.
extra_libraries
extra-libraries argument.
        $extralibs .= "$arg ";
  # ExtUtils::Constant.
        $fail++;
    \$fail = 1;
    -F, --cpp-flags       Additional flags for C preprocessor/compile.
      $fdecls = [@$fdecls[@good]];
      $fdecls_parsed = [@$fdecls_parsed[@good]];
      $fdecls_parsed = [ @h{@fnames} ];
    -f, --force           Force creation of the extension even if the C header
F<h2xs> would not distinguish whether an argument to a C function
	$filename = $`;
file NAME2.
Files "$ext$modpname/$fallbackdirname/$file" and "$ext$modpname/$file" differ.
  # files to replace their "fallback" counterparts before distributing your
	$filter = $';
    # Fix up for case-sensitive file systems
$fmask = qr{$opt_M} if defined $opt_M;
    @fnames_no_prefix
    @fnames_no_prefix = @fnames;
    @fnames = sort map $_->[1], @$fdecls_parsed; # 1 is NAME
   foo(addr,l)
    foo(n)
    foo(sv)
                'force|f'            => \$opt_f,
  foreach (@files) {
foreach my $constname (qw(
    foreach my $file ($constscfname, $constsxsfname) {
  foreach my \$file ('$constscfname', '$constsxsfname') {
    foreach my $filename (@path_h) {
    foreach my $path_h (@path_h) {
    foreach my $path_h (@path_h_ini) {
  foreach my $typemap (@tm) {
foreach (sort keys %const_xsub) {
For function arguments declared as C<const>, omit the const attribute in the
	for (local $_ = 0; $_ < @vdecls; ++$_) {
  for my $arg (0 .. $numargs - 1) {
  for my $decl (@$fdecls_parsed) { print_decl(\*XS, $decl) }
      for my $dir (@paths) {
      for my $i (0..$#$fdecls_parsed) {
            for my $item (split /,/, $enum_body) {
    for my $k (keys %bad_macs) {
    for my $k (qw(char double float int long short unsigned signed void)) {
for (sort(keys(%const_names))) {
  for $type (sort keys %types_seen) {
for (@vdecls) {
For versions < 5.6.0, the changes are.
	$found++, last
                          from the XS file.
from typemaps.  Should not be used without B<-x>.
    $fullpath{$path_h} = $fullpath;
	$fullpath{$path_h} = $fullpath;
                'func-mask|M=s'      => \$opt_M,
function declarations.  Writes these options in the generated F<Makefile.PL>
            # Function prototypes are processed below.
gave unexpected error $@
                'gen-accessors|a'    => \$opt_a,
Generate an accessor method for each element of structs and unions. The
$generate_code
generated methods are named after the element name; will return the current
generated XS code.
Generates a .pm file which is backwards compatible with the specified
                'gen-tied-var|m'     => \$opt_m,
_get_$name(IV index, SV *sv) {
_get_$name(THIS)
GetOptions(%options) || usage;
Getopt::Long::Configure('bundling');
Getopt::Long::Configure('pass_through');
    get_typemap();
    -g, --global          Include code for safely storing static data in the .xs file.
/* Global Data */
                'global|g'           => \$opt_g,
    (glob '*.c'), (glob '*.cc'), (glob '*.C');
good idea to provide version information here so that people can
} # ' # Grr
# ' # Grr
  h2xs -Afn Ext::Ension
    h2xs -b 5.5.3 -e '^bar_' -n Lib::Foo foo.h
    h2xs -b 5.5.3 -n Lib::Foo foo.h
    h2xs -cfn ONC::RPC
    h2xs -cfn RPC
h2xs - convert .h C header files to Perl extensions
    h2xs -c rpcsvc/rusers
    h2xs -e -n Module::Foo foo.h
h2xs looks for header files I<after> changing to the extension
    h2xs -M '^av_' -xAn perl2 perl.h,proto.h
    h2xs -n DCE::rgynbase -p sec_rgy_ \
    h2xs -n DCE::rgynbase -p sec_rgy_ dce/rgynbase
    h2xs -n Module::Foo -e foo.h
    h2xs -n ONC::RPC rpcsvc/rusers
    h2xs -n RUSERS rpcsvc/rusers
h2xs [OPTIONS ... ] [headerfile [extra_libraries]]
    h2xs -o '^[S]V \*$' -M '^av_' -xAn perl2 perl.h,proto.h
  h2xs -Oxan Ext::Ension interface_simple.h interface_hairy.h
    h2xs rpcsvc::rusers
    h2xs rpcsvc/rusers
    h2xs rpcsvc/rusers -L/opt/net/lib -lrpc
  # h2xs will later check that these are the same as those generated by the
    h2xs -xAn perl1 -F "-DEXT=extern -DdEXT= -DINIT\(x\)=" perl.h
    h2xs -xAn perl2 perl.h,proto.h
    h2xs -X My::Module
hand-editing. Such may be objects which cannot be converted from/to a
=head1 AUTHOR
#=head1 AUTHOR
#=head1 COPYRIGHT AND LICENSE
=head1 DESCRIPTION
#=head1 DESCRIPTION
=head1 DIAGNOSTICS
=head1 ENVIRONMENT
=head1 EXAMPLES
#=head1 HISTORY
=head1 LIMITATIONS of B<-x>
=head1 NAME
#=head1 NAME
=head1 OPTIONS
=head1 SEE ALSO
#=head1 SEE ALSO
=head1 SYNOPSIS
#=head1 SYNOPSIS
#=head2 EXPORT
#=head2 Exportable constants
#=head2 Exportable functions
=head2 Extension based on F<.h> and F<.c> files
#=head2 Object and class methods for C<$name>/C<$ptrname>
header file.  The package C<C::Scan> should be installed. If this
header scanning process will be assumed to have this type.  Future versions
                'help|h|?'           => \$opt_h,
here.  The extension Makefile.PL will take care of checking whether
    -h, -?, --help        Display this help message.
how to install the module, any machine dependencies it may have (for
	$h =~ s#^/usr/include/##;
$Icomment    INC               => '$I', # e.g., '${Ihelp}-I/usr/include/other'
          .  "(i.e. 5.5.0)\n";
  if ($@) {
# If a constant() function was #included then output a corresponding
    /* If any of the fields in the my_cxt_t struct need
                          If a pattern is given, only the matching enums are
    if ($arg =~ /^-l/i) {
if C<n> is an input parameter.
      if (compare($file, $fallback)) {
if ( $compat_version < 5.006 ) {
if ( $compat_version < 5.006002 and $new_test )
if ( $compat_version < 5.006 and !$opt_X and $use_xsloader)
   if (@const_names) {
if (@const_names and not $opt_P) {
#ifdef $_
if (defined $fdecls and @$fdecls and not $opt_P) {
      if (defined $item->[2]) {
      if (defined $opt_e and !$opt_e) {
      } # if (!defined $opt_e or $opt_e)
         if defined $opt_p;
	    if (defined $opt_p) {
	  if (defined $post) {
       if (defined $username && defined $author) {
  if ($do_keep_deep_const) {	# Keep different compiled /RExen/o separately!
  # If $do_keep_deep_const this is heuristic only
if  (eval {require ExtUtils::Constant; 1}) {
    if ($fail) {
if (\$fail) {
if (!@files) {
if (!@files) { @files = map {chomp && $_} `ls`; }
    if ($fmask) {
	    if (!$fmask or /$fmask/) {
      if ($found) {
	  if -f ($path_h = File::Spec->catfile($dir, $tmp_path_h));
      if ($fullpath{$filename} =~ /,/) {
      if (/^INPUT\s*$/)   { $mode = 'Input'; next; }
If I<regular expression> is not given, skip all constants that are defined in
    if ($item->[0] =~ /_ANON/) {
	if (items > 1)
	    if (len != sizeof(THIS))
	    if (len != sizeof($var))
    if ($maj < 5 || ($maj == 5 && $min < 6)) {
      if ( $name !~ /::/ ) {
    if (not -f $path_h) {
    if ($notnum) {
  if (not $out
  if ($numargs and $argtypes[-1] eq '...') {
if ($^O eq 'VMS') {
    if ($^O eq 'VMS') {  # Consider overrides of default location
	if ($^O eq 'VMS') { $h =~ s#.*vms\]#sys/# or $h =~ s#.*[:>\]]##; }
if ( $old_test or ($compat_version < 5.006002 and not $new_test ))
      if ($opt_a) {
  if ($opt_a) {
if( $opt_b ){
if ($opt_B) {
if( $opt_B ){
    if (!$opt_c) {
if (!$opt_c) {
if( ! $opt_c ) {
      if $opt_d;
	  if $opt_d;
	if ( ! $opt_f && ! -f "$rel_path_h" );
  if ($opt_k) {
      if ($opt_m) {
  if (($opt_m || $opt_a) && $C::Scan::VERSION < 0.73) {
if ($opt_O) {
	      if (!/^$opt_p(\d)/) {
if( $opt_P ){ # if POD is disabled
if( $opt_v ){
  if ($opt_x) {
if ($opt_x) {
} # if( ! $opt_X )
if ($opt_x && $opt_a) {
if( ! $opt_X ){ # print bootstrap, unless XS is disabled
if (!$opt_X) { # print C stuff, unless XS is disabled
if( ! $opt_X ){ # print XS, unless it is disabled
if( ! $opt_X ){  # use XS, unless it was disabled
if( @path_h ){
    if( $path_h =~ s#::#/#g && $opt_n ){
	if ($pre_sub_tri_graphs) {
	    if ($rest =~ /"/) {
	if $running_under_some_shell;
	if (sv_derived_from($arg, \"${ntype}\")) {
	if (sv_derived_from(ST(0), "$name")) {
If the extension might need extra libraries, they should be included
  if ($tmask and $type =~ /$tmask/) {
	if (/^[ \t]*#[ \t]*define\s+([\$\w]+)\b(?!\()\s*(?=[^"\s])(.*)/) {
	if ( ($type, $image) =
if (%types_seen) {
  if ($use_Dyna) {
if (@vdecls) {
# If you do not need this, moving things directly into \@EXPORT or \@EXPORT_OK
  # If you edit these definitions to change the constants used by this module,
#If you have a mailing list set up for your module, mention it here.
#If you have a web site set up for your module, mention it here.
If you intend this module to be compatible with earlier perl versions, please
  if (\$\@ =~ /^Your vendor has not defined $module macro \$constname/) {
                          ignored.
I<h2xs> builds a Perl extension from C header files.  The extension
I<interface_hairy.h>, and you want the perl module be named as
Include code for safely storing static data in the .xs file.
#include "EXTERN.h"
#include "perl.h"
#include "ppport.h"
#include "XSUB.h"
	    # including things stuck in quoted string constants.
    # in foo.h.
in L<"OPTIONS">.
input/output parameter.  In particular, argument declarations of the
	# Insert -I. if you add *.h files later:
# Insert your test code below, the $test_mod module is use()ed here so read
In spite of its name, I<h2xs> may also be used to create a skeleton pure
INSTALLATION
    int dummy;		/* you can access this elsewhere as MY_CXT.dummy */
In the latter, foo.h is taken as I<regular expression>.
	int   l
#in UNIX), or any relevant external documentation such as RFCs or
# Is this just cargo cult - it seems that the first thing that happens to this
It appears that the code in $ext$modpname/Makefile.PL does not autogenerate
$item->[2](THIS, __value = NO_INIT)
=item Archive and test
=item B<-a>, B<--gen-accessors>
=item B<-A>, B<--omit-autoload>
=item B<-B>, B<--beta-version>
=item B<-b>, B<--compat-version>=I<version>
=item B<-C>, B<--omit-changes>
=item B<-c>, B<--omit-constant>
=item B<-d>, B<--debugging>
=item B<-e>, B<--omit-enums>=[I<regular expression>]
=item B<-F>, B<--cpp-flags>=I<addflags>
=item B<-f>, B<--force>
=item B<-g>, B<--global>
=item B<-h>, B<-?>, B<--help>
=item B<-k>, B<--omit-const-func>
=item B<-M>, B<--func-mask>=I<regular expression>
=item B<-m>, B<--gen-tied-var>
=item B<-n>, B<--name>=I<module_name>
=item B<-o>, B<--opaque-re>=I<regular expression>
=item B<-O>, B<--overwrite-ok>
=item B<-P>, B<--omit-pod>
=item B<-p>, B<--remove-prefix>=I<prefix>
=item B<-s>, B<--const-subs>=I<sub1,sub2>
=item B<--skip-autoloader>
=item B<--skip-exporter>
=item B<--skip-ppport>
=item B<--skip-strict>
=item B<--skip-warnings>
=item B<-t>, B<--default-type>=I<type>
=item B<--use-new-tests>
=item B<--use-old-tests>
=item B<-v>, B<--version>=I<version>
=item B<-x>, B<--autogen-xsubs>
=item B<-X>, B<--omit-XS>
#=item C<$methods>
#=item C<$name-E<gt>new()>
#=item C<\$object_of_type_$name-E<gt>_to_ptr()>
=item Copy C files
=item Create the extension
=item Find the directory name
=item Hints
# Items to export into callers namespace by default. Note: do not export
#=item $TEMPLATE_VERSION
It is important to do C<make dist> as early as possible.  This way you
# its man page ( perldoc $test_mod ) for help writing this test script.
it under the same terms as Perl itself, either Perl version %vd or,
      #		it was looking at $hadsys header-file per header-file...
#  @{[join "\n  ", @const_names]}
#  @{[join "\n  ", @known_fnames{@fnames}]}
@{[ join "\n", map "    _tievar_$_(\$$_);", @vdecls ]}
    %known_fnames = map @$_[1,3], @$fdecls_parsed; # [1,3] is NAME, FULLTEXT
    -k, --omit-const-func Omit 'const' attribute on function arguments
Larry Wall and others
    last if $extralibs;
			len, sizeof(THIS));
			len, sizeof($var));
let you know the names of these directories.  From the output you can
libraries should be specified in the form -lm -lposix, etc, just as on
    LIBS              => ['$extralibs'], # e.g., '-lm'
$licence
$licence_hash
$licence_hash =~ s/^/#/gm;
$licence = sprintf << "DEFAULT", $^V;
linking with external libraries, see the flags C<-F>, C<-L> and C<-l>
    { local $" = '|';
  local $" = ', ';
        local $SIG{__WARN__} = sub { $notnum = 1 };
L<perl>, L<perlxstut>, L<ExtUtils::MakeMaker>, and L<AutoLoader>.
  make dist
    $_ = 'Makefile.PL' if $_ eq 'makefile.pl';
    # Makefile.PL will look for library -lrpc in
   make install
makes this functionality accessible in Perl?  The example below
   make test
  make test
# `make test'. After `make install' it should work as `perl $modpname.t'
    # Make XS without defines in perl.h, but with function declarations
may better suit your needs.
mechanism.
#Mention other useful documentation such as the documentation of
  $meth_doc .= accessor_docs($name, $struct)
method to construct and return a new structure, initialised to zeroes.
    -M, --func-mask       Mask to select C functions/macros
    -m, --gen-tied-var    Generate tied variables for access to declared
minimum required version with C<use $module versionnum>.
    # Minor trickery: we can't chdir() before we processed the headers
    mkdir "$fallbackdirname" or die "Cannot mkdir $fallbackdirname: $!\n";
  mkdir "$testdir" or die "Cannot mkdir $testdir: $!\n";
    $module ||= do {
    MODULE = foo	PACKAGE = foo	PREFIX = my_
MODULE = $module		PACKAGE = $module		$prefix
MODULE = $module		PACKAGE = ${name}		$prefix
MODULE = $module		PACKAGE = ${name}Ptr		$prefix
module_name is not supplied then the name of the first header file
#$module - Perl extension for blah blah blah
    my $addflags = $opt_F || '';
my $after;
  my @argarrays = map { $_->[4] || '' } @$args;
  my @argnames = map {$_->[1]} @$args;
my @ARGS = @ARGV;
  my @argtypes = map { normalize_type( $_->[0], 1 ) } @$args;
    my %bad_macs;
    my $beta_version = $temp_version =~ s/(\d)_(\d\d)/$1$2/;
#  my \$buffer = $name->new();
      my $c;
  my $Ccomment = ($C ? '' : <<EOC);
  my $cfallback = File::Spec->catfile($fallbackdirname, $constscfname);
  my $C = grep {$_ ne "$modfname.c"}
my $compat_version = $];
     my $const_names = join " ", @const_names;
my $constscfname = 'const-c.inc';
my (@const_specs, @const_names);
my $constsxsfname = 'const-xs.inc';
my %const_xsub;
  my $Cpre = ($C ? '' : '# ');
my $cwd = File::Spec->rel2abs( File::Spec->curdir );
    MY_CXT_INIT;
} my_cxt_t;
  my $decl = shift;
	    my $def = $1;
    my @dirs = @paths;
  my $do_keep_deep_const = shift;
	   my $domain = $Config{'mydomain'};
my ($email,$author,$licence);
  my $entry;
    my $entry = assign_typemap_entry $type;
	    my ($enum_name, $enum_body) = ($1, $2);
	(my $epath = $module) =~ s,::,/,g;
my $exp_doc = $skip_exporter ? '' : <<EOD;
my @exported_names = (@const_names, @fnames_no_prefix, map '$'.$_, @vdecls);
my $ext = chdir 'ext' ? 'ext/' : '';
my $extralibs = '';
    my $fail;
my $fail;
my $fail = 0;
my $fallbackdirname = 'fallback';
      my $fallback = File::Spec->catfile($fallbackdirname, $file);
    my \$fallback = File::Spec->catfile('$fallbackdirname', \$file);
my $fdecls = [];
my $fdecls_parsed = [];
	my @f_good_td = grep $td->{$_}[1] eq '', keys %$td;
  my($fh, $name, $struct) = @_;
  my($fh, $name, $type) = @_;
  my $fh = shift;
my @files = grep { -f } (<*>, <t/*>, <$fallbackdirname/*>, <$modpmdir/*>);
      my $filter;
my $fmask;
my @fnames;
my @fnames_no_prefix;
    my_foo(SV *sv)
      my $found;
    my $fullpath = $path_h;
  my $generate_code =
      my @good;
    my @good_td;
my( $H2XS_VERSION ) = ' $Revision: 1.23 $ ' =~ /\$Revision:\s+([^\s]+)/;
      my($hadsys) = grep s!^sys/!!i , @path_h;
      my %h = map( ($_->[1], $_), @$fdecls_parsed);
	my($h) = $path_h;
  my $Icomment = ($I ? '' : <<EOC);
  my $I = (((glob '*.h') || (glob '*.hh')) ? '-I.' : '');
  my $ignore_mods
  my $Ihelp = ($I ? '-I. ' : '');
$myISA =~ s/^our // if $compat_version < 5.006;
    my $item = shift @items;
  my @items = @$struct;
  my $keep_deep_const = ($do_keep_deep_const ? '\b(?![^(,)]*\*)' : '');
                my ($key, $declared_val) = $item =~ /(\w+)\s*(?:=\s*(.*))?/;
my %known_fnames;
      my ($k, $v);
my $licence_hash = $licence;
  my @list;
    my ($maj,$min,$sub) = ($1,$2,$3);
    my ($maj,$min,$sub) = $compat_version =~ /(\d+)\.(\d\d\d)(\d*)/;
my $meth_doc = '';
  my $methods = (join '(...)>, C<', @list) . '(...)';
    my $mode = 'Typemap';
my $modfname  = pop @modparts;
my @modISA;
my @modparts  = split(/::/,$module);
my $modpmdir  = join '/', 'lib', @modparts;
my $modpmname = join '/', $modpmdir, $modfname.'.pm';
my $modpname  = join('-', @modparts);
my $module = $opt_n;
        my $module = $opt_n || 'Your::Module';
my $myISA = "our \@ISA = qw(@modISA);";
    my $n = 0;
my ($name, %fullpath, %prefix, %seen_define, %prefixless, %const_names);
  my($name, $struct) = @_;
  my($name, $struct);
my $need_opaque;
    my $notnum;
  my $numargs = @$args;
#  my \$obj = \$buffer->_to_ptr();
my ($opt_A,
my %options = (
  my $otype = $type;
  my $out = $pointer_typedefs{$type};
  my $out = $struct_typedefs{$type};
my @path_h;
my @path_h_ini = @path_h;
    my @paths;
my $pod;
  my $pod = <<"EOF";
my %pointer_typedefs;
my $prefix = defined $opt_p ? "PREFIX = $opt_p" : '';
my $prereq_pm = '';
    my $pre_sub_tri_graphs = 1;
  my $proto_re = "[" . quotemeta('\$%&*@;') . "]" ;
  my $ptrname = $name . 'Ptr';
  my $ptrname = normalize_type("$name *");
    my $rel_path_h = $path_h;
	    my $rest = $2;
my $revhist = '';
my $rmheadeq = "=" x length($rmhead);
my $rmhead = "$modpname version $TEMPLATE_VERSION";
my $rm_prereq;
        my $SEEK_SET = eval 'use Fcntl qw/SEEK_SET/; SEEK_SET' or 0;
my %seen_decl;
        my $src = do { local $/; <CH> };
  my $stdtypemap =  "$Config::Config{privlib}/ExtUtils/typemap";
my %std_types;
my %structs;
	my $structs = $c->get('typedef_structs');
my %struct_typedefs;
      my @styles = $Config{gccversion} ? qw(C++ C9X GNU) : qw(C++ C9X);
    my @td;
	my $td = $c->get('typedef_hash');
    my %td = map {($_, $_)} @td;
my $TEMPLATE_VERSION = '0.01';
    my $temp_version = $TEMPLATE_VERSION;
my $testdir  = "t";
my $testfile = "$testdir/$modpname.t";
  my $test_mod = 'Test';
my $test_mod = 'Test::More';
my $tests = @const_names ? 2 : 1;
my $thisyear = (gmtime)[5] + 1900;
my $tmask;
my $tmask_all = $tmask && $opt_o eq '.';
my $tmp='';
    my $tmp_path_h = $path_h;
  my @tm =  qw(../../../typemap ../../typemap ../typemap);
      my $ttype = $structs{$type} ? normalize_type("$type *") : $type;
  my $type;
my $typedef_rex;
my %typedefs_pre;
	my ($type, $image);
my %typemap;
  my ($type, $name, $args) = @$decl;
      my $type = normalize_type($item->[0]);
	  my($type, $post) = @{ $vdecl_hash{$var} };
  my $type = shift;
my %types_seen;
my $use_Dyna = (not $opt_X and $compat_version < 5.006 and not $use_xsloader);
       my $username;
            my $val = 0;
    my $vars = '$VERSION @ISA';
	  my $var = $vdecls[$_];
    my $v = $const_names{$_};
my %vdecl_hash;
my @vdecls;
  my $xsfallback = File::Spec->catfile($fallbackdirname, $constsxsfname);
      $name;
$name(@argnames)
                           NAME =>         $module,
                   NAME =>         $module,
    NAME              => '$module',
  $name = normalize_type($name);
                'name|n=s'           => \$opt_n,
        $name ||= $path_h;
	$name =~ s#^.*/##;
# names by default without a very good reason. Use EXPORT_OK instead.
                           NAMES =>        \@const_specs,
                   NAMES =>        \@const_specs,
      $name =~ s/\.h$//;
	$name = THIS;
	$name THIS = NO_INIT
	$name = "\u$name";
  $need_opaque = 1 if $entry eq "T_OPAQUE_STRUCT";
new(CLASS)
# new pragmata down the fallback:: tree, but that seems unlikely.
    $new_test,
        next;
	      next defines;
	    #  next defines if $rest =~ /[^\w\$]/;
  next if (eval "my \\\$a = \$constname; 1");
	    next if /^_.*_h_*$/i; # special case, but for what?
                next if $item =~ /\A\s*\Z/;
            next if $opt_e && $enum_name =~ /$opt_e/;
      next if /^\s*\#/;
	next if /^\s*($|\#)/ ;
    next unless -e $typemap ;
	next unless $fdecls_parsed->[$i][1] =~ /$fmask/; # [1] is NAME
      $n = keys %td;
    -n, --name            Specify a name to use for the extension (recommended).
No environment variables are used.
#None by default.
    # Note that a directory with perl header files would
Note that some types of arguments/return-values for functions may
not found in standard include directories.
    - no use of 'our' (uses 'use vars' instead)
    - no 'use warnings'
        no warnings 'uninitialized';
    # Now %bad_macs contains names of bad macros
# Now switch from C to XS by issuing the first MODULE declaration:
$" = "\n\t";
    $numargs--;
#object of class C<$ptrname> which is a reference to an integer
of C<h2xs> may gain the ability to make educated guesses.
ok(1); # If we made it this far, we're ok.
ok( \$fail == 0 , 'Constants' );
    $old_test,
Omit all autoload facilities.  This is the same as B<-c> but also
                'omit-autoload|A'    => \$opt_A,
Omit C<constant()> from the .xs file and corresponding specialised
                'omit-changes|C'     => \$opt_C,
                'omit-constant|c'    => \$opt_c,
                'omit-const-func|k'  => \$opt_k,
                'omit-enums|e:s'     => \$opt_e,
                'omit-pod|P'         => \$opt_P,
Omits creation of the F<Changes> file, and adds a HISTORY section to
Omit the autogenerated stub POD section.
Omit the XS portion. Used to generate a skeleton pure Perl module.
                'omit-XS|X'          => \$opt_X,
    -o, --opaque-re       Regular expression for \"opaque\" types.
    -O, --overwrite-ok    Allow overwriting of a pre-existing extension directory.
                'opaque-re|o=s'      => \$opt_o,
      open(CH, "<$rel_path_h") || die "Can't open $rel_path_h: $!\n";
  open(EX, ">Changes") || die "Can't create $ext$modpname/Changes: $!\n";
open EX, ">$testfile" or die "Can't create $ext$modpname/$testfile: $!\n";
open(MANI,'>MANIFEST') or die "Can't create MANIFEST: $!";
open(PL, ">Makefile.PL") || die "Can't create $ext$modpname/Makefile.PL: $!\n";
open(PM, ">$modpmname") || die "Can't create $ext$modpname/$modpmname: $!\n";
open(RM, ">README") || die "Can't create $ext$modpname/README:$!\n";
  open TM, ">typemap" or die "Cannot open typemap file for write: $!";
    open(TYPEMAP, $typemap)
  open(XS, ">$modfname.xs") || die "Can't create $ext$modpname/$modfname.xs: $!\n";
    $opt_a,
    $opt_b,
        $opt_B = $beta_version;
    $opt_b =~ /^v?(\d+)\.(\d+)\.(\d+)/ ||
    $opt_c,
$opt_c = $opt_f = 1 if $opt_X;
    $opt_d,
    $opt_e,
    $opt_f,
  $opt_F = '' unless defined $opt_F;
    $opt_g,
    $opt_h,
Option -F does not make sense with -X.
option is specified, the name of the header file may look like
Option -o does not make sense without -x.
OPTIONS:
    $opt_k,
    $opt_m,
    $opt_n,
    $opt_o,
    $opt_p,
    $opt_s,
    $opt_t,
$opt_t ||= 'IV';
    $opt_v,
    $opt_x,
or alternately
      or die <<EOD;
    or die <<EOD;
#Original version; created by h2xs $H2XS_VERSION with options
      or warn ("Warning: could not open typemap file '$typemap': $!\n"), next;
our \@EXPORT_OK = ( \@{ \$EXPORT_TAGS{'all'} } );
our \@EXPORT = qw(
our %EXPORT_TAGS = ( 'all' => [ qw(
    OUTPUT:
	OUTPUT:
    $out = td_is_pointer($type);
    $out = td_is_struct($type);
  $out = ($type =~ /\*$/);
  $out = ($type =~ /^(struct|union)\b/) && !td_is_pointer($type);
#=over 8
                'overwrite_ok|O'     => \$opt_O,
package $module;
#packed string with the C structure.  Keep in mind that \$buffer should
    $path_h .= ".h" unless $path_h =~ /\.h$/;
    $path_h =~ s/,.*$// if $opt_x;
	$path_h = $tmp_path_h;	# Used during -x
      @paths = (File::Spec->curdir(), $Config{usrinc},
      @paths = qw( Sys$Library VAXC$Include );
pending arguments such as header-file names. This is ok:
                          Perl function names.
   perl Makefile.PL
  perl Makefile.PL
   perl -MCPAN -e "install C::Scan"
Perl module. See the B<-X> option.
perl version.
Please report the circumstances of this bug in h2xs version $H2XS_VERSION
$pod = <<"END" unless $opt_P;
  $pod =~ s/^\#//gm;
$pod =~ s/^\#//gm unless $opt_P;
pointer (like C<long long>), pointers to functions, or arrays.  See
pointer rather than the complete structure, to facilitate chained calls.
    -P, --omit-pod        Omit the stub POD section.
		++$prefix{$_} if s/^$opt_p//;
	    $prefixless{$def} = $_;
    # prefix "sec_rgy_" is dropped from perl function names
# Prefix the default licence with hash symbols.
    PREINIT:
	PREINIT:
# Preloaded methods go here.
    -p, --remove-prefix   Specify a prefix which should be removed from the
	    # Preprocess all tri-graphs
    PREREQ_PM         => {$prereq_pm}, # e.g., Module::Name => 1.1
  $prereq_pm .= q%'Test'        =>  0, %;
  $prereq_pm .= q%'Test::More'  =>  0, %;
  $prereq_pm .= q%'XSLoader'    =>  0, %;
      print_accessors(\*XS, $name, $struct);
     print EX <<_END_;
     print EX <<'_END_';
  print EX <<_END_;
print EX <<_END_;
  print EX <<EOP;
     print EX (")) {\n");
     print EX wrap ("\t", "\t", $const_names);
    print "# fail: \$\@";
  print $fh <<END;
      print $fh <<"EOF";
  print $fh <<"EOF";
    print $fh <<"EOP";
  print $fh <<"EOP";
	# print("found '$k'=>'$v'\n"),
    printf PM <<END;
    printf PM "our(@{[ join ', ', map '$'.$_, @vdecls ]});\n\n";
	print "... Function $fdecls_parsed->[$i][1] passes -M mask.\n"
      print "Ignoring macro $k which expands to a typedef name '$bad_macs{$k}'\n" if $opt_d;
    print "Is-Pointer: Type mutation via typedefs: $otype ==> $type\n"
    print "Is-Struct: Type mutation via typedefs: $otype ==> $type\n"
print MANI join("\n",@files), "\n";
	    print "Matched $_ ($def)\n" if $opt_d;
  print "not ok 2\\n";
  print "ok 2\\n";
    print "# pass: \$\@";
		print "... Passes mask of -M.\n" if $opt_d and $fmask;
  print PL <<"END";
  print PL <<END;
print PL <<"END";
print PL ");\n";
print PM autoload ($module, $compat_version) unless $opt_c or $opt_X;
	print PM <<'END';
print PM <<"END";
print PM <<"END" if $use_Dyna;  # use DynaLoader, unless XS was disabled
print PM <<"END" unless $opt_A;
print PM <<'END' unless $skip_exporter;
print PM <<"END" unless $skip_strict;
print PM "\n$myISA\n\n";
print PM $pod unless $opt_P;
  print PM $tmp;
print PM $tmp;
		print PM "use AutoLoader;\n";
		print PM "use AutoLoader qw(AUTOLOAD);\n"
    print PM "use vars qw($vars);";
print PM "use warnings;\n" unless $skip_warnings or $compat_version < 5.006;
print RM <<_RMEND_;
	    #print("Skip non-wordy $def => $rest\n"),
	      print("Skip stringy $def => $rest\n") if $opt_d;
Print the usage, help and version for this h2xs and exit.
print_tievar_subs(\*XS, $_, $vdecl_hash{$_}) for @vdecls;
  print_tievar_xsubs(\*XS, $_, $vdecl_hash{$_});
  print TM <<'EOP' if $need_opaque; # Older Perls do not have correct entry
    print TM $type, "\t" x (5 - int((length $type)/8)), "\t$entry\n"
    print "Typedefs are @td.\n" if $opt_d;
    print "Type mutation via typedefs: $otype ==> $type\n" if $opt_d;
    print "Type $type matches -o mask\n" if $opt_d;
    print XS <<"END";
print XS <<"END";
print XS <<"END" if $opt_g;
print XS <<"END" unless $skip_ppport;
  print XS "#include \"$constscfname\"\n";
print XS "INCLUDE: $constsxsfname\n" unless $opt_c;
    print XS "\n";
        print XS qq{#include <$h>\n};
    PROTOTYPE: \$
    PROTOTYPE: \$;\$
	$ptrname THIS
    push(@const_names, $_);
    push(@const_specs, ref($v) ? $v : $_);
	push @dirs, $epath;
      push(@$fdecls, @{$c->get('fdecls')});
      push @$fdecls_parsed, @{ $c->get('parsed_fdecls') };
	push @good, $i;
	push @good_td, @f_good_td;
	push @items, map [
	push @items, @{ $structs{$item->[0]} };
      push @list, $item->[2];
    PUSHMARK(SP);
push @modISA, 'DynaLoader' 	if $use_Dyna;  # no XS
push @modISA, 'Exporter'	unless $skip_exporter;
    push(@path_h, $arg);
      push @paths, ($hadsys ? 'GNU_CC_Include[vms]' : 'GNU_CC_Include[000000]');
      push @paths, qw( DECC$Library_Include DECC$System_Include );
      push @td, @{$c->get('typedefs_maybe')};
    PUTBACK;
    /* Put Global Data in here */
Put the correct copyright and licence information here.
README file from a module distribution so that people browsing the
      # Record the names of simple #define constants into const_names
	    redo;
#related modules or operating system documentation (such as man pages
	$rel_path_h = File::Spec->catfile($epath, $tmp_path_h);
	$rel_path_h = $path_h;
        # Remove C and C++ comments
    # Remove macros which expand to typedefs
                'remove-prefix|p=s'  => \$opt_p,
removes the S<C<use AutoLoader>> statement from the .pm file.
#representation of a C pointer.  To create such an object, one may use
    require Devel::PPPort;
require DynaLoader;
require Exporter;
require XSLoader;
	    $rest =~ s!/\*.*?(\*/|\n)|//.*!!g; # Remove comments
	    $rest =~ s/^\s+//;
	    $rest =~ s/\s+$//;
result in XSUB-declarations/typemap-entries which need
  return $entry;
	return foo(s, len);
    return (I32)0;
  return if $seen_decl{$name}++; # Need to do the same for docs as well?
  return $out if defined $out;
  return $pod;
  return ($pointer_typedefs{$otype} = $out);
  return ($struct_typedefs{$otype} = $out);
#return the current value of the corresponding element if called
  return "T_NV" if $type =~ /^(unsigned\s+)?long\s+(long|double)\z/;
return type of B<char *>, e.g.,
  return unless defined $struct && $name !~ /\s|_ANON/;
	    RETVAL
	RETVAL = @{[
	RETVAL = $_;
	    RETVAL = foo(s, len);
	    RETVAL = ($name *)s;
$revhist = <<EOT if $opt_C;
Revision history for Perl extension $module.
$rmheadeq
  $rm_prereq
  $rm_prereq = 'blah blah blah';
  $rm_prereq = 'Test';
  $rm_prereq = 'Test::More';
Run h2xs, overwriting older autogenerated files:
    s%\.$%%;
    # Same, but extension is RUSERS
    # Same but select only functions which match /^av_/
    # Same but treat SV* etc as "opaque" types
    # Same with function declaration in proto.h as visible from perl.h.
# Save current directory so that C::Scan can use it
      # Scan the header file (we should deal with nested header files)
    -s, --const-subs      Create subroutines for specified macros.
    # sec_rgy_wildcard_sid
        seek CH, 0, $SEEK_SET;
# See lib/ExtUtils/MakeMaker.pm for details of how to influence
See L<perlxs> and L<perlxstut> for additional details.
	    $seen_define{$def} = $rest;
                $seen_define{$key} = $val;
see that the directory for the extension is F<Ext/Ension>.
selects functions/macros to process.
	SETMAGIC: DISABLE
_set_$name(IV index, SV *sv) {
_set_$name(THIS)
	    s/\?\?</{/g;                         # | ??<|  {|
	    s/\?\?=/#/g;                         # | ??=|  #|
	    s/\?\?>/}/g;                         # | ??>|  }|
	    s/\?\?'/^/g;                         # | ??'|  ^|
	    s/\?\?\-/~/g;                        # | ??-|  ~|
	    s/\?\?\!/|/g;                        # | ??!|  ||
	    s/\?\?\//\\/g;                       # | ??/|  \|
	    s/\?\?\(/[/g;                        # | ??(|  [|
	    s/\?\?\)/]/g;                        # | ??)|  ]|
should be better rewritten as
# Should be called before any actual call to normalize_type().
Since I<regular expression> is optional, make sure that this switch is followed
    $skip_autoloader,
        --skip-autoloader Do not use the module C<AutoLoader>.
$skip_autoloader = $opt_c = 1 if $opt_A;
                'skip-autoloader'    => \$skip_autoloader,
    # skip directories, binary files etc.
            # skip enums matching $opt_e
    $skip_exporter,
        --skip-exporter   Do not export symbols.
                'skip-exporter'      => \$skip_exporter,
    $skip_ppport,
        --skip-ppport     Do not use portability layer.
                'skip-ppport'        => \$skip_ppport,
    $skip_strict,
        --skip-strict     Do not use the pragma C<strict>.
                'skip-strict'        => \$skip_strict,
    $skip_warnings,
        --skip-warnings   Do not use the pragma C<warnings>.
                'skip-warnings'      => \$skip_warnings,
    s/$modfname/$modfname/i && next;
    # (so know the name of the extension), but the header may be in the
    # Sort declarations:
      = sort map { ++$prefix{$_} if s/^$opt_p(?!\d)//; $_ } @fnames_no_prefix
Specifies a name to be used for the extension, e.g., S<-n RPC::DCE>
specify a minimum perl version with the -b option.
Specify a prefix which should be removed from the Perl function names,
Specify a version number for this extension.  This version number is added
Specifying a compatibility version higher than the version of perl you
Specify the internal type that the constant() mechanism uses for macros.
	    splice @vdecls, $_, 1;
		(split ' ', $Config{locincpth}), '/usr/include');
	           sprintf("%d.%03d",    $maj,$min);
        $src =~ s#/\*[^*]*\*+([^/*][^*]*\*+)*/|("(\\.|[^"\\])*"|'(\\.|[^'\\])*'|.[^/"'\\]*)#$2#gs;
        $src =~ s#//.*$##gm;
    s/^\s*const\b\s*// for @argtypes;
    -s sec_rgy_wildcard_name,sec_rgy_wildcard_sid dce/rgynbase
S<-s sec_rgy_wildcard_name,sec_rgy_wildcard_sid>.
	     /^\s*(.*?\S)\s+(\S+)\s*($proto_re*)\s*$/o
	    s = SvPV(sv,len);
#standards.
START_MY_CXT
Start with a dummy run of h2xs:
  # Start with useful default values
    static int
  %std_types = %types_seen;
string, but XSUBs are emitted only for the declarations included from
#string is zeroed out.
	    STRLEN len;
	STRLEN len;
	], @{ $structs{$item->[0]} };
	@structs{keys %$structs} = values %$structs;
	struct ufuncs uf;
#Stub documentation for $module, created by h2xs. It looks like the
    $sub ||= 0;
sub accessor_docs {
sub assign_typemap_entry {
sub get_typemap {
sub normalize_type {		# Second arg: do not strip const's before \*
sub print_accessors {
sub print_decl {
sub print_tievar_subs {
sub print_tievar_xsubs {
    # subroutines are created for sec_rgy_wildcard_name and
	    $sub ? sprintf("%d.%03d%02d",$maj,$min,$sub) :
sub td_is_pointer {
sub td_is_struct {
sub usage {
Suppose that you have some C files implementing some functionality,
	    SV *addr
	sv_magic(sv, 0, 'U', (char*)&uf, sizeof(uf));
	sv_setref_pvn($arg, \"${ntype}\", (char *)&$var, sizeof($var));
takes a pair of address and length of data at this address, so it is better
    -t, --default-type    Default type for autoloaded constants (default is IV).
    || (td_is_struct($type) ? "T_OPAQUE_STRUCT" : "T_PTROBJ");
      $td{"$_$k"} = "$_$k" for ('', 'signed ', 'unsigned ');
    $TEMPLATE_VERSION = '0.00_01';
	$TEMPLATE_VERSION = $opt_v;
$TEMPLATE_VERSION  @{[scalar localtime]}
        $temp_version = 0+$temp_version;
$Text::Wrap::columns = 80;
$Text::Wrap::huge = 'overflow';
that should be provided before the module is installed.
the cc command line.  By default, the Makefile.PL will search through
# the contents of the Makefile that is written.
The default is IV (signed integer).  Currently all macros found during the
the element to the supplied value (and return the new value) if called with
the files $ext$modpname/$constscfname and $ext$modpname/$constsxsfname
The I<module_name> will be used for the name of the extension.  If
the libraries actually exist and how they should be loaded.  The extra
the library path determined by Configure.  That path can be augmented
# the names of any packages. A directory 'fallback' will clash with any
The only purpose of this step is to create the needed directories, and
the POD template.
the prefix from functions that are autoloaded via the C<constant()>
#The principal Perl representation of a C object of type C<$name> is an
The README is used to introduce the module and provide instructions on
These methods all apply to the Ptr type for the structure; additionally
The type-to-match is whitewashed (except for commas, which have no
The usual warnings if it cannot read or write the files involved.
The version specified should be numeric.
# This allows declaration	use $module ':all';
  # This converts only the guys which do not have trailing part in the typedef
#This exercises the following two methods, and an additional class
This is not ok:
	    THIS->$item->[-1] = __value;
This library is free software; you can redistribute it and/or modify
This may be useful since, say, types which are C<typedef>-equivalent
	     # This may reference undefined functions:
This module requires these other modules and libraries:
	THIS = $name;
_tievar_$name(sv)
$tmask = qr{$opt_o} if defined $opt_o;
	$tmp = <<"END";
$tmp .= <<"END" unless $skip_exporter;
$tmp .= "\n";
$tmp .= "our \$VERSION = '$TEMPLATE_VERSION';\n";
    $tmp .= "our \$XS_VERSION = \$VERSION;\n" unless $opt_X;
$tmp =~ s/^our //mg if $compat_version < 5.006;
  $tmp =~ s:\$VERSION:\$XS_VERSION:g if $opt_B;
    $tmp .= "\$VERSION = eval \$VERSION;  # see L<perlmodstyle>\n";
       to be initialised, do it here.
to compatibility with the version of perl you are using to run h2xs.
to edit your C<.h> files and rerun h2xs.
To install C::Scan, execute
To install this module type the following:
to integers may represent OS-related handles, and one may want to work
T_OPAQUE_STRUCT
_to_ptr(THIS)
to rewrite this function as
\t- original version; created by h2xs $H2XS_VERSION with options
                          to stub POD.
to the templates.  The default is 0.01, or 0.00_01 if C<-B> is specified.
\t\t@ARGS
Turn on debugging messages.
two methods are constructed for the structure type itself, C<_to_ptr>
# tying the variables can happen only after bootstrap
  $type;
      $typedef_rex = qr(\b(?<!struct )(?:@good_td)\b) if @good_td;
	@typedefs_pre{@f_good_td}  = map $_->[0], @$td{@f_good_td};
typedef struct {
	    $type eq $ttype ? "THIS->$item->[-1]" : "&(THIS->$item->[-1])"
  $typemap{float} = 'T_NV';
	  $typemap{normalize_type($type)} = $image;
  $typemap{$otype} = $entry;
    $type = normalize_type $type;
    $type = normalize_type($type);
	  $type = normalize_type($type);
  $type = normalize_type($type, 1);
  $type =~ s/ ,/,/g;
  $type =~ s/\. \. \./.../g;
  $type =~ s/\* (?=\*)/*/g;
    $type =~ s/$ignore_mods//go;
  $type =~ s/^\s+//;
  $type =~ s/\s+$//;
  %types_seen = ();
  $types_seen{$type}++
  $type =~ s/\s+/ /g;
  $type =~ s/([^\s\w])/ $1 /g;
	$type THIS
	$type THIS = NO_INIT
	$type __value
	uf.uf_index = (IV)&_get_$name;
	uf.uf_set = &_set_$name;
	uf.uf_val = &_get_$name;
    $_ = "\U$_" if $_ eq 'manifest' or $_ eq 'changes';
	# Un-comment this if you add C files to link with later:
#unedited.
  unless (-d $fallbackdirname) {
unless (-d "$testdir") {
  unless ($@) { @files = readdir(D); closedir(D); }
unless ($opt_C) {
	unless ($opt_c) { # we're doing the AUTOLOAD
unless( $opt_X || $opt_c || $opt_A ){
        unless (@path_h or $opt_n);
unless ($skip_autoloader) { # no autoloader whatsoever.
  unless ($skip_ppport) {
      unless ($tmask_all) {
  unless ($tmask_all) {
      unless -T $typemap ;
    unless $type eq '...' or $type eq 'void' or $std_types{$type};
      unlink $constscfname, $constsxsfname;
  unshift @tm, $stdtypemap;
usage if $opt_h;
usage "Must supply header file or module name\n"
    usage "You cannot use -b and -m at the same time.\n" if ($opt_b && $opt_m);
    usage "You must provide the backwards compatibility version in X.Y.Z form. "
Use an alpha/beta style version number.  Causes version number to
use Carp;
Use C<-o .> if you want to handle all the C<typedef>ed types as opaque
use $compat_version;
use Config;
                          (used with -x).
use ExtUtils::Constant qw (WriteConstants WriteMakefileSnippet autoload);
use ExtUtils::MakeMaker;
use File::Compare;
  use File::Copy;
use File::Path;
    use File::Spec;
  use File::Spec;
use Getopt::Long;
#  use $module;
use $module;
                'use-new-tests'      => \$new_test,
        --use-new-tests   Use Test::More in backward compatible modules.
                'use-old-tests'      => \$old_test,
        --use-old-tests   Use the module Test rather than Test::More.
Use "opaque" data type for the C types matched by the regular
       ($username,$author) = (getpwuid($>))[0,6];
use strict;
use Test;
use Test::More tests => $tests;
use Text::Wrap;
use warnings;
        use warnings 'numeric';
    $use_xsloader
                'use-xsloader'       => \$use_xsloader,
        --use-xsloader    Use XSLoader in backward compatible modules (ignored
using the perlbug script.
#!/usr/bin/perl
                $val = defined($declared_val) && length($declared_val) ? $declared_val : 1 + $val;
value of the element if called without additional arguments; and will set
                          variables.
    $vars .= ' $AUTOLOAD' unless $opt_X || $opt_c || $opt_A;
    $vars .= ' @EXPORT @EXPORT_OK %EXPORT_TAGS' unless $skip_exporter;
    $vars .= ' $XS_VERSION' if $opt_B && !$opt_X;
	    $var = *($type *)s;
	%vdecl_hash = %{ $c->get('vdecl_hash') };
	  $vdecl_hash{$var} = $type;
	@vdecls = sort keys %vdecl_hash;
    VERSION_FROM      => '$modpmname', # finds \$VERSION
version: $H2XS_VERSION
                'version|v=s'        => \$opt_v,
    # visible from perl.h. Name of the extension is perl1.
    (void)call_pv("$module\::_get_$name", G_DISCARD);
    (void)call_pv("$module\::_set_$name", G_DISCARD);
    -v, --version         Specify a version number for this extension.
	    warn "Can't handle variable '$type $var $post', skipping.\n";
		warn "can't remove $opt_p prefix from '$_'!\n";
  warn <<EOD if $opt_F and $opt_X ;
  warn <<EOD if $opt_o;
        warn <<"EOF";
        warn << "EOM";
    warn <<"EOM";
      warn fill ('','', <<"EOM") . "\n";
	warn "Nesting of headerfile ignored with -n\n";
    warn "@_\n" if @_;
	warn "Overwriting existing $ext$modpname!!!\n" if -e $modpname;
      warn "Scanning $filename for functions...\n";
	warn "Scanning $filename for typedefs...\n";
    warn " Scanning $typemap\n";
    warn "Scanning typemaps...\n";
    warn sprintf <<'EOF', $maj,$min,$sub;
    warn("Warning: ignoring non-text typemap file '$typemap'\n"), next
  warn "Writing $ext$modpname/Changes\n";
  warn "Writing $ext$modpname/$fallbackdirname/$constscfname\n";
  warn "Writing $ext$modpname/$fallbackdirname/$constsxsfname\n";
warn "Writing $ext$modpname/Makefile.PL\n";
warn "Writing $ext$modpname/MANIFEST\n";
warn "Writing $ext$modpname/$modfname.xs\n";
warn "Writing $ext$modpname/$modpmname\n";
    warn "Writing $ext$modpname/ppport.h\n";
warn "Writing $ext$modpname/README\n";
warn "Writing $ext$modpname/$testfile\n";
  warn "Writing $ext$modpname/typemap\n";
  # We do not want to read ./typemap by obvios reasons.
	# we'll have an AUTOLOAD(), and it will have $AUTOLOAD and
  # We write the "sample" files used when this module is built by perl without
#When accessing these functions from Perl, prefix C<$opt_p> should be removed.
When B<--compat-version> (B<-b>) is present the generated tests will use
    # When scanning perl.h, define -DEXT=extern -DdEXT= -DINIT(x)=
                          when used with -X).
which is of the form, say, C<int *>, is an input, output, or
which returns a Ptr type pointing to the same structure, and a C<new>
        } # while (...)
      while (<CH>) {
  while (@items) {
    while (keys %td > $n) {
      while (($k, $v) = each %seen_define) {
while (my $arg = shift) {
    while (my($name, $struct) = each %structs) {
    while ($name, $struct) = each %structs;
	while ($src =~ /\benum\s*([\w_]*)\s*\{\s([^}]+)\}/gsc) {
    while (<TYPEMAP>) {
whitespace before them, and multiple C<*> which have no whitespace
    # whose names do not start with 'bar_'.
will be used, with the first character capitalized.
Will force the generation of test code that uses the older C<Test> module.
will include functions which can be used to retrieve the value of any
# will save memory.
	# will want Carp.
#without additional arguments.  Set the element to the supplied value
    # Without constant() or AUTOLOAD
with the constant() subroutine.  These macros are assumed to have a
with these handles in OO-way, as in C<$handle-E<gt>do_something()>.
	# Work from miniperl too - on "normal" systems
  WriteConstants ( C_FILE =>       $cfallback,
WriteMakefile(
    WriteMakefileSnippet ( C_FILE =>       $constscfname,
    -x, --autogen-xsubs   Autogenerate XSUBs using C::Scan.
# -X implies -c and -f
    -X, --omit-XS         Omit the XS portion (implies both -c and -f).
    XPUSHs(sv);
# XS declaration:
                           XS_FILE =>      $constsxsfname,
                   XS_FILE =>      $xsfallback,
XSLoader::load('$module', \$VERSION);
  # XXX good do better if our UV happens to be long long
      # XXXX This is not equivalent to what the older version did:
You have specified a non-numeric version.  Unless you supply an
You have version $C::Scan::VERSION installed as $INC{'C/Scan.pm'}.
  # you will need to use the generated $constscfname and $constsxsfname
	Zero((void*)&RETVAL, sizeof(RETVAL), char);

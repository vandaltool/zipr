		# Add Serial ATA RAID devices
	# Also detect OSes on LVM volumes (assumes LVM is active)
#!/bin/sh
			   		break
						break
		continue
				continue
					continue
						debug "os detected by $test"
					debug "os detected by $test"
		debug "$partition: is active swap"
		debug "$partition: part of software raid array"
					debug "running $test on mounted $partition"
				debug "running $test on $partition"
			dev="${word%%[*}"
		   dmraid -s -c >/dev/null 2>&1; then
				done
		echo "Cannot find list of partitions!  (Try mounting /sys.)" >&2
					echo "/dev/$name"
		echo "$(LVM_SUPPRESS_FD_WARNINGS=1 log_output lvs --noheadings --separator : -o vg_name,lv_name |
		echo "$(mapdevfs $1) swap"
			echo "$(mapdevfs "$raidpart")"
					echo "$part"
			elif ! echo "$dev" | grep -q "/part"; then
	elif [ "$(uname -s)" = Linux ]; then
		# Exclude partitions on physical disks that are part of a
	# Exclude partitions that have whole_disk sysfs attribute set.
		exit 0
		exit 1
				for part in /dev/mapper/"$raidset"*[0-9]; do
		for part in /sys/block/*/*[0-9]; do
for partition in $(partitions); do
for prog in /usr/lib/os-probes/init/*; do
			for raidset in $(dmraid -sa -c); do
		for test in /usr/lib/os-probes/*; do
			for test in /usr/lib/os-probes/mounted/*; do
		for word in $line; do
			   [ ! -f "$part/whole_disk" ] && ! on_sataraid $part; then
grep "^/dev/" /proc/mounts | parse_proc_mounts >"$OS_PROBER_TMP/mounted-map" || true
grep "^/dev/" /proc/swaps | parse_proc_swaps >"$OS_PROBER_TMP/swaps-map" || true
	grep "^md" /proc/mdstat | parse_proc_mdstat >"$OS_PROBER_TMP/raided-map" || true
				     grep -q '/.*/.*/'; then
	if dmraid -r -c | grep -q "$device"; then
	if [ -d /sys/block ]; then
			if [ -d /sys/block ] && type udevinfo >/dev/null 2>&1; then
				if [ -e "/dev/$name" ]; then
			if [ -f "$part/start" ] && \
if [ -f /proc/mdstat ] ; then
				if [ -f "$test" ] && [ -x "$test" ]; then
			if [ -f "$test" ] && [ -x "$test" ]; then
	if ! grep -q "^$mapped " "$OS_PROBER_TMP/mounted-map" ; then
	if grep -q "^$mapped" "$OS_PROBER_TMP/raided-map" ; then
	if grep -q "^$mapped " "$OS_PROBER_TMP/swaps-map" ; then
	if ! mapped="$(mapdevfs "$partition")"; then
		if [ "$mpoint" != "/target/boot" ] && [ "$mpoint" != "/target" ] && [ "$mpoint" != "/" ]; then
					if "$test" "$partition" "$mpoint" "$type"; then
				if "$test" "$partition"; then
		if type dmraid >/dev/null 2>&1 && \
	if type log-output >/dev/null 2>&1; then
	if type lvs >/dev/null 2>&1; then
	if type udevadm >/dev/null 2>&1; then
				if ! udevinfo -q path -n "/dev/$dev" 2>/dev/null | \
	if [ -x "$prog" ] && [ -f "$prog" ]; then
			# it's needed elsewhere
	local device="/dev/${parent##*/}"
	local parent="${1%/*}"
		log "Device '$partition' does not exist; skipping"
log_output () {
		log-output -t os-prober --pass-stdout $@
		mpoint=$(grep "^$mapped " "$OS_PROBER_TMP/mounted-map" | head -n1 | cut -d " " -f 2)
		mpoint="$(unescape_mount "$mpoint")"
				name="$(echo "${part##*/}" | sed 's,[!.],/,g')"
# Needed for idempotency
newns "$@"
		# now, just don't get in the way.
on_sataraid () {
: >"$OS_PROBER_TMP/raided-map"
parse_proc_mdstat () {
parse_proc_swaps () {
partitions () {
		"$prog" || true
			raidpart="/dev/$dev"
require_tmpdir
		return 0
	return 1
rm -f /var/lib/os-prober/labels
			sed "s|-|--|g;s|^[[:space:]]*\(.*\):\(.*\)$|/dev/mapper/\1-\2|")"
		# Serial ATA RAID disk.
		set -f
		set +f
		set -- $line
	# Skip partitions used as active swap
	# Skip partitions used in software RAID arrays
			# TODO: factor this out to something in di-utils if
	type dmraid >/dev/null 2>&1 || return 1
			type=$(grep "^$mapped " "$OS_PROBER_TMP/mounted-map" | head -n1 | cut -d " " -f 3)
			udevadm info "$@"
		udevinfo () {
# used in RAID
. /usr/share/os-prober/common.sh
		# We don't know how to probe OSes on non-Linux kernels.  For
# We need to properly canonicalize partitions with mount points and partitions
	while read line; do

                            (
                            )
                        (
                        )
                    )
                (
                )
            )
        """
# along with this program; if not, write to the Free Software
    app.exec_loop()
            app.installTranslator(trans)
    app = QApplication(sys.argv)
    app.setMainWidget(w)
        args = args.lower().strip()
        args = args.lower().strip().split()
        args = args.strip().lower()
# (at your option) any later version.
# Author: Don Welch
# Author:   James Thiele
            before execution (for example, variable substitution) do it here.
# but WITHOUT ANY WARRANTY; without even the implied warranty of
        cached = False
                cache_info = self.pc.cache_info()
# (c) Copyright 2003-2009 Hewlett-Packard Development Company, L.P.
        """Change current local working directory."""
        """Change current working directory on photo card.
        """Change to parent directory."""
class Console(cmd.Cmd):
        cmd.Cmd.do_help(self, args)
        cmd.Cmd.__init__(self)
        cmd.Cmd.postloop(self)   # Clean up command completion
        cmd.Cmd.preloop(self)   # sets up command completion
# -*- coding: utf-8 -*-
    # Command definitions
    # Command definitions to support Cmd object functionality
# Console class (from ASPN Python Cookbook)
                    console . cmdloop()
            console = Console(pc)
        """Copy files from photo card to current local directory.
# Copyright (c) 2004, James Thiele
# Date:     27 April 2004
    #def complete_cd( self, text, line, begidx, endidx ):
    def cp_status_callback(self, src, trg, size):
    def default(self, line):
    def do_about(self, args):
    def do_cache(self, args):
    def do_card(self, args):
    def do_cd(self, args):
    def do_cdup(self, args):
    def do_cp(self, args, remove_after_copy=False):
    def do_df(self, args):
    def do_dir(self, args):
    def do_display(self, args):
    def do_EOF(self, args):
    def do_exif(self, args):
    def do_exit(self, args):
    def do_help(self, args):
    def do_hist(self, args):
    def do_info(self, args):
    def do_lcd(self, args):
    def do_ldir(self, args):
    def do_lls(self, args):
    def do_lpwd(self, args):
    def do_ls(self, args):
    def do_mv(self, args):
    def do_pwd(self, args):
    def do_quit(self, args):
    def do_reset(self, args):
    def do_rm(self, args):
    def do_sector(self, args):
    def do_show(self, args):
    def do_thumbnail(self, args):
    def do_thumb(self, args):
    def do_tree(self, args):
    def do_unload(self, args):
    def emptyline(self):
    def __init__(self, pc):
    def postcmd(self, stop, line):
    def postloop(self):
    def precmd(self, line):
    def preloop(self):
    def print_tree(self, tree, level=0):
    def rm_status_callback(self, src):
def status_callback(src, trg, size):
           Despite the claims in the Cmd documentaion, Cmd.postloop() is not a stub.
           Despite the claims in the Cmd documentaion, Cmd.preloop() is not a stub.
        device_uri = mod.getDeviceUri(device_uri, printer_name,
                dir_name, file_name=os.path.split(args)
        disk_info = self.pc.info()
        """Display an embedded thumbnail image with ImageMagick.
        """Display an image with ImageMagick.
        """Display current cache entries, or turn cache on/off.
        """Display EXIF info for file.
        """Display free space on photo card.
        """Display photo card directory tree."""
        """Display sector data.
__doc__ = "Access inserted photo cards on supported HPLIP printers. This provides an alternative for older devices that do not support USB mass storage or for access to photo cards over a network."
        """Do nothing on empty input line"""
        dont_remove = False
                dont_remove = True
                ee = exif_info.keys()
                ee.sort()
        elif args == '/':
        elif args == '.':
        elif args == 'off':
            elif len(matched_dirs) > 1:
        elif len(matched_files) == 0:
                elif 'TIFFThumbnail' in exif_info:
                        #else:
                else:
            else:
        else:
    else:
else: # GUI_MODE (qt3 only)
        else: # NON_INTERACTIVE_MODE
        e = 'utf8'
        Example:
        except Error:
    except Error:
        except Error, e:
                except Exception, e:
    except ImportError:
except ImportError:
                except KeyboardInterrupt:
    except KeyboardInterrupt:
        except locale.Error:
        except OSError:
        except ValueError:
                exif_info = self.pc.get_exif(args)
        """Exit on system end of file character"""
        """Exits from the console"""
    extra_options=[("Output directory:", "-o<dir> or --output=<dir> (Defaults to current directory)(Only used for non-GUI modes)", "option", False)],
                fd, temp_name = utils.make_temp_file()
        files = self.pc.ls(True, args)
            filter={'pcard-type' : (operator.eq, 1)})
            finally:
        for d in self.pc.current_directories():
        for d in tree:
                for e in ee:
            for f in matched_files:
        for f in self.pc.current_files():
                    formatter = utils.TextFormatter(
                formatter = utils.TextFormatter(
        formatter = utils.TextFormatter(
for o, a in opts:
                for s in t:
                    for u in unload_list:
                for u in unload_list:
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
        freespace = self.pc.df()
from base.g import *
from base import device, utils, tui, module
from pcard import photocard
from prnt import cups
        from qt import *
        from ui import unloadform
            fs = utils.commafy(freespace)
            fs = utils.format_bytes(freespace)
        """Get help on commands
# GNU General Public License for more details.
                    (GUI_MODE, INTERACTIVE_MODE, NON_INTERACTIVE_MODE),
           'help <command>' or '? <command>' gives help on <command>
           'help' or '?' with no arguments prints a list of commands for which help is available
        -h\tDisplay in human readable format
        if args == '..':
        if args == 'on':
        if args.strip().lower() == '-h':
            if d[0] in ('.', '..'):
                        #if e != 'EXIF MakerNote':
                    if e not in ('JPEGThumbnail', 'TIFFThumbnail', 'Filename'):
                if 'JPEGThumbnail' in exif_info:
            if len(matched_dirs) == 0:
        if len(matched_files) == 0:
        if len(matched_files) == 1:
                if len(unload_list) > 0:
        if len(unload_list) > 0:
        if loaded:
    if loc == 'c':
    if loc is None:
    if loc.lower() != 'c':
        if loc.lower() == 'system':
if mode == GUI_MODE:
if mode in (INTERACTIVE_MODE, NON_INTERACTIVE_MODE):
        if mode == INTERACTIVE_MODE: # INTERACTIVE_MODE
    if not utils.canEnterGUIMode():
    if o in ('-o', '--output'):
        if pc.write_protect:
            if '-p' in args:
        if self.pc.cache_check(sector) > 0:
            if self.pc.cache_state():
            if self.pc.pwd() != '/':
            if self.pc.write_protect:
        if self.pc.write_protect:
        if size == 1:
    if size == 1:
            if type(tree[d]) == type({}):
            if typ == 'image':
            if typ == 'image' and subtyp in ('jpeg', 'tiff'):
    if ui_toolkit == 'qt4':
        if '-x' in args:
           If you want to do some post command processing, do it here.
        """If you want to stop the console, return something that evaluates to true.
import cmd
import fnmatch
import getopt
import operator
import os
import os.path
import re
    import readline
import string
import sys
import time
        """Initialization before prompting user for commands.
            it has been interpreted. If you want to modifdy the input line
# it under the terms of the GNU General Public License as published by
        """ List local directory contents."""
        """List photo card directory contents."""
            l = loc
        loaded = trans.load(qm_file, prop.localization_dir)
            locale.setlocale(locale.LC_ALL, locale.normalize(loc))
# Location: http://www.eskimo.com/~jet/python/examples/cmd/
            loc = 'c'
            loc = '.'.join([l, e])
            loc = '.'.join([loc, e])
            loc = str(QTextCodec.locale())
        loc = user_conf.get('ui', 'loc', 'system')
        log.debug("Name of .qm file: %s" % qm_file)
        log.debug("Trying to load .qm file for %s locale." % loc)
        log.debug("Using default 'C' locale")
        log.debug("Using locale: %s" % loc)
            log.debug("Using system locale: %s" % loc)
                    log.error("Aborted.")
                    log.error("An error occured: %s" % e)
            log.error("Photo card is write protected. mv not allowed.")
            log.error("Photo card is write protected. rm not allowed.")
                log.error("Photo card is write protected. -x not allowed.")
        log.error("%s does not support Qt4. Please use Qt3 or run in -i or -n modes.")
        log.error("Unable to connect to HPLIP I/O. Please (re)start HPLIP and try again.")
        log.error("Unable to load Qt3 support. Is it installed?")
            log.error("Unable to mount photo card on device. Check that device is powered on and photo card is correctly inserted.")
            log.error("Unable to start photocard session: %s" % e.msg)
        log.error("User exit")
log.info("")
log.info("Done.")
        log.info(log.bold("DO NOT REMOVE PHOTO CARD UNTIL YOU EXIT THIS PROGRAM"))
        log.info(log.bold("\nPhotocard on device %s mounted" % pc.device.device_uri))
            log.warning("Photo card is write protected.")
            l, x = loc.split('.')
            matched_dirs = self.pc.match_dirs(args)
        matched_files = self.pc.match_files(args)
                    max_len = 0
                max_len = 0
                        max_len = max(max_len, len(u[0]))
                    max_len = max(max_len, len(u[0]))
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        mode = INTERACTIVE_MODE
__mod__ = 'hp-unload'
mod = module.Module(__mod__, __title__, __version__, __doc__, None,
    mod.parseStdOpts('o', ['output='])
mod.setUsage(module.USAGE_FLAG_DEVICE_ARGS,
        """Move files off photocard"""
        Note:
        num_files = 0
            num_files += 1
                    open(temp_file_name, 'wb').write(exif_info['JPEGThumbnail'])
                    open(temp_file_name, 'wb').write(exif_info['TIFFThumbnail'])
        Options:
opts, device_uri, printer_name, mode, ui_toolkit, loc = \
            os.chdir(args.strip())
            os.chdir(output_dir)
                    os.remove(temp_file_name)
                os.remove(temp_name)
                    os.system('display %s' % temp_file_name)
                os.system('display %s' % temp_name)
        os.system('ls -l')
        output_dir = a
output_dir = os.getcwd()
        output_dir = os.path.realpath(os.path.normpath(os.path.expanduser(output_dir)))
    # Override methods in Cmd object
    pass
        pass
            pass
            #pc.device.sendEvent(EVENT_END_PCARD_JOB)
            #pc.device.sendEvent(EVENT_PCARD_UNABLE_TO_MOUNT, typ='error')
            pc.mount()
            pc = photocard.PhotoCard( None, device_uri, printer_name )
        pc.set_callback(update_spinner)
                pc.umount()
            pc.umount()
        pc.write_protect = disk_info[8]
                photo_name, photo_ext=os.path.splitext(args)
        print
            print
                print
                    print
        """Print a list of commands that have been entered"""
        print "Bytes/sector = %d" % disk_info[1]
            print "Cached sector"
        print "Cached sectors = %s" % utils.commafy(len(self.pc.cache_info()))
                print "Cache is off."
        print "Device URI = %s" % self.pc.device.device_uri
                print "Directory not found"
            print "ERROR: File(s) not found."
        print "Exiting..."
                print "File is not an image."
            print "File not found."
                print formatter.compose((d[0] + "/", "", "directory"))
                print formatter.compose((d[0], "", "directory"))
                        #    print formatter.compose( ( e, ''.join( [ chr(x) for x in exif_info[e].values if chr(x) in string.printable ] ) ) )
                        print formatter.compose((e, '%s' % exif_info[e]))
            print formatter.compose((f[0], utils.format_bytes(f[2]), self.pc.classify_file(f[0])))
                         print formatter.compose(('%s' % u[0], utils.format_bytes(u[1]), '%s/%s' % (u[2], u[3])))
                     print formatter.compose(('%s' % u[0], utils.format_bytes(u[1]), '%s/%s' % (u[2], u[3])))
        print "Freespace = %s Bytes" % fs
                print "Incorrect file type for thumbnail."
        """Print info about photocard."""
                print ''.join([' '*level*4, d, '/'])
            print log.bold("Copying %s..." % src)
        print log.bold("Copying %s..." % src)
        print log.bold("% d files, %s" % (num_files, utils.format_bytes(total_size, True)))
            print log.bold("ERROR: Directory not found.")
            print log.bold("ERROR: Output directory %s not found." % output_dir)
        print log.bold("ERROR: Unrecognized command. Use 'help' to list commands.")
                    print log.bold(formatter.compose(("Name", "Size", "Type")))
                print log.bold(formatter.compose(("Name", "Size", "Type")))
        print log.bold(formatter.compose(("Name", "Size", "Type")))
                print log.bold(formatter.compose(("Tag", "Value")))
                print log.bold("Found %d files to unload, %s" % (len(unload_list), utils.format_bytes(total, True)))
                    print log.bold("Found %d files to unload, %s\n" % (len(unload_list), utils.format_bytes(total, True)))
            print log.bold("\n%s transfered in %d sec (%d KB/sec)" % (utils.format_bytes(total), delta, (total/1024)/(delta)))
                    print log.bold("\n%s unloaded in %d sec (%d KB/sec)" % (utils.format_bytes(total), delta, (total/1024)/delta))
                print log.bold("\n%s unloaded in %d sec (%d KB/sec)" % (utils.format_bytes(total), delta, (total/1024)/delta))
                print log.bold("Total cache sectors: %s of %s" % (utils.commafy(len(t)), utils.commafy(photocard.MAX_CACHE)))
                print log.bold("Total cache usage: %s (%s maximum)" % (utils.format_bytes(len(t)*512), utils.format_bytes(photocard.MAX_CACHE * 512)))
                print log.bold("Unloading %d files..." % len(unload_list))
                    print log.bold("Unloading files...\n")
        print "Model = %s" % self.pc.device.model_ui
        """Print name of local current/working directory."""
        """Print name of photo card current/working directory
            print "\nCopied %s to %s (%s)..." % (src, trg, utils.format_bytes(size))
        print "\nCopied %s to %s (%s)..." % (src, trg, utils.format_bytes(size))
            print "No image, audio, or video files found."
                    print "No thumbnail found."
        print "OEM ID = %s" % disk_info[0]
            print "Only one file at a time may be specified for display."
            print "Only one file at a time may be specified for thumbnail display."
        print os.getcwd()
            print "Output directory is %s" % os.getcwd()
                print "Pattern matches more than one directory"
        print "Removing %s..." % src
        print repr(self.pc.sector(sector))
        print "Reserved sectors = %d" % disk_info[3]
        print "Root entries = %d" % disk_info[4]
                    print "sector %d (%d hits)" % (s, cache_info[s])
            print "Sector must be specified as a number"
        print "Sectors/cluster = %d" % disk_info[2]
        print "Sectors/FAT = %d" % disk_info[5]
        print self._hist
        print self.pc.pwd()
            #print "'%s' '%s'" % (typ, subtyp)
        print "System ID = %s" % disk_info[7]
    #    print text, line, begidx, endidx
        print "Volume label = %s" % disk_info[6]
        print "Working dir = %s" % self.pc.pwd()
        print "Write protected = %d" % disk_info[8]
        prop.locale = loc
        -p\tPrint unload list but do not copy or remove files"""
        QLocale.setDefault(QLocale(loc))
        qm_file = 'hplip_%s.qm' % l
    QObject.connect(app, SIGNAL("lastWindowClosed()"), app, SLOT("quit()"))
        """Remove files from photo card."""
        """Reset the cache."""
            return
                return
        return -1
        return line
        return self.do_exit(args)
        return self.do_ls(args)
        return stop
    #    #return "XXX"
            sector = int(args)
    see_also_list=['hp-toolbox'])
        self.do_cd('..')
        self.do_cp(args, True)
        self.do_display(args)
        self.do_exif(args)
        self.do_thumbnail(args)
        self._globals = {}
        self._hist += [line.strip()]
        self._hist    = []      # No history yet
        self.intro  = "Type 'help' for a list of commands. Type 'exit' to quit."
        self._locals  = {}      # Initialize execution namespace for user
            self.pc.cache_control(False)
            self.pc.cache_control(True)
        self.pc.cache_reset()
            self.pc.cd('/')
                self.pc.cd(matched_dirs[0])
                self.pc.cdup()
                self.pc.cp(args, temp_name)
        self.pc.ls()
        self.pc = pc
                self.pc.rm(f, False)
        self.print_tree(tree)
                self.print_tree(tree[d], level+1)
        self.prompt = log.bold("pcard: %s > " % self.pc.pwd())
# Std Lib
        """Synonym for the display command."""
        """Synonym for the exif command."""
        """Synonym for the ls command."""
        """Synonym for the thumbnail command."""
            sys.exit(1)
        sys.exit(1)
        """Take care of any unfinished business.
                t = cache_info.keys()
        \tcd <directory>
        \tCopy all JPEG and GIF files and a file named thumbs.db from photo card to local directory:
        \tcp FILENAME(S)|GLOB PATTERN(S)
        \tcp *.jpg *.gif thumbs.db
        \tDisplay: cache
        \tdisplay <filename>"""
                    temp_file_fd, temp_file_name = utils.make_temp_file()
        \texif <filename>"""
# the Free Software Foundation; either version 2 of the License, or
        # The only reason to define this method is for the help text in the doc string
        """ This method is called after the line has been input but before
# This program is distributed in the hope that it will be useful,
# This program is free software; you can redistribute it and/or modify
__title__ = 'Photo Card Access Utility'
            # TODO:
        \tOnly works with JPEG/JFIF images with embedded JPEG/TIFF thumbnails
                    total = 0
                total = 0
            total, delta = self.pc.cp_multiple(matched_files, remove_after_copy, self.cp_status_callback, self.rm_status_callback)
                    total, delta, was_cancelled = pc.unload(unload_list, status_callback, None, True)
                total, delta, was_cancelled = self.pc.unload(unload_list, self.cp_status_callback, self.rm_status_callback, dont_remove)
        total_size = 0
            total_size += f[2]
                         total += u[1]
                     total += u[1]
        \t>pwd"""
        trans = QTranslator(None)
        tree = self.pc.tree()
                try:
            try:
        try:
    try:
        \tsector <sector num>
                t.sort()
        \tSubdirectories on photo card are not preserved
        \tthumbnail <filename>"""
        \tTurn off: cache off
        \tTurn on: cache on
        \tYou may only specify one directory level at a time.
            typ = self.pc.classify_file(args).split('/')[0]
            typ, subtyp = self.pc.classify_file(args).split('/')
                    (UI_TOOLKIT_QT3,))
        """Unload all image files from photocard to current local directory.
                unload_list = pc.get_unload_list()
        unload_list = self.pc.get_unload_list()
        Usage:
#!/usr/bin/python
        utils.log_title(__title__, __version__)
# Version:  1.0
__version__ = '3.3'
                                {'width': 12, 'margin' : 2},
                            {'width': 12, 'margin' : 2},
                                {'width': 12, 'margin' : 2, 'alignment' : utils.TextFormatter.RIGHT},
                            {'width': 12, 'margin' : 2, 'alignment' : utils.TextFormatter.RIGHT},
                    {'width': 12, 'margin' : 2, 'alignment' : utils.TextFormatter.RIGHT},
                    {'width': 14, 'margin' : 2},
                    {'width': 30, 'margin' : 2},
                            {'width': 40, 'margin' : 2},
                                {'width': max_len+2, 'margin' : 2},
                            {'width': max_len+2, 'margin' : 2},
    w.show()
        w = unloadform.UnloadForm(['cups'], device_uri, printer_name)
        -x\tDon't remove files after copy
# You should have received a copy of the GNU General Public License

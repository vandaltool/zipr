         
------------
127.0.0.1
AA query
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789
adding server %s
    ADDITIONAL RECORDS:
addlookup()
add_nameserver failed
add_opt()
add_question()
Address: %s
Address: %.*s
Address:	%s
AD query
afsdb = 
after insertion, init -> %p, new = %p, new -> %p
after parse
algorithm
;; and we try to continue chain of trust validation of the zone: 
;; An NSEC prove the non-existence of a answers, Now we want validate this NSEC
    ANSWERS:
Authoritative answers can be found from:
    AUTHORITY RECORDS:
;; BAD (HORIZONTAL) REFERRAL
;; BAD REFERRAL
before insertion, init@%p -> %p, new@%p -> %p
before parse starts
bind9_getaddresses
bind_address
bind_any
b == &query->lengthbuf
b == &query->recvbuf
bringup_timer()
__bss_start
cancel_all()
canceling query %p, belonging to %p
cancel_lookup()
cancel_now
canonical name = 
can't find either v4 or v6 networking
*** Can't find %s: No answer
CD query
cfg_map_get
cfg_map_getname
cfg_obj_asstring
cfg_obj_destroy
cfg_parse_file
cfg_parser_create
cfg_parser_destroy
cfg_type_sessionkey
;; chain of trust can't be validated: FAILED
chase_authority_name
chase_current_name
chase_dslookedup
chase_dsrdataset
chase_dsrdataset != ((void *)0)
chase_keylookedup
chase_keyrdataset
chase_keyrdataset != ((void *)0)
chase_lookedup
chase_message_list
chase_message_list2
chase_msg->msg != ((void *)0)
chase_name
chase_name_dup
chase_nslookedup
chase_nsrdataset
chase_nsrdataset != ((void *)0)
chase_rdataset
chase_rdataset != ((void *)0)
chase_sigdslookedup
chase_sigdsrdataset
chase_sigdsrdataset != ((void *)0)
chase_sigkeylookedup
chase_sigkeyrdataset
chase_sigkeyrdataset != ((void *)0)
chase_siglookedup
chase_signame
chase_sigrdataset
chase_sigrdataset != ((void *)0)
check_for_more_data()
check_if_done()
check_next_lookup(%p)
check_ra
class = %s
;; cleanandgo 
clear_query(%p)
clone_lookup()
clone_server_list()
cloning server list
COMMPOOL
;; communications error: %s
;; communications error to %s: %s
connect_done()
;; connection timed out; no servers could be reached
;; Connection to %s(%s) for %s failed: %s.
connect_timeout()
copy_server_list()
;; Couldn't create key %s: bad algorithm
;; Couldn't create key %s: %s
couldn't get address for '%s': %s
couldn't parse digest bits
Couldn't read key from %s: %s
;; Couldn't verify signature: %s
count == 1
create query %p linked to lookup %p
create_search_list()
current_lookup
current_lookup == ((void *)0)
__cxa_finalize
%d bytes
D$,;D$HvJf
default_debug
Default server: %s
delegation_follow
destroy DST lib
destroy_libs()
Destroy memory
Destroy the messages kept for sigchase
detach from entropy
detailsection()
digestbits
digest-bits [0..128]
digest-bits [0..160]
digest-bits [0..224]
digest-bits [0..256]
digest-bits [0..384]
digest-bits [0..512]
dighost.c
dighost_shutdown()
dname = 
dns_byaddr_createptrname2
dns_compress_init
dns_compress_invalidate
dns_dnssec_keyfromrdata
dns_dnssec_verify
dns_ds_buildrdata
;; DNSKEY is missing to continue validation: FAILED
;; DNSKEYset:
;; DNSKEYset that signs the RRset to chase:
dns_log_init
dns_log_setcontext
dns_message_addname
dns_message_create
dns_message_create in %s:%d
dns_message_currentname
dns_message_destroy
dns_message_findtype
dns_message_firstname
dns_message_getquerytsig
dns_message_gettempname
dns_message_gettemprdata
dns_message_gettemprdatalist
dns_message_gettemprdataset
dns_message_gettemprdataset()
dns_message_nextname
dns_message_parse
dns_message_peekheader
dns_message_puttempname
dns_message_renderbegin
dns_message_renderend
dns_message_rendersection
dns_message_setopt
dns_message_setquerytsig
dns_message_settsigkey
dns_message_takebuffer
dns_name_clone
dns_name_compare
dns_name_copy
dns_name_countlabels
dns_name_destroy
dns_name_dup
dns_name_dynamic
dns_name_equal
dns_name_format
dns_name_free
dns_name_fromtext
dns_name_fullcompare
dns_name_getlabel
dns_name_getlabelsequence
dns_name_init
dns_name_invalidate
dns_name_isabsolute
dns_name_isabsolute(lookup->name)
dns_name_issubdomain
dns_name_print
dns_name_setbuffer
dns_name_totext
dns_nsec_typepresent
dns_rdataclass_format
dns_rdataclass_fromtext
dns_rdata_compare
dns_rdata_freestruct
dns_rdata_fromstruct
dns_rdata_init
dns_rdatalist_init
dns_rdatalist_tordataset
dns_rdata_reset
dns_rdataset_current
dns_rdataset_first
dns_rdataset_init
dns_rdataset_makequestion
dns_rdataset_next
dns_rdata_tostruct
dns_rdata_tostruct for DS
dns_rdata_totext
dns_rdatatype_format
dns_rdatatype_fromtext
dns_rdatatype_totext
dns_result_register
dns_rootname
dns_tsig_hmacmd5_name
dns_tsig_hmacsha1_name
dns_tsig_hmacsha224_name
dns_tsig_hmacsha256_name
dns_tsig_hmacsha384_name
dns_tsig_hmacsha512_name
dns_tsigkey_create
dns_tsigkey_createfromkey
dns_tsigkey_detach
dns_tsig_verify
doing axfr, got second SOA
doing ixfr, got empty zone
do_lookup()
done, and starting to shut down
done rendering
done, since axfr
done with ixfr
;; DSset:
;; DSset is missing to continue validation: FAILED
;; DSset of the DNSKEYset
dst_context_destroy
dst_key_alg
dst_key_compare
dst_key_free
dst_key_fromnamedfile
dst_key_id
dst_key_name
dst_key_setbits
dst_lib_destroy
dst_lib_init
dsvalidating
empty DNSKEY dataset
empty DS dataset
empty DSset dataset
empty KEY dataset
empty rdataset
empty RRSIG dataset
;; ERROR : 
Error in the queried type: %d
error_message
;; ERROR no DS validates a DNSKEY in the DNSKEY RRset: FAILED
;; ERROR: short (< header size) message
/etc/resolv.conf
/etc/trusted-key.key
event->ev_type == (((1) << 16) + 2)
event->ev_type == (((2) << 16) + 1)
event->ev_type == (((2) << 16) + 2)
event->ev_type == (((2) << 16) + 4)
exitcode
	expire = %u
extrabytes
fatalexit
;; FINISH : we have validate the DNSSEC chain of trust: SUCCESS
flush_server_list()
following up %s
 for zone: %s
found NS %s
found NS set
__fprintf_chk
freeing buffer %p
freeing commctx
freeing key %p
freeing querysig buffer %p
freeing server %p belonging to %p
freeing socketmgr
freeing task
freeing taskmgr
freeing timermgr
!free_now
free_now
get_address
getting initial querysig
get_trusted_key(): trusted key not found %s
GLIBC_2.0
GLIBC_2.1
GLIBC_2.1.1
GLIBC_2.1.3
GLIBC_2.3.4
GLIBC_2.4
global_task
__gmon_start__
got a match for ixfr
got an SOA
;; Got bad packet: %s
;; Got %s from %s, trying next server
got the second rr as nonsoa
grandfather_pb
has AAAA address 
have_delegation_ns
have_ipv4
have_ipv6
have local timeout of %d
have_response
hinfo = 
hmac-md5
hmac-md5-
hmacname
hmac-sha1
hmac-sha1-
hmac-sha224
hmac-sha224-
hmac-sha256
hmac-sha256-
hmac-sha384
hmac-sha384-
hmac-sha512
hmac-sha512-
hmac != ((void *)0)
ignoring launch_next_query because !pending
;; Impossible to verify the DSset: FAILED
;; Impossible to verify the non-existence: FAILED
;; Impossible to verify the non-existence, the NSEC RRset can't be validated: FAILED
;; Impossible to verify the NSEC RR to prove the non-existence : FAILED
;; Impossible to verify the RRset : FAILED
in cancel handler
inet_pton
initializing keys
in NSSEARCH code
in recv cancel handler
insert_soa()
internet address = 
in TRACE code
*** Invalid option: %s
invalid %s '%s': %s
_IO_putc
_IO_stdin_used
isc__app_block
isc__app_finish
isc__app_onrun
isc_app_onrun
isc__app_run
isc__app_shutdown
isc__app_start
isc_app_start
isc__app_unblock
isc_assertion_failed
isc_base64_decodestring
isc__buffer_add
isc_buffer_allocate
isc__buffer_clear
isc_buffer_copyregion
isc_buffer_free
isc_buffer_getuint16
isc__buffer_init
isc__buffer_invalidate
isc__buffer_putstr
isc__buffer_putuint16
isc__buffer_usedregion
isc_entropy_create
isc_entropy_detach
isc_error_runtimecheck
isc_event_allocate
isc_event_allocate: %s
isc_event_free
isc_file_exists
isc_file_mktemplate
isc_file_remove
isc_interval_set
isc_log_create
isc_log_destroy
isc_log_setcontext
isc_log_setdebuglevel
isc_log_usechannel
isc___mem_allocate
isc__mem_create
isc_mem_create
isc__mem_destroy
isc___mem_free
isc___mem_get
isc__mempool_create
isc_mempool_create
isc__mempool_destroy
isc___mempool_get
isc___mempool_put
isc__mempool_setfillcount
isc__mempool_setfreemax
isc__mempool_setname
isc___mem_put
isc__mem_stats
isc__mutex_init
isc_mutex_init
isc_mutex_lock
isc_mutex_unlock
isc_netaddr_format
isc_netaddr_fromsockaddr
isc_net_probeipv4
isc_net_probeipv6
isc_parse_uint32
isc_random_get
isc_rdata_fromstruct
isc_region_compare
isc_result_totext
isc_sockaddr_any
isc_sockaddr_any6
isc_sockaddr_anyofpf
isc_sockaddr_compare
isc_sockaddr_eqaddr
isc_sockaddr_format
isc_sockaddr_getport
isc_sockaddr_ismulticast
isc_sockaddr_pf
isc__socket_bind
isc_socket_bind
isc__socket_cancel
isc__socket_connect
isc_socket_connect
isc__socket_create
isc_socket_create
isc__socket_detach
isc__socketmgr_create
isc_socketmgr_create
isc__socketmgr_destroy
isc__socket_recvv
isc_socket_recvv
isc__socket_sendtov
isc_socket_sendtov
isc__socket_sendv
isc_socket_sendv
isc_string_strlcpy
isc__task_create
isc_task_create
isc__task_detach
isc__taskmgr_create
isc_taskmgr_create
isc__taskmgr_destroy
isc__task_send
isc_time_now
isc_time_now((&query->time_sent)) == 0
isc__timer_create
isc_timer_create
isc__timer_detach
isc__timermgr_create
isc_timermgr_create
isc__timermgr_destroy
isc__timer_reset
isc_timer_reset
isc__timer_touch
isdn address = 
is_dst_up
 is not a subdomain of: 
 isn't a subdomain of any Trusted Keys: +sigchase option is disable
_Jv_RegisterClasses
key must have algorithm and secret
keynametext
keyrdata.type == ((dns_rdatatype_t)dns_rdatatype_dnskey)
keysecret
Launch a query to find a RRset of type 
launch_next_query()
libbind9.so.80
libc.so.6
__libc_start_main
libdns.so.81
libisccfg.so.82
libisc.so.83
/lib/ld-linux.so.2
liblwres.so.80
libpthread.so.0
(l->my_server_list).head == (sp)
(l->my_server_list).tail == (sp)
looking up %s
looknew != ((void *)0)
lookup_counter
lookup_list
(lookup_list).head == (l)
(lookup_list).head == (lp)
((lookup_list).head) == ((void *)0)
(lookup_list).tail == (current_lookup)
(lookup_list).tail == (l)
(lookup_list).tail == (lp)
lookup_lock
(lookup->my_server_list).head == ((dig_server_t *)ptr)
(lookup->my_server_list).head == (srv)
(lookup->my_server_list).tail == ((dig_server_t *)ptr)
(lookup->my_server_list).tail == (srv)
lookup=%p, query=%p
(lookup->q).head == (query)
(lookup->q).tail == (query)
lookup != ((void *)0)
(l->q).head == (qp)
(l->q).tail == (qp)
lwres_conf_clear
lwres_conf_get
lwres_conf_parse
lwres_context_create
lwres_context_create failed
lwres_context_destroy
lwres_net_ntop
lwres_net_pton
	mail addr = %s
mail exchanger = 
main parsing %s
make_empty_lookup()
make_server(%s)
making new TCP request, %d tries left
meaningless soa %d
memdebugging
memory allocation failure
memory allocation failure in %s:%d
minfo = 
	minimum = %u
nameFromString
Name:	%s
nameserver = 
naptr = 
ndots is %d.
next_origin()
;; No acceptable nameservers
 No Answers and impossible to prove the unsecurity : Validation FAILED
;; NO ANSWERS: %s
;; No Answers: Validation FAILED
;; No DNSKEY is valid to check the RRSIG of the RRset: FAILED
no longer pending.  Got %s
Non-authoritative answer:
norecurse
no response and no delegation in authority section but a reference to: 
no response but there is a delegation in authority section:
;; no RRSIG NSEC in authority section: impossible to validate the non-existence: FAILED
nosearch
;; nothing in authority section : impossible to validate the non-existence : FAILED
;; No trusted key, +sigchase option is disabled
No trusted keys present
;; Now verify that this DNSKEY validates the DNSKEY RRset
;; Now, we are going to validate this DNSKEY by the DS
;; Now, we want to validate the DS :  recursive call
nsap_ptr = 
nslookup.c
ns name: %s
;; NS RRset is missing to continue validation: FAILED
;;NSset is missing to continue validation: FAILED
NXDOMAIN
;; OK a DS valids a DNSKEY in the RRset
;; Ok, find a Trusted Key in the DNSKEY RRset: %d
OK the NSEC said that the type doesn't exist 
;; OK the query doesn't have response but we have validate this fact : SUCCESS
;; Ok this DNSKEY is a Trusted Key, DNSSEC validation is ok: SUCCESS
;; OK this DNSKEY (validated by the DS) validates the RRset of the DNSKEYs, thus the DNSKEY validates the RRset
;; OK We found DNSKEY (or more) to validate the RRset
onrun_callback
Oops: impossible to build new DS rdata
optional = 
	origin = %s
parse of %s failed
p_ret != ((void *)0)
__printf_chk
printmessage()
printsection()
print_type
progname
protocol = 
prove_nx: ERROR type exist
prove_nx: OK type does not exist
pthread_mutex_destroy
((pthread_mutex_destroy(((&lookup_lock))) == 0) ? 0 : 34) == 0
pthread_mutex_lock
pthread_mutex_unlock
(q->lengthlist).head == (&q->lengthbuf)
(q->lengthlist).tail == (&q->lengthbuf)
(q->recvlist).head == (&q->recvbuf)
(q->recvlist).tail == (&q->recvbuf)
(query->lengthlist).head == (&query->lengthbuf)
(query->lengthlist).tail == (&query->lengthbuf)
(query->recvlist).head == (&query->recvbuf)
(((query->recvlist).head == ((void *)0)) ? isc_boolean_true : isc_boolean_false)
(query->recvlist).tail == (&query->recvbuf)
query->recvspace != ((void *)0)
query->sock == ((void *)0)
query->sock != ((void *)0)
query to %s still pending
querytype=
  querytype = %-8s	class = %s
query != ((void *)0)
query->waiting_connect
    QUESTIONS:
;; Question section mismatch: got %s/%s/%s
rdata_%d = 
rdata.type == ((dns_rdatatype_t)dns_rdatatype_dnskey)
recursion not available
recursive query
recvcount
recvcount == 0
recvcount >= 0
recvcount=%d
recv_done()
recving with lookup=%p, query=%p
recving with lookup=%p, query=%p, sock=%p
	refresh = %u
Removing log context
;; reply from unexpected source: %s, expected %s
requeue_lookup()
resending UDP request to first server
RESERVED11
RESERVED12
RESERVED13
RESERVED14
RESERVED15
resetting lookup counter.
resubmitted recv request with length %d, recvcount=%d
	retry = %u
returning with rcode == 0
 RRset for 
;; RRset is missing to continue validation SHOULD NOT APPEND: FAILED
;; RRset to chase:
;; RRSIG for DNSKEY  is missing  to continue validation : FAILED
;; RRSIG is missing for continue validation: FAILED
;; RRSIG is missing  to continue validation SHOULD NOT APPEND: FAILED
;; RRSIG of DNSKEY is missing to continue validation: FAILED
;; RRsig of RRset is missing to continue validation SHOULD NOT APPEND: FAILED
;; RRSIG of the DNSKEYset:
;; RRSIG of the DNSKEYset that signs the RRset to chase:
;; RRSIG of the DSset of the DNSKEYset
;; RRSIG of the RRset to chase:
;; RRSIGset of DSset
rtype_0 = 
rtype_10 = 
rtype_31 = 
rtype_32 = 
rtype_34 = 
rtype_40 = 
    ->  %s
search_list
(search_list).tail == (search)
sendcount
sendcount == 0
sendcount >= 0
sendcount=%d
send_done()
sending a request
sending a request in launch_next_query
sending next, since searching
sending query %p
send_tcp_connect(%p)
send_udp(%p)
	serial = %u
** server can't find %s: %s
server_list
(server_list).head == (ps)
(server_list).tail == (ps)
Server:		%s
SERVFAIL
SERVFAIL reply
service = 
servname != ((void *)0)
Set options:
setting udp size of %d
setup_file_key()
setup_libs()
setup_lookup(%p)
setup_system()
setup_text_key()
(sevent->bufferlist).head == (b)
(sevent->bufferlist).head == (&query->recvbuf)
(sevent->bufferlist).tail == (b)
(sevent->bufferlist).tail == (&query->recvbuf)
showsearch
shutting down
;; %s: ID mismatch: expected ID %u, got %u
signature = 
sigrdata tostruct siginfo
'%s' is not a legal name (%s)
'%s' is not in legal name syntax (%s)
;; Skipping server %s, incompatible address family
__snprintf_chk
sockcount
sockcount == 0
sockcount >= 0
sockcount > 0
sockcount=%d
socketmgr
specified_source
  srchlist = 
  %s		%s
  %s			%s		%s
__stack_chk_fail
starting to render the message
start_lookup()
still have a worker
still pending.
strcasecmp
__strcpy_chk
strncasecmp
__strsep_g
str != ((void *)0)
tcp_length_done()
;; The Answer:
;; the DNSKEY isn't trusted-key and there isn't DS to validate the DNSKEY: FAILED
;; The queried zone: 
There is a NSEC for this zone in the AUTHORITY section:
there is no NSEC for this zone: validating that the zone doesn't exist
There isn't RRSIG NSEC for the zone 
The '%s' command is not implemented.
The '%s' command is not yet implemented.
;; This DS is NOT the DS for the chasing KEY: FAILED
this is the first %d
this is the second %d
timeout=
  timeout = %d		retry = %d	port = %d
timermgr
tmp_file
too many lookups
; Transfer failed.
; Transfer failed.  Didn't start with SOA answer.
;; Truncated, retrying in TCP mode.
trustedkey
./trusted-key.key
try_clear_lookup(%p)
trying next server...
trying origin %s
	ttl = %u
type = %s, 
unknown key type '%.*s'
unknown query class: %s
unknown query type: %s
unlock_lookup %s:%d
unsuccessful connection: %s
usesearch
using root origin
v6 address = 
validated
;; VERIFYING 
__vfprintf_chk
;; Warning: ID mismatch: expected ID %u, got %u
;; Warning, ignoring invalid TSIG algorithm %s
;; Warning: Message parser reports malformed message packet.
;; WARNING : NO RRSIG DS : RRSIG DS should come with DS
;; Warning: query response not set
;; Warning: short (< header size) message received
;; WARNING There is no DS for the zone: 
;; We are in a Grand Father Problem: See 2.2.1 in RFC 3568
We have a NSEC for this zone :OK
;; WE HAVE MATERIAL, WE NOW DO VALIDATION
We want to prove the non-existence of a type of rdata %d or of the zone: 
 with DNSKEY:%d: %s
 with nameservers:
working on lookup %p, query %p
x25 address = 
YXDOMAIN

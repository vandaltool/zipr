1 while ($confmodule->communicate);
@ARGV=@argv;
		@command=@ARGV[$x..$#ARGV];
# command to run, which may have arguments. Break those arguments out.
$confmodule->finish;
$confmodule->owner($owner) if length $owner;
Debconf::Config->getopt($usage.gettext(qq{
Debconf::Db->load;
Debconf::Db->save;
 DEBCONF_DEBUG=developer debconf my-shell-prog
debconf-doc package).
 debconf --frontend=readline sh -x my-shell-prog
Debconf is a configuration system for Debian packages. For a debconf
 debconf [options] command [args]
debconf - run a debconf-using program
die "$usage\n" unless @command;
	elsif ($ARGV[$x] =~ /^-/) {
Enables terse output mode. This affects only some frontends.
		# end of arguments, start of command
exit $code;
# Find the end of the options for this command, and the beginning of the
for debconf to be used via L<dpkg-preconfigure(8)> or L<dpkg-reconfigure(8)>.
for (my $x=0; $x <= $#ARGV; $x++) {
$frontend->shutdown;
=head1 AUTHOR
=head1 DESCRIPTION
=head1 EXAMPLES
=head1 NAME
=head1 OPTIONS
=head1 SEE ALSO
=head1 SYNOPSIS
	if ($ARGV[$x] =~ /^-(o|f|p|-(owner|frontend|priority))$/) {
=item B<-f>I<type>, B<--frontend=>I<type>
=item B<-o>I<package>, B<--owner=>I<package>
=item B<-p>I<value>, B<--priority=>I<value>
=item B<--terse>
Joey Hess <joeyh@debian.org>
L<debconf-devel(7)> for details about the debconf protocol.
L<debconf-devel(7)>, L<debconf(7)>
let your PATH find it.
my (@argv, @command);
my $code=$confmodule->exitcode;
my $confmodule=make_confmodule(@command);
my $frontend=make_frontend();
my $owner='';
my $usage = gettext("Usage: debconf [options] command [args]");
necessary to get ownership of registered questions right, and to support
  -o,  --owner=package		Set the package that owns the command.}),
        "o|owner=s"		=> \$owner,
Or, you might use this:
overview and documentation for sysadmins, see L<debconf(7)> (in the
protocol commands, and it is expected to read result codes on stdin. See
		push @argv, $ARGV[$x];
		push @argv, $ARGV[$x++];
		push @argv, $ARGV[$x] if defined $ARGV[$x]; # skip option argument
Select the frontend to use.
Specify the minimum priority of question that will be displayed.
Tell debconf what package the command it is running is a part of. This is
The B<debconf> program runs a program under debconf's control, setting it up
The command to be run under debconf must be specified in a way that will
This command is not the usual way that debconf is used. It's more typical
To debug a shell script that uses debconf, you might use:
to talk with debconf on stdio. The program's output is expected to be debconf
unregister and purge commands properly.
use Debconf::AutoSelect qw(:all);
use Debconf::Config;
use Debconf::Db;
use Debconf::Gettext;
use strict;
#!/usr/bin/perl -w

-aclostu --alt --stderr Allbery --overstrike overstrike --termcap --utf8
and if it's actually in UTF-8, the output will be double-encoded.  See
are sent to standard error instead and the POD ERRORS section is
@ARGV = map { $_ eq '-' && !$stdin++ ? ('--', $_) : $_ } @ARGV;
Assume each sentence ends with two spaces and try to preserve that spacing.
Be aware that, when using this option, the input encoding of your POD
because this is the expected formatting for manual pages; if you're
B<pod2text> is a front-end for Pod::Text and its subclasses.  It uses them
    [B<--stderr>] S<[B<-w> I<width>]> [I<input> [I<output> ...]]
By default, B<pod2text> puts any errors detected in the POD input in a POD
By default, B<pod2text> tries to use the same output encoding as its input
character, backspace, character.  Italics and file names are rendered as
characters, the first two are used as the left quote and the second two as
code).  If I<input> isn't given, it defaults to C<STDIN>.  I<output>, if
code left intact.
command-line options.
# Copyright 1999, 2000, 2001, 2004, 2006, 2008, 2010
Copyright 1999, 2000, 2001, 2004, 2006, 2008, 2010 Russ Allbery
current terminal device.
# default to sentence boundaries turned off for compatibility.
delete @options{'color', 'termcap', 'overstrike'};
# does correctly).
either termcap sequences or ANSI color escape sequences to format the text.
} elsif ($options{overstrike}) {
} elsif ($options{termcap}) {
encoding (to be backward-compatible with older versions).  This option
ERRORS section in the output manual page.  If B<--stderr> is given, errors
    eval 'exec /usr/bin/perl -S $0 ${1+"$@"}'
eval 'exec /usr/bin/perl  -S $0 ${1+"$@"}'
    eval { require Term::ANSIColor };
(F) An unknown command line option was given.
(F) B<-c> or B<--color> were given, but Term::ANSIColor could not be
# Figure out what formatter we're going to use.  -c overrides -t.
files can be processed in the same B<pod2text> invocation (saving module
for all text, including headings, not the amount by which regular text is
for C<=over> blocks.  Defaults to 4 spaces if this option isn't given.
    $formatter = 'Pod::Text::Color';
    $formatter = 'Pod::Text::Overstrike';
    $formatter = 'Pod::Text::Termcap';
Format the output with ANSI color escape sequences.  Using this option
Format the output with overstrike printing.  Bold text is rendered as
formatting arbitrary text documents, using this option is recommended.
formatting the output.  Output will be wrapped at two columns less than the
for (my $i = 0; $i < @ARGV; $i++) {
=for stopwords
for viewing code documented with POD blocks with the POD rendered and the
from this environment variable, if available.  It overrides terminal width
GetOptions (\%options, 'alt|a', 'code', 'color|c', 'help|h', 'indent|i=i',
Getopt::Long::config ('bundling');
# Getopt::Long; we want to interpret it as meaning stdin (which Pod::Simple
given, is the file to which to write the formatted output.  If I<output>
have a termcap file somewhere where Term::Cap can find it and requires that
=head1 AUTHOR
=head1 COPYRIGHT AND LICENSE
=head1 DESCRIPTION
=head1 DIAGNOSTICS
=head1 ENVIRONMENT
=head1 NAME
=head1 OPTIONS
=head1 SEE ALSO
=head1 SYNOPSIS
heading style and marks C<=item> entries with a colon in the left margin.
    if 0; # not running under some shell
    if ($ARGV[$i] =~ /^-(\d+)$/) {
If B<pod2text> fails with errors, see L<Pod::Text> and L<Pod::Simple> for
If B<-t> is given, B<pod2text> will take the current width of your screen
If B<-t> is given, B<pod2text> will use the contents of this environment
    if ($@) { die "-c (--color) requires Term::ANSIColor be installed\n" }
if ($options{color}) {
        if $running_under_some_shell;
I<input> is the file to read for POD source (the POD can be embedded in
In addition, other L<Getopt::Long> error messages may result from invalid
Include any non-POD text from the input file in the output as well.  Useful
indented; for the latter, see B<-i> option.
information about what those errors might mean.  Internally, it can also
information in TERMCAP.
# Initialize and run the formatter.
input without an C<=encoding> command will be assumed to be in Latin-1,
# Insert -- into @ARGV before any single dash argument to hide it from
# invoked by perldoc -t among other things.
I<output> files on the command line.
I<quotes> is a single character, it is used as both the left and right
I<quotes> may also be set to the special value C<none>, in which case no
is compressed into a single space.
isn't given, the formatted output is written to C<STDOUT>.  Several POD
=item B<-a>, B<--alt>
=item B<-c>, B<--color>
=item B<--code>
=item B<-h>, B<--help>
=item B<-i> I<indent>, B<--indent=>I<indent>
=item B<-l>, B<--loose>
=item B<-m> I<width>, B<--left-margin>=I<width>, B<--margin>=I<width>
=item B<-o>, B<--overstrike>
=item B<-q> I<quotes>, B<--quotes>=I<quotes>
=item B<-s>, B<--sentence>
=item B<--stderr>
=item B<-t>, B<--termcap>
=item B<-u>, B<--utf8>
=item B<-w>, B<--width=>I<width>, B<->I<width>
=item -c (--color) requires Term::ANSIColor be installed
=item COLUMNS
=item TERMCAP
=item Unknown option: %s
    last if $ARGV[$i] =~ /^--$/;
left quote and the second as the right quoted; and if I<quotes> is four
L<http://www.eyrie.org/~eagle/software/podlators/>.  It is also part of the
load and compile times) by providing multiple pairs of I<input> and
            'loose|l', 'margin|left-margin|m=i', 'overstrike|o',
L<perlpod(1)> for more information on the C<=encoding> command.
L<Pod::Text>, L<Pod::Text::Color>, L<Pod::Text::Overstrike>,
L<Pod::Text::Termcap>, L<Pod::Simple>, L<perlpod(1)>
my $formatter = 'Pod::Text';
    my ($input, $output) = splice (@ARGV, 0, 2);
my %options;
my $parser = $formatter->new (%options);
my $stdin;
# -<number>.  We turn that into -w <number> for compatibility with the
$options{sentence} = 0;
    or exit 1;
# original pod2text script.
# Parse our options.  Use the same names as Pod::Text for simplicity, and
    $parser->parse_from_file ($input, $output);
Perl core distribution as of 5.6.0.
pod2text [B<-aclostu>] [B<--code>] [B<-i> I<indent>] S<[B<-q> I<quotes>]>
pod2text B<-h>
# pod2text -- Convert POD data to formatted ASCII text.
pod2text - Convert POD data to formatted ASCII text
pod2usage (1) if $options{help};
Print a blank line after a C<=head1> heading.  Normally, no blank line is
printed after C<=head1>, although one is still printed after C<=head2>,
Print out usage information and exit.
produce the following diagnostics:
quote; if I<quotes> is two characters, the first character is used as the
quote marks are added around CE<lt>> text.
            'quotes|q=s', 'sentence|s', 'stderr', 'termcap|t', 'utf8|u',
require 5.004;
    require Pod::Text::Color;
    require Pod::Text::Overstrike;
    require Pod::Text::Termcap;
requires that Term::ANSIColor be installed on your system.
<rra@stanford.edu>.
#     Russ Allbery <rra@stanford.edu>
Russ Allbery <rra@stanford.edu>.
says to instead force the output encoding to UTF-8.
sequences for the terminal from termcap, and use that information in
Sets the quote marks used to surround CE<lt>> text to I<quotes>.  If
Set the number of spaces to indent regular text, and the default indentation
source must be properly declared unless it is US-ASCII or Latin-1.  POD
        splice (@ARGV, $i++, 1, '-w', $1);
suppressed.
# Take an initial pass through our options, looking for one of the form
The column at which to wrap text on the right-hand side.  Defaults to 76,
The current version of this script is always available from its web site at
# The driver script for Pod::Text, Pod::Text::Termcap, and Pod::Text::Color,
the right quote.
The width of the left margin in spaces.  Defaults to 0.  This is the margin
# This program is free software; you may redistribute it and/or modify it
This program is free software; you may redistribute it and/or modify it
to convert this to bold or underlined text.
to generate formatted ASCII text from POD source.  It can optionally use
Try to determine the width of the screen and the bold and underline
underscore, backspace, character.  Many pagers, such as B<less>, know how
# under the same terms as Perl itself.
under the same terms as Perl itself.
unless B<-t> is given, in which case it's two columns less than the width of
Use an alternate output format that, among other things, uses a different
use Getopt::Long qw(GetOptions);
use Pod::Text ();
use Pod::Usage qw(pod2usage);
use strict;
#!/usr/bin/perl
variable if available to determine the correct formatting sequences for your
} while (@ARGV);
width of your terminal device.  Using this option requires that your system
            'width|w=i')
will contain terminal control sequences for your current terminal type.
Without this option, all consecutive whitespace in non-verbatim paragraphs
your system support termios.  With this option, the output of B<pod2text>
your terminal device.

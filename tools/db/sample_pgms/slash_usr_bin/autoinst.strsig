        
         
            
                
                    
                     
                       
                        
                         
                                    
                                        
                                        ;
                                    : ''),
                                    (
                                    );
                                    ]} 
                               ;
                              ;
                            [(]
                            []]
                     ;
                    }
                }
            }
         )) {
        }
#   ------------------------------------------------------------------------
        59 Temple Place, 
about the new font map files; this usually means editing some 
A copy of the GNU General Public License is included with the I<fontools> 
ActivePerl (available from F<http://www.activestate.com>); 
added automatic determination of the `fontname' code for the font family; 
Added a work-around for incorrect size info in some Kepler fonts.
Added check to see if filename parsing succeeded; 
added command line options for most font styles and shapes;
Added encoding file for OT1 to the I<fontools> collection.
Added F<nfssext.sty>-like commands to the generated style file.
added runtime generation of encoding vectors for ornament fonts
Added support for font families with multiple widths.
added the B< --sanserif> and B< --typewriter> options and hacked the
Added the F< --no-updmap> option to all generated commands for F<otftotfm>
added the I<medium, semibold> etc. options to the style file;
Added the `scaled' option (including the loading of F<xkeyval>) 
A different encoding can be selected using the B< --encoding> 
    # Adjust size ranges
A file named `<I<encoding>>.enc' (in all I<lowercase>) should be somewhere 
all fonts were installed using the same version of B<autoinst>.
    along with this program; if not, write to 
            $already_seen{$unique} = $filename;
Also added a small hack to cater for fonts 
also available from CTAN) is another wrapper around F<otftotfm>, 
also defines a few commands (which take the text to be typeset as argument) 
Also elaborated the documentation somewhat and fixed a small bug.
alternate glyphs, such as Bickham, Poetica and Zapfino.
            and $already_seen{$unique} ne $filename) {
and by creating all necessary F<fd> and F<sty> files. All the user then needs
and declarations (which don't take arguments, but affect all text up to 
and edited (and hopefully improved) the documentation.
                    and '$filename' as
and F<.sty> and F<.fd> files that were generated by different versions 
and improved the layout of the generated files.
and is also available from CTAN as part of the archive F<base-v2.zip>
(and it's called `primitive' for a reason!)
and may work for you when B<autoinst> doesn't.
                    and not grep { exists $fontinfo{features}{$_} }
                and not grep { exists $fontinfo{features}{$_} }
and some non-Adobe fonts;
and the NFSS series was formed as `width plus weight' instead of the reverse.
An ornament family, in roman and italic shapes.
any font installed in the operating system (including both flavours of
%ARGV = (
    $ARGV{encoding} =~ s/\s+//xmsg;
    $ARGV{encoding} = \@textencodings;
                               $ARGV{extra},
                               ($ARGV{manual} ? '--pl' : '--automatic'),
    {\\$ARGV{nfss}default}
                                      : $ARGV{nfss} eq 'sf' ? '(sanserif)'
                                      : $ARGV{nfss} eq 'tt' ? '(typewriter)'
    as long as the name is in all lowercase.
A small patch to the make_ornament_encoding subroutine;
    as published by the Free Software Foundation.
as published by the Free Software Foundation.
as well as multiple text encodings. 
A typical name in this scheme is F<MinionPro-Regular-osf-sc-ly1>.
    autoinst I<(... all options and files ...)>  >autoinst.log 2>&1
'autoinst' is a wrapper around Eddie Kohler's TypeTools
autoinst [options] I<fontfile> [I<fontfile> ...]
autoinst - wrapper script around the F<LCDF TypeTools>, 
    auto/manual:        @{[ $ARGV{manual}  ? 'manual'  : 'automatic' ]}
automatic mode) is quite complicated because it needs lots of long 
B<autoinst> generates a style file for using the font in LaTeX documents, 
B<autoinst> has seen some non-backward-compatible changes in the past,
B<autoinst> maps widths, weights and shapes to NFSS codes using 
B<autoinst> simplifies the font installation 
B<autoinst>. Since font families with both `Italic' and `Oblique' shapes 
B<autoinst> will create several LaTeX font families:
(because GaramondPremier's ornament names differ from other fonts);
=begin Comment ---------------------------------------------------------------
=begin COPYRIGHT -------------------------------------------------------------
=begin Really_old_history
being interpreted as options to B<autoinst>, it should be properly quoted.
big for MiKTeX's F<pltotf> and F<vptovf>; the versions that come with TeXLive 
    Black          a                                                        
    black      => 'a',      # Not 'k': that means 'book' in fontname
B< --nots1> otherwise.
    bold       => 'b',
    Bold           b                            
    book       => '',
    Book                 [1]            Regular                  [1]        
        Boston, MA 02111-1307, 
B< --smallcaps>.
Bugfix: silently replacing \DeclareOption, \ProcessOptions and
but C<\swshape\upshape> results in upright swash.
but these commands behave properly when nested, so C<\tlshape\itshape> gives
    but WITHOUT ANY WARRANTY; without even the implied warranty of
but WITHOUT ANY WARRANTY; without even the implied warranty of
By default, all text families use the LY1 encoding. This has been chosen 
called I<fontools_xxx.enc> to avoid name clashes with other packages; 
Calling F<otftotfm> with the B< --automatic> option (as B<autoinst> does by
cannot find a writable F<texmf> directory and leave all generated F<tfm>, 
canonical choice) and update TeX's filename database.
caused problems for some other packages.
Changed default text-encoding to T1, added TS1.
Changed the default encoding to LY1 and added the `inferior' shape.
changed the generated style 
changed the names of the generated fonts and families 
changed the NFSS-code for italic small caps and titling to `scit' and `tlit'
changed the NFSS code for italic small caps to `si'; added titling shapes; 
changed the program to by default execute the generated F<otftotfm> command 
Changed the tables that map weights and widths to NFSS codes:
Choose the weight that LaTeX will use for the `bold' weight 
Choose the weight that LaTeX will use for the `regular' weight 
Choose which figures will be used for the text fonts. 
        chop(my @glyphnames = <$OTFINFO>);
Cleaned up the code (it now runs under the F<strict> and F<warnings> pragmas);
(C<< $LOCALTEXMF/tex/latex/<Supplier>/<FontFamily>/ >> being the
            close $BAT;
    close $FD;
        close $ORNAMENTS;
        close $OTFINFO;
    close $OTFINFO;
        close STDOUT;
    close $STYLE;
$cmdline
        code    An anonymous hash with two possible keys:
        code  => {n => 'n', it => 'it'},
        code  => {n => 'nw', it => 'sw'},
        code  => {n => 'sc', it => 'scit'},
        code  => {n => 'tl', it => 'tlit'},
                                    ? "--coding-scheme="
                                      . "\"$CODING_SCHEME{$enc_name}\""
                               ($CODING_SCHEME{$enc_name} 
collection; see the file F<GPLv2.txt>.
command line option (see below).
command-line options (see below).
command lines and doesn't generate the F<fd> and F<sty> files LaTeX needs. 
command lines it generates; with the B< --manual> option, these commands are 
commands from standard NFSS, or even plain TeX's C<\font> primitive
    condensed      => 'c',
configuration file.
    Copyright (c) 2005-2009 Marc Penninga.
Copyright (c) 2005-2009 Marc Penninga. 
                    # Create the command line for otftotfm
                    # Create unique name for this font
C<\texttt>. 
C<\usepackage[scaled=1.05]{MyriadPro}>.
    [$date (autoinst)  Font definitions for $enc/$fam-$fig.]
    [$date (autoinst)  Style file for $family.]
                # Decide which features to use
    DECLARATION     COMMAND         SHORT FORM OF COMMAND
\\DeclareFontFamily{$enc}{$fam-$fig}{}
            "\\DeclareOptionX{lining}{\\edef\\$family\@figurestyle{LF}}\n";
            "\\DeclareOptionX{oldstyle}{\\edef\\$family\@figurestyle{OsF}}\n";
            "\\DeclareOptionX{proportional}{\\edef\\$family\@figurealign{}}\n";
    \\DeclareOptionX{scaled}{\\renewcommand*{\\$family\@scale}{##1}}
                "\\DeclareOptionX{%s}{\\renewcommand*{\\bfdefault}{%s}}\n",
                "\\DeclareOptionX{%s}{\\renewcommand*{\\mddefault}{%s}}\n",
            "\\DeclareOptionX{tabular}{\\edef\\$family\@figurealign{T}}\n";
    \DeclareRobustCommand\swshape{\not@math@alphabet\swshape\relax
    \DeclareRobustCommand\tlshape{\not@math@alphabet\tlshape\relax
    \DeclareTextFontCommand{\textin}{\infigures}
    \DeclareTextFontCommand{\textornaments}{\ornaments}
    \DeclareTextFontCommand{\textsu}{\sufigures}
    \DeclareTextFontCommand{\texttl}{\tlshape}
            $default_bold = $series;
        # Default ornament names: 'orn.' plus three digits
            $default_regular = $series;
default) requires a TeX-installation that uses the F<kpathsea> library; with 
    $defaults .= ",$default_bold" if $default_bold;
    $defaults .= ",$default_regular" if $default_regular;
# Default values for the command line arguments
    \def\infigures{\@nomath\infigures
    \def\ornaments{\@nomath\ornaments
    \def\sufigures{\@nomath\sufigures
        delete $SHAPE{textcomp};
                    delete $tmp_features{lnum};
    demibold   => 'db',
    Demibold       db                                                       
    demibold, semibold, bold>
denominators
Did some more finetuning to the filename-parsing code.
        die $err_msg . <<'END_GENERAL_PARSE_ERROR';
        :                     die "ERROR: encountered un unknown bug";
    die "$USAGE" unless @ARGV;
    directory, so the user can provide her own vector if she wants to.
    Dnom => {
            # Does the font support this figure style?
                # Does the font support this shape?
Dropped the `fontname' scheme in favor of a more verbose naming scheme,
                                ( [\d.]+ ) \s* pt  \s*
                                ( [\d.]+ ) \s* pt, \s*
    Each key in the %FIGURE_STYLE hash names a figure style; the corresponding
    Each key in the %SHAPE hash names a 'variant' shape; the corresponding
easier for our friends on Windows). Also, the generated F<otftotfm> command 
    easier for ourselves. This means the program will fail for font 
Eddie Kohler's F<TypeTools>, especially F<otftotfm>, are great tools for 
Eddie Kohler's TypeTools (F<http://www.lcdf.org/type>).
    \\edef\\$fam\@\@scale{s*[\\csname $fam\@scale\\endcsname]}%
e.g., C<\fontfigurestyle{numerator}\selectfont>.
(e.g., I<MinionPro-Regular-orn-u>).
                else {
        else {
    else {
                elsif ($figure_style eq 'Orn') {
        elsif ($fontinfo{family} eq 'KeplerStd'
                                        $enc_code,
                    $enc_name =~ s/\A (ly1|ot1|t1) \z/fontools_$1/xms;
                ENCODING:                
            @encoding[0 .. $#ornaments] = @ornaments;
    --encoding=ENC[,ENC]    Use ENC as text encoding(s) (default: LY1)
                               "--encoding=$enc_name",
    encoding    => 'LY1',
            @encoding = @ornaments[0 .. 255];
        'encoding=s' => \$ARGV{encoding}, 
                    @encodings = (['fontools_ts1', 'ts1']);
    encoding(s):        @{[ join ', ', @{$ARGV{encoding}} ]}
                    @encodings = ([make_ornament_encoding(%fontinfo), 'u']);
                    @encodings = map { [lc $_, lc $_] } @{$ARGV{encoding}};
    encoding vectors. 
=end -------------------------------------------------------------------------
END_ARGUMENTS
            end_fd_file($FD) if $fd_prev[0];
    end_fd_file($FD) if $fd_prev[0];
END_FD_HEADER
END_FONT_INFO
END_GENERAL_PARSE_ERROR
\\endinput
END_OTFTOTFM_WARNING
END_PARSE_ERROR
=end Really_old_history
END_STY_FONTAXES
END_STY_HEADER
END_STYLE_REST
END_STY_XKEYVAL
END_USAGE
            $err_msg .= <<"END_PARSE_ERROR";
ERROR: I've parsed both '$already_seen{$unique}'
(except the last); this should yield a significant speed-up for large
\ExecuteOptions with their counterparts from the xkeyval package
\\ExecuteOptionsX{$defaults}
\\expandafter\\ifx\\csname $fam\@scale\\endcsname\\relax
Extended the output of the F< --verbose> option.
    extended       => 'x',
extensions F<nfssext.sty> if this is installed; corrected the `fontname' codes 
        extra => '',
        extra  => '',
    extra       => '',
    extra:              @{[ $ARGV{extra} || 'empty' ]}
    extrablack => 'ea',
    Extra Black    ea                   Roman              n                
                extrabold demibold semibold bold)) {
    extrabold  => 'eb',
    Extra Bold     eb                   SHAPES                              
    extracondensed => 'ec',
        extra   Extra options passed to otftotfm when creating this shape.
        extra   Extra options passed to otftotfm when creating this style.
        extra => '--include-alternates="*.swash" -faalt',
    extralight => 'el',
    Extra Light    el                   Condensed          c                
        extra  => '--ligkern="* {KL} *"',
        'extra=s'    => \$ARGV{extra},
    --extra="TEXT"          Add TEXT to the command line for 'otftotfm'
        extra => '--unicoding="germandbls =: SSsmall"',
fails; commented the code.
families (suggested by Steven E. Harris).
    families that have both italic and oblique shapes, but I doubt
    {$family-\\$family\@figurealign\\$family\@figurestyle}
         Family      $fontinfo{family}
    Family      $fontinfo{family}
        family   => $info{Family},
    \fa@naming@exception{figures}{{denominators}{proportional}}{Dnom}
    \fa@naming@exception{figures}{{denominators}{tabular}}{Dnom}
    \fa@naming@exception{figures}{{inferior}{proportional}}{Inf}
    \fa@naming@exception{figures}{{inferior}{tabular}}{Inf}
    \fa@naming@exception{figures}{{numerators}{proportional}}{Numr}
    \fa@naming@exception{figures}{{numerators}{tabular}}{Numr}
    \fa@naming@exception{figures}{{ornament}{proportional}}{Orn}
    \fa@naming@exception{figures}{{ornament}{tabular}}{Orn}
    \fa@naming@exception{figures}{{superior}{proportional}}{Sup}
    \fa@naming@exception{figures}{{superior}{tabular}}{Sup}
    \fa@naming@exception{shape}{{it}{sw}}{sw}
    \fa@naming@exception{shape}{{it}{tl}}{tlit}
    \fa@naming@exception{shape}{{n}{sw}}{nw}
    \fa@naming@exception{shape}{{n}{tl}}{tl}
    $fd_data[0][5] = '';
    $fd_data[-1][6] = '';
            $fd_data[$i][6] = $fd_data[$i + 1][5] = '';
            $fd_data[$i][6] = $fd_data[$i + 1][5];
    @fd_data = sort @fd_data;
                     $fd_line[0],
                         @fd_line[1, 0, 2, 3, 4];
        $fd_line[5] += 0;
        $fd_line[6] += 0;
                     $fd_line[7],
        $fd_line     = \@fd_line;
        @fd_prev = @fd_line;
            $FD = start_fd_file(@fd_line[0 .. 2]);
                               $FD_WEIGHT{$fontinfo{weight}}
                              $FD_WEIGHT{$fontinfo{weight}}
'%FD_WIDTH' and '%FD_WEIGHT' at the beginning of the source code;
                                   .$FD_WIDTH{$fontinfo{width}} 
                                  . $FD_WIDTH{$fontinfo{width}} 
        features => {},
                @features = keys %tmp_features;
F<fontenc> and F<textcomp> packages, if necessary.
F<Font Installation Guide>, but some changes had to be made to avoid 
(F<http://cvs.berlios.de/cgi-bin/viewcvs.cgi/minionpro/MinionPro/tex/>),
F<http://developer.berlios.de/projects/minionpro/>.
(F<http://developer.berlios.de/projects/minionpro>) or directly through 
(F<http://tug.org/ftp/texlive/Contents/live/bin/win32/>) don't have this 
(F<http://www.ctan.org/tex-archive/fonts/minionpro/base-v2.zip>).
                # Figure out the name and NFSS code for the encodings
                               $figure_style,
                              $figure_style,
        FIGURE_STYLE:
                               $FIGURE_STYLE{$figure_style}{extra},
                                        @{$FIGURE_STYLE{$figure_style}{nice}},
                                        @{$FIGURE_STYLE{$figure_style}{reqd}},
                             @{$FIGURE_STYLE{$figure_style}{reqd}} ) {
    - 'figure style' (lining, oldstyle, tabular, proportional, superior,
                               '"' . $filename . '"',
        filename => $fontfile,
                               ($filename =~ m/[.]ttf\z/xms 
Filenames with spaces now work as well.
file to include an interface for the ornaments and to load Lehman's NFSS 
First version.
fixed a (rather obscure) bug that occurred when creating TS1-encoded 
Fixed a small bug in the generated commands for otftotfm 
Fixed a small bug with filename quoting on Windows.
            && $fm == 6
            && $fm == 8.9
        \fontencoding{U}\fontfigurestyle{ornament}\selectfont}
        \fontfigurestyle{inferior}\selectfont}
        \fontfigurestyle{superior}\selectfont}
$fontfile:
    FONTFILE:
                               $fontinfo{family},
                              $fontinfo{family},
            $fontinfo{features}{$1} = 1;
                                        $fontinfo{name},
            @fontinfo{qw(min max)} = (13.9, 23);
            @fontinfo{qw(min max)} = (23, 72);
            @fontinfo{qw(min max)} = (6, 8.9);
            @fontinfo{qw(min max)} = (8.9, 14.9);
            @fontinfo{qw(min max)} = ($fm, $to);
            $fontinfo{shape} = $shape;
            $fontinfo{weight} = $weight;
            $fontinfo{width} = $width;
                               $fontname,
                              $fontname,
                    $fontname =~ s/[-]{2,}/-/xmsg;
    fontools_ly1 => 'TEX TYPEWRITER AND WINDOWS ANSI',
    fontools_ot1 => 'TEX TEXT',
    fontools_t1  => 'EXTENDED TEX FONT ENCODING - LATIN',
`fontools_', to prevent name clashes with other packages.
    fontools_ts1 => 'TEX TEXT COMPANION SYMBOLS 1---TS1',
        \fontprimaryshape\itdefault\fontsecondaryshape\swdefault\selectfont}
        \fontsecondaryshape\tldefault\selectfont}
fonts for families with multiple optical masters and oldstyle figures;
font shapes and styles. In that case, you're limited to using the lower-level 
    font[s]                 The fonts (either .otf or .ttf) to install.
fonts; these can be selected using F<fontaxes>' low-level commands, 
For each text family: a family of TS1-encoded symbol fonts, 
For example: to increase the size of the font by 5%, use the command
for installing OpenType fonts in LaTeX.
for LY1, OT1 and T1/TS1 come with I<fontools>. (Note that these files are
            for my $cmd (@{$cmds_ref}) {
        for my $cmds_ref (values %commands) {
                for my $enc_ref (@encodings) {
    for my $fd_line (@fd_data) {
    for my $fd_line_ref (@fd_data) {
                for my $f (@features) {
        for my $figure_style (keys %FIGURE_STYLE) {
    for my $filename (@ARGV) {
    for my $i (0 .. $#fd_data - 1) {
    for my $line (<$OTFINFO>) {
    for my $line_ref (@fd_data) {
    for my $series (
            for my $shape (@{$FIGURE_STYLE{$figure_style}{shapes}}) {
    for my $shape (map { quotemeta } 
    for my $weight (map { quotemeta } 
    for my $width (map { quotemeta } 
for OT1, T1, LY1 and user-specific encodings; extended the output generated by
for Windows, good (and free) Perl implementations are 
Four families with superiors, inferiors, numerators and denominators,
Four text families (with lining and oldstyle figures, in tabular and 
    fractions   => '0',     # 0 = no, 1 = yes
        'fractions!' => \$ARGV{fractions},
        Free Software Foundation, Inc., 
Furthermore, some OpenType fonts lead to F<pl> and F<vpl> files that are too 
furthermore, the creation of most families and shapes can be controlled by 
F<vf>, F<enc> and F<map> files in the current working directory. 
Generate correct fontname for OT1-encoded fonts.
%%Generated by autoinst on $date
generated F<pl> and F<vpl> files acceptable to I<fontinst>.
    # Generate .fd files
%%Generayed by autoinst on $date
    GetOptions(
Given a family of font files (in either F<.ttf> or F<.otf> format), 
                        @glyphnames;
    GNU General Public License for more details.
GNU General Public License for more details.
        !(   (grep { $_ eq 'T1' } @{$ARGV{encoding}} and $ARGV{textcomp})
=head1 AUTHOR
=head1 COMMAND-LINE OPTIONS
=head1 COPYRIGHT
=head1 DESCRIPTION
=head1 DISCLAIMER
=head1 LICENSE
=head1 NAME
=head1 RECENT CHANGES
=head1 SEE ALSO
=head1 SYNOPSIS
=head2 A note for MikTeX users
=head2 NFSS codes
=head2 On the choice of text encoding
=head2 Using multiple font families in one document
=head2 Using the fonts with LaTeX
    heavy      => 'h',
    Heavy          h                    Italic             it               
    --help                  Print this text
        'help'       =>  sub { print $USAGE; exit },
(http://www.lcdf.org/type/), for installing OpenType fonts in LaTeX.
I<abdeilmnorst>; normal forms will be used for the other characters)
(i.e., the value of C<\bfdefault>).
(i.e., the value of C<\mddefault>).
    if (
        if (    $already_seen{$unique}
    if (!$ARGV{fractions}) { delete @FIGURE_STYLE{qw(Numr Dnom)} }
    if (!$ARGV{inferiors}) { delete $FIGURE_STYLE{Inf} }
    if ($ARGV{manual}) {
    if (!$ARGV{ornaments}) { delete $FIGURE_STYLE{Orn} }
    if (!$ARGV{smallcaps}) { delete $SHAPE{smallcaps} }
    if (!$ARGV{superiors}) { delete $FIGURE_STYLE{Sup} }
    if (!$ARGV{swash}    ) { delete $SHAPE{swash}     }
    if (!$ARGV{titling}  ) { delete $SHAPE{titling}   }
                    if ($ARGV{verbose}) {
    if ($ARGV{verbose}) {
    if (defined $err_msg) {
            if (    @{$FIGURE_STYLE{$figure_style}{reqd}}
\IfFileExists{fontaxes.sty}{
\\IfFileExists{xkeyval.sty}{
        if ($fontinfo{name} eq 'GaramondPremrPro-It'
        if (grep { $fd_data[$i][$_] ne $fd_data[$i + 1][$_] } 0 .. 4) {
        if (grep { $fd_line[$_] ne $fd_prev[$_] } 0 .. 2) {
        if (grep { $fd_line[$_] ne $fd_prev[$_] } 0 .. 4) {
    if ($info{Family} =~ m/\A (.+ (?: OT | Pro))/xms) {
        if ($info{'Full name'} =~ s/$shape//xmsi) {
        if ($info{'Full name'} =~ s/$weight//xmsi) {
        if ($info{'Full name'} =~ s/$width//xmsi) {
        if ($line =~ m/\A (\w{4}) \s+/xms) {
    if (my ($fm, $to) 
    if (not -e "$enc_name.enc") {
            if (not grep { $fd_line[$_] ne $fd_prev[$_] } 0 .. 2) {
        if (@ornaments > 256) {
    # If parsing failed, flush STDOUT, print the error messages and die
        if ($seen_series{$FD_WEIGHT{$series}}) {
        if ($seen_series{$FD_WEIGHT{$series} || 'm'}) {
    if ($seen_style{LF} or $seen_style{OsF}) {
    if ($seen_style{LF} or $seen_style{TLF}) {
    if ($seen_style{OsF} or $seen_style{TOsF}) {
    if ($seen_style{TLF} or $seen_style{TOsF}) {
                if ($shape eq 'textcomp') {
                if (    @{$SHAPE{$shape}{reqd}}
            # If so, create all corresponding shapes
                        if the basic shape is italic, slanted or oblique;
                        if the basic shape is upright;
                If the 'n' ('it') entry is missing, the upright (italic)
if the text encodings (see I< --encoding> above) include T1, 
                if ($tmp_features{onum} && $tmp_features{lnum}) { 
If you want to use several font families in one document, make sure
         I'm afraid something went wrong!
I'm using the following options:
In addition, the C<\swshape> and C<\textsw> commands are redefined to place
in Adobe's Kepler Pro.
    Inf => {
inferior characters; usually only figures and punctuation, 
        inferior etc.); each of these will become a separate font family.
    inferiors   => '0',     # 0 = no, 1 = yes
        'inferiors!' => \$ARGV{inferiors},
    \infigures      \textinferior   \textin 
        $info{Family} =  $1;
    $info{Family}      =~ s/\A (?: Adobe | ITC ) | LT | MT//xmsg;
    $info{'Full name'} =  lc $info{'Full name'};
    $info{'Full name'} =~ s/$info{Family}//xmsg;
        $info{$key} = $val;
            && $info{Subfamily} =~ m/Caption/xms
            && $info{Subfamily} =~ m/Display/xms
            && $info{Subfamily} =~ m/Subhead/xms
In NFSS, weight and width are concatenated into a single `series' attribute.
(I<Note:> versions of B<autoinst> before 2007-07-27 erroneously formed
in roman and italic shapes.
in some extended families (Helvetica Neue), different combinations of 
installing OpenType fonts for use with LaTeX, but their use (even in 
Install the font as a sanserif font, accessed via C<\sffamily> and C<\textsf>. 
Install the font as a typewriter font, accessed via C<\ttfamily> and 
instead of the default F<tfm> and F<vf> files.
instead written to a batch command file (named `<I<font>>.bat', to make things
In that case, you need to move these to their correct destinations. 
in your TeX installation.
is Silentium; since this has no `Italic' shape, 
is the same as above (but in lowercase), I<< <shape> >> is either empty, 
I suspect your font family contains some unusual weights or widths.
    italic  => 'it',
Italic or oblique text
Italic small caps
italic titling.
Italic titling
It also isn't hindered by standard TeX's limitation to 8-bit fonts,
=item [1]
=item [2]
=item [3]
=item B<->
=item B< --encoding>=I<encoding[,encoding]>
=item B< --extra>=I<text>
=item B< --fractions>
=item B< --inferiors>
=item B< --manual>
=item B< --nofractions>
=item B< --noinferiors>
=item B< --noornaments>
=item B< --nosmallcaps>
=item B< --nosuperiors>
=item B< --noswash>
=item B< --notitling>
=item B< --nots1>
=item B< --ornaments>
=item B< --sanserif>
=item B< --smallcaps>
=item B< --superiors>
=item B< --swash>
=item B< --titling>
=item B< --ts1>
=item B< --typewriter>
=item B< --verbose>
=item I<2005-03-15>
=item I<2005-03-29>
=item I<2005-04-18>
=item I<2005-04-29>
=item I<2005-05-18>
=item I<2005-05-31>
=item I<2005-06-16>
=item I<2005-08-01>
=item I<2005-08-10>
=item I<2005-08-11>
=item I<2005-09-12>
=item I<2005-09-22>
=item I<2005-10-03>
=item I<2006-08-31>
=item I<2006-10-11>
=item I<2007-02-08>
=item I<2007-06-04>
=item I<2007-06-10>
=item I<2007-07-27>
=item I<2007-07-31>
=item I<2007-08-07>
=item I<2009-04-06>
=item I<2009-04-09>
=item I<Dnom>
=item I<Inf>
=item I<it>
=item I<LF>
=item I<light, medium, regular>
=item I<lining, oldstyle, tabular, proportional>
=item I<n>
=item I<Numr>
=item I<nw>
=item I<Orn>
=item I<OsF>
=item I<sc>
=item I<< scaled=<scale> >>
=item I<scit>
=item I<Sup>
=item I<sw>
=item I<tl>
=item I<TLF>
=item I<tlit>
=item I<TOsF>
=item I<ultrablack, ultrabold, heavy, extrablack, black, extrabold,
it now also recognises the I<bullet.xxx> ornament glyphs 
                'it' -> the NFSS code to use for this variant shape
    it under the terms of version 2 of the GNU General Public License 
it under the terms of version 2 of the GNU General Public License 
John Owens' F<otfinst> (F<http://www.ece.ucdavis.edu/~jowens/code/otfinst/>;
                        = join ' ',
                         join '|',
            = join ',', @fontinfo{qw(family width weight shape min max)};
Just saying C<\swshape> will still give normal (italic) swash, 
                                 keys %FD_SHAPE) 
                                  keys %FD_WEIGHT) 
                                 keys %FD_WIDTH) 
            last SHAPE;
            last WEIGHT;
            last WIDTH;
LaTeX installation) and specifying the ornament font 
                                        lc $figure_style,
                                 { length($a) <=> length($b) || $a cmp $b } 
                                { length($a) <=> length($b) || $a cmp $b } 
    \\let\\DeclareOptionX\\DeclareOption
    \\let\\ExecuteOptionsX\\ExecuteOptions
    \\let\\$fam\@\@scale\\\@empty
    \\let\\ProcessOptionsX\\ProcessOptions
    \let\textinferior\textin
    \let\textsuperior\textsu
    \let\texttitling\texttl
    LF => {
    light      => 'l',
    Light          l                    Semicondensed      sc               
    LINE:
lines rather than writing them to a file; 
lines specify the I< --pl> option and leave out the I< --automatic> option; 
lowercase glyphs as well), where letterspacing and the positioning of 
                                  || 'm',
                                   || 'm',
Made the generated style files try to include `fontaxes.sty';
    man -t ./autoinst.1 | ps2pdf - autoinst.pdf
    manual      => '0',     # 0 = no, 1 = yes
        'manual'     => \$ARGV{manual}, 
    --manual                Manual mode (see documentation)
Manual mode. By default, B<autoinst> immediately executes all F<otftotfm> 
    map { $_->[-1] =~ s/--no-updmap//xms } values %commands;
                               (map { "--feature=$_" } @features),
                               "--map-file=$fontinfo{family}.map --no-updmap",
Mapping the `Oblique' shape to `it' instead of the canonical `sl' simplifies
            map { print {$BAT} "$_\n" } @{$cmds_ref};
        map { print {$ORNAMENTS} "    /$_\n" } @encoding;
                             map { uc } 
Marc Penninga <marc@penninga.info>
        max      => 0,
    medium     => 'mb',
    Medium         mb                   Extended           x                
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
        min      => 0,
Multiple text encodings can be specified as well: C< --encoding=OT1,T1,LY1>. 
    my (%already_seen, %commands, @fd_data, $err_msg);
            my $basic = $FD_SHAPE{$fontinfo{shape}};
    my $cmdline = "$0 " . join ' ', @ARGV;
my %CODING_SCHEME = (
                    my $command 
my $date = sprintf "%04d/%02d/%02d", $time[5] + 1900, $time[4] + 1, $time[3];
    my $default_bold;
    my $default_regular;
    my $defaults
                    my ($enc_name, $enc_code) = @{$enc_ref};
    my $enc_name = $fontinfo{family} . '_orn';
        my @encoding = map { sprintf "orn.%03d", $_ } 1 .. 256;
                my @encodings;
    my ($fam, $enc, $fig) = @_;
        my ($fam, $enc, $style, $series) = @{$line_ref}[0 .. 3];
    my ($family, @fd_data) = @_;
    my ($FD) = @_;
    my $FD;
        my @fd_line = @{$fd_line_ref};
        my @fd_line  = split /[|]/, $fd_line;
    my @fd_prev = ('') x 8;
my %FD_SHAPE = (
my %FD_WEIGHT = (
my %FD_WIDTH = (
                my @features = grep { exists $fontinfo{features}{$_} }
        my @features = sort keys %{$fontinfo{features}};
my %FIGURE_STYLE = (
    my ($fontfile) = @_;
    my $fontfile = $fontinfo{filename};
    my (%fontinfo) = @_;
    my %fontinfo = (
        my %fontinfo = read_font_info($filename);
                    my $fontname = join '-',
    my %info = ();
        my ($key, $val) = $line =~ m/([^:]+) :\s* ([^\n]+)/xms
        my @ornaments 
        my $prefix   = '    Features    ';
    my (%seen_enc, %seen_style, %seen_series);
my %SHAPE = (
    my $textenc = join ',', grep { $_ ne 'OT1' } @{$ARGV{encoding}};
    my @textencodings = grep { $_ ne 'TS1' }
my @time = localtime;
                my %tmp_features;
        my $unique 
my $USAGE =<<'END_USAGE';
        name  => '',
        name    A string added to the name of the generated font, 
name clashes for font families with many different widths and weights
named `<I<FontFamily>>.sty'. This style file also takes care of loading the 
        name     => $info{'PostScript name'},
        name  => 'sc',
        name  => 'swash',
        name  => 'titling',
\\NeedsTeXFormat{LaTeX2e}
    \\newcommand*{\\$family\@scale}{1}
                next FIGURE_STYLE;
        next LINE if $fam ne $family;
                    next SHAPE;
                next SHAPE if not exists $SHAPE{$shape};
                next SHAPE if not exists $SHAPE{$shape}{code}{$basic};
    NFSS:               $ARGV{nfss} @{[ $ARGV{nfss} eq 'rm' ? '(serif)'
    nfss        => 'rm',
        nice   => [],
        nice    A list of optional OpenType features;
        nice  => ['kern', 'liga'],
        nice   => ['lnum'],
        nice   => ['lnum', 'tnum'],
        nice  => ['onum'],
        nice   => ['tnum'],
    (no)fractions:      @{[ $ARGV{fractions} ? 'fractions' : 'nofractions' ]}
    --(no)fractions         Toggle creation of fonts with digits for fractions
    (no)inferiors:      @{[ $ARGV{inferiors} ? 'inferiors' : 'noinferiors' ]}
    --(no)inferiors         Toggle creation of fonts with inferior characters 
    (no)ornaments:      @{[ $ARGV{ornaments} ? 'ornaments' : 'noornaments' ]}
    --(no)ornaments         Toggle creation of ornament fonts 
    normal => {
normal forms for the other characters
    (no)smallcaps:      @{[ $ARGV{smallcaps} ? 'smallcaps' : 'nosmallcaps' ]}
    --(no)smallcaps         Toggle creation of smallcaps shape 
    (no)superiors:      @{[ $ARGV{superiors} ? 'superiors' : 'nosuperiors' ]}
    --(no)superiors         Toggle creation of fonts with superior characters 
    (no)swash:          @{[ $ARGV{swash}     ? 'swash'     : 'noswash'     ]}
    --(no)swash             Toggle creation of swash shape 
Note that the generated style file redefines C<\familydefault>, 
Note that there is no separate command for accessing the italic titling shape;
    (no)titling:        @{[ $ARGV{titling}   ? 'titling'   : 'notitling'   ]}
    --(no)titling           Toggle creation of titling shape 
    (no)ts1:            @{[ $SHAPE{textcomp} ? 'ts1'       : 'nots1'       ]}
    --(no)ts1               Toggle creation of TS1 fonts
                                    ? '--no-type1' 
                'n'  -> the NFSS code to use for this variant shape
numerators
    Numr => {
    oblique => 'it',
of B<autoinst> may not be able to coexist peacefully.
Of course, if the font doesn't contain oldstyle figures, small caps etc.,
of superiors: figures, some punctuation and the letters 
                of these features.
            open my $BAT, '>', "$fam.bat"
    open my $FD, '>', "$enc$fam-$fig.fd"
        open my $ORNAMENTS, '>', "$enc_name.enc"
        open my $OTFINFO, '-|', "otfinfo --glyphs \"$fontfile\""
    open my $OTFINFO, '-|', "otfinfo --info \"$fontfile\""
    open my $STYLE, '>', "$family.sty"
    open $OTFINFO, '-|',"otfinfo --features \"$fontfile\""
    open $OTFINFO, '-|',"otfinfo --optical-size \"$fontfile\""
OpenType fonts) without additional support files.
option is added to the commands for F<otftotfm>; this should make the 
          or $ARGV{textcomp} == 1
        or die "ERROR: can't create '$enc$fam-$fig.fd' - $!";
            or die "ERROR: can't create '$enc_name.enc' - $!";
                or die "ERROR: can't create '$fam.bat' - $!";
        or die "ERROR: can't create '$family.sty' - $!";
        or die "ERROR: 'otfinfo --features \"$fontfile\"' failed";
            or die "ERROR: 'otfinfo --glyphs \"$fontfile\"' failed";
        or die "ERROR: 'otfinfo --info \"$fontfile\"' failed";
        or die "ERROR: 'otfinfo --optical-size \"$fontfile\"' failed";
    or die "$USAGE";
    Orn => {
    Ornament glyph names vary across fonts, so we generate font-specific 
ornaments
    ornaments   => '1',     # 0 = no, 1 = yes
    Ornaments are treated as a separate 'figure style'. 
        'ornaments!' => \$ARGV{ornaments},
ornaments minus one. Ornaments are always typeset using the current family, 
            or next LINE;
(or whatever the font is called) in the preamble of your document.
    OsF => {
        = <$OTFINFO> =~ m/
                               'otftotfm',
otherwise, please send a bug report to <marc@penninga.info>.
=over 12
over T1 (Cork) because many OpenType fonts contain additional ligatures 
    parse_options();
Pass I<text> as options to I<otftotfm>. To prevent I<text> from accidentily 
Perl is usually pre-installed on Linux and Unix systems;
Please make sure that this output includes all error messages (if any);
Please report any bugs or suggestions to <marc@penninga.info>.
    pod2man --center="fontools" --date=`date +"%Y-%m-%d"` \
Possible options:
possible; this usually includes (but may not be limited to) the output from 
Prefixed the filenames of  the included encoding files with
            $prefix = ' ' x length $prefix;
                prevent this shape from being built when missing.
                prevent this style from being built when missing.
                print "$cmd\n";
        print <<"END_ARGUMENTS";
        print <<"END_FONT_INFO";
                        printf "    %-42s  %4s/%s-%s/%s/%s\n",
    print {$FD} <<"END_FD_HEADER";
                print {$FD} "}{}\n\n";
    print {$FD} "}{}\n\n\\endinput\n";
            printf {$FD} "\\DeclareFontShape{%s}{%s-%s}{%s}{%s}{\n", 
        printf {$FD} "        %s \\%s\@\@scale %s\n",
            printf {$STYLE}
        print "\n";
    # Print or execute the generated commands
        print {$ORNAMENTS} "] def\n";
        print {$ORNAMENTS} "/$fontinfo{family}OrnamentEncoding [\n";
            print $prefix, join(' ', splice @features, 0, 10), "\n";
        print {$STYLE} 
    print {$STYLE} <<'END_STY_FONTAXES';
    print {$STYLE} <<"END_STY_HEADER";
    print {$STYLE} <<"END_STYLE_REST";
    print {$STYLE} <<"END_STY_XKEYVAL";
    print {$STYLE} "\\RequirePackage{textcomp}\n" if $seen_enc{TS1};
    print {$STYLE} "\\RequirePackage[$textenc]{fontenc}\n" if $textenc;
probably do not exist (apart from Computer Modern), 
problem.
process by generating and executing all commands for F<otftotfm> 
\\ProcessOptionsX\\relax
proportional (i.e., figures have varying widths) lining figures
proportional oldstyle figures
proportional variants), each with the following shapes:
    \providecommand{\ornament}[1]{\textornaments{\char##1}}
    \providecommand{\tldefault}{tl}
\\ProvidesFile{$enc$fam-$fig.fd}
\\ProvidesPackage{$family}
punctuation characters have been adjusted to suit all-caps text. 
                    push @{$commands{$fontinfo{family}}}, $command;
                    push @fd_data,
            qw(light medium regular)) {
            qw(ultrablack ultrabold heavy extrablack black 
    # Read optical size info
    # Read some general info about the font    
Ready-made support files for MinionPro, providing more options and features
    regular    => '',
    regular        => '',
    Regular              [1]            Semiextended       sx               
    'regular', but we deal with that case later on).
            --release="fontools" --section=1 autoinst autoinst.1
                # Remove duplicate features
    # Remove the --no-updmap option from the last command for each family
\\renewcommand*
\\renewcommand*{\\familydefault}{\\$ARGV{nfss}default}
        reqd  => [],
        reqd   => [],
        reqd    A list of required OpenType features; 
        reqd   => ['dnom'],
        reqd   => ['numr'],
        reqd   => ['onum'],
        reqd   => ['onum','pnum'],
        reqd   => ['ornm'],
        reqd   => ['pnum'],
        reqd   => ['sinf'],
        reqd  => ['smcp'],
        reqd   => ['sups'],
        reqd  => ['swsh', 'dlig'],
        reqd  => ['titl', 'case', 'cpsp'],
    \RequirePackage{fontaxes}
    \\RequirePackage{xkeyval}
    return $enc_name;
    return $FD;
    return %fontinfo;
                         reverse sort 
                        reverse sort 
Rewrote (and hopefully improved) the user interface; 
Rewrote large parts of the code (yes it I<was> even worse).
Rewrote the font info parsing code to work for Arno Pro.
    romanii => 'it',    # Map one of Silentium Pro's two roman shapes to 'it'
    romani  => 'n',
    roman   => 'n',
Roman text
running B<autoinst> with the B< --verbose> option. 
running LaTeX on the file F<nfssfont.tex> (part of a standard 
    --sanserif              Install font as sanserif font
        'sanserif'   =>  sub { $ARGV{nfss} = 'sf' },
                    # Save the command and the necessary data for .fd files
Scale the font by a factor of I<< <scale> >>. 
`sc', `swash' or `titling', and I<< <enc> >> is the encoding.
        $seen_enc{$enc}       = 1;
        $seen_series{$series} = 1;
        : $seen_style{LF}   ? 'lining,proportional'
        = $seen_style{OsF}  ? 'oldstyle,proportional'
        $seen_style{$style}   = 1;
        : $seen_style{TLF}  ? 'lining,tabular'
        : $seen_style{TOsF} ? 'oldstyle,tabular'
(See the source code for the full story.)
    # See what features this font provides
    semibold   => 'sb',
    Semibold       sb                                                       
    semicondensed  => 'sc',
    semiextended   => 'sx',
series and shape. A list of all ornaments in a font can be created by
                $series, $FD_WEIGHT{$series};
                $series, $FD_WEIGHT{$series} || 'm';
    # Set default
            SHAPE:
    SHAPE:
        shape   An anonymous array of 'variant' shapes to build with
shape axis); this allows the use of `upright swash'. 
         Shape       $fontinfo{shape}
    Shape       $fontinfo{shape}
        shape    => 'roman',
shapes and styles. This package can be downloaded from the project's homepage
                               $SHAPE{$shape}{code}{$basic},
                              $SHAPE{$shape}{code}{$basic},
                               $SHAPE{$shape}{extra},
                                        $SHAPE{$shape}{name},
                                        @{$SHAPE{$shape}{nice}},
                                        @{$SHAPE{$shape}{reqd}},
                                 @{$SHAPE{$shape}{reqd}}) {
        shapes => ['normal'],
        shapes => ['normal', 'smallcaps', 'swash', 'textcomp'],
        shapes => ['normal', 'smallcaps', 'swash', 'titling', 'textcomp'],
since many filenames were still more than eight characters long anyway. 
         Size        $fontinfo{min}-$fontinfo{max}
    Size        @{[ $fontinfo{min} || '']}-@{[ $fontinfo{max} || '' ]}
    slanted => 'it',
    smallcaps => {
Small caps
    smallcaps   => '1',     # 0 = no, 1 = yes
        'smallcaps!' => \$ARGV{smallcaps},
so including it will make this font the default text font.
so it is especially well suited to fonts with many ligatures and 
some FontFont fonts, where every font is in a family of its own.
(sometimes, the I< --onum> feature was included twice). 
            = sort grep { m/\A (?:orn|u2022[.]|word[.]|hand|bullet[.]) | [.]orn \z/xms }
so the last one will be the default text encoding.
                                 split /,/, $ARGV{encoding};
                              sprintf("%04.1f",$fontinfo{max}),
                              sprintf("%04.1f",$fontinfo{min}),
                     sprintf("%5s-%-5s", '<' . $fd_line[5], $fd_line[6] . '>'),
            # Start new fontshape
Strawberry Perl (F<http://strawberryperl.com>) and
style files to support using several different font families in one document.
sub end_fd_file {
sub main {
sub make_ornament_encoding {
sub parse_options {
sub read_font_info {
#   -----------------------  subroutine definitions  -----------------------
sub start_fd_file {
sub write_style_file {
such as ct, sp and st.
such as fj and Th, and LY1 has a number of empty slots to accommodate these.
(such as Helvetica Neue). 
(such as MiKTeX) F<otftotfm> might complain that it 
(such as some recent versions of MinionPro) 
    \sufigures      \textsuperior   \textsu 
        Suite 330, 
    Sup => {
superior characters (many fonts only have an incomplete set
    superiors   => '1',     # 0 = no, 1 = yes
        'superiors!' => \$ARGV{superiors},
    swash => {
    swash       => '1',     # 0 = no, 1 = yes
        'swash!'     => \$ARGV{swash},
swash on the secondary shape axis (F<fontaxes> places it on the primary 
                system $cmd and warn <<'END_OTFTOTFM_WARNING';
tabular (i.e., all figures have the same width) lining figures
tabular oldstyle figures
        # Test for some known alternative names (probably not exhaustive)
TeX-installations that implement their own directory searching 
    textcomp => {
    textcomp    => '2',     # 0 = no, 1 = yes, 2 = (enc eq 'T1' ? yes : no)
    # - text encoding is T1 and the user didn't turn off TS1, or
than B<autoinst> ever will (including math), are available from 
that contain swash characters but don't provide a `swsh' feature.
    The 'book' and 'regular' weights and the 'regular' width are mapped 
the B< --verbose> option; and rewrote and extended the documentation.
The code is now much more readable and more flexible; 
the corresponding shapes or families are not created; 
the CVS web interface 
The default is B< --nofractions>.
The default is B< --noinferiors>.
The default is B< --superiors>.
The defaults are `oldstyle' and `proportional' (if available).
The encodings are passed to F<fontenc> in the order specified, 
the end of the current group) of its own:
    The following tables are used for deciding which font families and shapes 
the following tables. These are based on the tables in Lehman's 
the `fontools_' prefix doesn't need to be specified.)
The generated commands weren't actually executed, only printed....
The generated font families are named I<< <FontFamily>-<Suffix> >>, 
The generated fonts are named I<< <FontFile>-<suffix>-<shape>-<enc> >>,
the `it' code is (ab)used for the `RomanII' shape.
the MinionPro for LaTeX project), which gives easy access to various font 
    The next three tables map the names of weights, widths and shapes 
    The 'oblique' (aka 'slanted') shape is mapped to 'it' to make things
# The official names
the output from F<otfinfo --info> instead of the font filename. 
the program can now handle fonts from different families,
The program determines the fonts' weights, widths and shapes by parsing
There are also no commands for accessing the numerator and denominator
                these are used if the font supports them, but don't
the series as `width plus weight' instead of the reverse.)
The style file also provides a command C<<< \ornament{I<< <number> >>} >>>, 
the style file doesn't provide high-level access to the more `exotic' 
The style file will also try to load the F<fontaxes> package (part of 
    # - the user explicitly asked for TS1
    thin       => 't',
    Thin           t                    Ultra Condensed    uc               
this can be done using the command
this causes human readable (and editable) F<pl> and F<vpl> files to be created 
                this figure style.
    This is skipped if a file `<family>_orn.enc' is found in the current 
    This may seem a bit funny, but is actually the easiest way to do it.
This option is only available when the F<xkeyval> package is found
    This program is distributed in the hope that it will be useful,
This program is distributed in the hope that it will be useful,
    This program is free software; you can redistribute it and/or modify
This program is free software; you can redistribute it and/or modify
                this shape is built if the font supports at least one
This shape is generated only for the families with lining figures.
This should make B<autoinst> work for non-Adobe fonts. 
this shouldn't cause problems in real life.
This style file defines a number of options:
                this style is built if the font supports at least one
This whole machinery builds on F<fontaxes>; if that package cannot be found,
    titling => {
    titling     => '0',     # 0 = no, 1 = yes
        'titling!'   => \$ARGV{titling},
Titling shape. Meant for all-caps text only (even though it sometimes contains 
    TLF => {
    \tlshape        \texttitling    \texttl
                    $tmp_features{$f} = 1;
            && $to == 13.9) {
            && $to == 8.9) {
    to an empty string rather than 'm', because the 'm' disappears when 
to do is move these files to a suitable location 
    to generate. Each hash governs one of these aspects:
                to make it unique.
(to make the previous change possible);
    to NFSS codes. New entries can be added without problems, 
    TOsF => {
To the best of my knowledge, the only font family that has two `Roman' shapes 
to the generated style file.
To use the font, simply put C<\usepackage{MinionPro}> 
(to work with F<fontaxes>); 
Tried to make the filename-parsing code a bit more robust by adding several
    # Try to match width, weight and (basic) shape
        'ts1!'       => \$ARGV{textcomp},
    # TS1-encoded fonts are generated if:
Turn the creation of fonts with inferior figures on or off. 
Turn the creation of fonts with numerators and denominators on or off. 
Turn the creation of fonts with superior characters on or off. 
Turn the creation of ornament fonts on or off. The default is B< --ornaments>.
Turn the creation of small caps fonts on or off. The default is 
Turn the creation of swash fonts on or off. The default is B< --swash>.
Turn the creation of titling fonts on or off. The default is B< --notitling>.
Turn the creation of TS1-encoded fonts on or off. The default is B< --ts1> 
tweaked the filename parsing code for Cronos Pro and Gill Sans Pro;
Tweaked the font info parsing to work around a bug in the naming of
Two bugfixes: a closing brace was missing in the generated style file, 
    --typewriter            Install font as typewriter font
        'typewriter' =>  sub { $ARGV{nfss} = 'tt' },
                               uc $enc_code,
                              uc $enc_code,
    ultrablack => 'ua',
    Ultra Black    ua                   RomanII            it    [3]        
    ultrabold  => 'ub',
    Ultra Bold     ub                   RomanI             n     [3]           
    ultracondensed => 'uc',
    ultralight => 'ul',
    Ultra Light    ul                   Extra Condensed    ec               
    ultra      => 'ub',
    Ultra          ub                   Oblique            it    [2]                                    
                                      :                       '(unknown)'
updated the filename parsing code to cater for GaramondPremier, Silentium 
`Upright swash'; usually normal text with some extra `oldstyle' ligatures, 
        USA
Usage: autoinst [options] font[s]
use Getopt::Long;
use strict;
Use the encoding I<encoding> for the text fonts. The default is `LY1'. 
use warnings;
Using the machinery set up by F<fontaxes>, the generated style file
#!/usr/bin/perl
        $val =~ s/[^-\w]//xmsg;
    value is (again) an anonymous hash with several key/value pairs:
    value is an anonymous hash with four key/value pairs:
    - 'variant' shape (normal, small caps, swash, titling or textcomp).
    verbose     => '0',     # 0 = no, 1 = yes
        'verbose'    => \$ARGV{verbose},
    --verbose               Make some noise
Verbose mode; print detailed info about what B<autoinst> thinks it's doing.
    verbosity:          @{[ $ARGV{verbose} ? 'verbose' : 'silent'    ]}
                version of this variant shape will not be built.
WARNING: 'otftotfm' finished with a non-zero return code;
    WEIGHT:
    weight and width are combined into the NFSS series (unless both are
weight and width were mapped to the same `series'.
         Weight      $fontinfo{weight}
    Weight      $fontinfo{weight}
        weight   => 'regular',
weights and widths; changed the error that's displayed when filename parsing
    WEIGHT                              WIDTH                               
When creating LY1, T1, OT1 or TS1 encoded fonts, the I< --coding-scheme> 
When I<both> weight and width are empty, the `series' attribute becomes `m'.
When sending a bug report, please give as much relevant information as 
where C<<< I<< <number> >> >>> is a number from 0 to the total number of 
where F<otftotfm> can find it. Suitable encoding files 
where I<< <FontFile> >> is the name of the OpenType file, I<< <suffix> >> 
where I<< <Suffix> >> is one of
    whether these exist (apart from Computer Modern, of course).
        while (@features) {
        while (my ($fam, $cmds_ref) = each %commands) {
    WIDTH:
         Width       $fontinfo{width}
    Width       $fontinfo{width}
        width    => 'regular',
        # Work around some known bugs
        # Write fontshape entry
        write_style_file($fd_line[0], @fd_data) if $fd_line[0] ne $fd_prev[0];
XeTeX (F<http://scripts.sil.org/xetex>) is a TeX extension that can use 
                         /xms) {
Yet Another Complete Rewrite. 
You also need to tell the dvi-driver (F<dvips>, F<dvipdfm>, F<pdfTeX> etc.)
You might try adding missing widths and weights to the tables
    You should have received a copy of the GNU General Public License

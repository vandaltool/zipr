    a AUTHOR ...        # search by author(s)
available commands is listed below; C<cpanp -h> provides a detailed list.
B<cpanp>
B<cpanp> S<[-]B<a>> S<[ --[B<no>-]I<option>... ]> S< I<author>... >
B<cpanp> S<[-]B<d>> S<[ --[B<no>-]I<option>... ]> S<[ --B<fetchdir>=... ]> S< I<module>... >
B<cpanp> S<[-]B<mfitulrcz>> S<[ --[B<no>-]I<option>... ]> S< I<module>... >
B<cpanp> S<[-]B<o>> S<[ --[B<no>-]I<option>... ]> S<[ I<module>... ]>
B<cpanp> S<[-]B<xb>> S<[ --[B<no>-]I<option>... ]>
    b                   # write a bundle file for your configuration
# c-basic-offset: 4
# c-indentation-style: bsd
    c MODULE ...        # check for module report(s) from cpan-testers
    cpanp -d --fetchdir=. MODULE ...
    cpanp -i --skiptest MODULE ...
cpanp - The CPANPLUS launcher
C<prereqs>, C<storable>, C<verbose>, C<md5>, C<signature>, and C<skiptest>; the
'd' command also accepts C<fetchdir>.  Please consult L<CPANPLUS::Configure>
    d MODULE ...        # download module(s)
Each command may be followed by one or more I<options>.  If preceded by C<no>,
} else {
    eval 'exec /usr/bin/perl -S $0 ${1+"$@"}'
Example: To download a module's tarball to the current directory,
Example: To skip a module's tests,
    exit not $shell->dispatch_on_input(input => $input, noninteractive => 1);
    ### exit with a useful return value on return
# $File: //depot/cpanplus/dist/bin/cpanp $
    f MODULE ...        # list all releases of a module
for an explanation to their meanings.
from the command line. If it's invoked without arguments, an interactive
=head1 DESCRIPTION
=head1 NAME
=head1 SYNOPSIS
    h                   # help information
if (@ARGV) {
	if $running_under_some_shell;
    ### if they said "--help", fix it up to work.
### if we're given a command, run it; otherwise, open a shell.
    i MODULE ...        # install module(s)
# indent-tabs-mode: nil
    $input = 'h' if $input =~ /^\s*--?h(?:elp)?\s*$/i;
    $input =~ s/^\s*-//;
    l MODULE ...        # display detailed information about module(s)
# Local variables:
    m MODULE ...        # search by module(s)
    my $input = "@ARGV";
my $shell = CPANPLUS::Shell->new;
    o [ MODULE ... ]    # list installed module(s) that aren't up to date
    ### open a shell for the user
Optionally, it can take a single-letter switch and one or more argument,
    ### pass the command line to the shell
# $Revision: #8 $ $Change: 8345 $ $DateTime: 2003/10/05 19:25:48 $
    r MODULE ...        # display README files of module(s)
shell is executed by default.
    $shell->shell();
    ### strip the leading dash
    ### take the command line arguments as a command
the corresponding option will be set to C<0>, otherwise it's set to C<1>.
This script launches the B<CPANPLUS> utility to perform various operations
    t MODULE ...        # test module(s)
to perform the associated action on each arguments.  A summary of the
    u MODULE ...        # uninstall module(s)
use CPANPLUS;
use CPANPLUS::Shell qw[Default];
use strict;
use vars '$VERSION';
#!/usr/bin/perl
Valid options for most commands are C<cpantest>, C<debug>, C<flush>, C<force>,
$VERSION = CPANPLUS->VERSION;
# vim: expandtab shiftwidth=4:
    v                   # version information
    x                   # reload CPAN indices
    z MODULE ...        # extract module(s) and open command prompt in it

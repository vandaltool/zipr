          }
        }
        $
      # ???
################
###################
  $0 =~ m|(^[\./]+\./)(.+)\.vpe$| or
#   2000/09/15 v0.1: First release.
    $action = $_;
  action is changed to start this script.
# and version 1.2 or later is part of all distributions of LaTeX
  @ARGV == 0 or
  @ARGV == 1 or
  @ARGV == 2 or
        /A \s* << \s*
  A symbol link is made from the source file name
                   "/A<</Type/Action/S/Launch/F($newaction)>>";
binmode(IN);
  chomp $file;
    # $color = "/C[0 0 1]"; # only for debugging
    # $color = "/C[1 0 0]"; # only for debugging
# conditions of the LaTeX Project Public License, either version 1.2
# Copyright (C) 2000 Heiko Oberdiek.
              "(\d+)"
  "delete!",
  --delete:   delete symbol links
Depending on the name of the script `vpe' works in four modes:
    die "$Error Cannot extract line number ($0)!\n";
    die "$Error Cannot find file `$file' [sty mode]!\n";
    die "$Error Cannot open file `$vpefile`!\n";
  die "$Error Cannot open `$pdffile' [vpe mode]!\n";
    die "$Error File `$name' not found [vpe mode]!\n";
      die "$Error Parse error!\n";
  die "$usage" .
  die $usage;
  die "$usage$Error Missing pdf file [vpe mode]!\n";
    die "$usage$Error Too many arguments [launch mode]!\n";
  die "$usage$Error Too many arguments [vpe mode]!\n";
    die "$usage$Error Wrong arguments [sty mode]!\n";
    die "$usage$Error Wrong arguments [system mode]!\n";
          $digit = substr($rest, 0, 1);
    $do = 1;
              "(\d+)" \s*
### editor call
$EditorCall = $ENV{TEXEDIT} if $ENV{TEXEDIT};
$EditorCall = $ENV{VPE} if $ENV{VPE};
  $EditorCall =~ s/%d/$line/;
  $EditorCall =~ s/%s/$file/;
          else {
        else {
    else {
  else {
END_OF_USAGE
      "$Error Options --sty and --system cannot used together!\n";
### error strings
eval '(exit $?0)' && eval 'exec perl -S $0 ${1+"$@"}' && eval 'exec perl -S $0 $argv:q'
  exec($EditorCall);
  exit 1;
  extended by the extension `.vpe' to this script.
# %F: file name
  -f $file or
      $file = $1;
    $file = $1;
  $file = "/$2";
    $file = cwd() . "/" . $file;
    $file =~ s|/[^/]+/\.\./|/|g;
    $file =~ s|/\./|/|g;
  "force!",
  --force:    force symbol links
  foreach (keys(%symlinks)) {
# for installation purposes.
  -f $pdffile or
            /F \s* \(aftcomp.exe\) \s*
            /F \s* \(repos.exe\) \s*
GetOptions(
  "help!",
  --help:     print usage.
# History:
#   http://www.latex-project.org/lppl.txt
if ($0 =~ /\.vpe/) {
    if ($3 eq "") {
if (@ARGV < 1) {
if (@ARGV > 2) {
          if ($digit < 5) {
        if ($digit <= 5) {
  if ($do) {
    if (!-f $0 or !-x $0) {
    if (!($file =~ m|^/|)) {
  if (!($file =~ m|^/| or $file =~ m|^\w:|)) {
if (!-f $pdffile) {
    if (-f $sym) {
if (keys(%symlinks)) {
  if ($last == 0) {
      if (length($newaction) > $length) {
      if ($line <= 0) {
        if (-l $sym) {
      if (-l $sym) {
      if (!-l $sym) {
  if (m|^
  if (m|/F\([\./]*(/.*)\.vpe\)|) {
  if (open(IN, $file)) {
    if (!$::opt_delete) {
    if ($::opt_delete) {
  if (!$::opt_delete) {
  if ($::opt_delete) {
    if ($::opt_force) {
if ($::opt_help) {
if ($::opt_sty) {
if ($::opt_sty and $::opt_system) {
if ($::opt_system) {
        if (symlink($this, $sym)) {
      if (symlink($this, $sym)) {
    if (symlink($this, $sym)) {
    if (!($this =~ m|^/|)) {
      $last++;
    $last = 10000;
### launch mode ###
* [launch] Syntax: <source file name>.vpe
        $line = 1;
      $line = $2;
    $line = $2;
    $line .= length($1) + (($2 eq ".") ? 5 : 0);
# %L: line number
  my ($action, $file, $line, $type);
my $author      = "Heiko Oberdiek";
  my $callstr = $EditorCall;
  # my $color; # only for debugging
my $copyright   = "Copyright (c) 2000 by $author.";
my $date        = "2000/09/15";
        my $digit = substr($line, 0, 1);
  my $do = 0;
my $EditorCall = "xterm -e joe +%d %s";
my $Error = "!!! Error:"; # error prefix
  my $file = "";
  my $file = `kpsewhich -progname=$::opt_progname $ARGV[0]`;
my $file        = "vpe.pl";
  my $last = 0;
    my $length = length($action);
  my $line = "";
  my $name = $pdffile;
      my $newaction = "";
my $pdffile = $ARGV[0];
my $program     = uc($&) if $file =~ /^\w+/;
        my $rest = $line;
  my $str = $1;
my %symlinks = ();
    my $sym = $_ . ".vpe";
my $system = "linux";
  my $this = $0;
my $title = "$program $version, $date - $copyright\n";
my $usage = <<"END_OF_USAGE";
my $version     = "0.1";
  my $vpefile = $ARGV[0];
  my $vpefile = $ARGV[1];
          $newaction .= "./";
        $newaction .= "./";
      $newaction = # $color . # only for debugging
      $newaction .= substr($file, 1) . ".vpe";
            $newaction .= "/" x $digit;
          $newaction .= "/" x $digit;
            $newaction .= "/" x ($digit - 5) . ".";
          $newaction .= "/" x ($digit - 5) . ".";
      $newaction .= " " x ($length - length($newaction) - 1);
          next;
         next;
        next;
      next;
    next;
# of this license or (at your option) any later version.
open(IN, "+<$pdffile") or
  open(OUT, ">>$vpefile") or
$::opt_delete = 0;
$::opt_force = 0;
$::opt_help = 0;
### options
Options:
$::opt_progname = "latex";
$::opt_sty = 0;
$::opt_system = 0;
$::opt_verbose = 0;
) or die $usage;
  $pdffile .= ".pdf";
      print "creation failed]\n";
        print "deleted, creation failed]\n";
    print "Delete symlinks:\n";
          print "deletion failed]\n";
      print "exists]\n";
      print "failed]\n";
    print "failed]\n";
  print "File: $file, line: $line\n" if $::opt_verbose;
    print "* File: $file, line: $line, type: $type\n" if $::opt_verbose;
  print "File: $file\n" if $::opt_verbose;
      print "Forced symlinks to $this:\n";
      print IN $newaction;
  print "Last line: $last\n" if $::opt_verbose;
        print "ok, created]\n";
      print "ok, created]\n";
          print "ok, deleted and created]\n";
        print "ok, deleted]\n";
        print "ok, not existing]\n";
  print OUT "\\vpeentry{$file}{$last}\n";
  print OUT "\\vpesystem{$system}\n";
         print STDERR "$Error Action too long!\n";
      print STDERR "$Error File `$file' lacks of absolute path!\n";
    print "  $sym [";
      print "Symlinks to $this:\n";
  print "VPE file: $vpefile\n" if $::opt_verbose;
  --progname: latex, pdflatex, elatex, pdfelatex
  "progname=s",
### program identification
            /P \s* \(
            /P \s* \("(.*)\" \s+ \d+\-(\d+)\) \s*
        >> \s*
          >> \s*
              "(.*)" \s*
            \) \s*
# See file "vpe.txt" for a list of files that belong to this project.
      seek(IN, -length($action), 1);
  specified line under Windows.
          /S \s* /Launch \s*
    $str = $3;
    $str =~ m|^(/*)(\.?)\./(.*)$| or
  "sty!",
* [sty] Internal for vpe.sty:
  --sty:      internal for `vpe.sty' (get absolute file name and lines)
### sty mode ###
    $symlinks{$1} = 1;
    $symlinks{$file} = 1;
  Syntax: vpe --sty [--progname=...] <latex file> <vpe file>
  Syntax: vpe --system <vpe file>
  "system!",
$system = "" if $^O =~ /mac/i;
$system = "" if $^O =~ /os2/i;
* [system] Internal for vpe.sty:
  --system:   internal for `vpe.sty' (get system info linux or win)
### system mode ###
$system = "win" if $^O =~ /dos/i;
$system = "win" if $^O =~ /win/i;
  that start an editor with the source file at the
# The latest version of this license is in
  The line number is encoded in the path and the
  The pdf file is scanned for actions created by VTeX,
  The script decodes the line number in the path of
  the source file name and starts an editor with
      $this = cwd() . "/" . $this;
  this file at that line number.
# This file "vpe.pl" may be renamed to "vpe"
      ($this ne "") or die "$Error Cannot find this script!\n";
# This program may be distributed and/or modified under the
    $this =~ s|/[^/]+/\.\./|/|g;
    $this =~ s|/\./|/|g;
      $this = `which $0`;
${title}
    $type = "aftcomp";
    $type = "repos";
          /Type \s* /Action \s*
        unlink($sym);
      unlink($sym);
      use Cwd;
    use Cwd;
### used by both sty and system mode:
use Getopt::Long;
use strict;
  "verbose!",
  --verbose:  print additional informations during running.
# version 1999/12/01 or later.
### vpe mode ###
# vpe.pl
* [vpe] Syntax: vpe <pdf file>[.pdf]
    while (<IN>) {
while (<IN>) {
        while (($rest = substr($rest, 1)) ne "") {
  while ($str ne "") {
          /Win \s* << \s*
       |x

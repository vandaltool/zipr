	%-16s   %s
Additional files in C or C++ to compile
AFLAGS =
	$(ANTLR) $(AFLAGS) $(GRM)
ANTLR = $(BIN)%santlr
# ANTLR-defined token types
ANTLR_H = $(PCCTS)%sh
 $(ANTLR_H)%s%s
ANTLR_SPAWN = 
$(ANTLR_SPAWN) : $(GRM)
 $(AOTHER)
AParser.cpp
ASTBase.cpp
ATokenBuffer.cpp
BIN = $(PCCTS)%sbin
can't define classes w/o C++ mode; turning on C++ mode...
can't define sorcerer group in C mode (yet); turning on C++ mode...
	$(CCC) -c $(CFLAGS) %s $(SCAN)%s $(SCAN)%s
	$(CC) -c $(CFLAGS) %s %s$(SCAN)%s %s$(SCAN).c
CCC = $(CXX)
CCC = %s
CFLAGS = -I. -I$(ANTLR_H)
-compiler
 $(COTHER)
# C output
# C++ output
# Created from:
Default compiler (default is CC/cc)
DFLAGS = -C2 -i
Directory where output files should go (default=".")
DLexerBase.cpp
DLG = $(BIN)%sdlg
-dlg-class
-dlg-class makes no sense without C++ mode; ignored...
	$(DLG) $(DFLAGS) $(DLG_FILE)
	$(DLG) $(DFLAGS) $(DLG_FILE) $(SCAN).c
 $(DLG_FILE)
DLG_FILE = %s%s
DLGLexer
# DLG scanner
 $(DLG_SPAWN)
$(DLG_SPAWN) : $(DLG_FILE)
DLG_SPAWN = $(SCAN)%s
DLG_SPAWN = %s$(SCAN).c
Do not create a DLG-based scanner
 $(DOTHER)
 $(ERR)%s
ERR = %serr
$(ERR)%s : $(ERR).c
exceeded max # of C/C++ input files
exceeded max # of grammar classes
exceeded max # of input files
exceeded max # of sorcerer groups
exceeded max # of sorcerer input files
__fprintf_chk
Generate ASTs
Generate C++ output
genmk: filenames must be file.suffix format: %s
genmk [options] f1.g ... fn.g
genmk: %s
GLIBC_2.0
GLIBC_2.3.4
__gmon_start__
 $(HDR_FILE)
HDR_FILE =
HDR_FILE = %s%s
$(HDR_FILE) stdpccts.h
ifdef CXX
ifndef CC
ifndef CCC
invalid option: '%s'; ignored...
_IO_putc
_IO_stdin_used
 -I$(SOR_H)
libc.so.6
__libc_start_main
/lib/ld-linux.so.2
Maintenance release style hoisting
# Make sure #tokdefs directive in ANTLR grammar lists this file:
 $(MOD_FILE)
MOD_FILE = %s%s
 : $(MOD_FILE) $(TOKENS)
-mrhoist
 -mrhoist off
 -mrhoist on
must define classes >0 grammar classes in C++ mode
Name of a grammar class defined in grammar (if C++)
Name of ANTLR standard header info (default=no file)
Name of DLG lexer class (default=DLGLexer) (if C++)
Name of executable to create (default=t)
no grammar files specified; exiting...
 -out-dir %s
parser.dlg
Path for $PCCTS directory (default is /usr/local/pccts)
PCCTSAST.cpp
# PCCTS makefile for: 
-pccts_path
# PCCTS release 1.33MR23
PCCTS = %s
__printf_chk
ProcessArgs: command line NULL
-project
# Project: %s
	rm -f $(ANTLR_SPAWN)
	rm -f *%s core %s
SCAN = %s
SCAN = %s%s
$(SCAN)%s : $(SCAN)%s
	%s -c $(CFLAGS) %s 
	%s -c $(CFLAGS) %s $(ERR)%s $(ERR).c
scrub: clean
SFLAGS = -CPP
SOR = $(BIN)%ssor
sorcerer input file before any '-sor' option
SOR_H = $(PCCTS)%ssorcerer%sh
SOR_LIB = $(PCCTS)%ssorcerer%slib
$(SOR_LIB)%sSTreeParser.cpp
	$(SOR_LIB)%sSTreeParser.cpp
	$(SOR) $(SFLAGS) 
 $(SOTHER)
__sprintf_chk
%s%s : $(ANTLR_H)%s%s
%s%s $(ANTLR_H)%s%s
 %s$(SCAN)%s
%s$(SCAN)%s : %s$(SCAN).c
%s : $(SRC) $(OBJ)
	%s %s %s $(CFLAGS) $(OBJ)
Start of sorcerer group
strcasecmp
__strcat_chk
__strcpy_chk
	STreeParser.o
STreeParser%s 
STreeParser%s : $(SOR_LIB)%sSTreeParser.cpp
# The following filenames must be consistent with ANTLR/DLG flags
 : $(TOKENS)
TOKENS = %s
 : $(TOKENS) $(SCAN).h
TOKENS = %stokens.h
-token-types
Token types are in this file (don't use tokens.h)
# User-defined scanner
# User-defined token types in '%s'
-user-lexer
/usr/local/pccts

      = @_;
        
          
                                                            : '')
                          );
                        }
                     }
                    }
                  }
                 }
                }
                #
               }
              }
             }
            }
           }
          }
          ###
         }
        }
        #
        ###
       }
      };
      ###
     ) {
  ($_) = @_;
  #    }
	       }
	      }
                 0);
             0);
            0);
  $| = 0;
        . '(\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))){3}$';
#  >= 0 number of blocks removed on success
#  0 on no regexp match (nothing added)
0.organizationName      = VMware, Inc.
# 0 otherwise
                 . ' 0x0710 > /dev/null 2>&1')/256) == 0 ) {
#  0x1 - write time stamp ($cFlagTimestamp)
#  0x2 - is config file ($cFlagConfig)
#  0x4 - write this directory creation in the installer database
#  0x8 - is user-modified file ($cFlagUserModified)
	      '0xffffffff 0xffffffff 0x00000000 0x00000000 0x0' . "\n";
         | (0xFFFFFFFF - quaddot_to_int($netmask)));
                                          - 1);
  $| = 1;
			       "", 1);
	     && $1 * 1000 + $2 >= 2004)
      $1 >= 4 && $2 >= 5) {
                                                   + 1))) >> 8;
# 1.  Check for PCI IDs
    ###   1. deleted
               . '1. Manually start ' . $bindir . '/vmware-user' . "\n"
# 1. number of vmxnet adapters
#  -1 on failure
#  1 on success
      # 2.1.0+ kernels have hardware verify_area() support
                          '2.4.2'  => 'yes',
                          '2.4.9'  => 'yes',
                        # 2.4 case: /dev/psaux
                  # 2.4 case: /dev/psaux
                                                   + 255))) >> 8;
                          '2.6.0'  => '-test',
                          '2.6.0'  => '-test5_2',
                          '2.6.16' => '.13-4-default',
                          '2.6.8'  => '-1',
# 2.  Check for VMware module Aliases
               . '2. Log out and log back into your desktop session; and,' . "\n"
    ###   2. modified
# 2. number of pcnet32 adapters
          . '2) Start your DHCP server with an explicit list of network '
	$2 !~ /vmhgfs/) {
                             : '3.0';
# 3.  Check for module file names (legacy).
# 3. number of es1371 adapters
               . '3. Restart your X session.' . "\n\n", 0);
    ###   3. unmodified
    ###   4. comment or blank line
    ###   5. new (handled at the end)
      # 64-bit FreeBSD puts it's 64-bit X modules in lib not lib64
       # 7.3.99 is a special case under Linux with a special driver
  # 7.4 and 7.5 do not need a new xorg.conf file.
# 86254.
# a '/'...
                     . 'a bridged network.  You may change it, but it is '
    # Absolute name
    # Absolute pointing device.
        . 'acceleration in virtual machines. '
                 "   Accepting Yes\n" .
                 . 'accessible outside the host machine.  This means that it '
                 . 'accessing the network.  These virtual machines on the NAT '
   # accidentally use both pre- and post-XDG autostart hooks.
   'acevm'              => 'acevm',
         # a command line option to preserve userfiles. That should be the
# Add a directory to the tar installer database
# Add a file to the tar installer database
# Add an answer to the tar installer database
    # Add a version check here for FreeBSD
        add_ethif_info(db_get_answer('VNET_' . $vHubNr . '_INTERFACE'));
# Adds an ethernet interface to the working list of ethernet interfaces
# Adds a Udev rule for GOS SCSI devices to change the timeout
        # add SETGID for Ubuntu
        # add SETUID for all others
# adds it if it does.
  # Add some space between the compile output and output text.
	 # add the flag if its not already there.
               # , add the modules one by one, checking content every time to
	add_to_list_variable($compizfile . $cBackupExtension, $compizfile, 'WHITELIST',
   add_to_list_variable($initmodfile . $cBackupExtension, $initmodfile, 'add_drivers',
    $addXconfToDb = 1;
            $admin = $currentAdmin;
      $admin = get_answer($msg, 'usergrp', $currentAdmin);
           . "administrator?";
           . " administrator\n";
            . " administrator.\n\n", 0);
      # a few command line options_.
      # affect on reboot.
      # after networking, hence this is not possible.
         # after the initrd splash and before rcS.
                      . ' again after making sure that gcc, binutils, make '
                  . 'Agreement please restart ' . $0 . ' in the '
                     . 'a host-only network.  You may change it, but it is '
               . 'a kernel based on that directory, or specify another '
      alarm 0;
      alarm 5;   # Seconds
        $aliascount += $pcnet32;
# A list of known open-vmware tools packages
          # All lines within a section will first be read into
                              all other configuration steps.
allow cupsd_t var_lock_t:dir { getattr write read remove_name add_name search };
allow cupsd_t var_lock_t:file { getattr write read create unlink lock };
				 . ' allows using shared folders inside the '
    # Allow the script to limit output in terse mode.  Usually dictated by
#     - All packaged display managers point users to a consolidated
      $allRestoreStr = db_get_answer($cRestoreBackList);
# All the known modules that the config.pl script needs to
  # All the remaining cases, where the /usr/X11R6/bin/X bin link should be
         # alone.
               . 'already.' . "\n\n", 0);
  # already set
      # Already tried
  # Also hand-remove vmxnet/vmxnet3 since it is no longer done in services.sh
      # Also install the 64-bit version
    # Also, mkinitrd prints out its help message through stderr, hence '2>&1.'
   # Also strip off anything sh wouldn't like.  Bug 502544
#  also, upgrade vmkernel device names on ESX Server
# Although 256 are supported, #255 is reserved
  # Although they could be theoretically missing, they are present on all
# Always returns answer.
    # Always set the manifest entries for vmGuestLib to be true
		   . 'an absolute path.' . "\n\n", 0);
                     . 'a NAT network.  You may change it, but it is highly '
#    an autostart directory present under $datadir/autostart, but it may
   # and add that to the list of autostart directories.
      # and add their location to a temporary replacement for fonts.conf.
         # and append them to our content list.
	       "and cannot be rebuilt at this time.  " .
            . 'and drop and file copy/paste features, '
# and filter it out as the file is written out to a tmp file. Typicaly, block_remove()
# and get_proc_tcp_entries().  Ignore vmware* entries.
   # and if so, try to eject it, then verify.
# (and if the user is amenable to this)
                              and installs the modules provided by this
                              and installs the VMware shipped Xorg modules.
  # AND it has changed timestamp with regards to the DB,
# and it is a 'yes', then that kernel is blacklisted.  If not a
# and libexa.so. Return 1 if installation succeeded, 0 otherwise.
    # And of course, if for some reason vmhgfs is already in the list of pruned
  # and PAGE_OFFSET must match.
# and product type, with a single command parameter.
                      . 'and the kernel sources for your running kernel are '
# and the shipped module.  If it finds information in the sytem
   and the special characters '_', '-', ',' and '='.
# and transform it into:
  # and try a new one, so we'll simply skip this step for pvscsi.
                     # and try the other alternatives.
  # _and_ /usr/X11R6/bin/X points to Xwrapper.
   #       and volumeids which this code is now dependent upon.
                 . 'and was about to remove it. Since there are files in that '
               . ', and was about to remove it. Somebody else apparently did '
		 "and will not be modified by this installer.  " .
	  # An empty default answer is dangerous as running
    # An empty default answer. We don't run the editor in --default, so
                   . ' a new one from template? Warning: if you choose to'
    # an interactive installation.
  # a non-existed file
  #       a non-existing file, -e will be false
   #    a.  no XDG symlinks were installed, or
      $answer =
    $answer = '';
  $answer = check_answer_binpath($bin, 'default');
    $answer = check_answer($gDBAnswer{$id}, $type, 'db');
    $answer = check_answer(query($msg, $default, $gAnswerSize{$type}), $type,
	 #       answer corredctly.
    $answer = dir_remove_trailing_slashes($answer);
  $answer = dir_remove_trailing_slashes($answer);
      $answer = get_answer('Do you want this program to probe for an unused '
  $answer = get_answer('Do you want to be able to use host-only networking '
  $answer = get_answer('Do you want to be able to use NAT networking '
      $answer = get_answer($msg, $type, $default);
  $answer = get_answer($msg, $type, $default);
    $answer = get_answer($query . "\n Would you like to change it?",
  $answer = get_answer('What is the location of the "' . $bin . '" program on '
    $answer = get_answer('What type of virtual network do you wish to set '
    $answer = get_persistent_answer('In which directory do you want to keep your '
      $answer = get_persistent_answer($msg, $id, $type, $default);
    $answer = get_persistent_answer($prompt, 'NETWORKING', 'yesnohelp',
  $answer = get_persistent_answer($queryString,
      $answer = get_persistent_answer('Would you prefer to modify your '
    $answer = get_persistent_answer('Your computer has the following ethernet '
        $answer = 'no';
       $answer_string = '"' . $answer . '"';
         $answer = 'yes';
    $answer = 'yes';
                                    'anyethif', 'eth0');
               . 'any mouse or graphics changes take effect.  Remember to run '
  # any other distribution, and so we'll retrieve this from parsing the
      # Anything else will be treated as "not found."
     # anyways.
# A place that gets called when the configurator/installer bails out.
     #       apparently have to use %{ ... } around a hash reference
                          . 'appears to be unused you will need to explicitly '
# Append a clearly delimited block to an unstructured text file
  # append extra version bit and see if a regexp finds it in
  # Append the promotional configuration if it exists
                     . 'application/x11/x11-server') =~ /Xsun/) {
                           "application/x-vmware-console;", 0);
                        "application/x-vmware-vm;", 1);
						  $appLoaderArgs);
	       "$appLoaderArgs") == 0) {
	       "$appLoaderArgs >/dev/null 2>&1") == 0) {
    $appLoaderArgs = "-- -l \"$libdir\"";
# appropriate binary through use of its isaexec(3C) program.  This means that
  # appropriate drivers for the detected X version.
                            # Arbitrary aliases next
# are currently installed by RPM on the system.
   # are equivalent but the use is undefined.
# are identical, these two kernels are probably ABI compatible.
		"are installed on this sytem.\n\n";
# are loaded at boot
  # a remote session is no longer necessary for linux systems.
                  'a remote session. This program will temporarily shut ' .
  # are mutually exclusive options.
                 . ' are stopped.' . "\n\n", 0);
                . ' are stopped.' . "\n\n", 0);
                   . 'Are you sure you want to use this device? (yes/no)',
      $arg = shift(@ARGV);
      @argv = ($initctl, @_, $service);
      @argv = (vmware_service_path(), @_);
  @arr1 = split(/\./, "$str1");
  @arr2 = split(/\./, "$str2");
                 . 'as a bridged device.' . "\n\n", 0);
                   . 'as expected.' . "\n\n", 0);
  # as it may confuse us later.
# Ask a question to the user and propose an optional default value
# Asks the user if they want to compile modules for linux.
      # Assuming this is a SuSE system, you have to specify the kernel image and the
                 . 'as you do not enable communication between these networks.'
  # at all, asm/page.h needs special processing on 2.6.15+ kernels.
                # at all, but this is better than nothing for now.
                           "at $gNonVmwareModules{$result} and at $modPath.  " .
    # Athlon modules at all.  See bug 360476 for more details.
  # a timestamp.
			  "at $mountpoint before canceling tools install " .
# Attempts to remove the given list of RPM packages
# Attempt to find the location of the shared library
#    Attempt to launch vmware-user via gdm.
                          . ' at the network address intended for assignment '
         # At time of publishing, all versions of gnome-session supporting
                                'AUTHDPORT',
   # authorization.xml is updated by the daemon after the file is installed..
             . ' auto-build ' . (($gSystem{'smp'} eq 'yes') ? 'SUPPORT_SMP=1 '
           $autodirs{$kdeAutostart} = undef;
                 . 'automatically select this number for you, or you can '
                 . 'automatic selection process works by testing a series of '
#    autostart.
#    autostart mechanism.  For each path encountered, a vmware-user.desktop
#       autostart tasks.  Seems like a perfect fit for us.
                    . 'available: ' . join(', ', @gAvailEthIf) . '. Which one '
                      . 'available on your distribution\'s installation CD.';
      $availableRAMInMB = $1 / 1024;
      $availableRAMInMB = $1 / (1024 * 1024);
      $availableRAMInMB = CEILDIV($availableRAMInMB, 32) * 32;
      $availableRAMInMB = CEILDIV($availableRAMInMB, 8) * 8;
  $availableRAMInMB = memory_get_total_ram();
                                  'availethif', 'eth0');
  @avail_modes = get_supported_modes($xf86config);
    # a version check added when it is ready to be added.
                  . '.  A virtual machine may be '
# Backup a file in the idea to restore it in the future.
      $backupDir = '';
    backup_file($dst_dir . '/misc/' . $name);
      backup_file($file);
      backup_file_to_restore($cfgFile, "orig");
	backup_file_to_restore($compizfile, 'COMPIZ_WRAPPER');
		 backup_file_to_restore("$dir/hal-probe-vmmouse", 'HAL_PROBE_VMMOUSE');
         backup_file_to_restore($dstDrm, 'LIBDRM', $tmpDir);
         backup_file_to_restore($dstKms, 'LIBKMD', $tmpDir);
  backup_file_to_restore($gXVideoDriverFile, 'OLD_X4_DRV');
      backup_file_to_restore($handmap_file, 'PCI_HANDMAP');
   backup_file_to_restore($initmodfile, 'INITMODFILE_CONF');
        backup_file_to_restore($initmodfile, 'INITRAMFS_MODULES');
       # backup_file_to_restore($initmodfile, 'INITRAMFS_MODULES');
    backup_file_to_restore($link, 'LINK_' . $gLinkCount);
      backup_file_to_restore($modprobe_file, 'MODPROBE_CONF');
      backup_file_to_restore($modules_file, 'MODULES_CONF');
      backup_file_to_restore($mouse_file, 'MOUSE_CONF');
      backup_file_to_restore($shadowFbDrv, 'OLD_X4_SHADOW_FB_DRV');
        backup_file_to_restore($src, 'SOLARIS_NET_' . $index . '_' . $Id);
   backup_file_to_restore($systemMod, $bkupExt);
            backup_file_to_restore($updatedb_conf_file, 'UPDATEDB_CONF');
	    backup_file_to_restore('/usr/bin/vmmouse_detect', 'VMMOUSE_DETECT');
		 backup_file_to_restore('/usr/share/hal/fdi/policy/20thirdparty/11-x11-vmmouse.fdi',
      backup_file_to_restore($xaaDrv, 'OLD_X4_XAA_DRV');
            backup_file_to_restore($xconfig_file, 'XCONFIG_FILE');
      backup_file_to_restore($xconfig_file, 'XCONFIG_FILE');
    backup_file(xserver3());
  $backupName = $gStateDir . '/config';
  $backupName = $gStateDir . '/tools.conf';
               . 'backups of the virtual machine. The rest of the software '
  # back while leaving utsrelease.h file in place.
# based audio support disabled in pulse.  Make this call
     # based on dependencies on other services as we do in the tools install.
# based on the version of pulseaudio installed on the system.
               . "be a valid user on this system."
  # Because devices can be daisy-chained on a port, the first port
    # because it avoids problems like 'Device or resource busy'
    # because it can change over time
  # Because our modules can now change names, we need to maintain some
        # Because there are problems rmmod'ing the pcnet32 module on some older
                             # become unused as a result of unloading $modname
                . "be created as " . $dest_dir . "/NEW_" . $dest_file . ".  Please check "
      # be defined as the correct one again.
                # been read before getting here, we have to just force these to
  # been used
            # before adding it, so as to avoid duplicates.
# before calling get_*_answer functions so that wrap() leaves enough room
# before configuration.
      # Before installation, if there is no backup one, $xconfig_file will
                # before the end of the section
  # Before we ask the user if he wants the default proxy ports, make sure
	       "Before you can compile modules, you need to have the " .
# BEGINNING_OF_CONFIG_DOT_PM
# BEGINNING OF THE LIBRARY FUNCTIONS
# BEGINNING OF THE SECOND LIBRARY FUNCTIONS
# BEGINNING_OF_UTIL_DOT_PL
      # Being before syslog would be nice, but syslog sometimes starts
#    being false), then we opt to continue and use some of the legacy
      # be renamed to $xconfig_backup. So first $xconfig_file should be
    # Be secure
  $best_name = '';
      $best_name = $mode_name;
  $best_res = -1;
      $best_res = $mode_width * $mode_height;
  $best_resolution =
   # Be sure that this is called before anyone attempts to execute any of the
	   # be the equivalent of a loopback mount in linux.
               . 'between 0 and 255.' . "\n\n", 0);
                        . 'be unused.' . "\n\n", 0);
  # Beware, 'last' doesn't seem to work in 'do'-'while' loops
               . '"b", "h", "n", or "none".' . "\n\n", 0);
  # binaries located in the -6 directories.
    $binary = internal_which('dracut');
    $binary = internal_which('mkinitrd');
    $binary = internal_which('update-initramfs');
		"binary.  Please ensure that the gcc binary is " .
      # binding of vmxnet to pci1022,2000 to take effect; just manually
                     $bindir . '/vmware-hgfsclient');
                           $bindir, 'vmware-toolbox');
		      $bindir . '/vmware-toolbox');
		     $bindir . '/vmware-toolbox');
                           $bindir, 'vmware-toolbox-cmd');
		    $bindir . '/vmware-toolbox-cmd');
                           $bindir, 'vmware-user');
                        $bindir . '/vmware-user');
                     $bindir . '/vmware-user');
                        $bindir . '/vmware-user-wrapper');
                     $bindir . '/vmware-user-wrapper');
                     $bindir . '/vmware-xferlogs');
	binmode(IN);
                . "/bin/true\n";
             . "/bin/true\n");
   # bit version since it is going to work on 64 bit as well.
   $bkupExt =~ s/^(\w+).*$/$1/;
  bless($self, $class);
      block_append('/boot/loader.conf',
     block_append($cupsPrinters . '.bak' , $cMarkerBegin, $configText, $cMarkerEnd);
	block_append($destFile,
        block_append('/etc/modules',
          block_append($initmodfile,
         block_append($initmodfile,
         block_append($xdmcfg, "!$cMarkerBegin", "#include \"$xResources\"\n",
      block_append($xinitrcCommon, $cMarkerBegin, $startCommand . "\n",
      block_append($xSessionDst, $cMarkerBegin,
    # block insert it into the prelink.conf file.
     block_remove($cupsPrinters, $cupsPrinters . '.bak',
         block_restore($_, "!$markerBegin", "!$markerEnd");
    block_restore($prelink_file, $cMarkerBegin, $cMarkerEnd);
            block_restore($xdmcfg, $cMarkerBegin, $cMarkerEnd);
         block_restore($xinitrcCommon, $cMarkerBegin, $cMarkerEnd);
      block_restore($xinitrcCommon, $markerBegin, $markerEnd);
         block_restore($xSessionDst, $cMarkerBegin, $cMarkerEnd);
		     $blockStr,
	  $blockStr .= $line . "\n";
#        (bool) 1 if a GNOME-specific directory was encountered,
#        (bool) 1 if a KDE-specific directory was encountered)
# booted in a VM or natively.
# both configuration.
        # Both ranges are well below 16MB granularity we are allowing.
  # Both the toolbox and vmware-user get special attention as their dependency
  # Bridged Networking
                  . 'bridged network is a virtual network that is '
                  . 'bridged network, your virtual machines will be able '
# bridged: Set to indicate a desire to count the number of bridged networks
      # bridge network, we need to make the interface that it used to
               . 'bring up the first vmxnetX interface using the configuration '
    # broadcast (high-end). Collisions occur when the two ranges overlap.
  $BSDModPath = '/boot/modules';
		 $BSDModPath . '/vmblock.ko',
		 $BSDModPath . '/vmhgfs.ko',
		 $BSDModPath . '/vmmemctl.ko',
		 $BSDModPath . '/vmxnet.ko',
  ($buf2) = unpack("a4", $buf);
  ($buf2) = unpack("C", $buf);
                # Bug 156988 has all the cory details.
      # BUG 398801 VSock needs access to VMCI build dir.
  # BUG 398801 VSock needs access to VMCI build dir.
# BUG 398801 VSock needs access to VMCI build dir.
# Build a Linux kernel integer version
# Build a module
  # Build dependency data for the new modules so that modprobe can find them.
  $build_dir = make_tmp_dir($cTmpDirPrefix);
                   . '/build/include';
            'building your kernel. Do you want to go with compiler "' .
                              Build/install modules for the given kernel
  $buildNr = '8.4.4 build-301548';
                              'BUILDR_' . $name, 'yesno', 'yes') eq 'no') {
   # Build the list of all and available ethernet adapters
    build_vmblock();
    # build_vmblock() is nice enough to add the VMBLOCK_CONFED entry for us
    build_vmnet();
  # built for the athlon family of processors.
   #    b.  user employs older GNOME but we were unable to find a GNOME-
# But in the other case, we must be _very_ careful
  # but startx checks for X link and refuses to start if not present in var.
   # but uses this old path.  lib64 must come before lib because both are
     # but we don't need to worry about that just yet.  In the future
       # by configure_X().
       # by configure_X().  Use xorg paths for 6.9 instead of old XFree ones.
# By convention, vmnet1 is the virtual ethernet interface connected to the
    # By default module is not good for anything
     # by modconfig.
                              by other installers or provided by your distro
# byte, EI_CLASS. I pulled the values from /usr/include/elf.h
	       'by this version of ' . vmware_product_name() . '.' .
# called _after_ VMware's config file has been written
# Called by the services.sh startup script.
# Calling the function with the above parameters will find a line like:
  # Call restorecon on the source file.
# Call restorecon on the supplied file if selinux is enabled
   # Call restorecon to set SELinux policy for this file.
   # Call the below function with 0 flags to ensure we don't timestamp file
#  Call to specify lib suffix, mainly for FreeBSD tools where multiple versions
      && can_build_module($name) eq 'yes') {
        $canBuild = 'yes';
                        . $candidate . '/properties".  Skipping this kernel.'
	# can just comment out vmxnet_load line instead of setting it to NO.
                   . ' can not be found. Do you want to create a new'
                  ' can not be found. X configuration skipped.' . "\n\n", 0);
                 . 'cannot remove networks or edit existing networks with the '
             . ' --can-run')) {
                  "can't configure cups backend.\n\n", 0);
	       . 'capital letter A-Z' . "\n\n", 0);
  # Case 1:
        ### Case 1. removed
  # Case 2:
          ### Case 2. modified
  # Case 3:
          ### Case 3. unmodified
      ### Case 4. comment or blank line
  ### Case 5. new entries
                                # (case-insensitive).
# case sensitivity.
                 . 'case, you may want to rebuild your kernel.' . "\n\n", 0);
Categories=System;
                           "cause a race condition when a device is added.  " .
    # cause the X server not to run if the host doesn't support the
  -c, --compile               Force the compilation of kernel modules.
                              . 'C compiler installed on your system)?',
                      . $cConfiguratorFileName
  $cConfiguratorFileName = 'vmware-config-tools.pl';
            != $cCreateDirFailure) {
          != $cCreateDirFailure) {
  $certCnf = "$tmpdir/certificate.cnf";
#        ($cFlagDirectoryMark)
                   $cFlagTimestamp);
               $cFlagTimestamp | $cFlagConfig);
    ($cf) = m/^config (.*)$/;
# change_scsi_timeout
  change_scsi_timeout(180);
# Changes the timeout value of all SCSI devices to the one specified
  # Change the test file if we're using the original xorg.conf
         $changeXConf = 0;
# Check a mountpoint to see if it hosts the guest tools install iso.
# Check available space when asking the user for destination directory.
# Check $cServices file for specified port
            # Check each string against the existing list in the file
      # checked if existed.
    # Check for collisions
        # Check for duplicate names
# Check for kernels that won't tolerate removing pcnet32 from the
  # Check for running over a telnet, ssh or remote X session
# Check if a file name already exists and prompt the user
# Check if a file name exists
        !check_if_port_active($httpsProxy)) {
    # Check if the kernel is from the Athlon family of kernels (athlon, k[78]).
      # Check if the module is already configured, otherwise run add_drv
	   # Check if they use HAL.  If HAL's dirs are present, install our bits.
	check_license();
# check_link
      check_link($x_wrapper_file, $x_server_link_bin) eq 'yes') {
    # Check memory requirements for GSX/WGS
# Checks for the evdev rule in known udev rules directories.
# Checks for versioning information in both the system module
# Checks if the given module needs to be added to the ramdisk and
# Checks that a given link is pointing to the given file.
# Checks to see if any of the package names in a given list
# Checks to see if the given module is one of ours.  If so, return what module
# Checks to see if we should install the given module.
  # Check that the running kernel matches the set of header files
# Check the normal dhcp configuration and give advises
# Check the system requirements to install this product
# Check the validity of an answer based on its type
# Check the validity of an answer whose type is availethif
# Check the validity of an answer whose type is dirpath
# Check the validity of an answer whose type is dirpath_existing
# Check the validity of an answer whose type is editorwizardhelp
# Check the validity of an answer whose type is headerdir
# Check the validity of an answer whose type is inetport
# Check the validity of an answer whose type is ip
# Check the validity of an answer whose type is netname
# Check the validity of an answer whose type is nettype
# Check the validity of an answer whose type is nocheck
# Check the validity of an answer whose type is number
# Check the validity of an answer whose type is serial number
# Check the validity of an answer whose type is vmnet
# Check the validity of an answer whose type is yesno
# Check the validity of an answer whose type is yesnohelp
# check the validity of a timeout value
# check the validity of a user or group name against the set of authenticatable users,
    # Check the validity of the temporary directory. We do this in the loop
      # Check to ensure that the command succeded.  If it didn't the system may
    # Check to ensure the screen identifier was found.  Otherwise we
    # Check to make sure the installation is interactive.
  # Check to make sure the Kernel Version is greater than 2.6.13
# check to see if the certificate files exist (and
# Check to see if the Samba question was ever asked and answered.
  # Check to see if the vmware svga driver is non-unified b/c we have to
              # Check to see if we have already found a module for this.  If
    check_wgs_memory();
    # Child code
        $childStatus = waitpid($childPid,0);
                "chkconfig application to setup the vmware-tools service.  " .
# chmod() that reports errors
  $choice = get_persistent_answer('Please enter a number between 1 and ' . $i
      chomp($_);
    chomp;
	    chomp($aline);
   chomp($chompedMarkerBegin);
        chomp($fp1);
        chomp($fp2);
  chomp($gcc_version);
    chomp($gSystem{'resolution'});
  chomp($gSystem{'system'});
  chomp($gSystem{'uts_release'});
  chomp($gSystem{'uts_version'});
    chomp($header_page_offset);
    chomp($header_smp);
    chomp($header_version_uts);
	 chomp $instPkgName;
        chomp($kdePrefix);
    chomp($kvers);
         chomp $line;
      chomp ($line);
      chomp $line;
    chomp($line);
	  chomp $line;
	 chomp $line;
         chomp($mountline);
    chomp($names);
 chomp($OS);
   chomp($release);
      chomp($reply);
  chomp($rpcresult);
    chomp ($shippedModVer);
  chomp($solVersion);
    chomp ($systemModVer);
    chop($content);
  $chosen_resolution = $mode_list[$choice - 1];
# chown() that reports errors.
               $chr == 0 && ($statbuf[2] & 0020000) == 0)) {
          && ($chr == 1 && ($statbuf[2] & 0020000) != 0 ||
                 . 'Class C subnet numbers to see if they are reachable from '
   class dir { getattr write read remove_name add_name search };
   class file { getattr write read create unlink lock };
#                       cleaned up separately.)
    # Clean the subLevel in case there is an extraversion
    # C library
   # Client information file modifiable during use.
               . ' clients on other machines.' . "\n\n", 0);
		 "clobbering and will be overridden.\n\n", 0);
      --clobber-kernel-modules=<module1,module2,...>
      --clobber-xorg-modules  Skips the Xorg module version comparison tests
      close(ADMIN);
      close(BLOCK);
  close(CFG);
	   close(CMDOUTPUT);
  close(CONF);
        close(CPUINFO);
   close(DESKTOP);
      closedir(CDROMDIR);
  closedir(LS);
  close(DST);
    close(EULA);
  close (EXISTINGXF86CONFIG);
  close(F);
	close(FD);
    close FH;
  close(FH);
    close(FILE);
  close(IFCONFIG);
           close (IMF);
      close IN;
  close(INSTALLDB);
     close (KSYMS);
      close LDD;
  close(MANIFESTFILE);
  close(MEMINFO);
   close MIMEPACKAGE;
         close(MNTTAB);
   close(MODINFO);
    close(MODULESDEP);
         close(MOUNTS);
   close(MYFONT);
  close (NEWHANDMAP);
      close(NEWMODCONF);
  close (NEWMODCONF);
   close NEWPCF;
  close (NEWUPDBCONF);
  close (NEWXF86CONFIG);
   close ORGPCF;
      close OUT;
  close (OUTFILE);
   close(OUTFONT);
    close(PAGER);
    close PCI;
      close PROC_VERSION;
    close(PROP);
    close RPCRESULT;
    close (SHIPPED_MOD_VER);
      close(SRC);
  close(SRC);
      close(SYSFONT);
   close(SYSFONT);
  close (SYSHANDMAP);
  close (SYSMODCONF);
    close (SYSTEM_MOD_VER);
  close (SYSUPDBCONF);
    close TCP;
        close TEFILE;
  close($TTY0);
    close(VERSIONDATA);
  close(WFD);
   close(XF86CONFIG);
  close(XF86CONFIG);
                       $cMarkerBegin,
                      $cMarkerBegin,
                $cMarkerBegin,
		     $cMarkerBegin,
		   $cMarkerBegin,
                  $cMarkerBegin, $cMarkerEnd);
                       $cMarkerEnd);
                      "!$cMarkerEnd");
                      $cMarkerEnd);
                   $cMarkerEnd);
                $cMarkerEnd);
		     $cMarkerEnd);
		   $cMarkerEnd);
   $cmd = join(' ', @escapedArgv);
  $cmd = shell_string($gHelper{'tar'}) . $opts . shell_string($vixTarFile);
               . $cModulesBuildEnv
            . $cModulesBuildEnv
	       . $cModulesBuildEnv
	      . $cModulesBuildEnv
              . $cModulesBuildEnv . "\n";
  $cModulesBuildEnv = ' please upgrade to a newer Solaris release.';
  $cModulesBuildEnv = ' you can install the driver by running '
    # CODE -> || (   vmware_product() eq 'tools-for-freebsd') && <BSD Version Check Here>) {
    #     -- Come up with a better default name than "standard"
   # Command line analysis
Command line arguments:  The acceptable characters are:
Comment=$comment
  <comment xml:lang="en">VMware team</comment>
  <comment xml:lang="en">VMware virtual disk</comment>
  <comment xml:lang="en">VMware virtual machine</comment>
  <comment xml:lang="en">VMware virtual machine foundry</comment>
  <comment xml:lang="en">VMware virtual machine snapshot</comment>
commonName              = $hostname
                 . 'communicate with each other and the ' . $os . ', but no '
                 . 'communicate with the network through the NAT process, '
# Compares variant length version strings against one another.
# Compare the two paths, and return true if they are identical
	     $compat ++;
          $compat = 1;
   # compiled binaries on FreeBSD 7.
               . 'complete name of a binary file.' . "\n\n", 0);
# Compute the broadcast address associated to a couple IP/netmask
# Compute the subnet address associated to a couple IP/netmask
    $conf = '/etc/dhcpd.conf';
  # Conf file that we will use to generate SSL certificates.
###  config file checker
###  config file hierarchies
               $config->get('guest.commands.allowAnonGuestCommandsOnHost',
               $config->get('guest.commands.allowAnonRootGuestCommandsOnHost',
               $config->get('guest.commands.anonGuestPasswordOnHost',''));
               $config->get('guest.commands.anonGuestUserNameOnHost',''));
               $config->get('guest.commands.enabledOnHost','TRUE'));
      $config->readin($name);
  $config->remove('serverd.fullpath');
  $config->remove('serverd.init.fullpath');
  $config->remove('smbpasswd.fullpath');
      $config->remove('vmnet' . $vHubNr . '.HostOnlyAddress');
      $config->remove('vmnet' . $vHubNr . '.HostOnlyNetMask');
      $config->set('authd.client.port', db_get_answer('AUTHDPORT'));
  $config->set('authd.fullpath', $sbindir . '/vmware-authd');
    $config->set('authd.proxy.nfc', 'vmware-hostd:ha-nfc');
    $config->set('authd.proxy.vim', 'vmware-hostd:hostd-vmdb');
    $config->set('authd.soapServer', 'TRUE');
  $config->set('bindir', $bindir);
  $config->set('control.fullpath', $bindir . '/vmware-cmd');
  $config->set('dhcpd.fullpath', $bindir . '/vmnet-dhcpd');
  $config->set('guest.commands.allowAnonGuestCommandsOnHost',
  $config->set('guest.commands.allowAnonRootGuestCommandsOnHost',
  $config->set('guest.commands.anonGuestPasswordOnHost',
  $config->set('guest.commands.anonGuestUserNameOnHost',
  $config->set('guest.commands.enabledOnHost',
  $config->set('helpdir', db_get_answer('LIBDIR') . "/hlp");
  $config->set('libdir', db_get_answer('LIBDIR'));
  $config->set('libdir', $libdir);
  $config->set('loop.fullpath', $bindir . '/vmware-loop');
      $config->set('mount-point', $mountPoint);
  $config->set('product.buildNumber', '301548');
  $config->set('product.name', vmware_product_name());
    $config->set('product.version', '8.4.4');
    $config->set('product.version', '@@VERSIONNUMBER_FOR_VIX@@');
    $config->set('vmdir', $answer);
      $config->set('vmnet' . $vHubNr . '.HostOnlyAddress', $hostaddr);
      $config->set('vmnet' . $vHubNr . '.HostOnlyNetMask', $netmask);
  $config->set('vmware.fullpath', $bindir . '/vmware');
                     . ' CONFIG_SMP') . ' | ' . shell_string($gHelper{'gcc'})
  $configText = "<Printer ${printerName}>\n" .
               . 'configuration between the set of C header files you '
                   . ' configuration file. Do you want to create a new'
                  ' configuration file. X configuration skipped.' . "\n\n", 0);
# Configuration of bridged networking
# Configuration of drivers for PCI devices
# Configuration of hostonly networking
# Configuration of NAT networking
# Configuration of the vmhgfs tools device
# Configuration of the vmmemctl tools device
# Configuration of the vmxnet3 ethernet driver
		    . 'configuration program again. '
# Configuration related to networking
# Configuration related to parallel ports
# Configuration related to the monitor
# Configuration related to vmwgfx
		  'configurator/udev/69-vmware-vmmouse.rules');
                  . '/configurator/udev/99-vmware-scsi-udev.rules';
                 . '/configurator/XFree86-3/XF86_VMware',
                 . '/configurator/XFree86-3/XF86_VMware_4.5',
                   . '/configurator/XFree86-4/4.2.x/libshadowfb.a',
                   . '/configurator/XFree86-4/4.2.x/libxaa.a',
		   . '/configurator/XFree86-4/4.2.x/vmmouse_drv.o',
                   . '/configurator/XFree86-4/4.2.x/vmware_drv.o',
                   . '/configurator/XFree86-4/4.x/vmware_drv.o',
# Configure a module
# Configure a module for Linux using vmware-modconfig-console
  configure_authd();
    # Configure autoloading only if vmxnet_load is not mentioned in
    configure_autostart();
# configure_autostart --
    # Configure autostart for vmware-user
      configure_autostart_legacy();
# configure_autostart_legacy --
      configure_autostart_legacy_gdm();
# configure_autostart_legacy_gdm --
# configure_autostart_legacy_suse --
      configure_autostart_legacy_xdm();
# configure_autostart_legacy_xdm --
# configure_autostart_legacy_xsessiond --
                  "configure_autostart_legacy_xsessiond", $platform);
       (configure_autostart_legacy_xsessiond($sleepingAgentCommand, "debian") == 0) &&
       (configure_autostart_legacy_xsessiond($sleepingAgentCommand, "solaris") == 0)) {
# configure_autostart_xdg --
    configure_bridged_net($free, 'vmnet' . $free);
    configure_bridged_net($gDefBridged, 'vmnet' . $gDefBridged);
      configure_bridged_net($vHubNr, 'vmnet' . $vHubNr);
         configure_compiz_wrapper_whitelist();
      # configured.
    configureDesktopFiles();
  configure_dev('/dev/' . $vHostIf, 119, $vHubNr, 1);
    configure_dev('/dev/vmmon', 10, 165, 1);
    configure_dev('/dev/vmnet' . $i, 119, $i, 1);
      configure_dev_flags('/dev/parport' . $i, 99, $i, 1, 0x1);
   configure_dev_flags(shift, shift, shift, shift, 0);
# configureDeviceKitVmmouse
	      configureDeviceKitVmmouse();
      configure_dracut_dot_conf($initmodfile, $content);
                                . 'configured to use the private subnet '
                  . 'configured with more than one bridged or host-only '
      configure_eclipse_plugin();
    configure_fonts_dot_conf();
      configure_gdk_pixbuf();
      configure_hostonly_net($free, 'vmnet' . $free, 1);
    configure_hostonly_net($gDefHostOnly, 'vmnet' . $gDefHostOnly, 1);
      configure_hostonly_net($vHubNr, 'vmnet' . $vHubNr, 1);
    configure_kernel_initrd();
  # configure_kernel_initrd function, which is called later.  Defer
      configure_ld_dot_so();
      configure_modprobe_dot_conf($modprobe_file,
      configure_module_bsd('vmxnet');
      configure_modules_dot_conf($modules_file,
      configure_module_solaris('vmxnet');
      configure_module_solaris('vmxnet3s');
    configure_mon();
      configure_nat_net($free, 'vmnet' . $free);
    configure_nat_net($gDefNat, 'vmnet' . $gDefNat);
      configure_nat_net($vHubNr, 'vmnet' . $vHubNr);
	configure_net();
      configure_net_editor();
  configure_net_wizard();
# Configure networking automatically with no input from the user, keeping the
      configure_pango();
      configure_pci_dot_handmap($handmap_file,
    configure_pp();
      configure_pvscsi();
    configure_security();
     configure_server();
#    Configures the system to launch vmware-user as part of users' graphical
    # configure the experimental drivers
    # configure the experimental vmwgfx drivers
   # configure the Linux-only drivers
      configure_thinprint();
         configure_tools();
       configure_udev_scsi();
# configure_udev_scsi
            configure_updatedb_dot_conf($updatedb_conf_file,
      configure_vmci();
    configure_vmci();
    configure_vmhgfs();
    # configure_vmhgfs() is nice enough to add the VMHGFS_CONFED entry for us
    configure_vmmemctl();
      # configure_vmsync();
             configure_vmware_gfx_driver($xorg_modules_dir, $compat);
      configure_vmwgfx();
      configure_vmxnet3();
      configure_vsock();
    configure_vsock();
      configure_webAccess();
  configure_wgs_pam_d();
    configure_X();
         config_usage();
        config_usage();
      config_usage();
    # Confirm that the target architecture of the prebuilt module matches
         # conflicts with the initrd splash code. If it is loaded by
                  . 'connected to an existing ethernet device.  With a '
                                . ' connections to use',
      # Consequently, it is only safe to use the force flag if _both_ the
# Consider the following ldd command and its output
# Constant defined as the largest vmnet that is allowed
# Constant defined as the smallest vmnet that is allowed
# Constant defines as the number of vmnets to be pre-created
# Constants
  # contain binaries predominantly built against 3.2.
			$content);
        $content .=  get_module_name($key) . ' ';
      $content .=  get_module_name($key) . ' ';
      $content .= get_module_name($key) ."\n";
            # $content is the space-separated list of strings.
                   $content .= $module . ' ';
# $content = 'vmwgfx foo vmxnet'
        $content .= " --with=" . get_module_name($key) . "  ";
                              . 'continue?',
                  . 'continue.' . "\n\n" . 'To display End User License '
          . 'continue.' . "\n" . 'Press enter to display it.', '', 0);
# Contrary to a popular belief, 'which' is not always a shell builtin command.
# Convert a string to its equivalent shell representation
# Converts an integer into a quad-dotted IPv4 address
# Converts an quad-dotted IPv4 address into a integer
# Converts version to the opaque token - if tokens from two kernels
  # Copy each line from the old updatedb.conf file to the new one. If we find
# copy from the first to the second.  In particular, when moving from
   # copy isaexec to $linkdir and create a hard link to that one.
        # Copy other lines outside sections directly to new file.
            # Copy other sections directly to new file.
# Copyright 1998-2008 VMware, Inc.  All rights reserved.
                . "correct the problem and run vmware-config.pl again.\n\n";
      # Could be '/' or any other character.  Ok.
            $count++;
        $count++;
      $count++;
   $count = 0;
  # count it as being installed).
countryName= US
# Counts the number of bridged networks
# Counts the number of configured virtual networks
# Counts the number of hostonly networks
# Counts the number of hostonly networks running NAT
# Counts the number of hostonly networks running samba
# Counts the number of virtual networks that have been setup.
# $cProductServiceTable.)
# Create a device name
  # -> Create a directory with a name that didn't exist before
# Create a helper app command to use to restore the initrd on uninstall.
# Create a hierarchy of directories with permission 0755
# Create a list of available resolutions for the VMware virtual monitor
# Create a list of modules suitable for the running kernel
                   . ' create a new one, all old settings will be gone! (yes/no)',
          # create a symlink for /usr/lib/vmware-tools/configurator/XOrg/7.4{_64} to point to /usr/lib/vmware-tools/configurator/XOrg/7.1{_64}
# Create a temporary directory
         createDesktopFile($use_desktop_utils, $mime_support,
      createDesktopFile($use_desktop_utils, $mime_support,
	     createDesktopFile($use_desktop_utils, $mime_support,
    create_dir($answer, $cFlagDirectoryMark);
  create_dir($cConnectSocketDir, $cFlagDirectoryMark);
    create_dir($certLoc, $cFlagDirectoryMark);
      create_dir($desktopdir, $cFlagDirectoryMark);
         create_dir($desticondir . '/' . $catdir, $cFlagDirectoryMark);
  create_dir($dhcpd_dir, $cFlagDirectoryMark);
  create_dir($dst_dir . '/misc', $cFlagDirectoryMark);
   create_dir('/etc/fs/vmhgfs', $cFlagDirectoryMark);
  create_dir($gLogDir, $cFlagDirectoryMark);
    create_dir($gStateDir, 0x1);
   create_dir($linkdir . '/amd64', $cFlagDirectoryMark);
   create_dir($linkdir . '/i86', $cFlagDirectoryMark);
   create_dir($mimePackagePath, $cFlagDirectoryMark);
  create_dir($nat_dir, $cFlagDirectoryMark);
    create_dir($parentDir, $flags);
   create_dir($pixmapdir, $cFlagDirectoryMark);
  create_dir($prop_dst_root, $cFlagDirectoryMark);
  create_dir($webAccessLogDir . '/work', 0x0);
  # Create empty files that will be created by the daemon
   # Create i86 and amd64 directories if necessary
    createMimePackageFile();
    $createNewXConf = 1;
# Creates a bridged network.
# Creates a .desktop file
# Creates a hostonly network
# Creates a mimetype package description file
# Creates a NAT network
  createSSLCertificates(db_get_answer('LIBDIR') . '/bin/openssl',
  # Create the dhcpd config directory (one per virtual interface)
  # Create the directory
  # Create the directory for the UNIX domain sockets
   # Create the K symlink
# Create the links for VMware's services on a Solaris system
# Create the links for VMware's services taking the service name and the
  # Create the nat config directory (one per virtual interface)
   # Create the new mimetype package
   # Create the S symlink
  # Create the /var/log/vmware directory for event logs
      # create tmp file
   # creating this one.
                        . $cRestoreBackupSuffix);
   #    c.  s/GNOME/KDE/g  (less likely)
                '/cups/backend';
                  $cupsConfDir . "/ppd/" . $printerName . ".ppd");
            $currentAdmin = $1;
         # $currentAdmin only changes if a user is listed.  Not for an empty user name.
    # current location.  With that info, we can invoke the
  # currently existing systems.  And check for ../.config presence
  # currently hit on SuSE 9.x systems.  And do not verify PAGE_OFFSET value
    # Currently modconfig will find make on its own.  So if make is not
          @currentSection = ();
          # currentSection, then process those lines.
                              . 'current virtual networks settings? (yes/no)',
                    'cut');
  # cut them out entirely for a particular product. Here's the scoop:
    @data_lines = <VERSIONDATA>;
         db_add_answer('APPENDED_FILES', $list);
      db_add_answer('BUILDR_' . $name, 'no');
    db_add_answer('BUILDR_' . $name, 'yes');
      db_add_answer($cRestoreBackList,$allRestoreStr . ':' . $restoreStr);
      db_add_answer($cRestoreBackList, $restoreStr);
    db_add_answer($cRestorePrefix . $restoreStr . $cRestoreBackupSuffix,
    db_add_answer($cRestorePrefix . $restoreStr, $file);
    db_add_answer($cSwitchedToHost, $configuredExtension);
  db_add_answer($cXPreviousResolution, $chosen_resolution);
           db_add_answer($dbKey, $newName);
      db_add_answer('EULA_AGREED', 'no');
	   db_add_answer('HAL_RESTART_ON_UNINSTALL', 'no');
		 db_add_answer('HAL_RESTART_ON_UNINSTALL', 'yes');
  db_add_answer($id, $answer);
      db_add_answer($key, $val);
	db_add_answer('LD_DOT_SO_DOT_CONF_ADDED_FILE', 'yes');
	db_add_answer('LD_DOT_SO_DOT_CONF_MODIFIED', $destFile);
    db_add_answer($prefix . $bin, $answer);
      db_add_answer('PRELINK_CONFED', $prelink_file);
      db_add_answer('PULSE_AUDIO_CONFED', $cfgFile);
      db_add_answer('RESTORE_RAMDISK', $binary . " -f " . $image_file . " " . $gSystem{'uts_release'});
    db_add_answer('RESTORE_RAMDISK', $binary . " --force");
    db_add_answer('RESTORE_RAMDISK', "$restorecmd");
      db_add_answer('RESTORE_RAMDISK', "$syscmd");
       db_add_answer('ROOT_ACCESS_METHOD', 'su');
       db_add_answer('ROOT_ACCESS_METHOD', 'sudo');
  db_add_answer('THINPRINT_CONFED', 'yes');
  db_add_answer(uc("$mod") . '_CONFED', $result);
    db_add_answer(uc("$name") . "_NAME", $destName);
    db_add_answer(uc("$name") . "_PATH", $mod_path);
  db_add_answer('VMAUTHD_USE_LAUNCHER', 'yes');
    db_add_answer('VMBLOCK_CONFED', $moduleConfed);
    db_add_answer('VMCI_CONFED', $result);
    db_add_answer('VMHGFS_CONFED', $moduleConfed);
     db_add_answer('VMMEMCTL_CONFED', $moduleConfed);
    db_add_answer('VMMEMCTL_CONFED', 'yes');
    db_add_answer('VMXNET3S_CONFED', $result);
    db_add_answer('VMXNET_CONFED', $moduleConfed);
    db_add_answer('VMXNET_CONFED', 'yes');
  db_add_answer('VNET_' . $vHubNr . '_DHCP', 'yes');
  db_add_answer('VNET_' . $vHubNr . '_HOSTONLY_HOSTADDR', $hostaddr);
  db_add_answer('VNET_' . $vHubNr . '_HOSTONLY_NETMASK', $netmask);
  db_add_answer('VNET_' . $vHubNr . '_HOSTONLY_SUBNET', $subnet);
  db_add_answer('VNET_' . $vHubNr . '_INTERFACE', $ethIf);
    db_add_answer('VNET_' . $vHubNr . '_NAME', 'Bridged-' . $vHubNr);
  db_add_answer('VNET_' . $vHubNr . '_NAT', 'yes');
  db_add_answer('VNET_' . $vHubNr . '_SAMBA', 'no');
   db_add_answer('X11DIR', $x11Base);
    db_add_dir($dir);
  db_add_file("$certLoc/$certPrefix.crt", $cFlagTimestamp);
  db_add_file("$certLoc/$certPrefix.key", $cFlagTimestamp);
      db_add_file("$desktopdir/$desktopFilename", 1);
  db_add_file($dst, $flags);
      db_add_file($file, 0);
  db_add_file($file, 0);
  db_add_file($file, 1);
      db_add_file($isaexec, 0);
  db_add_file($manifest, 0x0);
      db_add_file($modprobe_file, 0x0);
   db_add_file($name, 0);
  db_add_file($name, $cFlagTimestamp);
  db_add_file($name, $cFlagTimestamp | $cFlagConfig);
  db_add_file($name, $flags);
   db_add_file($pangorc, 0);
   db_add_file($srcicondir . "/icon-theme.cache", 0)
        db_add_file($trgt, 0);
      db_add_file($xconfig_file, 0x0);
      db_add_file($xSessionDst, 0);
   db_append();
          db_get_answer($cRestorePrefix . $restoreStr
      || (db_get_answer('EULA_AGREED') eq 'no')) {
        db_get_answer_if_exists('UPSTARTJOB')) {
      db_get_answer_if_exists('VNET_' . $vHubNr . '_HOSTONLY_HOSTADDR');
      db_get_answer_if_exists('VNET_' . $vHubNr . '_HOSTONLY_NETMASK');
                   db_get_answer('INITDIR') . '/rc0' . '.d/K'
                   db_get_answer('INITDIR') . '/rc6' . '.d/K'
                   db_get_answer('INITDIR') . '/rc' . $level . '.d/K'
                   db_get_answer('INITDIR') . '/rc' . $level . '.d/S'
                     db_get_answer('INITDIR') . '/rc' . $runlevel
       db_get_answer('INSTALL_CYCLE')  eq 'yes') &&
        db_get_answer($modConfKey) eq 'yes') {
           db_get_answer('VMCI_CONFED') ne 'yes') {
       (db_get_answer('VMXNET_CONFED') eq 'yes')) {
      db_get_answer('VMXNET_CONFED') eq 'yes') {
   db_load();
    db_remove_answer('EULA_AGREED');
    db_remove_answer("HEADER_DIR");
  db_remove_answer($id);
      db_remove_answer('INSTALL_CYCLE');
    db_remove_answer('RESTORE_RAMDISK');
  db_remove_answer('VNET_' . $vHubNr . '_DHCP');
  db_remove_answer('VNET_' . $vHubNr . '_HOSTONLY_HOSTADDR');
  db_remove_answer('VNET_' . $vHubNr . '_HOSTONLY_NETMASK');
  db_remove_answer('VNET_' . $vHubNr . '_HOSTONLY_SUBNET');
  db_remove_answer('VNET_' . $vHubNr . '_INTERFACE');
     db_remove_answer('VNET_' . $vHubNr . '_NAME');
  db_remove_answer('VNET_' . $vHubNr . '_NAT');
    db_remove_answer('VNET_' . $vHubNr . '_SAMBA');
    db_remove_answer('VNET_' . $vHubNr . '_SAMBA_MACHINESID');
    db_remove_answer('VNET_' . $vHubNr . '_SAMBA_SMBPASSWD');
  db_remove_dir($dir);
    db_remove_file($backupName);
            db_remove_file($dst);
      db_remove_file($file);
    db_remove_file($file);
  db_remove_file($file);
    db_remove_file($name);
   db_remove_file($plain_file);
  db_remove_ts($tomcat . '/conf/tomcat-users.xml');
  db_save();
            db_set_userfile($dst);
  -d, --default               Automatically answer questions with the
      /debian/i && do {
#      Debian/Ubuntu:   Remove script from Xsession.d.
#      - Debian, Ubuntu via Xsession.d
   # Debian (Xsession.d) - We forgot to simply call db_add_file() after
			     "Debugger? You must have the Eclipse IDE installed.",
         # default.
      $default = $answer;
default_bits		= 1024
default_keyfile 	= $certPrefix.key
      $default = 'no';
  $defaultOpts .= assemble_command_line(qw(EULA_AGREED NESTED UPGRADE prefix));
# Default value for the 'number' type of answer.
	  # --default will never make it here, so we're safe.
      $default = 'yes';
      defined(db_get_answer_if_exists('HTTPS_PROXY_PORT'))) {
      defined db_get_answer_if_exists('VMXNET_CONFED') and
		       . ((defined($doForce) && $doForce) ? ' -f ' : ' ')
	&& defined($doRecursive) && $doRecursive) { # Linux (with $doRecursive)
       defined $ENV{'DISPLAY'} and $ENV{'DISPLAY'} !~ /^:\d/) and
       defined $ENV{'SSH_CONNECTION'} or
      defined($gDBAnswer{'NETWORKING'}) && get_samba_net() != -1) {
           defined $gVmwareInstalledModules{"$mod"}) {
         && defined($hostonly_netmask)
         defined internal_which('gnome', 1) ||
         defined internal_which('gnome-session', 1);
         defined internal_which('ksmserver', 1);
         defined internal_which('startkde', 1) ||
         && defined($nat_netmask)
         && defined($nat_network) && $nat_network eq 'yes';
        && (!defined($prop{'UtsVersion'})
         (defined($prop{'variant'}) and $prop{'variant'} eq 'opensuse')) and
        defined($prop{'version'}) and $prop{'version'} =~ /^1[01]/) {
          defined($prop{'version'}) and $prop{'version'} =~ /^11(\.[012])*$/) {
         && defined($samba) && $samba eq 'yes';
            $del = 1;
   # delay is intended to prefer XDG-style launch for guests where we may
      delete $gDBAnswer{$1};
    delete $gDBAnswer{$id};
      delete $gDBDir{$1};
  delete $gDBDir{$dir};
      delete $gDBFile{$1};
  delete $gDBFile{$file};
      delete $gDBUserFile{$1}; # harmless if not in there
  delete $gDBUserFile{$file};
  delete $self->{db}{$name};
                           "'depmod -a' and then re-run this configurator.\n\n" ,0);
    # depth.
        Depth       15
        Depth       16
        Depth       24
        Depth       4
        Depth       8
   $desktopConf = "$tmpdir/$desktopFilename";
   $desktopdir = db_get_answer_if_exists("DESKTOPDIR");
     "DESKTOPDIR", "dirpath",
  $desktopdir = get_persistent_answer(
[Desktop Entry]
   #       desktop-file-install, because there is no desktop-file-uninstall.
      $dest = $1;
          $dest = "guest";
          $dest = "host";
                               $desticondir . '/' . $catdir . '/gnome-mime-' .
   $desticondir = $desticondir . '/hicolor';
   $desticondir = get_persistent_answer(
                            $desticondir . '/' . $iconpath);
			   $destName)) != 0) {
				   $destName, $appLoaderArgs);
	       "$destName $appLoaderArgs") != 0) {
      $dest_path = $dest_dir . "/NEW_" . $dest_file;
   $dest_path =~ s/-template//;
                    . $dest . ' to ' . $src . ' drag and drop and file copy/paste).'
    $dest = "updates/vmware"
                   . 'details on this capability. Do you wish to enable '
        . 'details on this capability. Do you wish to enable '
	   "Detected FreeBSD version $freeBSDVersion.\n");
# Determine if a directory belongs to the tar installer database
# Determine if a file belongs to the tar installer database
  # determine if we use upstart.
# Determines if the system at hand needs to have timer
# Determines the available ethernet interfaces
# Determines the status of the given module in question.  The returned status
# Determines whether a solaris driver is already configured using the provided
# Determine the directory for the icon and .desktop file, and install them
# Determine the name of the maximum available resolution that can fit in the
# Determine what version of FreeBSD we're on and convert that to
# Determine whether /dev is populated dynamically
# Determine whether it is remotely plausible to build a module from source
# Determine whether SELinux is enabled.
  # Determine whether the kernel is complied for Athlon Processors
# Determine whether Upstart is supported, and if so, return the path in which
   #  - Determine X11BASE.
                           ' "' . $device . '"');
	   $device = $1;
# device kit.  First it checks to make sure that no vmmouse rules file
            ($device, $mountpoint, $fstype, $rest) = split;
      ($device, $mountpoint) = split('::::',$candidate_mount);
            ($device, $rest) = split;
            $device =~ s/\\040/\ /g;
                                    . 'devices: ' . join(', ', @gAllEthIf)
                # device, so should be handled seperately.
               . 'devices will transition from the pcn driver to the vmxnet '
                 "   DeviceURI ${printerURI}\n" .
    Device      "VMware SVGA"
    Device "VMware SVGA"
                     # /dev/mouse these days, so check if it's going to fail
      $dev = $name . $1;
                             ">/dev/null 2>&1");
                           ">/dev/null 2>&1");
                 " >/dev/null 2>&1")) {
         . '>/dev/null 2>&1');
		       . ' >/dev/null 2>&1');
			       . ' >/dev/null 2>&1');
			   ">/dev/null 2>&1");
	       ">/dev/null 2>&1") == 0) {
          . 'dhcpd.conf(5) manual pages for details.' . "\n\n"
  # dhcpd.conf will not exist until we run make_all_net().
    dhcpd_consultant($vHubNr, $vHostIf);
  dhcpd_consultant($vHubNr, $vHostIf);
               $dhcpd_dir . '/dhcpd.conf', \%patch,
  $dhcpd_dir = $gRegistryDir . '/' . $vHostIf . '/dhcpd';
    die 'check_answer(): type ' . $type . ' not implemented :(' . "\n\n";
      die "Failed to cleanup empty $xconfig_backup file : $!\n";
      die "Failed to cleanup old $XF86tmp file : $!\n";
      die "Failed to cleanup old $xLogFile file : $!\n";
      die "Failed to cleanup old $xLogFile.old file : $!\n";
    die 'get_answer(): type ' . $type . ' not implemented :(' . "\n\n";
      die sprintf("%s: platform '%s' unknown.\n",
      die unless $@ eq "alarm\n";
  # differences between the kernel and the modules compiled for that kernel.
     # Different systems, different names...
# Different xorg installations may store their modules in different places.
        direct_command('grep ' . $driver . ' /etc/driver_aliases') =~ /$alias/) {
            direct_command(internal_which('umount') .
      direct_command(shell_string($gHelper{'svcprop'}) . ' -p options/server '
      direct_command(shell_string(vmware_check_vm_app_name()) . ' -p');
      direct_command(shell_string(vmware_check_vm_app_name()) . ' -r');
              direct_command(shell_string($xserver3default) .
                 . 'directory, but it does not contain the file '
                   . 'directory, but it does not contain the file "asm/page.h" '
                   . 'directory, but it is not configured yet.'
                   . 'directory, but it is not part of kernel source tree.'
               . 'directory exists before re-running this program.'
               . 'directory.' . "\n\n", 0);
		       'directory of C header files that match your ' .
        # directory of the currently running kernel.
                 . 'directory that this program did not create, it will not be '
    # directory to launch a symlink attack)
# <dir> elements and assumes that <dir> elements are grouped together in
			      "$dir/hal-probe-vmmouse", \%p, 1);
  $dirname = internal_dirname($link);
                 "--dir=" . shell_string($desktopdir) . " " .
    $disableHotPlug = 'yes';
# Disables timer based audio scheduling in the default config
        $dispInstallMsg = 0;
# Display a usage error message for the configuration program and exit
#    display managers on SuSE 10 will launch vmware-user during X11 session
# Display the end-user license agreement
# Display the PROMOCODE information
# Display the requirements and check to see if they have a valid path
distinguished_name	= req_distinguished_name
  # distributions (if an FHS guy is listening, we really need a generic way to
  #       distros (SLES) will complain.
  # distry in question is Hardy and whether or not the .not_configured file exists.
                     . '.d/K' . $K_level . $service);
           do {
      do {
    # Do a broadcast ping for <subnet>.255 .
                 . 'does not contain a "linux" subdirectory as expected.'
                   . 'does not contain subdirectories "asm" and "net" as expected.'
    # doing. It will override the driver's preferences which can
  # Doing this will also undo its userfile status.
        # DO NOT RMMOD pcnet32!  Even by hand! You will terminally confuse the
   # Don't bother checking directories unless initctl is available and
      # Don't configure vmsync per bug 479556.
#Don't encrypt the key
    # -> Don't give write access to other users (so that they can not use this
     # don't install if the user (or --default) chose a bogus dir.
         # Don't match commented $var lines.
  # Don't overwrite existing user data
  # Don't remove the build dir so that the user can investiguate
       # don't restart services at the end, no modules are installed
		 # Don't search for any more HAL directories.
  # Don't show anything
    # Don't specify DefaultColorDepth unless you know what you're
    # Don't use the force flag: the module is supposed to perfectly load
        # do the magic
  # do this)
          . 'do this:' . "\n\n" . '1) Modify the file ' . $conf . ' to add '
          (dot_version_compare($1, "0.6.0") >= 0)) {
	dot_version_compare ("$shippedModVer", "$systemModVer") > 0) {
         # double check that it really failed before showing the output to
                  'down your network connection, so you should only run ' .
                    . 'do you want to bridge to vmnet' . $vHubNr . '?';
                     'Do you want to change the starting screen display size? (yes/no)',
                      . '. Do you want to set those permissions properly?',
    # Dracut is the replacement for mkinitrd first appearing in Fedora 12.
# Dracut is the replacement for mkinitrd, first appearing in Fedora 12.
               . 'drag and drop, and file and text copy/paste), you will need '
              . ' drag and drop and file copy/paste).  The rest of the '
      # driver.
    Driver "accel"
                # driver InputDevice section in xorg.conf to fool X.
    # driver is not yet ready for prime time, and not being built.
    Driver      "keyboard"
# driver name and alias (alias may be '' if none is required for this driver).
               . 'driver on the next reconfiguration reboot.  You will need '
#   drivers = 'foo bar baz'
#   drivers = 'foo bar baz vmwgfx vmxnet'
    Driver "vmmouse"
	Driver      "void"
                     . '.d/S' . $S_level . $service);
    $dst_dir = $cKernelModuleDir . '/' . $gSystem{'uts_release'};
                  $dstFile);
      $dstFile = $backupDir . '/' . internal_basename($file) . $cBackupExtension;
      $dstFile = $file . $cBackupExtension;
   # $dst file has been modified, call restorecon to set the
    # due to 2.4.19-4GB being delivered by both SuSE8.1 and SLES8)
	 # due to the vmx 'install tools' feature, and if so eject it.
	     . "during an X server session.\n\n",0);
    # Each network is defined by a range from subnet (low-end) to
                          . 'each subnet that we tried we received a response '
   # early. The handler will send the RPC before exiting.
          (-e "$certLoc/$certPrefix.key") &&
		   $eclipseDestDir . '/com.vmware.bfg_1.0.0');
   $eclipseDestDir = get_persistent_answer('Which directory contains your eclipse plugins?',
					   'ECLIPSEDIR', 'dirpath_existing', "");
			     "ECLIPSEINSTALL", "yesno", "no") eq 'no') {
      # editing /etc/driver_aliases is not enough
    # edit the ld.so.conf file if possible.  Otherwise do nothing.
                 . '.edu/in-notes/rfc1918.txt).' . "\n\n" . 'Virtual machines '
#    E.g., GNOME was a little late to the .desktop autostart party.  So a
    # Either the devfs" or "udev" filesystem is mounted on the "/dev" directory
    # Either the devfs" or "udev" filesystem is mounted on the "/dev" directory,
  # either the wizard or the editor.
      $eject_cmd = internal_which('cdcontrol') . " eject";
      $eject_cmd = internal_which('eject');
	   $eject_failed = $?;
	   $eject_failed = 1;
	      $eject_really_failed = 1;
            # $eject_really_failed ensures this message is not printed
    eject_tools_install_cd_if_mounted();
	   eject_tools_install_cd_if_mounted();
  # eliminated in the 2.6 kernel.
               # eliminate duplicates.  Also eliminate any entries that begin with $
                    } else {
                  } else {
                } else {
               else {
              } else {
            } else {
          } else {
         } else {
        } else {
       } else {
      } else {
     } else {
     else {
    } else {
   } else {
  } else {
  #    } else {
  else {
} else {
	     } else {
	   } else {
	   else {
	  } else {
	 } else {
    } elsif ($answer eq 'hostonly') {
    } elsif ($answer eq 'nat') {
  } elsif ($answer  eq 'no') {
    } elsif ($answer eq 'none') {
    } elsif (/^answer (\S+)/) {
      } elsif ($arg =~ /=yes/ || $arg =~ /=no/) {
  } elsif ($availableRAMInMB < $minRAMinMB) {
  } elsif (!$bridge_flag && !$hostonly_flag && $nat_flag) {
  elsif ($changeXConf == 1) {
  } elsif ($char eq ' ') {
      } elsif ($cmd eq 'vmnics') {
  } elsif (defined $ENV{'XF86CONFIG'} &&
  } elsif (defined $ENV{'XORGCONFIG'} &&
    } elsif (defined($gHelper{'kldload'})) { # FreeBSD
    } elsif (defined($gHelper{'kldunload'})) { # FreeBSD
    } elsif (defined($gHelper{'modload'})) { # Solaris
    } elsif (defined($gHelper{'modunload'})) { # Solaris
    } elsif (defined($gHelper{'rmmod'})) { # Linux (otherwise)
    } elsif (defined($gOption{$flag})) {
  } elsif (defined($notset)) {
        } elsif ($dev eq '12741371') {
        } elsif ($dev eq '15ad0720') {
    } elsif (/^directory (.+)$/) {
  } elsif (dot_version_compare("$freeBSDVersion", '6.3') >= 0) {
  } elsif (dot_version_compare("$freeBSDVersion", '7.0') >= 0) {
  } elsif (dot_version_compare("$freeBSDVersion", '7.1') >= 0) {
  } elsif (dot_version_compare("$freeBSDVersion", '7.3') >= 0) {
                  } elsif ($enableXImps2 eq 'yes') {
      } elsif (-f $destFile) {
        } elsif (-f "$fp1") {
    } elsif (/^file (.+)$/) {
      } elsif (file_changed_db_ts($dst)) {
    } elsif (/^file (.+) (\d+)$/) {
                        } elsif (file_name_exist("/dev/psaux")) {
                  } elsif (file_name_exist("/dev/psaux")) {
    } elsif (file_name_exist('/etc/conf.modules') ||
    } elsif (file_name_exist('/etc/conf.modules')) {
    } elsif (file_name_exist('/etc/modprobe.conf')) {
    } elsif (file_name_exist('/etc/modprobe.d')) {
    } elsif (file_name_exist('/etc/modules.conf')) {
  } elsif (file_name_exist('/etc/X11/XF86Config')) {
  } elsif (file_name_exist('/etc/X11/XF86Config-4')) {
  } elsif (file_name_exist('/etc/X11/xorg.conf')) {
  } elsif (file_name_exist('/etc/X11/xorg.conf-4')) {
  } elsif (file_name_exist('/etc/X11/.xorg.conf') && ! -e '/etc/X11/xorg.conf') {
  } elsif (file_name_exist('/etc/XF86Config')) {
  } elsif (file_name_exist('/etc/xorg.conf')) {
  } elsif (file_name_exist('/usr/X11R6/etc/X11/XF86Config')) {
  } elsif (file_name_exist('/usr/X11R6/etc/X11/XF86Config-4')) {
  } elsif (file_name_exist('/usr/X11R6/etc/X11/xorg.conf')) {
  } elsif (file_name_exist('/usr/X11R6/etc/X11/xorg.conf-4')) {
  } elsif (file_name_exist('/usr/X11R6/lib/X11/XF86Config') &&
  } elsif (file_name_exist('/usr/X11R6/lib/X11/XF86Config')) {
  } elsif (file_name_exist('/usr/X11R6/lib/X11/xorg.conf')) {
  } elsif (file_name_exist('/usr/X11R6/lib/X11/xorg.conf-4')) {
  } elsif (file_name_exist(xserver4())){
  } elsif (file_name_exist(xserver_bin() . '/xterm')) {
     elsif (-f "$initDir/hal") {
  } elsif (-f $prelink_file) {
  } elsif ($gOption{'prebuilt'} == 0) {
    } elsif ($hostonly_flag && is_hostonly_network($i)) {
  } elsif (!$hostonly_flag && !$nat_flag && $bridge_flag) {
    } elsif ($in) {
  } elsif (internal_which('dracut') ne '') {
  } elsif (internal_which('mkinitrd') ne '') {
    } elsif (is_hostonly_network($i) && $hostonly) {
    } elsif (is_hostonly_network($vHubNr)) {
  } elsif (is_hostonly_network($vHubNr)) {
    } elsif (is_nat_network($i) && $nat) {
    } elsif (is_nat_network($vHubNr)) {
  } elsif (is_nat_network($vHubNr)) {
      } elsif (lc($arg) =~ /^--clobber-kernel-modules=([\w,]+)$/ ) {
      } elsif (lc($arg) =~ /^--clobber-xorg-modules$/) {
      } elsif (lc($arg) =~ /^(-)?(-)?c(ompile)?$/) {
      } elsif (lc($arg) =~ /^--enable-opengl$/) {
      } elsif (lc($arg) =~ /^(-)?(-)?k(ernel-version)$/) {
      } elsif (lc($arg) =~ /^(-)?(-)?make-all-net$/) {
      } elsif (lc($arg) =~ /^(-)?(-)?m(odules-only)?$/) {
      } elsif (lc($arg) =~ /^(-)?(-)?(no-create-shortcuts)$/) {
      } elsif (lc($arg) =~ /^--overwrite$/) {
      } elsif (lc($arg) =~ /^(-)?(-)?p(rebuilt)?$/) {
      } elsif (lc($arg) =~ /^(-)?(-)?prefix=(.+)$/) {
      } elsif (lc($arg) =~ /^--preserve$/) {
      } elsif (lc($arg) =~ /^(-)?(-)?r(pc-on-end)?$/) {
      } elsif (lc($arg) =~ /^(-)?(-)?skip-stop-start$/) {
      } elsif (lc($arg) =~ /^(-)?(-)?s(witch)?$/) {
    } elsif ($major == 4 && $minor == 3) {
  } elsif ($major == 7 && $minor >= 0 && $minor <= 6) {
  } elsif ($major == 7 && $minor > 6) {
    } elsif ($minor < 2) {
    } elsif ($minor > 2) {
    } elsif ($minor == 8) {
    } elsif ($minor == 9 && vmware_product() eq 'tools-for-freebsd') {
    } elsif ($minor == 9 && (vmware_product() eq 'tools-for-solaris'
    } elsif (/^modified (.+)$/) {
    } elsif ($modprobe_file eq '/etc/modprobe.d/vmware-tools.conf') {
  } elsif ("$modStatus" eq "installed_by_other") {
  } elsif ($modStatus eq 'installed_by_vmware') {
  } elsif ($modStatus eq 'installed_by_vmware' and
  } elsif ($module eq 'vmblock') {
  } elsif ($module eq 'vmhgfs') {
  } elsif ($module eq 'vmxnet') {
    } elsif ($nat_flag && is_nat_network($i)) {
  } elsif (not file_name_exist($xconfig_file) and $changeXConf) {
   } elsif (opendir CDROMDIR, $mountpoint) {
    } elsif (/^openSUSE/) {
  } elsif ($packedVersion =~ /X Server (\d+\.\d+\.?\d*)/) {
    } elsif (/^PATCHLEVEL\s+=\s+(.+)$/) {
      } elsif ($prop{'UtsMachine'} ne 'i386') {
    } elsif ($release >= 5.0) {
    } elsif ($release >= 5.3) {
    } elsif (/^remove_answer (\S+)/) {
    } elsif (/^remove_directory (.+)$/) {
    } elsif (/^remove_file (.+)$/) {
      } elsif (!$samba) {
               elsif ($sectionLine =~
          } elsif ($sectionName eq 'device') {
          } elsif ($sectionName eq 'monitor') {
          } elsif ($sectionName eq 'screen') {
          } elsif ($sectionName eq 'serverflags' && $disableHotPlug eq
          } elsif ($sectionName eq 'serverlayout') {
      } elsif (/^(\S+) (\S+)/) {
  } elsif (/^((\s*(\S+)\s*=\s*)(([\"]([^\"]*)[\"])|(\S+)))\s*(\#.*)?$/) {
      } elsif ($state eq 'inside') {
    } elsif ($status == 0) {
    } elsif ($status == 1) {
      } elsif (system(shell_string(vmware_vmx_app_name()) . ' --new-sn ' . $sn) != 0) {
    } elsif ((system(shell_string($XFree4_scanpci) . ' | '
      } elsif (/^[ \t]*EndSection[ \t]*$/) {
      } elsif (/^[ \t]*ModeLine[ \t]*(\S+)[ \t]*(\S+)[ \t]*(\S+)[ \t]*(\S+)[ \t]*(\S+)[ \t]*(\S+)[ \t]*(\S+)[ \t]*(\S+)[ \t]*(\S+)[ \t]*(\S+)[ \t]*$/) {
    } elsif (/^VERSION\s+=\s+(.+)$/) {
         } elsif (vmware_product() eq 'tools-for-freebsd') {
    } elsif (vmware_product() eq 'tools-for-freebsd'
   } elsif (vmware_product() eq 'tools-for-freebsd') {
  } elsif (vmware_product() eq 'tools-for-freebsd') {
   } elsif (vmware_product() eq 'tools-for-freebsd' and
                  } elsif (vmware_product() eq 'tools-for-linux') {
      } elsif (vmware_product() eq 'tools-for-solaris') {
    } elsif (vmware_product() eq 'tools-for-solaris') {
   } elsif (vmware_product() eq 'tools-for-solaris') {
  } elsif (vmware_product() eq 'tools-for-solaris') {
   } elsif (vmware_product() eq "wgs") {
  } elsif ((vmware_product() eq 'wgs') || (vmware_product() eq 'server')) {
  } elsif ($x_version == 4) {
  } elsif ($x_version == 6) {
  } elsif ($x_version == 7) {
emailAddress            = ssl-certificates\@vmware.com
      $emittedAliases{$key} = 1;
	    $emittedAliases{$val} = 1;
	  $emittedAliases{$val} = 1;
	  $emittedVmnics = 1;
	  $emittedVmxnet = 1;
                     '"Emulate3Buttons"' => '"true"');
# Emulate a simplified basename program
# Emulate a simplified dirname program
# Emulate a simplified ls program for directories
# Emulate a simplified sed program
  # -e must be also tested because we don't want to unlink
      $enableGpmImps2 =
                # enable this behavior only for tools-for-linux. It hasn't
    $enableXImps2 = $enableGpmImps2;
  $enableXImps2 = fix_mouse_file();
Encoding=UTF-8
encrypt_key             = no
# END_OF_CONFIG_DOT_PM
# END OF THE LIBRARY FUNCTIONS
# END OF THE SECOND LIBRARY FUNCTIONS
  } # end of the selinux stuff
# END_OF_UTIL_DOT_PL
EndSection
    EndSubsection
                 . 'Engineering Task Force (IETF) in RFC 1918 (http://www.isi'
		"ensure that the header files for the running kernel " .
      # ensure that we look for the font directory/directories ourselves
               . 'ensure the interface will be brought up properly upon reboot.'
   # Ensure we have a unique backup suffix for this file.
  # Ensure you send the terminating RPC message before you
      #       entries at the top of bora/install/tar/pkg_mgr.pl
# Enumerate devices we are interested on. Returns array of 3 elements:
                 . $ENV{'CC'} . '".' . "\n\n", 0);
                                # $ENV{'PATH'}.
   $ENV{'PATH'} = '/bin:/usr/bin:/sbin:/usr/sbin';
          && ($ENV{'VMWARE_DEBUG'} eq 'yes')) {
      $ENV{'XORGCONFIG'})) {
          eq '') ? 'no' : 'yes';
                              eq 'yes') {
	     eq 'yes') {
            eq 'yes') ? 0 : 1;
  error('');
      error("$0: can't open EULA file: $!\n");
      error("$0: can't open $gHelper{'more'}: $!\n");
      error("ASSERT: Failed to determine my service name.\n") unless defined $service;
    error('Bad character detected in dot_version_compare');
           error("Cannot build for non-running kernel on non-linux OS.");
           error("Cannot build modules only for non-linux OS.");
    error('Can not fork: ' . "$!\n") unless defined $childPid;
       error ('Could not open /proc/ksyms to determine if kernel is compiled '
      error("Could not open $source\n");
    error("Could not print networking configuration.\n");
    error("Could not read $shippedMod\n");
      || error "Error opening " . $font_path . "\n";
      || error "Error opening " . $sys_font_path . "\n";
         || error "Error opening " . $sys_font_path . "\n";
      || error "Error opening " . $tmp_file . "\n";
  error('For more information on how to troubleshoot module-related problems, '
###  error handling
    error ('LIBDIR must be defined before prelink_fix is called');
        error($lmsg . ".\n");
      error($msg);
      error("No Identifier for the screen section in xorg.conf found\n");
         error('No initscript installer found.' . "\n\n");
     error("Please re-run this program after installing the $pkg_name " .
      error('Please re-run this program as the super user.' . "\n\n");
    error('Please re-run this program from a local console shell.' . "\n");
         error('Please shut down any running VMs and run this script again.' .
    error ('Problem extracting version of XFree 4' . "\n\n");
      error("There is no " . $property_file . "!  This file is necessary for "
    error('This configuration program is to be executed in a '
      error('"' . $tmp . '" is not a directory.' . "\n\n");
      error('"' . $tmp . '" should be writable and executable.' . "\n\n");
    error ('Tools is not supported on FreeBSD < 6.3.  ' .
    error('Unable to change the access rights of the file ' . $file . '.'
    error('Unable to change the owner of the file ' . $file . '.'
        error('Unable to continue.' . "\n\n");
      error('Unable to continue.' . "\n\n");
    error('Unable to copy the source file ' . $src . ' to the destination '
    error('Unable to copy the VMware vmware-authd PAM file to ' . $dir
         error('Unable to create symlink "' . $from . '" pointing to file "'
    error('Unable to create the directory ' . $file . '.' . "\n\n");
    error('Unable to create the ' . $typename . ' device ' . $name . ' with '
    error('Unable to find the answer ' . $id . ' in the installer database ('
      error('Unable to find the database file (' . $gInstallerMainDB . ')'
        error("Unable to find " . $YFile . ' or ' . $XFile . ".\n");
      error('Unable to get the access rights of destination directory "' . $dst_dir . '".' . "\n\n");
    error('Unable to get the access rights of source file "' . $src . '".'
      error('Unable to get the last modification timestamp of the destination '
    error("Unable to open $certCnf to create SSL certificate.")
    error("Unable to open /etc/SuSE-release in read-only mode.\n\n");
      error("Unable to open kernel module dependency file\n.");
    error('Unable to open the file "' . $existingXF86Config . '".' . "\n\n");
        error('Unable to open the file "' . $modprobe_file . '".' . "\n\n");
    error('Unable to open the file "' . $newModprobeConf . '".' . "\n\n");
    error('Unable to open the file "' . $newModulesConf . '".' . "\n\n");
    error('Unable to open the file "' . $newPciHandmap . '".' . "\n\n");
    error('Unable to open the file "' . $newUpdateDbConf . '".' . "\n\n");
    error('Unable to open the file "' . $newXF86Config . '".' . "\n\n");
    error('Unable to open the file "' . $systemModprobeConf . '".' . "\n\n");
    error('Unable to open the file "' . $systemModulesConf . '".' . "\n\n");
    error('Unable to open the file "' . $systemPciHandmap . '".' . "\n\n");
    error('Unable to open the file "' . $systemUpdateDbConf . '".' . "\n\n");
    error('Unable to open the installer database ' . $gInstallerMainDB
   error('Unable to open the XFree86 configuration file "'
      error('Unable to read configuration file "' . $backupName . '".' . "\n\n");
      error('Unable to read configuration file "' . $name . '".' . "\n\n");
    error('Unable to read the "/proc/meminfo" file.' . "\n\n");
      error('Unable to remove the file "' . $file . '".' . "\n");
      error("Unable to run 'mkinitrd -h.'\n");
      error('Unable to start services for ' . vmware_product_name() . "\n\n");
            error('Unable to stop services for ' . vmware_product_name() .  "\n\n");
      error('Unable to stop services for ' . vmware_product_name() . "\n\n");
    error('Unable to write configuration file "' . $name . '".' . "\n\n");
    error("VT_OPENQRY ioctl() error: $!\n");
      error( wrap("ERROR: \"$syscmd\" exited with non-zero status.\n" .
      error(wrap($msg, 0));
    error('You are not running ' . $runSystem . '. This version of the product '
      error('You are running Linux version ' . $gSystem{'version_utsclean'}
        error('Your ' . (($gSystem{'smp'} eq 'yes') ? 'processors do'
      error('Your ' . (($gSystem{'smp'} eq 'yes') ? 'processors do'
          $es1371++;
# escape characters.
   # Escape parameters, then join by a single space.
      . ' -E - | ' . shell_string($gHelper{'grep'}) . ' '
	'/etc/conf.modules' : '/etc/modules.conf';
      # /etc/driver_aliases will still be updated and the change will take
                   '/etc/fs/vmhgfs/mount');
                                              "/etc/init.d/networking");
         # /etc/init.d/vmware-tools it conflicts with X starting to early on some
             . ' /etc/name_to_major > /dev/null 2>&1') == 0) {
               . '/etc/netstart'
#       /etc/X11/xdm/Xsession script.  (Even in the GDM case, SUSE's scheme
                       . '/etc/X11/XF86Config') =~ /Section\s+\"ServerLayout\"/i) {
      "/etc/xdg/autostart" => undef,
                                 \%ethernet);
			          \%ethernet);
        $ethernet{'eth' . $ethidx} = $cNICAlias;
        $ethidx++;
    $eula =~ s/(.{50,76})\s/$1\n/g;
    eval {
# Evaluate the paths with respect to the passed in directory
     # Even if close fails, make sure to call restorecon.
      # Even if close fails, make sure to call restorecon on $dst.
    # even if we don't install the libs in the system library path.
  # Even though the Tools services script uses insmod and thus doesn't care for
                # ever been a problem on other guests anyway AFAICT.
# example:
Exec=$execName
# Executes a VMware services script, determined by locations database contents
# Execute the command passed as an argument
    exec @xargs;
      ++$existingDirs;
                                      . 'existing networking configuration '
			      . 'existing private %s %s. Are you sure you '
# existing settings.
          . 'exists and has been modified (possibly by you) since the '
# exists.  If one doesn't exist, then it installs the rule we provide.
       exit 0;
      exit 0;
      exit(0);
  exit(0);
      exit 1;
  exit 1;
            (-e "$xLogFile" ? "Details in $xLogFile" : '') . "\n", 0);
      # Expect the location to be an absolute path.
                     '[EXPERIMENTAL] The VMware FileSystem Sync Driver '
        '[EXPERIMENTAL] The VMware OpenGL Video Driver '
          $explain .=  'If you would like the ' . $src . ' to ' . $dest . ' drag '
        $explain = 'The vmblock module enables dragging or copying files from '
#                       (ex: start, stop, status vm).
  # extension.  Such modules were not removed by the old uninstaller, and
    # extract a path to the untarred tarball installer from our
        # Failed the preinstall check.  result has to equal 0, but don't display
                   . " -F alias $modPath 2>/dev/null";
        # Fallback
   # Fall back to legacy autostart if
                            'FALSE'));
              . 'feature,' . $cModulesBuildEnv . "\n";
	     "feature " . $cModulesBuildEnv . "\n",
# Fedora 5. Instead binary files are put in /usr/bin. Please refer to bug
         @fields = split;
      @fields = split(/[ ]+/);
        @fields = split(' ', direct_command(
      @fields = split(' ', direct_command(
    # file. By providing a non existing file fix_X_conf will generate a correct
                           . 'file ' . $dst . ' and chosen to keep your '
          . 'file ' . $dst . '.' . "\n\n");
    $file = $file . '/device/timeout';
            . 'file ' . $file . '.' . "\n\n");
                 . $file . '" file.', 'yesno', 'no') eq 'no') {
# file for PulseAudio
          . 'file instead of installing a new one?', 'yesno', $default);
               . '" file in the "' . $build_dir . '" directory.' . "\n\n", 0);
	 $fileModified = 1;
             file_name_exist('/etc/modules.conf')) {
      file_name_exist("/etc/redhat-release")) {
      file_name_exist('/etc/X11/' . $ENV{'XF86CONFIG'})) {
           file_name_exist('/usr/X11R6/etc/X11/' . $ENV{'XF86CONFIG'})) {
           file_name_exist('/usr/X11R6/etc/X11/' . $ENV{'XORGCONFIG'})) {
                           . $file . '.old.' . $i .'.' . "\n\n", 0);
                    . $file . '.old.N, where N is a number.  Please delete '
    $file = $orig->{file};
                              files.
               . 'files are now renamed to use the vmxnet device name to '
  %filesBackedUp = db_get_files_to_restore();
  # file.  See bug 347610 for more details.  -astiegmann
    $file = $self->{file};
    $file = shift;
#    files if any paths exist, but we'll use legacy autostart hooks only if
  @files = </sys/block/sd*>;
                          . 'files that match your running kernel?',
      # files to see what is wrong.
    # filesystems, don't add it again.
                     . 'filesystem. This is now obsolete. Please use the '
        $fileToRestore{db_get_answer($cRestorePrefix . $restoreStr)} =
	# file with template one. The template file is also modified with fix_X_conf
                  . "file yourself. For example, if you reconfigure your "
      $filler = ", $answer,";
# Fill the cache with port assignments from /etc/services
  # Finally check the module name.
   # Finally finish up copying our fonts.conf into the tmp file.
# Find a suitable backup name and backup a file
# Find a suitable port for authd
# Find binaries necessary for the server products (esx/gsx)
# findreqlib(objname, libname);
# Find the first file that exists from the list of files.
         # Find the libkms and libdrm used by the system and replace them.
  # First bring up the new screen section, preserving the identifer.
  # First check for PCI IDs/Aliases
              # First check if it's keyboard and we can rename its identifier.
  # First check to ensure that the module is installed by us.
    # First check to make sure we should install this module.
  # First check to see if a PBM is available.  If so, try to install it.
      # First copy vmxnet3s.conf to /kernel/drv/
    # first make sure all the commands are present
#  first matching line on success
  # First read in old config backed up from last uninstallation.
      $first_time = 0;
  # First use the accurate method that are intended to work reliably on recent
    ### five cases
  # Fix for bug 15842.  Always regenerate the network settings because an
  fix_vmlist_permissions();
    # fix_X_conf patches some of the fields of the old config file into the new
    fix_X_conf($XF86tmp, db_get_answer('LIBDIR') . '/configurator/XFree86-'
	fix_X_conf($XF86tmp, db_get_answer('LIBDIR') . '/configurator/XFree86-'
	fix_X_conf($XF86tmp, $xconfig_backup,
	fix_X_conf($XF86tmp, $xconfig_file,
  fix_X_link('3');
    fix_X_link('4');
    fix_X_link('6');
# flags:
# flags are forwarded to db_add_file()
  @fn = grep(!/^\.\.?$/, readdir(LS));
                     . 'following commands: ' . "\n"
	 # following <dir> lines.
	       "following installed... \n" .
  # fonts.conf being used.
            $fonts_found = 1;
    for (;;) {
  for (;;) {
         # For 5 and above on Linux, vmware_drv.so is just a shim which loads vmwlegacy
            . 'for Athlon processors.');
  # for both X & gpm. If gpm doesn't support imps2, or isn't set
# for bridged networks.  These are reserved vmnets.
  # Force a flush after every write operation.
   # Force the path to reduce the risk of using "modified" external helpers
                # For config with newer format.
    # For config with newer format.
                # For config with old format.
    # For config with old format.
	foreach $aline (@lines) {
   # For each architecture, first collect a list of mounted cdroms.
   foreach (@argv) {
  foreach(@backends) {
  foreach $candidate (internal_ls($dir)) {
    foreach (@data_lines) {
    foreach $dev (@list) {
  foreach $dir (sort {length($b) <=> length($a)} keys %gDBDir) {
  foreach $eth (@gAllEthIf) {
  foreach $file (@files) {
  foreach $file (internal_ls($src_dir)) {
   foreach $file (internal_ls($ui_dir)) {
  foreach $file (keys %filesBackedUp) {
  foreach $file (keys %gDBFile) {
  foreach $flag (@Args) {
  foreach $i (@$usedSubnets) {
   foreach (@kdeConfigs) {
   foreach (keys(%autodirs)) {
  foreach $_ (keys(%{$self->{db}})) {
    foreach $line (<FH>) {
  foreach $line (@lines) {
# For each line, look for $objname, and assume that when and if
  foreach $line (@modInfoOutput) {
    foreach $line (<SHIPPED_MOD_VER>) {
    foreach $line (<SYSTEM_MOD_VER>) {
       foreach $modDep ($cKernelModuleDeps{"$mod"}) {
  foreach $mode (@mode_list) {
   # For each mounted cdrom, check if it's vmware guest tools installer,
   foreach my $candidate_mount (@candidate_mounts) {
      foreach my $category (qw(apps mimetypes)) {
	   foreach my $dir (@halDirs) {
   foreach my $dir (@searchDirs) {
      foreach my $entry ( @dircontents ) {
      foreach my $file (internal_ls($dir)) {
         foreach my $icon (internal_ls($srcicondir . '/' . $catdir)) {
  foreach my $indx (0 .. ($max - 1)) {
      foreach my $instPkgName (<OUTPUT>) {
    foreach my $instruction ('^cpuid', 'cmov') {
  foreach my $i (qw(tcp tcp6)) {
    foreach my $key (@gRamdiskModules) {
  foreach my $key (sort keys %$ethAliases) {
    foreach my $lib (split(/\n/, $ldd_out)) {
   foreach my $line (<BLOCK_IN>) {
	foreach my $line (<FD>) {
   foreach my $line (<ORGPCF>) {
      foreach my $line (<OUTPUT>) {
      foreach my $location (@gSuspectedFontLocations) {
    foreach my $mod (@cKernelModules) {
   foreach my $modDir (@modDirs) {
	foreach my $mod (split(/,/,"$1")) {
               foreach my $module (split(' ',$1)) {
      foreach my $mountline (@mountlines) {
                  foreach my $option (keys %mouseOption) {
            foreach my $outputline (@output) {
	 foreach my $pkgName (@pkgList) {
   foreach my $sizedir (internal_ls($srcicondir)) {
            foreach my $string (split(' ', $content)) {
            foreach my $testSuffix (".conf") {
   foreach my $xdmcfg (@xdmcfgs) {
  foreach $name (keys %{$self->{db}}) {
  foreach $name (keys(%{$self->{db}})) {
  foreach $name (@unmarked) {
   foreach $opt (@setOption) {
      foreach $patchKey (@patchKeys) {
      foreach $path (@paths) {
    foreach $program ('make', 'echo', 'tar', 'rm') {
  foreach $program (@programList) {
  foreach $res (sort { $a <=> $b } keys %resolutions) {
    foreach $restoreStr (split(/:/, db_get_answer($cRestoreBackList))) {
   foreach $runlevel (@K_runlevels) {
   foreach $runlevel (@S_runlevels) {
  foreach $sec (@{$templ}) {  
              foreach $sectionLine (@currentSection) {
            foreach $sectionLine (@currentSection) {
   foreach (@sessionsDirs) {
  # for each subnet as well.
   foreach $var (@{$vars}) {
   foreach (@xdmcfgs) {
               . '  For example, the following commands were performed:'
  # For FreeBSD 5.0, we use binaries from the sbin32-5 directory.
  # For FreeBSD 6.0 and higher (which shipped new versions of libc) we use the
  for $i (0 .. $#gManifestNames) {
  for ($i = 0; $i < 100; $i++) {
  for ($i = 0; $i < 255; $i++) {
    for ($i = 0; $i < 4; $i++) {
  for ($i = 0; $i < 4; $i++) {
      for ($i = 0; $i < $aliascount ; $i++) {
  for ($i = 0; $i < $gNumVmnet; $i++) {
  for ($i = 0; $i < length($input); $i++) {
  for ($i = 0; $i < $#subnets + 1; $i++) {
  for ($i = 3; $i >= 0; $i--) {
  for ($i = $gMinVmnet; $i <= $gMaxVmnet; $i++) {
  # For kernel 2.6.0 and above require ../Makefile and ../.config presence.
  # For kernels before 2.6.0 require asm and net subdirectories.  And verify
               . 'form a.b.c.d where a, b, c and d are decimal numbers '
# format of the returned hash:
	  # For minor versions > 5, if the sub is == 99, assume that it's a pre-release for
                 . " form:  jslib-1.xxxxx.\n";
     for $mod (keys %{$gOption{'clobberKernelModules'}}) {
               . 'form XXXXX-XXXXX-XXXXX-XXXXX where X is a digit 0-9 or a '
   for ($platform) {
         # for readability, add a line to separate the above line from the
  # For releases between 5.3 and 6.0 (which were the first to ship with 64-bit
    # For Solaris so that we patch the xorg file shipped
            # for some x config file.
# for the reply.
         # For unknown reasons, eject can succeed, but return error, so
  for ($vHubNr = $gMinVmnet; $vHubNr <= $gMaxVmnet; $vHubNr++) {
                 . 'forwarding on the ' . $machine . '.' . "\n\n", 0);
      # For wgs, don't show the EULA for developers' builds.
      # For XFree 4.2.x, we need to replace xaa and shadowfb
                              . 'for your running kernel.  Do you want this '
        $found = 1;
      $found = 1;
         $foundGnome = 1 if $_ =~ /gnome/;
               $foundit = 1;
         $foundit = 1;
           $foundKde = 1;
         $foundKde = 1 if $_ =~ /kde/;
    # FreeBSD 5.2 after running xf86config in graphic mode
      # FreeBSD, compiled from source, and maybe Gentoo?
         # Freebsd doesn't auto unmount along with eject.
# from 60 to 180, and then modifies the timeout so as not to
               . 'from a kernel source tree that is completely clean.'
                 . 'from the ' . $machine . '.  The first one that is '
      $fslist .= " vmhgfs";
	   $fstype = $3;
         $fullbin = $path . '/' . $bin;
#            function checked for and found (if any).
  # Function that makes the patch needed for the DHCP config file
                    . 'future? (yes/no)', 'yesno', 'yes') eq 'no') {
  @gAllEthIf = ();
$gAnswerSize{'anyethif'} = 4;
$gAnswerSize{'availethif'} = 4;
$gAnswerSize{'binpath'} = 20;
$gAnswerSize{'dirpath'} = 20;
$gAnswerSize{'dirpath_existing'} = 20;
$gAnswerSize{'editorwizardhelp'} = 6;
$gAnswerSize{'headerdir'} = 20;
$gAnswerSize{'inetport'} = 5;
$gAnswerSize{'ip'} = 15;
$gAnswerSize{'netname'} = 32;
$gAnswerSize{'nettype'} = 8;
  $gAnswerSize{'number'} = length($gMaxNumber);
$gAnswerSize{'number'} = length($gMaxNumber);
$gAnswerSize{'serialnum'} = 23;
$gAnswerSize{'timeout'} = 5;
$gAnswerSize{'usergrp'} = 32;
$gAnswerSize{'vmnet'} = length("$gMaxVmnet");
$gAnswerSize{'yesno'} = 3;
$gAnswerSize{'yesnohelp'} = 4;
  @gAvailEthIf = ();
      $gCanCompileModules = 1;
	       "gcc binary.";
	       "   gcc\n" .
      $gcc_path = '';
      $gcc_path = query('What is the location of the gcc program ' .
  # gcc version 4.1.2 20070115 (prerelease) (SUSE Linux)
  # gcc version 4.1.2 20071124 (Red Hat 4.1.2-42)
	       $gcc_version . '" is not supported ' .
$gCheckAnswerFct{'anyethif'} = \&check_answer_anyethif;
$gCheckAnswerFct{'availethif'} = \&check_answer_availethif;
$gCheckAnswerFct{'binpath'} = \&check_answer_binpath;
$gCheckAnswerFct{'dirpath'} = \&check_answer_dirpath;
$gCheckAnswerFct{'dirpath_existing'} = \&check_answer_dirpath_existing;
$gCheckAnswerFct{'editorwizardhelp'} = \&check_answer_editorwizardhelp;
$gCheckAnswerFct{'headerdir'} = \&check_answer_headerdir;
$gCheckAnswerFct{'inetport'} = \&check_answer_inetport;
$gCheckAnswerFct{'ip'} = \&check_answer_ip;
$gCheckAnswerFct{'netname'} = \&check_answer_netname;
$gCheckAnswerFct{'nettype'} = \&check_answer_nettype;
$gCheckAnswerFct{'number'} = \&check_answer_number;
$gCheckAnswerFct{'serialnum'} = \&check_answer_serialnum;
$gCheckAnswerFct{'timeout'} = \&check_answer_timeout;
$gCheckAnswerFct{'usergrp'} = \&check_answer_usergrp;
$gCheckAnswerFct{'vmnet'} = \&check_answer_vmnet;
$gCheckAnswerFct{'yesno'} = \&check_answer_yesno;
$gCheckAnswerFct{'yesnohelp'} = \&check_answer_yesnohelp;
  $gConfFlag = $gRegistryDir . '/not_configured';
      $gDBAnswer{$1} = '';
      $gDBAnswer{$1} = $2;
      && ($gDBAnswer{'ALT_MOD_DIR'} eq 'yes')) {
  $gDBAnswer{$id} = $value;
    $gDBAnswer{'NESTED'} = 'yes';
      $gDBDir{$1} = '';
  $gDBDir{$dir} = '';
      $gDBFile{$1} = 0;
      $gDBFile{$1} = $2;
    $gDBFile{$file} = 0;
    $gDBFile{$file} = $statbuf[9];
         $gDBUserFile{$1} = 0;
      $gDBUserFile{$file} = 0;
    $gDBUserFile{$file} = 0;
#      - gdm (2.2.3 and above)
#      gdm:             None.  (gdm mechanism used install_symlink, so that will be
  # Generate a list of used subnets and clear out the ones that have already
  # Generate the table of private class C subnets
  # Generic spots for the wrapper to access so it won't need to know lib32-6, etc.
  # Get all networks
# Get a network name from the user
        && get_answer('Current access permissions on directory "' . $dst_dir
          get_answer('Do you want to force a shutdown on the running VMs?',
    # (get_answer, get_persistent_answer) routines into util.pl eventually.
       get_answer('It looks like you are trying to run this program in ' .
# Get a valid non-persistent answer to a question
# Get a valid persistent answer to a question
    get_best_resolution($cXConfigFile, $width, $height);
                           getDesktopConsoleName(), getIconFileName(),
                        getDesktopFileName(), getDesktopConsoleName(),
                        getIconFileName(), $vmwareBinary,
     get_network_name_answer($vHubNr, 'Bridged');
     get_network_name_answer($vHubNr, 'HostOnly');
     get_network_name_answer($vHubNr, 'NAT');
      # Get new path.
      (get_persistent_answer(
        get_persistent_answer('Do you wish to make additional changes to the '
        get_persistent_answer('Do you wish to make any changes to the current '
	&& get_persistent_answer('[EXPERIMENTAL] The VMware Host-Guest Filesystem'
	|| get_persistent_answer('None of the pre-built ' . $name . ' modules for '
  get_persistent_answer('Please specify a name for this network.',
    get_persistent_answer('What is the location of the directory of C header '
  get_proc_tcp_entries();
# Gets a free virtual network number.  Gets the lowest number available.
# Gets the virtual network number where Samba is located.
  # Get the list of available ethernet interfaces
  # Get the list of available ethernet interfaces by checking the all
# Get the list of subnets that are already used by virtual networks
# Get the list of subnets used by all the hostonly networks
# Get the list of subnets used by all the nat networks
    # Get the new settings
    $gFirstModuleBuild = 0;
				       "\"$gGccPath\" $appLoaderArgs") == 0) {
      $gGccPath = getValidGccPath($gGccPath, $modconfig, $appLoaderArgs);
    $gGccPath = `$modconfig --get-gcc $appLoaderArgs`;
      $gHelper{'chkconfig'} eq '') {
  $gHelper{'chkconfig'} = internal_which('/sbin/chkconfig');
  $gHelper{'gcc'} = '';
          $gHelper{'gcc'} = DoesBinaryExist_Prompt('gcc');
      $gHelper{'gcc'} = internal_which('egcs');
    $gHelper{'gcc'} = internal_which($ENV{'CC'});
    $gHelper{'gcc'} = internal_which('gcc');
        $gHelper{'gcc'} = internal_which('kgcc');
	$gHelper{'gcc'} = $newGcc;
            $gHelper{'gcc'} .'" version "' . $gSystem{'gcc_version'} .'" anyway?';
                . $gHelper{'grep'} . ' -q imps2')) == 0 ? 'yes': 'no';
  $gHelper{'insserv'} = internal_which('insserv');
    $gHelper{'more'} = '';
      $gHelper{'more'} = DoesBinaryExist_Prompt('more');
    # $gHelper{'more'} is already a shell string
        $gHelper{'more'} = join(' ', @tokens);
      $gHelper{'more'} = shell_string($gHelper{'more'});
        $gHelper{$program} = DoesBinaryExist_Prompt($program);
      $gHelper{$program} = DoesBinaryExist_Prompt($program);
    $gHelper{'svcprop'} = DoesBinaryExist_Prompt('svcprop');
    $gHelper{"vmware"} = DoesBinaryExist_Prompt("vmware");
  $gInstallerMainDB = $gRegistryDir . '/locations';
          . $gInstallerMainDB . ').  You may want to re-install '
      $gIs64BitX = 1;
	      . ($gIs64BitX ? '_64' : '');
			      ($gIs64BitX ? '_64' : '') . '/11-x11-vmmouse.fdi',
			      ($gIs64BitX ? '_64' : '') . '/hal-probe-vmmouse',
			 ($gIs64BitX ? '_64' : '') . '/vmmouse_detect',
                       ($gIs64BitX ? '_64' : '') . '/vmmouse_drv.o',
           ($gIs64BitX ? '_64' : '') . '/vmmouse_drv.o',
                          ($gIs64BitX ? '_64' : '') . '/vmmouse_drv.so',
                       ($gIs64BitX ? '_64' : '') . '/vmmouse_drv.so',
                       ($gIs64BitX ? '_64' : '') . '/vmmouse_drv' . $suffix,
                       ($gIs64BitX ? '_64' : '') . '/vmware_drv.o',
		   ($gIs64BitX ? '_64' : '') . '/vmware_drv.o',
                          ($gIs64BitX ? '_64' : '') . '/vmware_drv.so',
                       ($gIs64BitX ? '_64' : '') . '/vmware_drv.so',
                       ($gIs64BitX ? '_64' : '') . '/vmware_drv' . $suffix,
                              ($gIs64BitX ? '_64' : '') . '/vmwlegacy_drv.so',
# Given a bunch of db vars, organize them into a sequence of val=key pairs so the
      $gKernelHeaders = getValidKernelHeadersPath($gKernelHeaders, $modconfig,
    $gKernelHeaders = `$modconfig --get-kernel-headers $appLoaderArgs`;
		   "\"$gKernelHeaders\".\n", 0);
    $gLinkCount = $gLinkCount + 1;
# Global variables
  <glob pattern="*.vmdk"/>
  <glob pattern="*.vmsn"/>
  <glob pattern="*.vmtm"/>
  <glob pattern="*.vmx"/>
  <glob pattern="*.vmxf"/>
  $gLogDir = '/var/log/vmware';
    $g_major = $1;
	  $g_major = $1;
      $gManifestInstFlags[$i] = $installed_flag;
  $gMaxNumber = $i;
                            . '(' . $gMinVmnet . '-' . $gMaxVmnet . ')',
   # GNOME's GDM (legacy)
	       "$gNonVmwareModules{$mod}.\n" .
              $gNonVmwareModules{$result} = "$modPath";
    $gNoXDrivers = 1; # Drivers are upstreamed
      $gNoXDrivers = 1; # Use this variable to alert about missing drivers
    $gNoXDrivers = 1; # Use this variable to alert about missing drivers
	     $gNoXDrivers = 1; # Use this variable to alert about missing drivers
  # $gNoXDrivers set to 1 means VMware tools didn't include
  $gOption{'clobberKernelModules'} = {};
	     $gOption{'clobberKernelModules'}{"$modDep"} = 'yes';
	  $gOption{'clobberKernelModules'}{"$mod"} = 'yes';
  $gOption{'clobber-xorg-modules'} = 0;
         $gOption{'clobber-xorg-modules'} = 1;
  $gOption{'compile'} = 0;
         $gOption{'compile'} = 1;
         $gOption{'create_shortcuts'} = 0;
  $gOption{'create_shortcuts'} = 1;
  $gOption{'default'} = 0;
         $gOption{'default'} = 1;
      $gOption{'default'} = 1;
	$gOption{'default'} != 1) {
  $gOption{'enable-opengl'} = 0;
         $gOption{'enable-opengl'} = 1;
      ($gOption{'enable-opengl'} == 1) &&
                    $gOption{'kernel_version'})
  $gOption{'kernel_version'} = '';
                   (($gOption{'kernel_version'} eq '')?
             . (($gOption{'kernel_version'} ne '')?
         $gOption{'kernel_version'} = shift(@ARGV);
         $gOption{'make-all-net'} = 1;
  $gOption{'modules_only'} = 0;
         $gOption{'modules_only'} = 1;
  $gOption{'overwrite'} = 0;
         $gOption{'overwrite'} = 1;
  $gOption{'prebuilt'} = 0;
         $gOption{'prebuilt'} = 1;
         $gOption{'prefix'} = $3;
  $gOption{'preserve'} = 0;
         $gOption{'preserve'} = 1;
         $gOption{'rpc-on-end'} = 1;
       $gOption{'rpc-on-end'} == 1) {
  $gOption{'rpc-on-end'} = 1;
         $gOption{'skip-stop-start'} = 1;
       $gOption{'skip-stop-start'} = 1;
  $gOption{'skip-stop-start'} = vmware_product() eq 'server';
       $gOption{'tools-switch'} == 0) {
  $gOption{'tools-switch'} = 0;
         $gOption{'tools-switch'} = 1;
# Go through the /etc/vmware/vm-list file and set permissions correctly
    $gotKeyboardSection = 1;
		   $gotKeyboardSection = 1;
              $gotMouseSection = 1;
    $gotMouseSection = 1;
                        $gotServerFlagsSection == 0) {
                     $gotServerFlagsSection = 1;
                  $gotServerFlagsSection = 1;
    $gotServerFlagsSection = 1;
    $gotServerLayout = 1;
	    $gotServerLayout = 1;
        $gPortCache{$2} = 2;
          $gPortCache{hex($1)} = 1;
    $gRegistryDir = '/etc/vmware';
    $gRegistryDir = '/etc/vmware-tools';
                        $gRegistryDir . '/ssl',
  $gStateDir = $gRegistryDir . '/state';
    $gSystem{'athlonKernel'} = isAthlonKernel($version, $patchLevel);
    $gSystem{'athlonKernel'} = 'no';
    $gSystem{'build_bug'} = (direct_command(shell_string($gHelper{'grep'}) . ' '
    $gSystem{'distribution'} = distribution_info();
             . (($gSystem{'gcc_version'} =~ /^3\./) ? 'yes' : 'no')))) {
	  $gSystem{'gcc_version'} =~ /^(\d+)\./;
    $gSystem{'gcc_version'} = get_gcc_version($gHelper{'gcc'});
	$gSystem{'gcc_version'} = get_gcc_version($newGcc);
     $gSystem{'gcc_version'} ne 'no' and
      $gSystem{'invm'} = 'no';
      $gSystem{'invm'} = 'yes';
      $gSystem{'page_offset'} = '0000010000000000';
      $gSystem{'page_offset'} = 'C0000000';
        $gSystem{'page_offset'} = $page_offset;
	$gSystem{'page_offset'} = undef;
    $gSystem{'product'} =
    $gSystem{'resolution'} =
      $gSystem{'smp'} = (direct_command(shell_string($gHelper{'uname'})
                   . (($gSystem{'smp'} eq 'yes') ? 'multiprocessor'
      $gSystem{'smp'} = 'no';
  $gSystem{'system'} = direct_command(shell_string($gHelper{'uname'}) . ' -s');
    $gSystem{'system'} = 'Solaris';
                    $gSystem{'uts_release'}:
             .  $gSystem{'uts_release'};
      $gSystem{'uts_release'} =~ /^(\d+)\.(\d+)/ &&
	     && $gSystem{'uts_release'} =~ /^(\d+)\.(\d+)/
  $gSystem{'uts_release'} = direct_command(shell_string($gHelper{'uname'})
               . $gSystem{'uts_release'} . '" directory (the usual '
  $gSystem{'uts_version'} = direct_command(shell_string($gHelper{'uname'})
            || $gSystem{'uts_version'} eq $prop{'UtsVersion'})) {
      $gSystem{'versioned'} = (direct_command(shell_string($gHelper{'grep'}) . ' '
                        ($gSystem{'versioned'} eq 'yes')
      $gSystem{'versioned'} = 'yes';
     $gSystem{'version_integer'} >= kernel_version_integer (2, 6, 19)) {
          && $gSystem{'version_integer'} < kernel_version_integer(2, 6, 22) ) {
      && $gSystem{'version_integer'} < kernel_version_integer(2, 6, 22) ) {
      $gSystem{'version_integer'} >= kernel_version_integer(2, 6, 25) &&
       $gSystem{'version_integer'} >= kernel_version_integer(2, 6, 6) ) {
    $gSystem{'version_integer'} = kernel_version_integer($version, $patchLevel,
    $gSystem{'version_utsclean'} = $version . '.' . $patchLevel . '.'
    # guaranteed that uname(1) has been found
				 . 'guest OS. Do you wish to enable this feature?',
        $gVmciBuildDir = '';
          $gVmciBuildDir = $build_dir;
        $gVmciBuildDir = $build_dir;
    $gVmwareInstalledModules{"$name"} = $mod_path;
              $gVmwareInstalledModules{$result} = "$modPath";
                          $gXMouseDriverFile);
                       $gXMouseDriverFile);
       # gxMouseDriverFile and gxVideoDriverFile have already been set for Solaris
      $gXMouseDriverFile = "$cX64ModulesDir/input/vmmouse_drv.o";
	  $gXMouseDriverFile = "$cX64ModulesDir/input/vmmouse_drv.o";
        $gXMouseDriverFile = "$cXModulesDir/input/vmmouse_drv.o";
      $gXMouseDriverFile = "$cXModulesDir/input/vmmouse_drv.o";
	  $gXMouseDriverFile = "$cXModulesDir/input/vmmouse_drv.o";
           $gXMouseDriverFile, \%p, 1);
		   $gXMouseDriverFile, \%p, 1);
          $gXMouseDriverFile = "/usr/X11/lib/modules/input/amd64/vmmouse_drv.so";
        $gXMouseDriverFile = "/usr/X11/lib/modules/input/vmmouse_drv.so";
          $gXMouseDriverFile = $xorg_modules_dir . '/input/vmmouse_drv.so';
                          $gXVideoDriverFile);
                       $gXVideoDriverFile);
      $gXVideoDriverFile = "$cX64ModulesDir/drivers/vmware_drv.o";
	  $gXVideoDriverFile = "$cX64ModulesDir/drivers/vmware_drv.o";
        $gXVideoDriverFile = "$cXModulesDir/drivers/vmware_drv.o";
      $gXVideoDriverFile = "$cXModulesDir/drivers/vmware_drv.o";
	  $gXVideoDriverFile = "$cXModulesDir/drivers/vmware_drv.o";
                   $gXVideoDriverFile, \%p, 1);
		   $gXVideoDriverFile, \%p, 1);
          $gXVideoDriverFile = "/usr/X11/lib/modules/drivers/amd64/vmware_drv.so";
        $gXVideoDriverFile = "/usr/X11/lib/modules/drivers/vmware_drv.so";
          $gXVideoDriverFile = $xorg_modules_dir . '/drivers/vmware_drv.so';
  # hal daemon instead of the init scripts.  Check for /etc/init to
	$halScript = "$initDir/hal";
	$halScript = "$initDir/haldaemon";
  # Handle cases where there is no config file.
				$handmap_file . $cBackupExtension);
                        . 'hand.' . "\n\n", 0);
	  # Hardcoded because FreeBSD's mount(8) expects mounting apps to be /sbin/mount_fs
     # Hardcoded because mount(8) expects mounting apps to be /sbin/mount.fs
    # has a vmxnet device), and save the module loading and /dev symlinks
	 #       has been sent.  Otherwise the VMX will think you are
      $hasGnome =
      $hasGnome = 1 if $#tmpArray != -1;
       ($hasGnome && !$foundGnomeStart) ||
# Hashes to track vmware modules.
      $hasKde =
      $hasKde = 1 if $#tmpArray != -1;
       ($hasKde && !$foundKdeStart)) {
  # have already backed up the existing X config file.  For case 1, we don't
            . 'have a Time Stamp Counter.  ' . vmware_product_name()
	       "have been installed by the VMware installer.  " .
                     . 'have kernel header files in your /usr/src directory, '
   # have to add /usr/X11R6/lib/modules to work with SLES 10 which has xorg
    # have to bail out.
      $header = '<';
      $header = ' ';
      $headerdir = $cKernelModuleDir . '/' .
    $headerdir = $cKernelModuleDir . '/preferred/build/include';
                          'HEADER_DIR', 'headerdir', $headerdir);
        $headerdir = '/usr/src/linux/include';
      $header_page_offset = $1;
    $header_smp = direct_command(
  $header_smp = direct_command(shell_string($gHelper{'grep'}) . ' CONFIG_SMP '
                   . (($header_smp eq 'yes') ? 'multiprocessor'
    $header_smp = ($header_smp eq '1') ? 'yes' : 'no';
    $header_smp =~ s/^$pattern (\S+).*$/$1/;
  # headers.  We use our Makefiles to build kernel modules on these kernels,
    $header_version_uts = direct_command(
                   . $header_version_uts . ') does not match your running '
    $header_version_uts =~ s/^$pattern \"([^\"]*)\".*$/$1/;
# Helper function to create SSL certificates
    $helpString = 'Networking will allow your virtual machines to use a '
                 . 'help you quickly add new virtual networks.  However, you '
	 #        Hence this is a moot argument.
  # Hence, we can return yes if our kernel version is 2.6.19 or greater.
  # here as an extra variable and vmware_version() wil return
    #  Here:   $ cp vmxnet /kernel/drv
                  . 'here.' . "\n\n";
      # Here temp files are not removed because user may manually copy files
      # Here temp files are not removed because user may want to check the
    #  Here:   $ /usr/sbin/add_drv -n -m '* 0600 root sys' \
  # Here we set some defaults for guest.commands.*
  # higher, and both it and the toolbox are run via wrapper scripts (like
                     . 'highly recommended that you use it as a bridged '
                     . 'highly recommended that you use it as a host-only '
          . 'Hit enter to continue.', '', 0);
#    Hook into /etc/X11/xinit/xinitrc.common to launch vmware-user.
#    Hook into Xsession.d/*.sh to launch vmware-user.
    HorizSync       1-10000
  $hostaddr = $gDBAnswer{'VNET_' . $vHubNr . '_HOSTONLY_HOSTADDR'};
	  $hostaddr = get_answer('What will be the IP address of '
# Host configurator for VMware
   # Hostd config file
   #Hostd proxy file:
             'host filesystem please use the VMware shared folders.' .
                                       . '_HOSTONLY_HOSTADDR');
                                          . '_HOSTONLY_HOSTADDR'), $netmask);
  # hostonly network.
  # Host only networking
# hostonly: Set to indicate a desire to count the number of hostonly networks
                     . $hostonly_subnet . '.'
         $hostonly_subnet = compute_subnet($hostonly_addr, $hostonly_mask);
            . "Host resolution detected as \"$width x $height\".\n"
  # However, do not fail on failing to rmmod as there are plenty of
   ($httpAnswer, $httpsAnswer) = query_user_for_proxy_ports();
  # http://docs.fedoraproject.org/release-notes/f9/en_US/sn-Desktop.html#vmmouse-driver
                                        $httpProxy);
    $httpProxy = db_get_answer('HTTP_PROXY_PORT');
                                        'HTTP_PROXY_PORT', 'inetport',
     $httpProxy = shift(@gDefaultHttpProxy);
                                        $httpsProxy);
    $httpsProxy = db_get_answer('HTTPS_PROXY_PORT');
                                        'HTTPS_PROXY_PORT', 'inetport',
     $httpsProxy = shift(@gDefaultHttpSProxy);
        $i++;
                        . 'ICMP ping packets from a ' . $machine . ' at the '
                               $icon);
      "ICONDIR", "dirpath", "/usr/share/icons");
Icon=$iconName
   $iconName =~ s/\.[^.]*$//;
              $id++;
      $identifier = '';
        $identifier = $1;
    Identifier      "vmware"
    Identifier  "VMware Keyboard"
    Identifier "VMware Mouse"
    Identifier "VMware ServerLayout"
	Identifier  "XWorkAround"
# Identify specific characteristics of the SuSE distro we're running on.
   # Identify where the vmwgfx_drv.so display driver lives
            # I don't think there are actually ever comments in /etc/mnttab.
    if ($@) {
    if ($? != 0) {
      if ($? == 0 and not $str =~ /stop\/waiting/) {
     if (0 == system(shell_string($gHelper{'chkconfig'}) . ' '
     if (0 == system(shell_string($gHelper{'insserv'}) . ' '
      if ("$1" eq $mod) {
        if ($2 eq "06") {
        if ('301548' != 0) {
         if (/ACEDataUser>(\w+)</) {
  if ($addDummyPrinter eq 'true') {
    if ($addXconfToDb == 1) {
    if ($alias eq '' ||
  if ($answer=~/^[^-][a-zA-Z0-9.\@\$_-]+$/) {
  if ($answer =~ /^\d+$/) {
  if (($answer !~ /^\d+$/) || ($answer < 0) || ($answer > 65536)) {
  if (($answer =~ /^\d+$/) && ($answer > 0) && ($answer <= $gMaxNumber)) {
  if ($answer=~/^-?\d+$/ && $answer >= -1) {
  if ($answer eq '') {
    if ($answer eq 'bridged') {
      if (($answer eq 'editor') || ($answer eq 'wizard')) {
      if ($answer eq 'no') {
    if ($answer eq 'no') {
    if (($answer eq 'no') || ($answer eq 'yes')) {
      if ($answer eq 'yes') {
    if ($answer eq 'yes') {
  if ($answer eq 'yes') {
  if ($answer eq 'yes' && count_hostonly_networks() == 0) {
  if ($answer eq 'yes' && count_nat_networks() == 0) {
    if ($answer >= $gMinVmnet && $answer <= $gMaxVmnet) {
  if ($answer =~ m|^/usr/include(/.*)?$|) { #/# Broken colorizer.
    if ($answer ne '') {
  if ($answer ne '' &&
  if ($answer ne '') {
  if ($answer =~ /$re/) {
    if (/^answer (\S+) (.+)$/) {
    if ($answer && ($space = check_disk_space($srcDir, $answer)) < 0) {
# If any of this fails, return undef
#    If applicable, we'll create a vmware-user launch script in the system's
#    If applicable, we'll insert a few lines into xinitrc.common, and all
#    If applicable, we may insert vmware-user autostart hooks.
#    If applicable, we place a script in /etc/X11/xinit/xinitrc.d, causing gdm
#    If applicable, xdm will now launch vmware-user before executing its usual
      if ( $arg =~ /[^A-Za-z_0-9-=\/,]/ ) {
    if ("$arr1[$indx]" ne "$arr2[$indx]") {
    if ($availableRAMInMB < 128) {
    if ($base_port == $port) {
    if (/(.*)\b(\d+)\/(tcp)\b/i) {
    if ($best_resolution eq $mode) {
    if (block_insert($prelink_file, '^ *-b', $cMarkerBegin,
         if (block_match($xdmcfg, "!$chompedMarkerBegin")) {
      if (block_match($xinitrcCommon, $chompedMarkerBegin)) {
      if (block_match($xSessionDst, $chompedMarkerBegin)) {
      if ($bridged && is_bridged_network($i)) {
    if ($bridge_flag && is_bridged_network($i)) {
  if (!$bridge_flag && !$nat_flag && $hostonly_flag) {
  if ($buf2 ne $cELFMAG) {
      if ($buf =~ /--rebuild-mime-info-cache/) {
  if (build_module($name, $mod_dir . '/source') eq 'no') {
        if ($canBuild eq 'yes') {
    if (can_build_module($name) ne "yes"
            if ($category eq 'mimetypes') {
  if (certificateExists($certLoc, $openssl_exe, $certPrefix)) {
  if ($changeXConf == 1) {
  if ($char eq "\n") {
      if (check_answer_headerdir($headerdir, 'default') eq '') {
    if (check_gcc_version() eq 'no') {
    if (!check_if_port_active($httpProxy) &&
  if (check_if_port_active($port)) {
    if (check_if_port_free($answer) != 1) {
  if (check_if_port_free($answer) != 1) {
      if (check_link($file, $file . db_get_answer($cSwitchedToHost)) eq 'yes') {
      if (check_link($file, $filesBackedUp{$file}) eq 'yes') {
      if (check_mountpoint_for_tools($mountpoint)) {
  if ($childPid = fork()) {
    if (chmod(0754, $cf) != 1) {
  if (chmod($mode, $file) != 1) {
  if (chown($uid, $gid, $file) != 1) {
  if ($chr == 1) {
      if ($cmd eq 'alias') {
      if ($cmd eq 'vmxnet') {
    if (-c $name) {
	 if ($compat == 0) {
	 if ($compat == 1) {
	 if ($compat == 3) {
	 if ($compat >= 4) {
         if ($compat >= 5) {
  if ($Config::Config{archname} =~ /^(x86_64|amd64)-/) {
    if (!$config->readin($backupName)) {
    if (!$config->readin($name)) {
   if ((configure_autostart_legacy_suse($sleepingAgentCommand) == 0) &&
    if (configure_hostd()) {
  if (configure_module('vmmon') eq 'no') {
    if (configure_module('vmnet') eq 'no') {
               . 'ifconfig_vxn0="dhcp"' . "\n"
  if (!$config->writeout($name)) {
  if ($count == 0) {
  if (count_all_networks() > 0) {
  if (count_all_networks() == 0 && $#gAllEthIf == -1) {
  if (create_dir($dst_dir, $cFlagDirectoryMark) == $cDirExists) {
      if (create_dir('/hgfs', $cFlagDirectoryMark | $cFlagFailureOK)
        if (create_dir('/mnt/hgfs', $cFlagDirectoryMark | $cFlagFailureOK)
      if (create_dir('/mnt/hgfs', $cFlagDirectoryMark | $cFlagFailureOK)
    if ($createNewXConf == 0) {
  if ($createNewXConf == 1) {
      if (-d $_) {
    if (-d $answer) {
  if (db_get_answer_if_exists('EULA_AGREED')) {
    if (db_get_answer_if_exists($flag)) {
    if (db_get_answer_if_exists('TERSE')) {
    if (db_get_answer_if_exists('UPSTARTJOB')) {
   if (db_get_answer_if_exists('UPSTARTJOB')) {
    if (db_get_answer('NETWORKING_EDITOR') eq 'editor' &&
  if (db_get_answer('NETWORKING') eq 'no') {
  if (db_get_answer('NETWORKING') eq 'yes' && count_bridged_networks() == 0) {
  if (db_get_answer('NETWORKING') ne 'no') {
      if (db_userfile_in($dst)) {
   if (!db_userfile_in($file)) {
  if (-d $cKernelModuleDir . '/'. $gSystem{'uts_release'}) {
  if (-d $dir) {
	      if (-d $dir) {
   if (! -d $eclipseSrcDir) {
    if (defined($6)) {
    if (defined($answer)) {
  if (defined $answer and "$answer" eq 'yes' and
  if (defined($availableRAMInMB)) {
  if (!defined($backupDir)) {
    if (!defined($cf) || (not -e $cf) || (not -f $cf)) {
    if (defined $clobberKMod and $clobberKMod eq 'yes') {
   if (!defined(db_file_ts($file)) || db_file_ts($file) == 0) {
         if (defined(db_get_answer_if_exists('APPENDED_FILES'))) {
  if (defined(db_get_answer_if_exists("AUTHDPORT"))) {
    if (defined db_get_answer_if_exists($cRestoreBackList)) {
  if (defined db_get_answer_if_exists($cRestoreBackList)) {
      if (defined db_get_answer_if_exists($cRestorePrefix . $restoreStr)) {
  if (!defined(db_get_answer_if_exists($cSwitchedToHost))) {
  if (defined(db_get_answer_if_exists($cXPreviousResolution))) {
  if (defined(db_get_answer_if_exists('HTTP_PROXY_PORT')) &&
  if ((defined(db_get_answer_if_exists('INSTALL_CYCLE')) &&
    if (defined db_get_answer_if_exists($modConfKey) and
    if (defined db_get_answer_if_exists($prefix . $bin)) {
       if (defined(db_get_answer_if_exists('VMCI_CONFED')) &&
    if (defined(db_get_answer_if_exists('VMXNET_CONFED')) &&
	 if (defined db_get_answer_if_exists('VNETLIB_CONFED')) {
   if (defined($desktopdir)) {
    if (defined($doSilent) && $doSilent) {
         if (!defined($dstDrm)) { $dstDrm = $usrlibdir . $libdrm; }
         if (!defined($dstKms)) { $dstKms = $usrlibdir . $libkms; }
  if (defined($ENV{'CC'}) && (not ($ENV{'CC'} eq ''))) {
    if (defined($ENV{'PAGER'})) {
  if (((defined $ENV{'REMOTEHOST'} and ($ENV{'REMOTEHOST'} ne '')) or
    if (defined $ENV{'SUDO_USER'}) {
      if (   defined($ENV{'VMWARE_DEBUG'})
  if (defined $ENV{'XF86CONFIG'} &&
  if (defined $ENV{'XORGCONFIG'} && file_name_exist('/etc/X11/' .
	if (defined($ethAliases->{$val})) {
      if (defined($fields[0])) {
      if (defined($fields[2]) && $fields[2] =~ m|^/|) {
  if (!defined($file)) {
  if (defined($gDBAnswer{'ALT_MOD_DIR'})
  if (defined($gDBAnswer{$id})) {
  if (defined($gDBAnswer{'NETWORKING'}) && count_all_networks() > 0) {
  if (defined($gDBAnswer{'NETWORKING'}) && get_samba_net() != -1) {
    if (defined($gDBAnswer{'VNET_' . $vHubNr . '_SAMBA'})) {
      if (defined $gDBFile{$1}) {
    if (defined($gHelper{'insmod'})) { # Linux
    if (defined($gHelper{'modprobe'})
    if (defined($gHelper{'modprobe'})) { # Linux
  if (defined $gNonVmwareModules{"$mod"}) {
              if (defined $gNonVmwareModules{$result}) {
        if (!defined($gPortCache{$1}) || $gPortCache{$1} eq 2) {
      if ((!defined($gPortCache{$2})) && ($1 !~ /^vmware/i)) {
  if (defined($gPortCache{$port}) && $gPortCache{$port} == 1) {
  if (defined($gPortCache{$port}) && $gPortCache{$port} == 2) {
      if (defined($gSystem{'page_offset'}) and
    if (defined($gSystem{'page_offset'}) and
   if (defined $gSystem{'system'} and
  if (defined ($gSystem{'version_integer'}) and
  if (defined $gVmwareInstalledModules{"$mod"}) {
  if (defined($hostaddr) && defined($netmask)) {
   if (!defined($httpAnswer)) {
    if (!defined($id)) {
  if ( defined($initmodfile) && file_name_exist($initmodfile) && defined($content)) {
      if (defined(isKernelBlacklisted())) {
   if (!defined($jslib)) {
  if (defined($kernel_gcc_version)) {
  if (defined($libdir)) {
    if (defined($line = <PROC_VERSION>)) {
  if (!defined $linkDest) {
    if (defined($list)) {
   if (!defined($markerBegin) || !defined($markerEnd)) {
	 if (defined $modDep) {
    if (defined $modName) {
        if (defined $modPath) {
  if (defined($msg) and get_answer($msg, 'yesno', 'no') eq 'no') {
     if (defined($name)) {
    if (defined($name)) {
        if (defined($nameMap{$name})) {
   if (defined($pixmapdir)) {
          if (defined($PREF{'commentChanges'})) {
        if (defined($PREF{'commentChanges'})) {
  if (defined $prelink_file) {
       if (defined ($prop{'AthlonKernel'}) and
   if (!defined($property_file) || ! -f $property_file) {
    if (defined($prop{'ModVersion'}) and
    if (defined($prop{'UtsMachine'})) {
    if (defined($prop{'variant'}) and $prop{'variant'} eq 'sle' and
     if (((defined($prop{'variant'}) and $prop{'variant'} eq 'sle') or
  if (!defined($reserved)) {
  if (!defined($result)) {
  if (!defined($ret)) {
  if (defined($sec->{header})) {
  if (defined($sec->{pattern})) {
      if (defined($sec->{sublist})) {
      if (defined($sec->{title})) {
    if (defined($sec->{values})) {
      if (!defined($self->{db}{$name})) {
  if (defined($self->{db}{$name})) {
      if (   defined($statbuf[6])
   if (defined($statbuf[9])) {
    if (!defined($status)) {
  if (defined $syscmd and $syscmd ne '') {
  if (defined($text)) {
  if (!defined($val)) {
  if (defined($val)) {
   if (defined($x11Base)) {
         if (defined $xconfig_file and -e $xconfig_file) {
  if (defined $xconfig_file_name) {
  if (!defined($xorgSubVer)) {
      if ($del) {
  if (-d '/etc/init' and $servicePath ne '') {
        if ($dev eq '10222000') {
            if ($device =~ /vmwaretools$/) {
  if (-d $file) {
  if (!-d $gStateDir) {
  if (-d internal_dirname($dest)) {
      if (-d internal_dirname($destDir)) {
  if (-d internal_dirname($x_server_link)) {
  if (direct_command(
                    if (direct_command(shell_string($gHelper{'grep'}) . ' '
      if (direct_command(shell_string($gHelper{'grep'}) . ' '
    if (direct_command(shell_string($gHelper{'grep'}) . ' '
    if (direct_command(shell_string($gHelper{'isainfo'}) . ' -b') =~ /64/) {
    if (direct_command(shell_string($gHelper{'isainfo'}) . ' -k') =~ /amd64/) {
  if (direct_command(shell_string($gHelper{'uname'}) . ' -m') =~ /(x86_64|amd64)/) {
    if (direct_command(shell_string(vmware_check_vm_app_name())) =~ /good/) {
         if ( -d $jobPath ) {
        if (-d $kdeAutostart) {
         if (-d $location) {
      if (-d $modDir) {
     if (dot_version_compare("$freeBSDVersion", '7.0') >= 0) {
  if (dot_version_compare("$freeBSDVersion", '8.0') >= 0) {
      if (dot_version_compare($verStr, "0.9.19") ge 0) {
    if (-d $src_dir . '/' . $file) {
         if (! -d $srcicondir . '/' . $catdir) {
      if (! -d $srcicondir . '/' . $sizedir) {
         if ($dstDrm eq '') { $dstDrm = $usrlibdir . $libdrm; }
         if ($dstKms eq '') { $dstKms = $usrlibdir . $libkms; }
   if (-d $xinitrcd) {
	  if ( -d $xorgModSrcDir ) {
   if (-d $xSessionD) {
    if (-e $answer . '/linux/utsrelease.h') {
  if (! -e $certLoc) {
   if ($eclipseDestDir eq "") {
    if (-e $compizfile && open(IN, $compizfile)) {
  if (-e '/dev/.devfs' || -e '/dev/.udev.tdb' || -e '/dev/.udevdb' || -e '/dev/.udev') {
  if (-e '/etc/debian_version') {
  if (-e '/etc/mandrake-release') {
  if (-e '/etc/redhat-release') {
  if (-e '/etc/SuSE-release') {
  if (-e '/etc/turbolinux-release') {
    if (-e $file) {
  if (-e $issue) {
	      if ($eject_cmd eq '') {
	 if ($eject_cmd ne '') {
         if ($eject_failed && check_mountpoint_for_tools($mountpoint)) {
  if ($emittedVmnics ==  0) {
  if ($emittedVmxnet == 0 ) {
    if ($enableGpmImps2 eq 'yes' ) {
  if (-e $name) {
            if ($entry =~ /vmware-freebsd-tools\.tar\.gz$/) {
            if ($entry =~ /VMwareTools-.*\.tar\.gz$/) {
  if (-e $promocode) {
  if (-e $promoconfig) {
         if ($_ eq $begin) {
         if ($_ eq $end) {
          if ($_ eq "\n") {
      if ( ! -e $trgt) {
  if (-e '/usr/X11R6/bin') {
   if (-e $vmwgfx_drv && -e $vmwgfx_dri && -e $libexa &&
  if (-e $work_dir) {
  if ((-e $xconfig_backup) && (!-s $xconfig_backup)) {
      if (-e $xconfig_file) {
  if (-e $XF86tmp) {
   if ($existingDirs == 0) {
  if (-e $xLogFile) {
  if (-e "$xLogFile.old" ) {
	# If failed with existing $xconfig_file, try to generate a new x config
    if ((-f $bin) && (-x $bin)) {
      if (-f $_ && block_match($_, "!$chompedMarkerBegin")) {
   if (-f $dotdScript && !db_file_in($dotdScript)) {
  if (-f '/etc/initramfs-tools/modules') {
        if (-f "$fp2") {
         if ((-f $fullbin) && (-x $fullbin)) {
      if (-f $hgfsmounterBinary) {
        if ($fields[0] =~ /^([0-9a-fA-F]{2})/) {
    if (file_changed_db_ts($file) || db_userfile_in($file)) {
  if (file_check_exist($dst)) {
   if (file_check_exist($name)) {
      if ($file =~ /jslib-1./) {
   if ($fileModified) {
    if (file_name_exist($answer)) {
    if (file_name_exist($answer) && ($source eq 'user')) {
   if (file_name_exist($auth_file)) {
   if (file_name_exist($auth_file) && $admin ne $currentAdmin) {
  if (file_name_exist($backupName)) {
  if (!file_name_exist($cupsDir) || !file_name_exist($cupsConf)) {
  if (!file_name_exist($cupsPrinters)) {
   if (file_name_exist($dest_path) && ($preserve & 1)) {
                        if (file_name_exist("/dev/input/mice")) {
                  if (file_name_exist("/dev/input/mice")) {
  if (file_name_exist($dst_dir . '/misc/' . $name)) {
    if (file_name_exist('/etc/hotplug/pci.handmap')) {
   if (file_name_exist("/etc/init.d/httpd.vmware")) {
    if (file_name_exist('/etc/modprobe.conf.local')) {
          if (file_name_exist('/etc/updatedb.conf')) {
  if (file_name_exist('/etc/XF86Config')) {
   if (!file_name_exist($file)) {
  if (file_name_exist($file) &&
  if (file_name_exist($file)) {
  if (file_name_exist($GPMBinary) && file_name_exist($mouse_file)) {
                  if (file_name_exist($gXMouseDriverFile) &&
  if (file_name_exist($gXVideoDriverFile)) {
  if (file_name_exist($name)) {
                     if (!file_name_exist("$tmpdev")) {
      if (file_name_exist($xdmcfg)) {
   if (file_name_exist($xinitrcCommon)) {
  if (file_name_exist(xserver3())) {
  if (file_name_exist(xserver_xorg())) {
     if (-f "$initDir/haldaemon") {
      if ( -f $initmodfile ) {
    if (!$first_time) {
  if ($flags & $cFlagConfig) {
  if (($flags & $cFlagConfig) && file_name_exist($dst)) {
  if ($flags & $cFlagDirectoryMark) {
  if ($flags & $cFlagFailureOK) {
  if ($flags & $cFlagTimestamp) {
  if ($flags & $cFlagUserModified) {
      if ($font_line =~ /<dir>/) {
      if ($font_line =~ /Font\s+directory\s+list/) {
      if ($fonts_found == 0) {
    if ($found == 1) {
	   if ($fstype eq "cd9660" && $device !~ /^\/dev\/md/) {
            if ($fstype eq "iso9660" && $device !~ /loop/ ) {
   if (! -f $sys_font_path) {
         if (!-f $template_file) {
  if (!-f $vixTarFile) {
      if (!-f $XFile) {
   if (!-f $XFile) {
   if (-f $xinitrcCommon && block_match($xinitrcCommon, $chompedMarkerBegin)) {
  if ($#gAvailEthIf == 0) {
  if ($#gAvailEthIf == -1) {
  if ($gCanCompileModules eq 1) {
  if ($gcc_version =~ /^gcc version (egcs-)?(\d+\.\d+(\.\d+)*)/) {
  if ($gDBAnswer{$id} eq '') {
  if ($gDefaultAuthdPort != $port) {
    if (get_answer('All your ethernet interfaces are already bridged.  Are '
  if (get_answer('Do you want this program to set up permissions for your '
    if (get_answer('Do you wish to configure another bridged network? '
      if (get_answer('Do you wish to configure another host-only network? '
      if (get_answer('Do you wish to configure another NAT network? '
   if (get_answer($msg, 'yesno', 'no') eq 'yes') {
      if (get_answer("\n\n" .
    if (get_answer("\n\n" . 'Could not locate X ' . $xversionAll
    if (get_answer("\n\n" . 'The configuration file ' . $xconfig_file
    if (get_answer("\n\n" . 'The updated X config file does not work well.'
     if (get_answer("\n\n" . 'You are currently using the Solaris Xsun server.  '
  if (get_answer('Setup is unable to find the "' . $bin . '" program on your '
    if (get_answer('The ethernet device "' . $answer . '" was not detected on '
      if (get_answer('The header files in /usr/include are generally for C '
      if (get_answer('The network vmnet' . $vHubNr . ' has been reserved for '
    if (get_answer('This program wanted to create the ' . $typename . ' device '
    if (get_cc() eq '') {
      if ((get_module_status("vmwgfx") ne 'not_installed') &&
     if (get_persistent_answer(
    if (get_persistent_answer('Do you accept? (yes/no)', 'EULA_AGREED',
   if (get_persistent_answer("Do you want to install the Eclipse Integrated Virtual " .
    if (get_persistent_answer('There are only ' . $availableRAMInMB . ' MB '
    if (get_persistent_answer('Unable to determine the total amount of memory '
    if (get_persistent_answer('Would you like to skip networking setup and '
  if ($gFirstModuleBuild == 1) {
      if ("$gGccPath" eq '') {
      if ("$gGccPath" ne '' and system("$modconfig --validate-gcc " .
   if ($gHelper{'chkconfig'} ne '') {
        if ($gHelper{'gcc'} eq '') {
      if ($gHelper{'gcc'} eq '') {
    if ($gHelper{'gcc'} eq '') {
  if ($gHelper{'gcc'} eq '') {
   if ($gHelper{'insserv'} ne '') {
      if ($gHelper{'more'} eq '') {
    if ($gHelper{'more'} eq '') {
        if ($gHelper{$program} eq '') {
      if ($gHelper{$program} eq '') {
    if ($gHelper{'svcprop'} eq '') {
    if ($gHelper{"vmware"} eq '') {
          if (!$gIs64BitX) {
          if ($gIs64BitX) {
        if (!$gIs64BitX) {
	     if (!$gIs64BitX) {
	   if (!$gIs64BitX) {
      if ("$gKernelHeaders" eq '') {
      if ("$gKernelHeaders" ne '' and
               if (glob ("$jobPath/*$testSuffix")) {
    if ($g_major ne $k_major) {
    if ($gManifestNames[$i] eq $name) {
    if ($gNonVmwareModules{"$mod"} =~ m,.*/([\w\.\-]+)\.k?o,) {
  if ($gNoXDrivers == 1) {
  if ($gOption{'clobber-xorg-modules'} or $installShippedModule) {
  if ($gOption{'compile'} == 0 and
  if ($gOption{'compile'} == 1
   if (($gOption{'compile'} == 1) && ($gOption{'prebuilt'} == 1)) {
      if ($gOption{'default'} == 1) {
    if ($gOption{'default'} == 1) {
    if ($gOption{'default'} eq 0) {
      if ($gOption{$flag} =~ /\S/) {
  if ($gOption{'kernel_version'} eq '') {
    if (($gOption{'kernel_version'} ne '') or (check_answer_headerdir($headerdir, 'default') eq '')) {
  if (!$gOption{'modules_only'}) {
    if ($gOption{'prebuilt'} == 1) {
         if ($gOption{'rpc-on-end'} == 1) {
   if (!$gOption{'skip-stop-start'}) {
  #if (!$gOption{'skip-stop-start'}) {
  if (!$gOption{'skip-stop-start'}) {
   if ($gOption{'tools-switch'} == 0) {
      if ($gOption{'tools-switch'} == 1) {
  if ($gotKeyboardSection == 0) {
  if ($gotMouseSection == 0) {
  if ($gotServerFlagsSection == 0 && $disableHotPlug eq 'yes') {
  if ($gotServerLayout == 0) {
  # If gpm supports imps2, use that as the gpm mouse driver
    if (grep($answer eq $_, @gAllEthIf)) {
  if (grep($answer eq $_, @gAvailEthIf)) {
    if (!grep($_ eq $eth, @usedEthIf)) {
    if (grep($i == $_, @gReservedVmnet)) {
    if ($gSystem{'athlonKernel'} eq 'yes') {
  if ($gSystem{'build_bug'} eq 'yes') {
      if ($gSystem{'distribution'} eq 'suse') {
     if ($gSystem{'distribution'} eq 'suse') {
  if ($gSystem{'distribution'} eq 'suse') {
  if ($gSystem{'gcc_version'} =~ /^(\d+)\./) {
    if ($gSystem{'gcc_version'} eq 'no') {
	if ($gSystem{'gcc_version'} eq 'no') {
  if ($gSystem{'invm'} eq 'no') {
  if ($gSystem{'invm'} eq 'yes') {
  if ($gSystem{'uts_release'} =~ "^$extendedVersion") {
    if ($gSystem{'version_integer'} < kernel_version_integer(2, 0, 0)) {
    if ($gSystem{'version_integer'} >= kernel_version_integer(2, 1, 0)) {
      if ($gSystem{'version_integer'} < kernel_version_integer(2, 4, 0)) {
  if ($gSystem{'version_integer'} < kernel_version_integer(2, 6, 0)) {
  if ($gSystem{'version_integer'} < kernel_version_integer(2, 6, 13)) {
   if ($gSystem{'version_integer'} >= kernel_version_integer(2, 6, 18)) {
      if ($gVmciBuildDir ne '') {
    if ($gVmciBuildDir ne '') {
    if ($gVmwareInstalledModules{"$mod"} =~
    if ($gVmwareInstalledModules{"$mod"} =~ m,.*/([\w\.\-]+)\.k?o,) {
     if ($halScript ne "") {
    if ($header_page_offset =~ /^$pattern \(?0x([0-9a-fA-F]{8,})/) {
  if ($header_version_uts =~ /^2\.[0-5]\./) {
  if (!$hostonly_flag && !$bridge_flag && !$nat_flag) {
      if ($hostonly && is_hostonly_network($i)) {
        if ($identifier eq 'vmware') {
            if ($inDevice == 0) {
    if (index($bin, '/') == -1) {
  if (index($dir, '/') != -1) {
   if ($initctl ne '' and ( -x $initctl )) {
      if (($initctl_version_string =~ /upstart ([\d\.]+)/) and
   if ("$init_style" eq 'chkconfig') {
   if ("$init_style" eq 'lsb') {
    if ($inline =~ /^(\s*PRUNEFS\s*=\s*)\"(.*)\"(.*)$/ &&
    if ($inline =~ /^\s*(\w+)\s+(\w+)/) {
            if ($inMonitor == 0) {
      if ($inSection == 1) {
   if (install_hardlink('/usr/lib/isaexec', $linkdir . '/' . $linkname) eq 'no') {
   if (install_link(1, $to, $from) eq 'no') {
    if (install_vix()) {
      if (internal_sed($file, $file . '.old.' . $i, 0, \%patch)) {
    if (internal_which("checkmodule") eq '' ||
   if (internal_which("desktop-file-install") eq "") {
    if (internal_which('ldconfig') ne '') {
   if (internal_which("update-mime-database") ne "") {
  if (ioctl($TTY0, VT_OPENQRY, $data)) {
    if (is64BitElf(xserver4())) {
    if (is64BitElf(xserver_xorg())) {
      if (is64BitKernel()) {
    if (is64BitKernel()) {
  if (is64BitKernel()) {
    if (is_bridged_network($i) && $bridged) {
      if (is_bridged_network($vHubNr)) {
    if (is_bridged_network($vHubNr)) {
  if (!is_bridged_network($vHubNr)) {
  if (is_bridged_network($vHubNr)) {
   if (isDesktopProduct()) {
  if (isDesktopProduct()) {
  if (!(isDesktopProduct() || isServerProduct() ||
  if (isDesktopProduct() || isServerProduct() || isToolsProduct()) {
  if (is_dev_dynamic() eq 'no') {
  if (is_dev_dynamic() eq 'yes') {
	   if (isDeviceKitUsedForXorg()) {
    if (is_hostonly_network($vHubNr)) {
  if (!is_hostonly_network($vHubNr)) {
                if ($isKeyboardSection && $sectionLine =~ /^\s*Identifier\s+\"/) {
            if ($isMouseSection == 1) {
    if (is_nat_network($vHubNr)) {
  if (!is_nat_network($vHubNr)) {
    if (!is_network($i)) {
    if (is_network($i)) {
      if (is_samba_running($i)) {
    if (is_samba_running($vHubNr)) {
  if (is_samba_running($vHubNr)) {
   if (is_selinux_enabled()) {
  if (is_selinux_enabled() &&
      if (isServerProduct()) {
   if (!isServerProduct() && !isDesktopProduct()) {
   if ((!isServerProduct() && !isDesktopProduct()) || !$gOption{'create_shortcuts'}) {
     if ($isUbuntu == 0) {
    # If it has no version, assume the one we ship is newer.
    # If it is not, DO NOT ask questions.
  # If it is not enabled, return a -1, restorecon was NOT called.
  # If it's in this list, we didn't put it there.
      if ($kdeConfig ne '' && -x $kdeConfig) {
   # If KDE is available, use kde{,4}-config to search for its install path,
  if ($keep_settings eq 'no') {
    if ($kernel_gcc_version =~ /^(\d+)\.(\d+)/) {
        if ($kernel_gcc_version eq $gSystem{'gcc_version'}) {
	  if ($kernel_gcc_version eq $gSystem{'gcc_version'}) {
  if (keys(%emittedAliases) > 0) {
    if(!kmod_load_by_path($mod, $silent, $force, 1)) {
      if (/^(.*\.k?o):.*$/) {
  if (lc($answer =~ /^b(ridged)?$/)) {
  if (lc($answer) =~ /^e(ditor)?$/) {
  if (lc($answer) =~ /^h(elp)?$/) {
  if (lc($answer) =~ /^h(ostonly)?$/) {
  if (lc($answer =~ /^n(at)?$/)) {
  if (lc($answer) =~ /^n(o)?$/) {
  if (lc($answer =~ /^none$/)) {
  if (lc($answer) =~ /^w(izard)?$/) {
  if (lc($answer) =~ /^y(es)?$/) {
      if (lc($arg) =~ /^(-)?(-)?d(efault)?$/) {
    if ($len < 2) {
  if (length($answer) > 255) {
    if (-l $file) {
      if ($lib =~ '(\S+) => not found') {
      if ($line =~ /^[0-9a-f]*\t([0-9a-f]*)\t/) {
      if ($line =~ /gcc version (egcs-)?(\d+(\.\d+)*)/) {
    if ($line =~ /^Mem:\s*(\d+)/) {
    if ($line =~ /^MemTotal:\s*(\d+)\s*kB/) {
    if ($line =~ m/^(pci:v[0-9A-F]{8}d[0-9A-F]{8})/) {
	 if ($line =~ /pulseaudio *([0-9\.]+)/) {
      if ($line =~ $regex and $line !~ /tsched/) {
     if ($line =~ /($regexp)/ and not $line_added) {
        if ($line =~ /^\s*EndSection/i) {
    if ($line =~ /^\s*Section\s*"([a-zA-Z]+)"/i) {
      if ($line =~ /version: +([0-9\.]+)/) {
    if (-l $link && check_link($file, $link) eq 'yes') {
  if (-l $xconfig_file && !-e $xconfig_file) {
  if (-l $x_server_link &&
    if ($magicnumber eq '#!') {
  if ($major == 4) {
    if ($major == 4 && $minor == 2) {
  if ($major > 5 || ($major == 5 &&  $minor >= 10)) {
  if ($major > 5 || ($major == 5 &&  $minor >= 9)) {
  if ($major != 5 || $minor < 9) {
  if ($major == 6) {
  if ($major == 7 and $minor >= 4 and
                if (($major == 7 && ($minor == 2 || ($minor == 1 && ($sub == 99 || distribution_info() eq 'redhat')))) || ($major == 1 && $minor == 3)) {
  if (($major == 7 && ($minor == 2 || ($minor == 1 && ($sub == 99 || distribution_info() eq 'redhat')))) || ($major == 1 && $minor == 3)) {
  if ($major == 7 && $minor >= 3) {
  if ($major == 7 && $minor >= 4 && file_name_exist($xconfig_file)) {
      if ("$makePath" eq '') {
    if ("$makePath" ne '' and "$gGccPath" ne '' and "$gKernelHeaders" ne ''){
      if ($mime_support == 1) {
    if ($minor >= 10) {
    if ($minor == 11) {
       if ($minor == 2) {
    if ($minor == 2) {
      if ($minor == 3 && vmware_product() eq 'tools-for-linux') {
       if (($minor == 4) && (vmware_product() eq 'tools-for-solaris')) {
    if ($minor == 7) {
    if ($minor == 9) {
    if ($minor > 9) {
  if ($minor < $currentMinor) {
    if (mkdir($dir, 0777) == 0) {
  if (mkdir($file, 0777) == 0) {
    if (mkdir($tmp . '/' . $prefix . $serial, 0755)) {
       if (/mmx_clear_page/) {
      if (/ModeLine\D+(\d+)x(\d+)/) {
    if (($mode_width < $width)
  if ("$modinfo" ne '' and -r "$systemMod") {
	    if ($modname eq $amodname) {
  if ($modPath =~ m,^.*/(\w+)\.k?o,) {
      if (mod_pre_install_check('vmhgfs') eq 'yes') {
    if (($modprobe_file eq '/etc/modprobe.conf.local') ||
  if ($modStatus eq 'installed_by_other') {
  if ("$modStatus" eq "not_installed") {
     if ($module eq $modinfo[5]) {
  if ($module eq 'vmblock') {
  if ($module eq 'vmci') {
  if ($module eq 'vmhgfs') {
  if ($module eq 'vmmemctl') {
  if ($module eq 'vmxnet') {
  if ($module eq 'vmxnet3s') {
    # If module is versioned, try "compatible" match (ModVersion is requied
                 if ($module !~ /^\s*\$/ and $content !~ /(^|\s)$module(\s|$)/) {
         if ($mountline =~ /^(.+)\ on\ (.+)\ \(([0-9a-zA-Z]+),/) {
  if ($mountPoint) {
      if ($mountpoint =~ /vmwaretools$/) {
                    if ($mouseOption{$option} eq '') {
      if ($name eq "vmci") {
    if ($name eq 'vmci') {
  if ($name eq 'vsock') {
      if ($name ne '') {
    if (/$name($pattern)\.present/) {
      if ($nat && is_nat_network($i)) {
# If needed, allow the sysadmin to unlock a site wide license. This must be
  if ($needMonitor == 1) {
      if ($newGcc ne '') {
# if no library is found.
# If none are available, return default passed in
    if (not block_match('/boot/loader.conf', 'vmxnet_load=')) {
         if (not block_match('/etc/modules', 'vmwgfx')) {
        if (not block_match($initmodfile, '^vmxnet$')) {
       if (not block_match($initmodfile, '^vmxnet$')) {
  if (not (($char eq "\n") || ($char eq ' ') || ($char eq ''))) {
   if (not close(BLOCK)) {
   if (not close(BLOCK_IN) or not close(BLOCK_OUT)) {
   if (not close(DST)) {
   if (not close(SRC)) {
  if (not (-d $answer)) {
    if (   (not (-d $answer . '/asm'))
  if (not (-d $answer . '/linux')) {
  if (not db_dir_in($dir)) {
  if (not db_file_in($file)) {
            if (not db_file_in($modPath)) {
    if (not db_file_in($xconfig_file)) {
  if (not defined($availableRAMInMB)) {
    if (not defined($binary)) {
    if (not defined($emittedAliases{$key})) {
      if (not defined($fields[0])) {
  if (not defined($gAnswerSize{$type})) {
  if (not defined($gCheckAnswerFct{$type})) {
  if (   (not defined($gDBAnswer{'EULA_AGREED'}))
  if (not defined($gDBAnswer{$id})) {
  if (not defined($gHelper{'more'})) {
      if (not defined($gHelper{$program})) {
    if (not defined($gHelper{$program})) {
  if (not defined($gHelper{"vmware"})) {
      if (not defined($hostonly_subnet)) {
	   if (not defined $modStatus or $modStatus ne 'yes') {
  if (not defined($net_name)) {
  if (not defined($network)) {
  if (not defined($patch{'%network%'})) {
       if (not defined ($prop{'AthlonKernel'}) or
    if (not (defined($statbuf[2]))) {
  if (not (defined($statbuf[2]))) {
    if (not (defined($statbuf[9]))) {
      if (not defined($subnet)) {
    if (not defined($subnet)) {
  if (not defined($subnet)) {
  if (not defined $xconfig_file) {
    if (not (direct_command(shell_string($gHelper{'grep'}) . ' -i '
    if (not (-d $tmp)) {
  if (not -e $file) {
   if (not (-e $gInstallerMainDB)) {
            if (not $eject_really_failed) {
  if (not (-e $mod)) {
   if (not -e $src or not -d $dstDir) {
  if (not file_name_exist($file)) {
    if (not file_name_exist($file . '.old.' . $i)) {
  if (not ("$fullpath" eq '')) {
  if (not ($gSystem{'system'} eq $runSystem)) {
  if (not ($header_smp eq '')) {
    if (not ($header_version_uts eq $gSystem{'uts_release'})) {
    if (not $hostaddr or not $netmask) {
  if (not internal_sed($src, $dst, 0, $patchRef)) {
   if (not is_root()) {
    if (not (lc($gSystem{'smp'}) eq lc($prop{'SMP'}))) {
    if (not (lc($header_smp) eq lc($gSystem{'smp'}))) {
      if (not link($to, $name)) {
  if (not ($names eq '')) {
   if (not open(BLOCK, '>>' . $file)) {
   if (not open(BLOCK_IN, '<' . $file) or
  if (not open(CONF, '>' . $certCnf)) {
  if (not open(CONF, '>' . $cNetmapConf)) {
  if (not open(CONF, $cServices)) {
  if (not open(DST, (($append == 1) ? '>>' : '>') . $dst)) {
   if (not open(DST, '>' . $dst)) {
  if (not open(EXISTINGXF86CONFIG, "<$existingXF86Config")) {
  if (not open(F, "$file")) {
  if (not open(FH, '</etc/SuSE-release')) {
    if (not open(FH, $source)) {
    if (not open(FILE, $binary. " -h 2>&1 |")) {
  if (not open(INSTALLDB, '<' . $gInstallerMainDB)) {
  if (not open(INSTALLDB, '>>' . $gInstallerMainDB)) {
     if (not open (KSYMS, '</proc/ksyms')) {
  if (not open(MEMINFO, '</proc/meminfo')) {
    if (not open(MODULESDEP, "/lib/modules/$kvers/modules.dep")) {
  if (not open(NEWHANDMAP, ">$newPciHandmap")) {
      if (not open(NEWMODCONF, ">$modprobe_file")) {
  if (not open(NEWMODCONF, ">$newModprobeConf")) {
  if (not open(NEWMODCONF, ">$newModulesConf")) {
  if (not open(NEWUPDBCONF, ">$newUpdateDbConf")) {
  if (not open(NEWXF86CONFIG, ">$newXF86Config")) {
   if (not open(ORGPCF, "<$cfgFile") or
    if (not open(PROP, '<' . $dir . '/' . $candidate . '/properties')) {
   if (not open(SRC, '<' . $src)) {
  if (not open(SRC, '<' . $src)) {
  if (not open(SYSHANDMAP, "<$systemPciHandmap")) {
  if (not open(SYSMODCONF, "<$systemModprobeConf")) {
  if (not open(SYSMODCONF, "<$systemModulesConf")) {
  if (not open(SYSUPDBCONF, "<$systemUpdateDbConf")) {
    if (not open(TCP, "</proc/net/" . $i)) {
  if (not open(WFD, '| ' . $gHelper{'more'})) {
    if (not (-r $answer . '/asm/page.h')) {
    if (not (-r $answer . '/../.config')) {
  if (not (-r $answer . '/linux/autoconf.h')) {
  if (not (-r $answer . '/linux/version.h')) {
    if (not (-r $answer . '/../Makefile')) {
    if (not rmdir($dir)) {
  if (not -r $shippedMod) {
      if (not symlink($to, $name)) {
   if (not system(shell_string($gHelper{'mv'}) . " $tmp_file $file")) {
      if (not ($tokens[0] eq '')) {
    if (not unlink($dst_dir . '/misc/' . $name)) {
    if (not unlink($file)) {
      if (not ($want_sn eq 'help')) {
    if (not ((-w $tmp) && (-x $tmp))) {
  if (not (-x "$rpctoolBinary")) {
   if (($numSymlinks == 0) ||
  # If one does not exist, make one.
   if (open(BLOCK, '<' . $file)) {
   if (!open(DESKTOP, ">$desktopConf")) {
      if (!open(FD, "$command |")) {
         if (open (IMF, $initmodfile)) {
   if (open(IN, $infile) && open(OUT, ">$outfile")) {
   if (open(LDD, "$lddbin $objname 2>&1 |")) {
  if (!open(MANIFESTFILE, ">$manifest")) {
   if (!open(MIMEPACKAGE, ">$mimeConf")) {
      if (open(MNTTAB, '</etc/mnttab')) {
      if (open(MOUNTS, '</proc/mounts')) {
  if (open PCI, '</proc/bus/pci/devices') {
  if (open(PROC_VERSION, '</proc/version')) {
      if (open (TEFILE, ">", $tmpFile)) {
  if (open(VERSIONDATA, "<$manifest_shipped")) {
  if ($packedVersion =~ /X Protocol Version 11.* Release (\d+\.\d+)/) {
  if ($#patchKeys == -1) {
  if ($path1 eq $path2) {
  if ($path eq '') {
  if ($path ne '') {
      if ($pcnet32) {
          if ($pcnet32_dev) {
  # if people haven't customized their system too much
    if (($pings == $maxPings) || ($tries == $maxTries)) {
	    if ($pkgName eq $instPkgName) {
    if ($port != $gDefaultAuthdPort) {
# If port is free, return 1;
# If port is in $cServices return 0
# If port is in use, return 0;
# If port not in $cServices return 1
    if ($pos) {
  if ($pos == 0) {
  if ($pos == -1) {
  if ($pos >= $cTerminalLineSize) {
    if ($pos != $len - 1) {
  if (($pos + $length) > $cTerminalLineSize) {
        if ($prop{'UtsMachine'} ne 'x86_64') {
      if (pulseNeedsTimerBasedAudioDisabled()) {
    if (quaddot_to_int($new_subnet) <= quaddot_to_int($broadcast) &&
         if (/$regexpat/) {
    if ($release < 5.0) {
      if ($release >= 5.3) {
    if ($release >= 6.0) {
    if ($reply eq '') {
    if ($resolution_string =~ $prev_res) {
         if ($result eq 'no') {
       if ($result eq 'no') {
      if ($result eq 'no') {
     if ($result eq 'no') {
    if ($result eq 'no') {
    if ($result eq 'no' and $dispInstallMsg != 0) {
        if ($result eq 'yes') {
     if ($result eq 'yes') {
    if ($result eq 'yes') {
   if ($result eq 'yes') {
  if ($result eq 'yes') {
   if ($result eq 'yes' and
  if ($result eq 'yes' && vmware_product() eq 'tools-for-linux') {
          if ($result ne '') {
  if (-r '/etc/dhcpd.conf') {
  if ("$rpcresult" =~ /1/) {
	 if ($rpcresult =~ /1/) {
   if ($ruleFound) {
  if ($run_dhcpd) {
  if ($runSystem eq 'Linux') {
  if ($rv >= 0) {
         if ($rv eq 'yes') {
        if ($s) {
  if (/^\s*(\#.*)?$/) {
      if ($samba && is_samba_running($i)) {
    if ((scalar(@id_params) != 0) && length($answer) < 32) {
    if (scalar(@missing) > 0) {
  if (scalar(@networks) != 0) {
  if (scalar @output) {
      if (/^\s*\d+:\s*[0-9a-fA-F]+:([0-9a-fA-F]{4})\s*[0-9a-fA-F]+:[0-9a-fA-F]{4}\s*([0-9a-fA-F]{2}).*$/) {
              if ($sectionLine =~ 'EndSection') {
               if ($sectionLine =~ 'EndSection' && $gotServerFlagsSection == 0) {
              if ($sectionLine =~ /$mouseRegex/i) {
                if ($sectionLine =~ /^\s*Driver\s+\"(.+)\"/i) {
                if ($sectionLine =~ /^\s*Driver\s+\"((?i)keyboard|kbd)\"/) {
                if ($sectionLine =~ /^\s*Identifier\s+\"/) {
              if ($sectionLine =~ /^\s*Identifier\s+\"(.+)\"/i) {
              if (!($sectionLine =~ /^\s*InputDevice\s+/) &&
                  if (($sectionLine =~ /^\s*Option\s+\"Device\"\s+\"(.+)\"/i) ||
                if (($sectionLine =~ /^\s*Option\s+\"Device\"\s+\"(.+)\"/i) ||
                if ($sectionLine =~ /^\s*Option\s+\"Emulate3Buttons"\s+\"(.+)\"/i) {
                  if ($sectionLine =~ /^\s*Option\s+\"NoAutoAddDevices\"/i) {
                if (($sectionLine =~ /^\s*Option\s+\"Protocol\"\s+\"(.+)\"/i) ||
                if ($sectionLine =~ /^\s*Option\s+\"ZAxisMapping\"\s+\"(.+)\"/i) {
          if (($sectionName eq 'inputdevice') || ($sectionName eq 'pointer')) {
            if ($sectionName eq 'pointer') {
    if (!$self->{db}{$name}{mark}) {
        if ($self->{db}{$name}{value} ne $value) {  
      if ($self->{tr}) {
  if ($self->{tr}) {
    if ($serial % 200 == 0) {
   if (@setOption > 0) {
      if ($show_all || !defined($val) || ($val)) {
             if (/^\s*INITRD_MODULES\s*=\s*"(.+)"\s*$/) {
      if ($sn eq ' ') {
      if (solaris_driver_configured('vmci', '') eq 'no') {
    if (solaris_driver_configured('vmmemctl', '') eq 'no') {
      if (solaris_driver_configured('vmxnet3s', 'pci15ad,7b0') eq 'no') {
    if (solaris_driver_configured('vmxnet', 'pci15ad,720') eq 'no') {
  if ($source eq 'default' || $source eq 'db') {
        if ($source eq 'user') {
      if ($source eq 'user') {
    if ($source eq 'user') {
  if ($source eq 'user') {
	if ($source eq 'user') {
        if (s/$patchKey/$$patchRef{$patchKey}/g) {
    if (/^(\S+)\s+Link encap:Ethernet/) {
         if ( /\s*.*stopped.*/ ) {
    if (   ($statbuf[2] & 0555) != 0555
      if      ($state eq 'outside') {
        if ($status) {
      if ($status == 1) {
    if ($status == 1) {
    if ($status == 2) {
    if ($status == 3) {
    if ($stopCode != 0) {
  if ("$str1" =~ /[^0-9\.]+/ or "$str2" =~ /[^0-9\.]+/) {
    if ("$str1" eq '' and "$str2" eq '') {
  if ("$str1" eq '' or "$str2" eq '') {
    if ($style eq "dracut") {
      if ($style eq 'redhat') {
    if ($style eq 'redhat') {
	   if ($sub == 99) {
    if ($subnets[$r] eq '') {
    if (substr($answer, 0, 1) ne '/') {
  if (substr($bin, 0, 1) eq '/') {
    if (substr($dir, 0, $prefix_len) eq $prefix) {
    if (substr($file, 0, $prefix_len) eq $prefix) {
    if (/^SUSE Linux Enterprise/) {
# If switch_to_host was never called, do nothing.
   if ($symbolic) {
      if ($sys_line !~ /<dir>/) {
  if (system($cmd)) {
      if (system("desktop-file-install --vendor=vmware " .
    if (system("$modconfig --install-pbm $name $modDest " .
    if (system("$modconfig --validate-gcc \"$gcc_path\" $appLoaderArgs " .
    if (system("$modconfig --validate-kernel-headers \"$kh_path\" " .
    if ("$systemModVer" eq '' or
  if (system('rm -f ' . shell_string($name) . ' && ' . shell_string($gHelper{'mknod'})
         if (system(shell_string(db_get_answer('INITSCRIPTSDIR') . '/vmware')
      if (system(shell_string(db_get_answer('INITSCRIPTSDIR') . '/vmware') .
  if (system(shell_string($gHelper{'cp'}) . ' -p ' . $o_file . ' ' . $dir)) {
    if (system(shell_string($gHelper{'cp'}) . ' -p ' . $XF86tmp . ' ' .
    if (system(shell_string($gHelper{'depmod'}) . ' -a') != 0 ) {
  if (system(shell_string($gHelper{'grep'}) . ' ' . shell_string($driver)
  if (system(shell_string($gHelper{'make'}) . ' -C '
  if (system(shell_string($gHelper{'rm'}) . ' -rf ' . shell_string($dir))) {
  if (system(shell_string($gHelper{'tar'}) . ' -C ' . shell_string($build_dir)
  if (system(shell_string($tmpDir . $vixInstallFile) . '  ' . $defaultOpts)) {
  if (system(shell_string(vmware_vmx_app_name())
      if ((system(shell_string($XFree4_scanpci) . ' | '
    if (system($syscmd) != 0) {
      if (system("update-mime-database " . shell_string($mimePath) .
  if ($system_version =~ /: *([0-9]+\.[0-9]+)-/) {
      if ($terse eq 'yes') {
    # If test failed with $XF86tmp, try to test a new $XF86tmp from template one.
# If that installation succeeds, then also install vmwgfx_dri.so
    # If the block device has a timeout file in its devices folder, then
	   # If the device begins with /dev/md it will most likely
	      . 'If the driver is not available, VMware host software may '
    # If the kernel is compiled for Athlon processors, then we should only use
# If the module is not already on the system, put it in misc.
                   . 'if the module were to compile successfully, it would not '
                  # If the option was already there.
  # If the OS is Fedora 9 or SLES11, then it needs to have
# if the port is already in use i.e. in the port cache.
  # If the product is workstation or server, and is not vmplayer, its installer
         # If there is a .conf file there, back it up so that we properly use
  # If there is an existing driver, replace it by ours.
       # If there is an existing driver replace it by ours, backing up
    # If there is an existing driver replace it by ours, backing up the existing driver.
# If there is a pid for this process, consider it running.
  # If there is a previous network configuration, prompt the user to
  # If there is no previous network configuration, use the wizard.
         # If there were no drivers, add them now
  # If the system uses upstart, then we should use service to restart
  # If the user chooses to modify the settings, give the choice of
   # If the user has a special system setup, he will will prompted for the
# If the vmwgfx_drv.so driver exists, then attempt to install it.
  # If the X config file does not exist, we need to add it to our database.  If
      # If this fails, don't bother trying to unmount, or error.
            # If this fails, the eject will fail, and the user will see
  # If this is not the first time config has run, then use the port
  # If this is the first time, then there won't be any proxy port
  # If this wasn't a bridged network before, wipe out the old configuration
  # If this wasn't a hostonly network before, wipe out the old configuration
  # If this wasn't a NAT network before, wipe out the old configuration info
      if (/^[ \t]*Identifier[ \t]*"(\S+)"[ \t]*$/) {
      if ($tries == $maxTries) {
      if (try_module($name,
    if (try_module($name, $build_dir . '/' . $name . '.o', 0, 1)) {
    if (!try_X_conf($XF86tmp, $xLogFile)) {
    if (/^[ \t]*Section[ \t]*"Monitor"[ \t]*$/) {
  if ($useApploader) {
   if ($use_desktop_utils == 1) {
    if ($used_subnets{$subnets[$i]}) {
  if ($utsrel =~ /^(\d+\.\d+\.\d+-)[0-9.]+\.(el.*)$/) {
      if ($utsrel =~ /^(\d\.\d\.\d+\.\d+)-[0-9.]+(-.*)$/) {
    if ($uts_release eq $prop{'UtsRelease'}
      if (/^UtsVersion (.+)$/) {
  if (!-u $x_server_file) {
  if ($val =~ /TRUE|1|Y|YES/i) {
      if (!$var) {
    # If version matches exactly, great.  But only if UtsVersion matches,
  if ("$version.$patchLevel" eq '2.4') {
    if ($vHubNr == $gDefBridged) {
    if ($vHubNr == $gDefHostOnly) {
    if ($vHubNr == $gDefNat) {
  if ($vHubNr < $gMinVmnet || $vHubNr > $gMaxVmnet) {
  if ($vHubNr >= $gNumVmnet) {
   if ($visible == 0) {
            # If vmhgfs was successfully configured, modify /etc/updatedb.conf so
    if (vmware_binary() ne "vmplayer") {
   if (vmware_binary() ne "vmplayer") {
    if (vmware_product() eq 'server') {
  if (vmware_product() eq 'server' &&
if (vmware_product() eq 'server') {
                  if (vmware_product() eq 'tools-for-freebsd') {
    if (vmware_product() eq 'tools-for-freebsd') {
   if (vmware_product() eq 'tools-for-freebsd') {
  if (vmware_product() eq 'tools-for-freebsd' ||
  if (vmware_product() eq 'tools-for-freebsd' &&
  if (vmware_product() eq 'tools-for-freebsd') {
  if(vmware_product() eq 'tools-for-freebsd') {
         if (vmware_product() eq 'tools-for-freebsd' and
  if (vmware_product() eq 'tools-for-freebsd' and
   if (vmware_product() eq 'tools-for-freebsd' && $release == 5.0) {
                if (vmware_product() eq 'tools-for-linux' &&
         if (vmware_product() eq 'tools-for-linux') {
        if (vmware_product() eq 'tools-for-linux') {
       if (vmware_product() eq 'tools-for-linux') {
      if (vmware_product() eq 'tools-for-linux'
      if (vmware_product() eq 'tools-for-linux' ||
      if (vmware_product() eq 'tools-for-linux') {
    if ( vmware_product() eq 'tools-for-linux') {
    if (vmware_product() eq 'tools-for-linux') {
   if ( vmware_product() eq 'tools-for-linux') {
   if ((vmware_product() eq 'tools-for-linux' ||
   if (vmware_product() eq 'tools-for-linux' ||
   if (vmware_product() eq 'tools-for-linux' ) {
   if (vmware_product() eq 'tools-for-linux' &&
   if (vmware_product() eq 'tools-for-linux') {
  if (   (   vmware_product() eq 'tools-for-linux'
  if ( vmware_product() eq 'tools-for-linux') {
  if (vmware_product() eq 'tools-for-linux'
  if (vmware_product() eq 'tools-for-linux' ||
  if (vmware_product() eq 'tools-for-linux' &&
  if (vmware_product() eq 'tools-for-linux') {
if (vmware_product() eq 'tools-for-linux' ||
    if (vmware_product() eq 'tools-for-linux' and not
       if ((vmware_product() eq 'tools-for-linux') && ($major == 7) && ($minor == 3) && ($sub == 99)) {
	  if ((vmware_product() eq 'tools-for-linux') && ($minor > 5) && ($sub == 99)) {
                if (vmware_product() eq 'tools-for-solaris') {
      if (vmware_product() eq 'tools-for-solaris') {
    if (vmware_product() eq 'tools-for-solaris') {
   if (vmware_product() eq 'tools-for-solaris') {
  #    if (vmware_product() eq 'tools-for-solaris') {
  if (vmware_product() eq 'tools-for-solaris' &&
  if (vmware_product() eq 'tools-for-solaris') {
if (vmware_product() eq 'tools-for-solaris') {
  if (vmware_product() eq 'tools-for-solaris' and
  if (vmware_product() eq 'tools-for-solaris' && -e '/usr/X11/bin') {
      if (vmware_product() eq 'wgs') {
     if (vmware_product() eq 'wgs' ) {
    if (vmware_product() eq 'wgs') {
  if (vmware_product() eq 'wgs') {
  if ((vmware_product() eq 'wgs') || (vmware_product() eq 'server')) {
   if (vmware_product() eq "wgs" || vmware_product() eq "vserver") {
  if (vmware_product() eq 'wgs' || vmware_product() eq 'ws' ||
      if (vmware_product() eq "ws") {
   if (vmware_product() eq "ws") {
    if (vmware_product() eq 'ws' && !$gOption{'compile'}) {
   if (vmware_product() eq 'ws' && $gOption{'make-all-net'}) {
  if ((vmware_product() eq 'ws') || (vmware_product() eq 'wgs')) {
  if (vmware_product() ne 'server') {
  if (vmware_product() ne 'server' && $name ne 'pvscsi' &&
      if (vmware_product() ne 'tools-for-freebsd') {
  if (vmware_product() ne 'tools-for-freebsd' &&
         if (vmware_product() ne 'tools-for-linux') {
     if (vmware_product() ne 'tools-for-linux') {
  if (vmware_product() ne 'tools-for-linux') {
     if (vmware_product() ne 'tools-for-linux' and $vmciLoaded != 0) {
       if (vmware_product() ne 'tools-for-solaris') {
  if (vmware_product() ne 'tools-for-solaris') {
  if ((vmware_product() ne 'wgs') && (vmware_product() ne 'server') &&
  if ((vmware_product() ne 'wgs') && (vmware_product() ne 'server')) {
   if (vmware_product() ne 'ws') {
        if (vmware_product() =~ /^tools-for-/) {
  if ($vmware_version_string =~ /.*VMware\s*(\S+)\s*Server.*/) {
        if ($vmxnet_dev or $pcnet32_dev) {
  if ($want_sn eq 'yes') {
   # If we are configuring the tools, and the installer instructed us to
  # If we are installing a config file and such a config file already exists
    # If we are using new module-init-tools, they just ignore
    # If we don't, tools might be marked out of date.
  # If we found the binary, send the RPC.
  # If we get here, then the module is either not installed or was
    # If we get here, then tools is not supported.  Error out.
  # If we get here, we were unable to parse kern.osrelease
   # if we have it.
                     # If we have to create a xorg.conf file, the default
      if (/--with=/) {
                if ($writeBusIDLine) {
  if ($xorgMajorVer == 1) {
    if ($xorgScreenIdentifier eq '') {
  if ("$xorgScreenIdentifier" eq '') {
   if (-x $pulseaudioBin) {
  if (-x "$rpctoolBinary") {
   if (-x $rpmBin) {
  if (xserver_bin() eq '') {
   if (-x "/usr/sbin/selinuxenabled") {
  if ($x_version == 3) {
              if ($xversion >= 4) {
  if ($xversion >= 4) {
  if ($xversion >= 4 && file_name_exist($XFree4_scanpci)) {
  if ($xversionAll =~ /(\d+)\.(\d+)\.?(\d*)/) {
               . 'If you have configured a pcn interface, the corresponding '
# If your copy of perl is not in /usr/bin, please adjust the line above.
	      . 'If you want the memory management feature,'
	      . 'If you wish to have the advanced network driver enabled,'
            . 'If you wish to have the fast network driver enabled,'
	       . 'If you wish to have the pvscsi feature,'
            . 'If you wish to have the VMCI feature,'
               . 'If you wish to have the vmsync feature,'
	       . 'If you wish to have the vmwgfx feature,'
        # Ignore if port is already defined, unless its value is 2.  That is,
    # Ignore PAGE_OFFSET if we cannot parse it.
    $i = $i + 1;
		  'image and may not boot properly.  DO NOT REBOOT!  ' .
                . ' imps2 > /dev/null 2>&1')) == 0 ? 'yes': 'no';
        $in = 0;
  $in = 0;
      $in = 1;
          . ' in append-mode.' . "\n\n");
	  # in code that is known to work with older versions of xorg-server
    # in config.pl but not with the get_answer in pkg_mgr.pl.  Moving these
	     "independently of this feature.  If you wish to have the VSOCK " .
              $inDevice = 1;
      $index++;
# Indicates if a bridged virtual network is defined for a particular vnet
# Indicates if a hostonly virtual network is defined for a particular vnet
# Indicates if a NAT virtual network is defined for a particular vnet
# Indicates if a virtual network has been defined on this virtual net
# Indicates if samba is running on a virtual network
# Indicates if the given network collides with an existing network
   # indicates that Upstart is active.
# in etc, /etc/hostname.pcnet0, /etc/dhcp.pcn0, ..., need to reflect
                                'inetport',
               . 'in "' . $file . '": Cannot read the file.' . "\n\n", 0);
# In $file, look for a line defining $var and append the contents of $content to
  # info as it may confuse us later.
                 "   Info ${printerName}\n" .
  # In general, The wrapper is stupid.
# in gpm or not.
              # In inputdevice section, if it is not mouse or keyboard, just copy
  $initDir =~ s/\'//g; # Remove quotes
    #  init.d: $ /usr/sbin/devfsadm -i vmxnet
   initialize_external_helpers();
   initialize_globals();
         # Initialize the dictionary which tracks non-vmware modules
  # Initialize the port cache.  Contains the set of ports
# Initialize version manifest
               $initmodfile);
       # $initmodfile);
    $initmodfile = "/etc/dracut.conf";
    $initmodfile = '/etc/initramfs-tools/modules';
      $initmodfile = '/etc/sysconfig/kernel';
      # initrd image that you want to remake.  If its not a SuSE system, then leave
                      'INITRD_MODULES="' . $content . '"' . "\n",
      init_version_manifest();
  # In kernels >= 2.6.19, we no longer have to worry about gcc version
	    $inline = 'alias ' . $val . ' ' . $ethAliases->{$val} . "\n";
	  $inline = 'alias ' . $val . ' ' . $ethAliases->{$val} . "\n";
      $inline = $prefix . "\"$fslist\"" . $suffix . "\n";
	  $inline = 'vmnics\t\t0x00001022 0x00002000 ' .
	  $inline = 'vmxnet\t\t0x000015ad 0x00000720 ' .
    # in modprobe.d/<vmware-tools>.  However, SLES9 includes a new
              $inMonitor = 1;
                    . $i . '.' . "\n\n", 0);
    InputDevice "VMware Keyboard" "CoreKeyboard"
    InputDevice "VMware Mouse" "CorePointer"
  # Input hotplug needs to be turned off for X Server > 1.4.0.
          . ' in read-mode.' . "\n\n");
          $inSection = 0;
      $inSection = 1;
# Insert a clearly delimited block to an unstructured text file
                # Insert any of the mouse options not already accounted for
  # in ServerFlags section for build 1.4.0 and upwards.
                "insserv application to setup the vmware-tools service.  " .
	   # instad of HAL.  Note both HAL and DeviceKit can be installed side by side.
# Install a file permission
  # install a .ko symlink for 2.6 kernels
                     . 'install already exists.  Overwrite?', 'yesno', 'yes')
# Install a module if it suitable
		  # Install a mouse driver for all X versions >= 4.2
   # Install answers specified on the command line
# Install a pair of S/K startup scripts for a given runlevel
    # Installation of the vmxnet driver is comprised of placing the driver in
      install_dir($src_dir . '/' . $file, $dst_dir . '/' . $file, $patchRef);
                     . 'installed. Are you sure that /usr/include contains '
# installed_by_other - someone else has installed this module.
  # installed by us.  Hence we should install the module.
# installed_by_vmware - vmware has installed this module.
		"installed on this sytem.\n\n";
                      . 'installed on your machine. These packages are '
			"installer.\n\n", 0);
                              installer.  This is a comma seperated list
      install_file(db_get_answer('LIBDIR')
    install_file(db_get_answer('LIBDIR')
  install_file(db_get_answer('LIBDIR') . '/configurator/vmnet-dhcpd.conf',
  install_file(db_get_answer('LIBDIR') . '/configurator/vmnet-nat.conf',
        install_file(db_get_answer('LIBDIR') . '/configurator/XFree86-4/4.3.x' .
      install_file(db_get_answer('LIBDIR') . '/configurator/XFree86-4/4.3.x' .
	    install_file(db_get_answer('LIBDIR') . "/configurator/XOrg/7.$compat" .
		 install_file(db_get_answer('LIBDIR') . "/configurator/XOrg/7.$compat" .
      install_file($desktopConf, "$desktopdir/$desktopFilename", \%p, 1);
  install_file('/dev/null', $dhcpd_dir . '/dhcpd.leases~', \%patch, 0);
  install_file('/dev/null', $dhcpd_dir . '/dhcpd.leases', \%patch, 0);
    install_file($dir . $moduleVersion . '-' . $moduleArch . '/vmblock.ko',
    install_file($dir . $moduleVersion . '-' . $moduleArch . '/vmhgfs.ko',
    install_file($dir . $moduleVersion . '-' . $moduleArch . '/vmmemctl.ko',
    install_file($dir . $moduleVersion . '-' . $moduleArch . '/vmxnet.ko',
      install_file($dir . $newMinor . '_64/vmhgfs',
    install_file($dir . $newMinor . '/vmhgfs',
      install_file($dir . $osDir . '_64/vmblock',
      install_file($dir . $osDir . '_64/vmci',
      install_file($dir . $osDir . '_64/vmmemctl',
       install_file($dir . $osDir . '_64/vmxnet',
      install_file($dir . $osDir . '_64/vmxnet3s',
    install_file($dir . $osDir . '/vmblock',
      install_file($dir . $osDir . '/vmci',
      install_file($dir . $osDir . '/vmci.conf',
    install_file($dir . $osDir . '/vmmemctl',
    install_file($dir . $osDir . '/vmmemctl.conf',
      install_file($dir . $osDir . '/vmxnet3s',
      install_file($dir . $osDir . '/vmxnet3s.conf',
    install_file($dir . $osDir . '/vmxnet', '/kernel/drv/vmxnet', \%patch, $cFlagTimestamp);
    install_file('/etc/X11/.xorg.conf', '/etc/X11/xorg.conf', \%p, 0);
      install_file($file, $file . $configuredExtension, \%patch,
   install_file($mimeConf, $mimePackagePath . "/vmware.xml", \%p, 1);
  install_file($mod, $modDest . '.o', \%patch, $cFlagTimestamp);
   install_file ("$shippedMod", "$systemMod", \%patch, 1);
	install_file($source, $destDir, \%patch, 1);
    install_file($source, $dest, \%patch, 1);
      install_file($src_dir . '/' . $file, $dst_dir . '/' . $file, $patchRef, $cFlagTimestamp);
         install_file($srcDir . '/' . $libdrm, $dstDrm, \%patch, $cFlagTimestamp);
         install_file($srcDir . '/' . $libkms, $dstKms, \%patch, $cFlagTimestamp);
   install_file($template_file, $dest_path, \%$patchRef, $flags);
   install_file($tmpfile, $plain_file, $patch_thru, $flags);
     install_hardlink(db_get_answer('LIBDIR') . '/bin/vmware-tpvmlp', $_);
      install_hardlink($isaexec, $linkdir . '/' . $linkname);
#    install hooks.
	       "Installing it...\n\n",0);
             install_link(1, db_get_answer('LIBDIR') . "/configurator/XOrg/7.1_64", db_get_answer('LIBDIR') . "/configurator/XOrg/7.4_64");
             install_link(1, db_get_answer('LIBDIR') . "/configurator/XOrg/7.1", db_get_answer('LIBDIR') . "/configurator/XOrg/7.4");
  # install on a NFS server and then answer 'no' NFS clients
# Install one directory (recursively)
# Install one file
# Install one link, symbolic or hard
# install package values.
    install_permission($src_dir, $dst_dir);
  install_permission($src, $dst);
# Installs a udev rule to the proper location.
      $installShippedModule = 1;
    $installShippedModule = 1;
   install_solaris_symlink($libbindir, 'vmware-toolbox',
   install_solaris_symlink($libbindir, 'vmware-toolbox-cmd-wrapper',
   install_solaris_symlink($libbindir, 'vmware-user-suid-wrapper',
   install_solaris_symlink($libsbindir, 'vmtoolsd-wrapper',
   install_solaris_symlink($libsbindir, 'vmware-checkvm',
   install_solaris_symlink($libsbindir, 'vmware-memctld',
   install_solaris_symlink($libsbindir, 'vmware-rpctool',
# Installs the necessary rules files to make vmmouse work with
     install_symlink(db_get_answer('INITSCRIPTSDIR') . '/' . $service,
   install_symlink(db_get_answer('INITSCRIPTSDIR') . '/' . $service,
  install_symlink(db_get_answer('LIBDIR') . '/bin/vmware-tpvmlp',
  install_symlink(db_get_answer('LIBDIR') . '/bin/vmware-tpvmlpd',
  install_symlink(db_get_answer('LIBDIR') . '/configurator/thinprint.ppd',
               install_symlink($desticondir . '/' . $iconpath,
         install_symlink($dotDesktop, "$_/vmware-user.desktop");
   install_symlink($eclipseSrcDir . '/com.vmware.bfg_1.0.0',
    install_symlink($file, $link);
  install_symlink($gRegistryDir . '/tpvmlp.conf', '/etc/tpvmlp.conf');
	  install_symlink($hgfsmounterBinary,
   install_symlink($iconFile, $pixmapFile);
      install_symlink($libbindir . '/appLoader',
     install_symlink($libbindir . '/appLoader',
    install_symlink($libbindir . '/appLoader',
  install_symlink($libbindir, $libdir . "/bin");
    install_symlink($libbindir . '/vmware-toolbox-cmd-wrapper',
      install_symlink($libbindir . '/vmware-toolbox-gtk-wrapper',
      install_symlink($libbindir . '/vmware-toolbox-tcl',
     install_symlink($libbindir . '/vmware-user-loader',
        install_symlink($libbindir . '/vmware-user-suid-wrapper',
     install_symlink($libbindir . '/vmware-user-suid-wrapper',
        install_symlink($libbindir . '/vmware-user-wrapper',
     install_symlink($libbindir . '/vmware-xferlogs',
   install_symlink($libdir . '/icu', $gRegistryDir . '/icu');
  install_symlink($libdir . "/plugins", $gRegistryDir . "/plugins");
  install_symlink($liblibdir . "/libconf", $libdir . "/libconf");
  install_symlink($liblibdir, $libdir . "/lib");
   install_symlink($libsbindir . '/i86/vmware-hgfsmounter',
  install_symlink($libsbindir, $libdir . "/sbin");
      install_symlink($libsbindir . '/vmtoolsd-wrapper',
  install_symlink($libsbindir . '/vmware-checkvm',
      install_symlink($libsbindir . '/vmware-guestd-wrapper',
  install_symlink($libsbindir . '/vmware-rpctool',
     install_symlink($libsbindir . '/vmware-tools-upgrader',
  install_symlink($modDest . '.o', $modDest . '.ko');
     install_symlink($pamdfile, '/etc/pam.d/vmtoolsd');
   install_symlink($plugins32, "$gRegistryDir/plugins");
   install_symlink($plugins64, "$plugins32/amd64");
  install_symlink($pluginsdir, $libdir . "/plugins");
  install_symlink($prop_src_root . "/log4j.properties",
  install_symlink($prop_src_root . "/login.properties",
  install_symlink($prop_src_root . "/proxy.properties",
            install_symlink($srcicondir . '/' . $iconpath,
   install_symlink($targetdir . '/amd64/' . $targetname,
   install_symlink($targetdir . '/i86/' . $targetname,
  install_symlink($webAccessLogDir, $tomcat . '/logs');
  install_symlink($webAccessLogDir . '/work', $work_dir);
      install_symlink($xSessionGDM, "$xinitrcd/vmware-xsession-gdm.sh");
   install_template_file($docroot . '/client/clients-template.xml', \%patch, 1);
   install_template_file($gRegistryDir . '/hostd/authorization-template.xml', \%patch, 1);
   install_template_file($gRegistryDir . '/hostd/config-template.xml', \%patch, 1);
   install_template_file($gRegistryDir . '/hostd/proxy-template.xml', \%patch, 0);
   install_template_file($gRegistryDir . '/hostd/vmInventory-template.xml', \%patch, 1);
   install_template_file($loader_file . "-template", \%patch, 0);
   install_template_file($pango_module_file . "-template", \%patch, 1);
  install_template_file($start_file, \%patch, 1);
         install_template_file($template_file, \%patch, 0);
                                      . "install the application's icon?",
      # Install the corresponding 32-bit driver
    # Install the corresponding 32-bit driver
       # Install the drivers.
    # Install the drivers.
     # Install the hgfsmounter app to /sbin/mount.vmhgfs to solve SELinux issues.
  # Install the module with a .o extension, as the Linux kernel does
# installUdevRule
  installUdevRule($udev_file);
	 installUdevRule($udev_file);
	    # Install vmmouse_detect always for compat >= 4
   # Install vmware-hgfsmounter into /etc/fs/vmhgfs because that's
      install_x_module(db_get_answer('LIBDIR')  . '/configurator/XOrg/6.7.x' .
      install_x_module(db_get_answer('LIBDIR')  . '/configurator/XOrg/6.8.x' .
      install_x_module(db_get_answer('LIBDIR') . '/configurator/XOrg/6.9' .
      install_x_module(db_get_answer('LIBDIR')  . '/configurator/XOrg/7.0' .
             install_x_module(db_get_answer('LIBDIR')  . "/configurator/XOrg/7.$compat" .
	 install_x_module(db_get_answer('LIBDIR') . "/configurator/XOrg/7.$compat.99" .
         install_x_module_no_checks($libexa, $xorg_modules_dir . '/libexa.so');
    install_x_module_no_checks($shippedMod, $systemMod);
         install_x_module_no_checks($vmwgfx_dri, '/usr/lib' . ($gIs64BitX ? '64' : '') . '/dri/vmwgfx_dri.so');
         install_x_module($vmwgfx_drv, $xorg_modules_dir . '/drivers/vmwgfx_drv.so')) {
	     install_x_module($xorgModSrcDir . '/vmmouse_drv.so',
	     install_x_module($xorgModSrcDir . '/vmware_drv.so',
      # instead makeing the mod via a template file.  But in this case the user has
	      . 'instead need to swap guest memory to disk, which may reduce '
                           . 'instead of having this program create a new '
  $int = 0;
    $int <<= 8;
    $int >>= 8;
               . 'integer between ' . $gMinVmnet . ' and ' . $gMaxVmnet . '.'
  # interaction with the sound device. The alternate lspcidrake tool
                  . 'interactive mode, without using `-d\' option.' . "\n\n", 0);
                   . 'interface for vmnet' . $vHubNr . '? (yes/no)',
          . 'interfaces to deal with (leaving out ' . $vHostIf . '). e.g.:'
      # internal error
      internal_sed($auth_file, $tmp_file, 0, \%patch);
   internal_sed($gRegistryDir . "/pangorc", $pangorc, 0, \%patch);
      internal_sed($mouse_file . $cBackupExtension,
   internal_sed($plain_file, $tmpfile, 0, $patch_thru);
    internal_sed($promoconfig, $name, 1, \%patch);
        internal_which("semodule") eq '') {
        internal_which("semodule_package") eq '' ||
# Internationalization data file
                # In the mouse section, if we end the section and we haven't
    # in the PATH, then the compile will fail.  We check form make below so if
                          . 'in the range of private network numbers.  For '
		"in the system path.\n\n";
# in the system ramdisk when we rebuild it.
      # in the XFree Code and we only need to install the latest
      # In this case, all the XAA and ShadowFB changes are present
  # In this case, only want ports that are active on the system, not just
  # In this case, the Xwrapper is used if /etc/X11/X exists (could be broken)
  # In this case, the Xwrapper will execute setuid anything /etc/X11/X
    # In this case, we are in the situation of having a mix between
  # in this mode, the mouse will be erratic when exiting X if
#       ((int)  number of symlinks installed,
    $int |= $quaddot_a[$i];
	     . 'invoking "' . vmware_tools_app_name() . '" from the command line '
      "In which directory do you want to install the theme icons?",
		  'in your /boot directory and run this configuration ' .
                       . 'in your virtual machines?', 'yesno', $answer);
                       . 'in your virtual machines? (yes/no)', 'yesno', 'yes');
				 'ip', '');
				'ip', '');
    #                              -i '"pci15ad,720" "pci1022,2000"' vmxnet
             . ' -i \'"pci15ad,720" "pci1022,2000"\' vmxnet >/dev/null 2>&1');
               . ' -i \'"pci15ad,7b0"\' vmxnet3s >/dev/null 2>&1');
                        . 'IP network, or its network configuration does not '
		 ' is a broken symlink. X configuration skipped.' . "\n\n", 0);
                             ' is already in use by ' . $nameMap{$name} .
    # is being used.
#  is configured from our own pango modules, especially on FreeBSD 6.2 and higher.
  # is consistent on all supported distributions.
           . "is '" . $currentAdmin . "'.  Would you like to specify a different "
            . ' is designed to work independently of '
	      . ' is designed to work independently of '
                  . ' is designed to work independently of this feature (including '
               . ' is designed to work independently of this feature.' . "\n"
            . ' is designed to work independently of this feature.' . "\n"
# isDeviceKitUsedForXorg
  # is /dev/parport16 (not /dev/parport1), and so on...
# is expected to support, then look for the more general XF86Config(-4) file,
      $isFedoraRel != 0 and
  # is for the tools people only and we shouldn't be messing with it.
         || is_hostonly_network($vHubNr)
                  $isKeyboardSection = 1;
            $isMouseSection = 0;
                $isMouseSection = 1;
              $isMouseSection = 1;
         || is_nat_network($vHubNr);
                 . 'is OK to use the same number on different systems so long '
      # Isolate the program name (we are certain it does not contain a
# is one of the following...
  # is pointing to. So /etc/X11/X has to be pointing to the correct X
	    # is regenreated.
           $isSuseRel11 = 0;
      $isSuseRel11 != 0 and
    # is the 3.x version and XF86Config-4 is the 4.x version.
# is used in the pattern:  create tmp dir, create tmp file, block_remove(), mv file,
                 . 'is used.  The subnet numbers are chosen from the private '
    # it
               . 'it already.' . "\n\n", 0);
    # It doesn't make sense to launch the editor if we're not doing
                  'it from a local console session. Are you SURE you ' .
# it is.
  # it is installed with, even for dev builds.  So add it
  # it isn't installed (it may be, but since it's not configured we will not
  # it, it means we have to generate it for them...
# it over any other modules in the system.
      # It's common to mount over /mnt in Solaris so we use /hgfs
      # It seems we actually need to remove the pcn driver on 9 for the
  # it's marked as a user-modified config file...
              # Its one of our modules.  Lets keep track of where they are as
  # its usual values.  Also, this allows other makefiles to
  # its xorg file modified.
      # it the way it was before.
      # I would stop using force flag immediately, it does nothing good.
      ? join('/', db_get_answer('INITSCRIPTSDIR'), $basename)
         $jslib = $file;
#    Jump through hoops to launch vmware-user as part of xdm's Xsession script.
# just after its first <dir> entry.  This does not yet handle commented out
      # just copy to new file.
       # Just in case the destination directories don't exist.
	 # just print the line.
    # Just try rmmod-ing it. Silently.
              . 'KB available';
   # KDE, Xfce, etc.) session.  (This breaks features like GHI.)  The unfortunate
               . 'kdmconfig(1M) as root to switch from the Xsun server to the '
    $keep_settings = get_answer('The host-only network is currently '
    $keep_settings = get_answer('The NAT network is currently configured to '
  $keep_settings = 'no';
                              . 'keep your old settings as they are? (yes/no)',
      # kernel and the module are versioned.
             . 'kernel completed successfully.' . "\n\n", 0);
                   '/kernel/drv/amd64/vmblock', \%patch, $cFlagTimestamp);
                   '/kernel/drv/amd64/vmci', \%patch, $cFlagTimestamp);
                   '/kernel/drv/amd64/vmhgfs', \%patch, $cFlagTimestamp);
                   '/kernel/drv/amd64/vmmemctl', \%patch, $cFlagTimestamp);
                   '/kernel/drv/amd64/vmxnet3s',
                    '/kernel/drv/amd64/vmxnet', \%patch, $cFlagTimestamp);
    # /kernel/drv and adding it to the system with add_drv(1M).  add_drv(1M)
                 '/kernel/drv/vmblock', \%patch, $cFlagTimestamp);
                   '/kernel/drv/vmci.conf', \%patch, $cFlagTimestamp);
                   '/kernel/drv/vmci', \%patch, $cFlagTimestamp);
                 '/kernel/drv/vmhgfs', \%patch, $cFlagTimestamp);
                 '/kernel/drv/vmmemctl.conf', \%patch, $cFlagTimestamp);
                 '/kernel/drv/vmmemctl', \%patch, $cFlagTimestamp);
                   '/kernel/drv/vmxnet3s',
                   '/kernel/drv/vmxnet3s.conf',
        $kernel_gcc_version = $2;
              $kernel_gcc_version . '".' . "\n\n";
                 . 'kernel has never been built, or if you have invoked the '
	       "kernel headers of the running kernel.";
	       "   kernel headers of the running kernel\n" .
		"kernel headers of the running kernel.  Please " .
                     . 'kernel.' . "\n\n", 0);
  # Kernels before 2.6.18 declare UTS_RELEASE in version.h.  Newer kernels
               . 'kernel source tree that was completely clean (i.e. the '
        # kernels the safest way to pick up the vmxnet module is to reboot.
# kernels to avoid when rmmod'ing pcnet32
                   . 'kernel (version ' . $gSystem{'uts_release'} . ').  Even '
        # kernel which will panic or hang very unpredictably.
#          - key is the system file
         . '.key -out ' . shell_string("$certLoc") . '/'
      ($key, $val) = ($opt =~ /^([^=]*)=([^=]*)/);
      $kh_path = '';
      $kh_path = query('What is the location of the ' .
      kill(15, $childPid);
                    'killall', 'perl', 'mv', 'touch', 'hostname', 'pidof');
  # Kill any running vmware-hostd process.
                   . 'kind of file at this location.  Overwrite?', 'yesno',
  -k, --kernel-version <version>
                    'kldunload', 'mv', 'rm', 'ldconfig');
                   . $K_level . $service);
      $k_major = $1;
      $k_minor = $2;
       kmod_load_by_path($cKernelModuleDir . '/' . $gSystem{'uts_release'} . '/misc/vmci.o', 1, 0, 0);
    kmod_unload($name, 0);
       # kmod_unload('pvscsi');
       kmod_unload('vmci');
  #    kmod_unload('vmxnet', 0);
  #      kmod_unload('vmxnet3', 0);
  #      kmod_unload('vmxnet3s', 0);
# know about.  Modules in this list are searched for when
  # known to be active on the system:  listed in /proc/net/tcp.
                # 'k' should be case-insensitive.
                  last;
                last;
            last;
          last;
         last;
        last;
      last;
	     last
		 last;
         last if ($line =~ /$block/);
          . 'last install. Would you like to keep your version of the '
  # Last normal address in this subnet
  # Lazy initialization
          (lc ($prop{'AthlonKernel'}) eq 'forbidden')) {
          (lc ($prop{'AthlonKernel'}) eq 'required')) {
   $ldconfigOutput = `ldconfig -r`;
           ($ldconfigOutput =~ /(^|\n)[ \t]*\d+:-lm\.4 => /)) {
# % ldd /usr/lib/vmware-tools/configurator/XOrg/7.6_64/vmwgfx_drv.so
# ldd: warning: you do not have execution permission for `/usr/lib/vmware-tools/configurator/XOrg/7.6_64/vmwgfx_drv.so'
  $ld_lib_path .= ';' . $libdir . '/libssl.so.0.9.8;' . $libdir . '/libcrypto.so.0.9.8';
  # least it is secure
                           "Leaving both modules in there could potentially " .
   # leaving the corresponding call in the uninstaller) in the next release.
   # "legacy" autostart mechanism outside the context of their desktop (GNOME,
   # Legacy SYSV style.
  $length = length($word) + $reserved;
    $len = length($path);
  # Let anyone read the certificate
  # Let's first try getting the location from the DB.
    # Let the error propagate to callers
  # let users know our code is actually doing something.
    #     -- Let users specify the datastore name
# 	/lib64/ld-linux-x86-64.so.2 (0x00007f88cb13d000)
  $libbindir .= getFreeBSDBinSuffix();
# 	libc.so.6 => /lib64/libc.so.6 (0x00007f88ca6d7000)
  $libDir = db_get_answer_if_exists('LIBDIR');
# 	libdrm.so.2 => /usr/lib64/libdrm.so.2 (0x00007f88caa37000)
# 	libkms.so.1 => /usr/lib64/libkms.so.1 (0x00007f88cac42000)
  $liblibdir .= getFreeBSDLibSuffix();
# $libname that dynamically-linked object $objname
# 	libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f88ca2b0000)
# libraries and other support files necessary to run FreeBSD 6 binaries.)
                     . 'libraries, not for the running kernel. If you do not '
# 	librt.so.1 => /lib64/librt.so.1 (0x00007f88ca4ce000)
  $libsbindir .= getFreeBSDSbinSuffix();
		    $libsbindir . '/vmware-modconfig-console');
			       "libvmtools0");
			       "libvmtools-devel",
          $line = "";
      $line = $_;
       $line = "$1";
    $line1 = $gManifestNames[$i] . '.version = "' . $gManifestVersions[$i] . '"';
    $line2 = $gManifestNames[$i] . '.installed = "' . $gManifestInstFlags[$i] . '"';
       $line_added = 1;
        $line =~ /(\d+\.\d+\.\d+\.\d+)/;
      $line = lc($line);
          $line = "# " . $line;
    $line = $line . "\n";
            $line = "# " . $line . $newline;
            $line = $newline;
         # lines.
	$line =~ s/$key/$value/g;
	  $line =~ s/$patchKey/$libdir/;
    @lines = split(/\n/, $text);
  @lines = split(/\n/, $text);
  $linkDest = readlink($link);
                   $linkdir . '/amd64/' . $linkname);
                   $linkdir . '/i86/' . $linkname);
   link_runlevel(2, $service, $S_level, $K_level);
   link_runlevel(3, $service, $S_level, $K_level);
   link_runlevel(5, $service, $S_level, $K_level);
      link_services_solaris('vmware-tools', '05', '65');
     link_services("vmware", $S_priority, "08");
      link_services('vmware-tools', '03', '99');
# link to /usr/lib/isaexec.
  # Linux and Solaris, the vmware-user wrapper script is marked setuid).
                 . '"linux/autoconf.h" as expected.  This can happen if the '
    # linux/autoconf.h contains the up/smp information
  # Linux distros now use apploader for toolbox-cmd and
    # Linux kernel build bug
# 	linux-vdso.so.1 =>  (0x00007fff9e586000)
                 . '"linux/version.h" as expected.  This can happen if the '
           $list .= ':';
      @list = ();
  # list and removing the ones that have already been allocated.
      $list = \@compatible;
           $list = db_get_answer('APPENDED_FILES');
         $list .= $initmodfile;
# List of all ethernet adapters on the system
# List of ethernet adapters that have not been bridged
    # list of filesystems, each represented by a word. For example:
# list of in use modules.  If there is an entry in the blacklist
			"list of kernel modules to be overwritten by this " .
   # List of questions answered with command-line arguments
      $list = \@perfect;
    @list = $self->device_list($prefix . $name, $sec->{pattern}, 1);
    $list = undef;
      $lmsg = 'There is insufficient disk space available in ' . $answer
   load_all_ethif_info();
    # loaded when the interface is brought up).  More explicitly:
    # loader config.  Besides that it fixes /boot/loader.conf growing
      load_ethif_info();
   load_ethif_info();
  load_ethif_info();
                   . 'load into the running kernel.' . "\n\n", 0);
# Loads ethernet interface info into global variable
                 . 'loads perfectly into the ' . 'running kernel.' . "\n\n", 0);
# Load the installer database
   local *FD;
    # local file.
localityName            = Palo Alto
    local $SIG{PIPE} = sub {};
  local(*WFD);
			     "located.\n");
# locate_upstart_jobinfo
         $location = $fields[2];
# location of the library. Require it to be an absolute path.
               . 'location where the running kernel would look for the '
                '-logfile', $xLogFile,
$long_name configurator.
                                # look around using the user's original PATH.
# Look for all of the network nodes based on the paths passed in and
# Look for an x config file that first contains a list of modes the driver
  # Look for matches and selectively replace drivers
  # Look for the mmx flag so we can tell if we are running on a kernel
  # Look for the Vix tar ball that may be hitching a ride in this installation.
                    'lsmod', 'modprobe', 'mv', 'rmmod', 'ifconfig', 'rm',
                    'lsmod', 'modprobe', 'rmmod', 'ifconfig', 'rm', 'tar',
                        . 'machine.  Because no private subnet appears to be '
  $machine = 'machine';
                 . 'machine.  Please make sure it is installed.  Do you want '
                  . 'machines and ' . $os . '.  Virtual machines connected '
                  . 'machines to be connected to a network, say "yes" '
                 . 'machine.  This means that it is OK to use the same number '
                 . $machine . '.  Virtual machines on this network can '
#    machine with both slightly older GNOME and KDE installed may have
      # made an explicit change, that must be placed in the config file directly.
  </magic>
  <magic priority="50">
    $major = 0;
    $major = $1;
      ($major > 4 || ($major == 4 && $minor >= 2)) &&
		      ($major > 4 || ($major == 4 && $minor >= 2))) {
  ($major, $minor, $sub) = split_X_version($xversionAll);
          . 'major number ' . $major . ' and minor number ' . $minor . '.'
    # Make a default one unless it exists already
      make_all_net();
  make_all_net();
      # make a temp dir
    make_bridged_net($vHubNr, $vHostIf, $answer);
  make_bridged_net($vHubNr, $vHostIf, $answer);
    make_bridged_net($vHubNr, $vHostIf, "eth0");
    make_bridged_net($vHubNr, $vHostIf,  $gAvailEthIf[0]);
      make_bridged_net($vHubNr, 'vmnet' . $vHubNr, $ethIf);
  make_hostonly_net($vHubNr, $vHostIf, $subnet, $netmask, $run_dhcpd);
      make_hostonly_net($vHubNr, 'vmnet' . $vHubNr, $subnet, $netmask, 1);
  # Make key readable only by root (important)
  # make links to the config files
                 . '"make mrproper" command in your kernel directory.  In any '
	       "   make\n" .
  make_nat_net($vHubNr, $vHostIf, $subnet, $netmask);
      make_nat_net($vHubNr, 'vmnet' . $vHubNr, $subnet, $netmask);
    $makePath = internal_which('make');
# Makes the patch hash that is used to replace the options in the dhcpd config
   # Make sure the executable exists.
    # Make sure there is no default answer here
  # Make the initrd.
			       "Manage networking for your virtual machines",
    # Mandrake 7.x systems. As far as the syntax is concerned, XF86Config
                    . 'many backups files.  They are files of the form '
# Mark a file as modified without changing it.
   </match>
# matches a part of the uts_release value of the system's kernel.
# match the output of 'uname -s' to the product. These are compared without
   <match type="string" value="\\0xD0\\0xBE\\0xD0\\0xBE" offset="0"/>
   <match type="string" value='config.version = "' offset="0:4096"/>
   <match type="string" value="# Disk DescriptorFile" offset="0"/>
   <match type="string" value="KDMV" offset="0"/>
   <match type="string" value='&lt;Foundry version="1"&gt;' offset="0">
    <match type="string" value="&lt;VM&gt;" offset="23:24"/>
    <match type="string" value="&lt;VMTeam&gt;" offset="23:24"/>
  $max = (scalar(@arr1) > scalar(@arr2) ? scalar(@arr1) : scalar(@arr2));
               . 'meantime, you can do it yourself by rebuilding a kernel '
  # Median address in this subnet
    migrate_network_files('/etc/dhcp.pcn', '/etc/dhcp.vmxnet', 'dhcp');
    migrate_network_files('/etc/hostname6.pcn', '/etc/hostname6.vmxnet', 'vmx6');
    migrate_network_files('/etc/hostname.pcn', '/etc/hostname.vmxnet', 'vmx');
   $mimeConf = "$tmpdir/vmware.xml";
<mime-info xmlns="http://www.freedesktop.org/standards/shared-mime-info">
   $mimePackagePath = $mimePath . "/packages";
   $mimePath = "/usr/share/mime";
         $mime_support = 1;
 </mime-type>
MimeType=$mimetypes
                        $mimetypes, 1);
         $mimetypes .= "application/x-vmware-team;";
 <mime-type type="application/x-vmware-snapshot">
 <mime-type type="application/x-vmware-team">
 <mime-type type="application/x-vmware-vm">
 <mime-type type="application/x-vmware-vmdisk">
 <mime-type type="application/x-vmware-vmfoundry">
    $minor = 0;
    $minor = $2;
                              . $minRAMinMB . ' MB.  Do you really want to '
    # minus the amount used by the kernel
# mkdir() that reports errors
        m,/lib/modules/$gSystem{'uts_release'}/(.+)/[\w\.\-]+\.k?o,) {
  -m, --modules-only          Only rebuild/install kernel modules and skip
  # modconfig-console.
    $modconfig = shell_string($libsbindir . '/vmware-modconfig-console');
    $modconfig = 'VMWARE_USE_SHIPPED_GTK=yes ' .
         ++$modCount;
                     $mod_dir . '/binary/' . $candidate . '/objects/'
    $mod_dir = db_get_answer('LIBDIR') . '/modules';
    $mod_dir = db_get_answer('LIBDIR') . '/modules.new';
        && ($mode_height < $height)
   # ModeList is based in bora/public/modelist.h.  It contains the resolutions
  @mode_list = split(' ', $resolution_string);
#	Modes "1024x768"
#	Modes "1152x864"
#	Modes "1152x900"
#	Modes "1280x1024"
#	Modes "1376x1032"
#	Modes "1600x1200"
#	Modes "1600x1200" "1280x1024" "1152x864" "1024x768" "800x600" "640x480"
#	Modes "2364x1773"
        Modes       "640x480"
#	Modes "640x480"
#	Modes "800x600"
        Modes       $screen_mode
	Modes $screen_mode
        && ($mode_width * $mode_height > $best_res)) {
    @mod_list = get_suitable_modules($mod_dir . '/binary');
      $modName = $1;
    $modName = $cKernelModuleAliases{"$line"};
          $modPath = "$fp1";
          $modPath = "$fp2";
    # modprobe.conf and SLES9 wants user modified entries in that
                                  $modprobe_file . $cBackupExtension,
        ($modprobe_file eq '/etc/modprobe.conf')) {
      $modprobe_file = '/etc/conf.modules';
      $modprobe_file = '/etc/modprobe.conf';
      $modprobe_file = '/etc/modprobe.conf.local';
      $modprobe_file = '/etc/modprobe.d/vmware-tools.conf';
      $modprobe_file = '/etc/modules.conf';
    # modprobe looks for module info first in modprobe.conf and then
                     . 'modprobe vmxnet' . "\n"
	   $modStatus = $gOption{'clobberKernelModules'}{"$modDep"};
     "$modStatus" ne 'not_installed') {
    # module and invoking devfsadm(1M) to add appropriate symlinks from /dev
    $moduleArch = "amd64";
    $moduleArch = "i386";
# module as modprobe would see it.
               . ' module because the "' . $cKernelModuleDir . '/'
    $moduleConfed = 'yes';
  # module dependencies, it makes more sense for the dependencies to be rebuilt
                           $moduleDest,
      module_error();
    module_error();
                              . ' module for your system (you need to have a '
        $moduleId=$modinfo[0];
               . 'module) is missing.  Please make sure that this '
# module, it compares it against the version information of the
			   $moduleName,
# Module PCI ID and alias definitions.
   module_post_configure('pvscsi', $result);
  module_post_configure('vmblock', $result);
  module_post_configure('vmci', $result);
    module_post_configure('vmhgfs', $result);
    module_post_configure('vmmemctl', $result);
   module_post_configure('vmsync', $result);
  module_post_configure('vmwgfx', $result);
  module_post_configure('vmxnet3', $result);
  module_post_configure('vmxnet', $result);
   module_post_configure('vsock', $result);
  module_ramdisk_check("$mod");
    # modules.
                                 $modules_file . $cBackupExtension,
			      modules-only, skip-stop-start and compile.
    # modules we ship are for 6.3, we will just use these instead.  They are
module tpvmlpcupsd 1.0;
    $moduleVersion = '6.3';
    $moduleVersion = '7.0';
    $moduleVersion = '7.1';
    $moduleVersion = '7.3';
    $moduleVersion = '8.0';
                    'modunload', 'add_drv', 'rem_drv', 'update_drv',
                     && ($modversion eq 'yes'), 1)) {
    Monitor     "vmware"
    Monitor "vmware"
# Moreover, SuSE 6.1's 'which' is unable to handle program names beginning with
                        # Most common case: /dev/input/mice
	   $mountpoint = $2;
                    "${mountpoint}. Ejecting device $device ...\n");
               $mountpoint = $rest;
            $mountpoint =~ s/\\040/\ /g;
               $mountpoint =~ s/(.*)\s+hsfs.*/$1/;
                     # mouse device is /dev/mouse. Most machines don't have
                   $mouse_file, 0, \%p);
            # mouse, keyboard, and only mouse section will be re-processed,
                   $mouseOption{'"Emulate3Buttons"'} = "";
                                        .  $mouseOption{$option} . "\n";
                   $mouseOption{'"ZAxisMapping"'} = "";
# Moved from various scripts that include util.pl
# Moved out of config.pl to support $gOption in spacechk_answer
#  Move the /etc/vmware/pam.d information to its real home in /etc/pam.d
               . 'mrproper" command).  You may want to ask the provider of '
      $msg = "\nWARNING: This program cannot compile any modules for " .
      $msg = "  Please specify the user whom you wish to be the " . vmware_product_name()
    $msg .= 'This configuration is not recommended and ' .
      $msg .= 'This configuration is not supported and ' .
	$msg .= " - This program could not find a valid path to make.  " .
	$msg .= " - This program could not find a valid path to the " .
	$msg .= " - This program could not find a valid path to the gcc " .
    $msg = 'Your kernel was built with "gcc" version "' . $kernel_gcc_version .
            # multiple times.
            . "must be between 0 - 65536 and contain only decimal digits." . "\n\n";
                 . 'mutually exclusive.' . "\n\n", 0);
               . '  # mv /etc/dhcp.pcn0 /etc/dhcp.vmxnet0'
               . '  # mv /etc/hostname6.pcn0 /etc/hostname6.vmxnet0' . "\n"
  my $addDummyPrinter = 'false';
  my $addXconfToDb = 0;
   my $admin = 'root';
      my $aliascount = $vmxnet;
  my $alias = shift;
	my $aline;
      my $allRestoreStr;
	    my($amodid, $dummy2, $dummy3, $dummy4, $dummy5, $amodname) = split(/\s+/, $aline);
      my $answer;
    my $answer;
  my $answer;
  my $answer = $cRamdiskKernelModules{"$mod"};
    my $answer = get_persistent_answer("Do you want to use the current proxy port "
  my $answer = 'no';
    my $answer = shift;
  my $answer = shift;
    my $answer_string = '""';
  my $answer = 'yes';
   my $app_dir = "modules/com.vmware.webaccess.app_1.0.0";
  my $appendPaths = shift;      # (optional, array ref) Define this if you'd like
  my $append = shift;
  my $appLoaderArgs = '';
  my $appLoaderArgs = shift;
      my $arg;
  my @Args = @_;
   my @argv;
  my @arr1;
  my @arr2;
   my $auth_file = $gRegistryDir . '/hostd/authorization.xml';
   my %autodirs = (
  my $availableRAMInMB;
  my $availableRAMInMB = undef;
  my @avail_modes;
  my @backends =  ("$cupsDir/tpvmlp", "$cupsDir/tpvmgp");
  my $backupDir = shift;         # (optional) Pass this in to backup $file to a different directory.
  my $backupName;
   my $basename = vmware_service_basename();
  my $base_port = shift;
  my $begin_marker = shift;
   my $begin = shift;
  my $best_name;
  my $best_res;
  my $best_resolution = '';
   my $bindir = db_get_answer('BINDIR');
  my $bindir = db_get_answer('BINDIR');
  my $bin = shift;
	   my $bitExt = ($gIs64BitX) ? '_64' : '';
   my $bkupExt = internal_basename($systemMod);
   my $block = shift;
    my $blockStr = '';
  my $bridged_ethIf = $gDBAnswer{'VNET_' . $vHubNr . '_INTERFACE'};
  my $bridged = shift;
  my $bridge_flag = shift;
    my $bridge = $gDBAnswer{'VNET_' . $i . '_INTERFACE'};
    my $broadcast = compute_broadcast($hostaddr, $netmask);
  my $broadcast = compute_broadcast($hostaddr, $netmask);
  my $BSDModPath;
  my ($buf, $buf2);
      my $buf = `desktop-file-install --help 2>&1`;
  my $build_dir;
  my $buildNr;
  my $canBuild = 'no';
  my $candidate;
   my @candidate_mounts;
      my $candidate = shift(@mod_list);
         my $catdir = $sizedir . '/' . $category;
my $cBackupExtension = '.BeforeVMwareToolsInstall';
my $cConfiguratorFileName = 'vmware-config.pl';
my $cConnectSocketDir = '/var/run/vmware';
my $cCreateDirFailure = '-1';
my $cCreateDirSuccess = '0';
my $cDirExists = '1';
  my $cEI_CLASS = 4;
  my $cEI_MAG0 = 0;
  my $cELFCLASS64 = 2;
  my $cELFMAG = "\x7FELF";
  my $certCnf;
  my $certLoc = shift;
  my $certPrefix = shift;
  my $certUniqIdent = "(564d7761726520496e632e)";
  my $cf;
   my $cfgFile = '/etc/pulse/default.pa';
my $cFlagConfig        =   0x2;
my $cFlagDirectoryMark =   0x4;
my $cFlagFailureOK     =  0x10;
my $cFlagTimestamp     =   0x1;
my $cFlagUserModified  =   0x8;
  my $changeXConf = 1;
  my $char = shift;
  my $childPid;
  my $childStatus;
  my $choice;
   my $chompedMarkerBegin = $cMarkerBegin;
   my $chompedMarkerBegin = $markerBegin; # block_match requires chomped markers
  my $chosen_resolution = '';
  my $chr = shift;
my %cKernelModuleAliases = (
my %cKernelModuleDeps = (vsock => ('vmci'));
my $cKernelModuleDir = '/lib/modules';
my @cKernelModules = ('vmblock', 'vmhgfs', 'vmmemctl',
  my $class = ref($proto) || $proto;
  my $clobberKMod = $gOption{'clobberKernelModules'}{"$mod"};
my $cMarkerBegin = "# Beginning of the block added by the VMware software\n";
my $cMarkerEnd = "# End of the block added by the VMware software\n";
   my $cmd;
  my $cmd;
   my $cmd = join(' ', $rpmBin, '-qa --queryformat \'%{NAME}\n\'');
   my $cmd = "$pulseaudioBin --version";
   my @cmd = (("$rpmBin", '-e'), @pkgList);
      my ($cmd, $val) = ($1, $2);
my $cModulesBuildEnv;
my $cNetmapConf = '/etc/vmware/netmap.conf';
my $cNICAlias = 'vmnics';
   my $command = "/etc/init.d/httpd.vmware status";
  my $command = shift;
   my $comment = shift;
  my @compatible = ();
       my $compat = $minor;
   my $compat = shift;
    my $compizfile = '/usr/bin/compiz';
  my $conf;
  my $config = new VMware::Config;
  my $configText;
  my $configuredExtension = '.AfterVMwareToolsInstall';
   my $content = shift;
  my $contents = shift;
my @cOpenVMToolsRPMPackages = ("vmware-kmp-debug",
   my $count;
  my $count = 0;
my %cPCnet32KernelBlacklist = (
my %cProductServiceTable = (
        my @cpuinfo = <CPUINFO>;
my %cRamdiskKernelModules = (vmxnet3 => 'yes',
  my $createNewXConf = 0;
my $cRestoreBackList = 'RESTORE_BACK_LIST';
my $cRestoreBackupSuffix = '_BAK';
my $cRestorePrefix = 'RESTORE_';
  my $cSELFMAG = 4;
my $cServiceCommandDirect = 0;
my $cServiceCommandSystem = 1;
my $cServices = '/etc/services';
my $cSwitchedToHost = 'SWITCHED_TO_HOST';
my $cTerminalLineSize = 79;
my $cTmpDirPrefix = 'vmware-config';
  my $cTmpDirPrefix = "vmware-ssl-config";
  my $cupsaccept;
  my $cupsConf = "$cupsConfDir/cupsd.conf";
  my $cupsConfDir = '/etc/cups';
  my $cupsDir = '/usr/' . (is64BitUserLand() ? 'lib64' : 'lib')  .
  my $cupsenable;
  my $cupsPrinters = "$cupsConfDir/printers.conf";
   my $currentAdmin = '';
  my $currentMinor = 10;   # The most recent version we build the drivers for
  my @currentSection;
  my $curTime = time();
my $cVixProductName = ' VMware VIX API';
my $cX64ModulesDir = '/usr/X11R6/lib64/modules';
  my $cXConfigFile = find_suitable_XConfigFile($xversion);
my $cXModulesDir = '/usr/X11R6/lib/modules';
  my $cXPreviousResolution = 'X_PREVIOUS_RES';
  my @dangerous = ();
  my @data_lines;
  my $data = pack("I", 0);
     my $dbKey = 'VNET_' . $vHubNr . '_NAME';
  my $default;
         my $default = ($gOption{'overwrite'} ? 'no' : 'yes');
         my $default = ($gOption{'preserve'} ? 'yes' : 'no');
  my $defaultOpts = ($gOption{'default'} == 1) ? ' --default' : '';
    my $defaultreply = shift;
  my $default = shift;
    my $default_value = $defaultreply eq '' ? '' : ' [' . $defaultreply . ']';
      my $del = 0;
   my $desktopConf;
   my $desktopdir;
   my $desktopdir = db_get_answer("DESKTOPDIR");
   my $desktopFilename = shift;
        my $dest;
    my $destDir = "/etc/ld.so.conf.d/vmware-tools-libraries.conf";
   my $dest_dir = internal_dirname($dest_path);
  my $dest = '/etc/prelink.conf.d/vmware-tools-prelink.conf';
    my $destFile = "/etc/ld.so.conf";
   my $dest_file = internal_basename($dest_path);
   my $desticondir;
  my $dest = "misc";
  my $destName = get_module_name($name);
  my $destName = shift;
   my $dest_path = $template_file;
  my $dev;
        my $dev = $1;
   my $device;
        my $device = 'vmnet' . $vHubNr;
  my($dev, $val, %present);
  my $dhcpd_dir;
  my $dir;
      my @dircontents = readdir CDROMDIR;
  my $dir = db_get_answer('LIBDIR') . '/modules/binary/';
  my $dir = db_get_answer('LIBDIR') . '/modules/binary/FreeBSD';
  my $dir = '/etc/pam.d';
  my $dirname;
  my ($dir, $path1, $path2) = @_;
  my $dir = shift;
  my $disableHotPlug = 'no';
    my $dispInstallMsg = 1;
   my $docroot = db_get_answer('LIBDIR') . "/hostd/docroot";
    my $doForce = shift; # IN: Flag to indicate whether loading should be forced
    my $doRecursive = shift; # IN: Whether to also try loading modules that
    my $doSilent = shift; # IN: Flag to indicate whether loading should be done silently
   my $dotDesktop = "$gRegistryDir/vmware-user.desktop";
   my $dotdScript = '/etc/X11/Xsession.d/99-vmware_vmware-user';
  my $driver = shift;
  my $dst_dir;
   my $dstDir = '/etc/udev/rules.d';
  my $dst_dir = shift;
         my $dstDrm = findreqlib($vmwgfx_drv, $libdrm);
  my $dstFile;
   my $dst = join('/', $dstDir, $ruleName);
         my $dstKms = findreqlib($vmwgfx_drv, $libkms);
   my $dst = shift;
  my $dst = shift;
   my $eclipseDestDir;
   my $eclipseSrcDir = db_get_answer("LIBDIR") . '/eclipse-ivd';
   my $eject_cmd = '';
   my $eject_failed = 0;
   my $eject_really_failed = 0;
  my %emittedAliases = ();
  my $emittedVmnics = 0;
  my $emittedVmxnet = 0;
    my $enableGpmImps2;
  my $enableXImps2 = '';
  my $enableXImps2 = 'no';
  my $end_marker = shift;
   my $end = shift;
   my @escapedArgv;
  my $eth;
  my %ethernet = ();
  my $ethidx = 0;
      my $ethIf = db_get_answer('VNET_' . $vHubNr . '_INTERFACE');
  my $ethIf = shift;
  my $eth = shift;
    my $eula = <EULA>;
   my $execName = shift;
   my $existingDirs = 0;
  my $explain;
  my $extendedVersion = $gSystem{'version_utsclean'} . $result;
      my @fields;
   my @fields;
   my $file;
  my ($file) = @_;
  my $file;
  my($file) = @_;
  my $file = '/etc/vmware/vm-list';
   my $fileModified = 0;
  my @files;
  my %filesBackedUp;
   my $file = shift;
  my $file = shift;
  my %fileToRestore;
    my $filler = '';
  my $first_time = 1;
  my $flag;
   my $flags = $cFlagTimestamp | $cFlagConfig;
   my $flags = shift;
  my $flags = shift;
  my @fn;
   my ($font_line, $sys_line);
   my $font_path = db_get_answer('LIBDIR') . "/libconf/etc/fonts/fonts.conf";
      my $fonts_found = 0;
  my $force = shift;
    my $found = 0;
   my $foundGnome = 0;
   my $foundGnomeStart;
   my $foundit = 0;
   my $foundKde = 0;
   my $foundKdeStart;
        my $fp1 = $1;
        my $fp2 = join('/', $modDir, $fp1);
     my $freeBSDVersion = getFreeBSDVersion();
  my $freeBSDVersion = getFreeBSDVersion();
      my $free = get_free_network();
    my $free = get_free_network();
   my $from = shift;
   my $fstype;
         my $fullbin;
  my $fullpath = internal_which($answer);
  my $fullVersion;
my @gAllEthIf;
my %gAnswerSize;
my @gAvailEthIf;
my $gCanCompileModules = 0;
  my ($gcc) = @_;
  my $gcc_path;
  my $gcc_path = shift;
  my $gcc_version;
  my $gcc_version = direct_command(shell_string($gcc) . " -v 2>&1 | tail -1");
my %gCheckAnswerFct;
my $gConfFlag;
my %gDBAnswer;
my %gDBDir;
my %gDBFile;
my %gDBUserFile;
my $gDefaultAuthdPort = 902;
my @gDefaultHttpProxy = (8222, 80);
my @gDefaultHttpSProxy = (8333, 443);
my $gDefBridged = '0';
my $gDefHostOnly = '1';
my $gDefNat = '8';
my $gFirstModuleBuild = 1;
my $gGccPath;
my %gHelper;
  my $gid = shift;
my $gInstallerMainDB;
my $gIs64BitX = 0;
my $gKernelHeaders;
my $gLinkCount = 0;
my $gLogDir;
  my $g_major = '0';
my @gManifestInstFlags;
my @gManifestNames;
my @gManifestVersions;
my $gMaxNumber = 0;
my $gMaxVmnet = '254';
my $gMinVmnet = '0';
my %gNonVmwareModules = ();
my $gNoXDrivers = 0;
my $gNumVmnet = 10;
my %gOption;
  my $gotKeyboardSection = 0;
  my $gotMouseSection = 0;
  my $gotServerFlagsSection = 0;
  my $gotServerLayout = 0;
  my $GPMBinary = internal_which('gpm');
my %gPortCache;
my @gRamdiskModules;
my $gRegistryDir;
my @gReservedVmnet = ($gDefBridged, $gDefHostOnly, $gDefNat);
my $gSavedPath = $ENV{'PATH'};
my $gStateDir;
my @gSuspectedFontLocations = ('/usr/share/fonts',
my %gSystem;
my $gVmciBuildDir = '';
my %gVmwareInstalledModules = ();
my $gWebAccessWorkDir = '/var/log/vmware/webAccess/work';
my $gXMouseDriverFile = '';
my $gXVideoDriverFile = '';
	   my @halDirs = ('/usr/lib/hal/scripts', '/usr/lib/hal', '/usr/libexec');
  my $halScript = "";
      my $handmap_file = '/etc/hotplug/pci.handmap';
   my $hasGnome = 0;
   my $hasKde = 0;
    my $header;
    my $headerdir;
    my $header_page_offset = direct_command(
  my $header_smp;
  my $header_version_uts;
  my $height;
  my $height = shift;
    my $helpString;
      my $hgfsmounterBinary = $libsbindir . '/vmware-hgfsmounter';
    my $hostaddr =
  my $hostaddr;
         my $hostaddr = db_get_answer('VNET_' . $vHubNr . '_HOSTONLY_HOSTADDR');
      my $hostaddr = db_get_answer('VNET_' . $vHubNr  . '_HOSTONLY_HOSTADDR');
      my $hostaddr = db_get_answer('VNET_' . $vHubNr . '_HOSTONLY_HOSTADDR');
  my $hostaddr = db_get_answer('VNET_' . $vHubNr . '_HOSTONLY_HOSTADDR');
  my $hostaddr = int_to_quaddot(quaddot_to_int($subnet) + 1);
  my $hostname = direct_command(shell_string($gHelper{"hostname"}));
      my $hostonly_addr = $gDBAnswer{'VNET_' . $i . '_HOSTONLY_HOSTADDR'};
  my $hostonly_flag = shift;
  my $hostonly_hostaddr = $gDBAnswer{'VNET_' . $vHubNr . '_HOSTONLY_HOSTADDR'};
  my $hostonly = is_hostonly_network($vHubNr);
      my $hostonly_mask = $gDBAnswer{'VNET_' . $i . '_HOSTONLY_NETMASK'};
  my $hostonly_netmask = $gDBAnswer{'VNET_' . $vHubNr . '_HOSTONLY_NETMASK'};
  my $hostonly = shift;
      my $hostonly_subnet = $gDBAnswer{'VNET_' . $i . '_HOSTONLY_SUBNET'};
   my $httpAnswer;
  my $httpPort  = get_persistent_answer('Please specify a port for ' .
  my $httpProxy;
   my $httpsAnswer;
  my $httpsPort = get_persistent_answer('Please specify a port for ' .
  my $httpsProxy;
      my $i;
  my $i;
  my $i = 0;
   my $iconFile = db_get_answer("ICONDIR") . "/hicolor/48x48/apps/$iconShortFile";
   my $iconName = $iconShortFile;
            my $iconpath = $catdir . '/' . $icon;
   my $iconShortFile = shift;
           my $id = 1;
  my $ideal = shift;
  my $identifier;
    my @id_params = getpwnam $answer;
  my $id = shift;
    my $Id = shift;
      my $image_file = '/boot/initrd-' . $gSystem{'uts_release'} . ".img";
  my $in;
  my $inDevice = 0;
    my $index = 0;
   my $infile = shift;
      my $initctl = internal_which('initctl');
   my $initctl = internal_which('initctl');
      my $initctl_version_string = direct_command(shell_string($initctl) . " version");
  my $initDir = shell_string(db_get_answer('INITSCRIPTSDIR'));
  my $initmodfile;
      my $initmodfile = '/etc/initramfs-tools/modules';
   my $initmodfile = shift;
      my $initrdList = "-i initrd-$gSystem{'uts_release'}";
   my $init_style = db_get_answer_if_exists('INIT_STYLE');
  my $inline;
  my $inMonitor = 0;
  my $input = shift;
  my $inSection = 0;
  my $installed_flag = shift;
  my $installShippedModule = 0;
   my @instPkgs;
  my $int;
  my $int = shift;
  my $ip = shift;
   my $is64BitUserland = is64BitUserLand();
  my $is64BitUserland = is64BitUserLand();
         my $is64BitUserLand = is64BitUserLand();
      my $isaexec = $linkdir . '/isaexec';
  my $isFedoraRel = system(shell_string($gHelper{'grep'}) . ' ' .
              my $isKeyboardSection = 0;
  my $isMouseSection = 0;
  my $issue = '/etc/issue';
  my $isSuseRel11 = 1;
  my $isUbuntuHardy = system(shell_string($gHelper{'grep'}) . ' ' .
     my $isUbuntu = system(shell_string($gHelper{'grep'}) . ' ' .
         my $jobPath = "/etc/init";
   my $jslib;
        my $kdeAutostart = "$kdePrefix/share/autostart";
      my $kdeConfig = internal_which($_, 1, ["/usr/local/kde4/bin"]);
   my @kdeConfigs = ("kde-config", "kde4-config");
        my $kdePrefix = direct_command(shell_string($kdeConfig) . " --prefix");
  my $keep_settings;
  my ($kernel_gcc_version) = undef;
  my $kernel_headers;
      my $kernelList = "-k vmlinuz-$gSystem{'uts_release'}";
    my $key;
      my ($key, $val);
  my $kh_path = shift;
   my $K_level = shift;
    my $k_major = '0';
    my $k_minor = '0';
   my @K_runlevels = ('0', '1', 'S');
    my $kvers = direct_command(shell_string($gHelper{'uname'}) . ' -r');
   my ($ldconfigOutput);
   my $lddbin = shell_string($gHelper{'ldd'});
    my $ldd_out = direct_command(shell_string($gHelper{'ldd'}) . ' ' . vmware_vmx_app_name());
  my $ld_lib_path = $ENV{'LD_LIBRARY_PATH'};
  my $ld_lib_string = "LD_LIBRARY_PATH='" . $ld_lib_path . "'";
  my $left = shift;
    my $len;
  my $length;
   my $level = shift;
   my $libbindir = $libdir . '/bin';
  my $libbindir = $libdir . ($is64BitUserland ? '/bin64' : '/bin32');
  my $libDir;
  my $libdir = db_get_answer_if_exists('LIBDIR');
    my $libdir = db_get_answer('LIBDIR');
   my $libdir = db_get_answer('LIBDIR');
  my $libdir = db_get_answer('LIBDIR');
  my $libdir = db_get_answer("LIBDIR");
  my $libdir = db_get_answer('LIBDIR') . '/lib';
         my $libdirname = db_get_answer('LIBDIR');
         my $libdrm = 'libdrm.so.2.4.0';
   my $libexa = $xorg_libdir . '/libexa.so';
         my $libkms = 'libkms.so.1.0.0';
   my $liblibbsd = ($is64BitUserland ? '/lib64' : '/lib32') . getFreeBSDLibSuffix();
   my $liblibconf = $liblibdir . "/libconf";
  my $liblibdir = $libdir . ($is64BitUserland ? '/lib64' : '/lib32');
   my $liblibdir = $libdir . $liblibbsd;
   my $libname = shift;
  my $libsbindir = $libdir . ($is64BitUserland ? '/sbin64' : '/sbin32');
   my $libsbindir = $libdir . '/sbin';
    my $line;
  my $line;
  my $line1;
  my $line2;
   my $line_added = 0;
  my($line, $name);
  my @lines;
  my(@lines, $line, $num);
	my @lines = split('\n', direct_command(shell_string($gHelper{'modinfo'})));
   my $line = undef;
  my $linkDest;
   my $linkdir = shift;
   my $linkname = shift;
  my $link = shift;
         my $list;
    my $list;
   my @list;
  my @list = ();
  my @list;
      my $lmsg;
   my $loader_file = $liblibdir . "/libconf/etc/gtk-2.0/gdk-pixbuf.loaders";
   my $location = undef;
  my $long_name = vmware_longname();
  my $loop;
  my $lpadmin;
my $machine = 'host';
    my $magicnumber;
  my $major;
  my ($major, $minor) = solaris_os_version();
  my ($major, $minor) = split /\./, $solVersion;
  my $major = shift;
  my $make_patch_func = shift;
  my $makePath;
	   my $manifestExt = join('', $major, $compat, $bitExt);
  my $manifest = $gRegistryDir . '/manifest.txt';
  my $manifest_shipped = $gRegistryDir . '/manifest.txt.shipped';
   my $markerBegin = shift;     # IN: block begin marker
   my $markerEnd = shift;       # IN: block end marker
  my $max;
  my $maxPings = 10;
  my $max_range = 65536;
  my $maxTries = 100;
    my $message = shift;
   my $mimeConf;
   my $mimePackagePath;
   my $mimePath;
   my $mime_support = 0;
   my $mime_support = shift;
      my $mimetypes = "application/x-vmware-vm;";
   my $mimetypes = shift;
  my $minor;
  my $minor = shift;
  my $minRAMinMB = 256;
    my @missing;
     my $mod;
  my $modconfig = '';
  my $modconfig = shift;
  my $modConfKey = uc("$mod") . '_CONFED';
   my $modCount = 0;
     my $modDep;
  my $modDest = $dst_dir . '/misc/' . $name;
  my $modDest = get_module_install_dest($name);
  my $mod_dir;
        my $modDir = join('/', '/lib/modules', $kvers);
   my @modDirs = qw(/usr/lib64/xorg/modules /usr/lib/xorg/modules
  my $mode;
    my $mode_height = shift(@avail_modes);
  my @mode_list;
    my $mode_name = shift(@avail_modes);
  my $mode = shift;
    my $mode_width = shift(@avail_modes);
      my $modFile = "$tmpDir/tpvmlpcupsd-$$.mod";
  my $modInfoCmd = shell_string($gHelper{'modinfo'})
  my $modinfo = internal_which('modinfo');
  my @modInfoOutput = map { chomp; $_ } (`$modInfoCmd`);
     my @modinfo = split(/[ ]+/, $_);
    my @mod_list;
  my $modName;
  my $modName = "$mod";
    my $modname = shift;     # IN: Module name
    my $modname = shift; # IN: Module name
  my $modPath = '';
    my $mod_path = "/lib/modules/$gSystem{'uts_release'}/$modDest/$destName";
  my $modPath = shift;
    my $modpath = shift; # IN: Path to module object file
  my $modprobe_file = '';
  my $mod = shift;
     my $modStatus;
  my $modStatus = get_module_status("$mod");
  my $modStatus = get_module_status($mod);
  my $moduleArch;
  my $moduleConfed = 'no';
  my $moduleDest = shift;
   my $moduleId=undef;
  my $moduleName = shift;
      my $modules_file = file_name_exist('/etc/conf.modules') ?
   my $module=shift;
  my $module = shift;
  my $moduleVersion = '0.0';
      my $modversion = shift(@mod_list);
      my @mountlines = split('\n', direct_command(internal_which('mount')));
   my $mountpoint;
  my $mountPoint = db_get_answer_if_exists('HGFS_MOUNT_POINT');
   my $mountpoint = shift;
  my $mouse_file = '/etc/sysconfig/mouse';
  my %mouseOption = ('"ZAxisMapping"' => '"4 5"',
  my $mouseRegex = '^\s*driver\s+\"(?:mouse|vmmouse)\"';
  my $msg;
      my $msg = "Cannot find update-initramfs, necessary to update "
        my $msg = "Could not create the '/hgfs' directory.\n";
          my $msg = "Could not create the '/mnt/hgfs' directory.\n";
        my $msg = "Could not create the '/mnt/hgfs' directory.\n";
      my $msg = "Hostd is not configured properly.  Once you have corrected"
  my $msg = shift;
   my $msg = "  The current administrative user for " . vmware_product_name() . "  "
      my $msg = 'The ' . $cVixProductName .  ' failed to install. Please '
      my $msg = 'The filesystem driver (vmhgfs module) is used only for the '
    my $msg = "The port you selected" . $filler . " is invalid.  A port value "
      my $msg =  "There is no jslib component directory in " . $ui_dir . "."
      my $msg = "Unable to find a set of ports needed by the proxy file.\n";
      my $msg = "You have a pre-existing " . $dest_file . ".  The new version will "
  my $name;
  my($name) = @_;
    my $name = $3;
     my $name = db_get_answer_if_exists($dbKey);
  my($name, $default) = @_;
  my $name = defined($sec->{name}) ? $sec->{name} : "";
  my $name = $gRegistryDir . '/config';
  my %nameMap = ();
  my($name, $notset) = @_;
  my($name, $pattern, $show_all) = @_;
  my $names;
   my $name = shift;
  my $name = shift;
  my($name, $value) = @_;
  my($name, $vars) = @_;
   my $name = vmware_product_name() . ' ' . vmware_version();
  my $nataddr = int_to_quaddot(quaddot_to_int($network) + 2);
  my $nataddr = int_to_quaddot(quaddot_to_int($subnet) + 2);
  my $nat_dir;
  my $nat_flag = shift;
  my $nat_hostaddr = $gDBAnswer{'VNET_' . $vHubNr . '_HOSTONLY_HOSTADDR'};
  my $nat_netmask = $gDBAnswer{'VNET_' . $vHubNr . '_HOSTONLY_NETMASK'};
  my $nat_network = $gDBAnswer{'VNET_' . $vHubNr . '_NAT'};
  my $nat = shift;
  my $needMonitor = 0;
    my $netmask =
  my $netmask;
  my $netmask = '255.255.255.0';
         my $netmask = db_get_answer('VNET_' . $vHubNr . '_HOSTONLY_NETMASK');
      my $netmask = db_get_answer('VNET_' . $vHubNr  . '_HOSTONLY_NETMASK');
      my $netmask = db_get_answer('VNET_' . $vHubNr . '_HOSTONLY_NETMASK');
  my $netmask = db_get_answer('VNET_' . $vHubNr . '_HOSTONLY_NETMASK');
  my $netmask = shift;
  my $net_name = db_get_answer_if_exists('VNET_' . $vHubNr . '_NAME');
      my @netopt = ('install pcnet32 /sbin/modprobe -q --ignore-install vmxnet; ' .
    my $nettype = 'none';
  my $nettype = 'virtual';
  my $network;
  my $network = db_get_answer_if_exists('VNET_' . $vHubNr . '_HOSTONLY_SUBNET');
          my $network_path = find_first_exist("/etc/init.d/network",
  my @networks = ();
  my $new_broadcast = compute_broadcast($new_hostaddr, $new_netmask);
      my $newGcc = internal_which("gcc-$k_major.$k_minor");
  my $new_hostaddr = shift;
          my $newline = substr($line, 0, $start) 
    my $newMinor;
  my ($newModprobeConf, $systemModprobeConf, $ethAliases)
  my ($newModulesConf, $systemModulesConf, $ethAliases) = @_;
           my $newName;
  my $new_netmask = shift;
  my ($newPciHandmap, $systemPciHandmap)
  my $new_subnet = compute_subnet($new_hostaddr, $new_netmask);
  my ($newUpdateDbConf, $systemUpdateDbConf) = @_;
  my ($newXF86Config, $existingXF86Config, $xversion, $enableXImps2,
  my $num = 1;
   my $numSymlinks;
   my $numSymlinks = 0;
   my $objname = shift;
  my $o_file = $gRegistryDir . '/pam.d/vmware-authd';
  my $openssl_exe = shift;
  my ($openssl_exe, $vmware_version, $certLoc, $certPrefix, $unitName) = @_;
  my $opts = ' -zxopf  ';
  my($orig, $file) = @_;
    my $origRecordSeparator = $/;
  my $osDir;
my $os = 'host';
 my %osProductHash = (
 my $OS = `uname -s`;
  my $out = "";
   my $outfile = shift;
  my @output;
  my $output;
	 my @output = ();
  my $output = shift;
        my %p;
       my %p;
      my %p;
    my %p;
   my %p;
  my %p;
  my $packedVersion = direct_command(shell_string(xserver_xorg()) . ' -version 2>&1');
        my $page_offset;
  my $pamdfile = $libdir . '/configurator/pam.d/vmtoolsd' . ($is64BitUserland ? '-x64' : '');
   my $pango_module_file = $liblibdir . "/libconf/etc/pango/pango.modules";
   my ($pango_path, $pango_version);
   my $pangorc = $liblibdir . '/libconf/etc/pango/pangorc';
      my $params = "";
  my $parentDir = internal_dirname($dir);
         my %patch;
      my %patch;
    my %patch;
   my %patch;
  my %patch = ();
  my %patch;
      my $patchKey;
    my $patchKey = '@@LIBDIR@@';
  my @patchKeys;
  my $patchLevel;
  my $patchLevel = shift;
    my %patch = ('@@LIBDIR@@' => $libdir);
   my $patchRef  = shift;
  my $patchRef = shift;
   my $patch_thru = shift;
    my $path;
  my $path;
    my @paths;
  my $path = shift;
         my $path = $ui_dir . "/" .  $jslib . "/" . $app_dir;
  my($pattern) = @_;
  my $pattern = '@@VMWARE@@';
    my $pcnId;
  my @perfect = ();
  my $pings;
   my $pixmapdir;
   my $pixmapFile = db_get_answer("PIXMAPDIR") . "/$iconShortFile";
   my @pkgList = @_;
     my $pkg_name = 'compat6x-' . (is64BitUserLand() ? 'amd64' : 'i386');
   my $plain_file = shift;
   my $platform = shift;        # Must be either "Debian" or "Solaris"
   my $plugins32 = $libdir . '/plugins32';
   my $plugins64 = $libdir . '/plugins64';
  my $pluginsdir = $libdir . ($is64BitUserland ? '/plugins64' : '/plugins32');
  my $port;
  my $port = $base_port;
  my $port = shift;
    my $pos;
  my $pos;
  my $pos = shift;
      my $ppFile = "$tmpDir/tpvmlpcupsd-$$.pp";
my %PREF;
    my $prefix1 = $2;
    my $prefix2 = $1;
  my $prefix = 'BIN_';
      my ($prefix, $fslist, $suffix) = ($1, $2, $3);
  my $prefix_len;
  my $prefix = shift;
  my $prelink_file = db_get_answer_if_exists('PRELINK_CONFED');
  my $prelink_file = '/etc/prelink.conf';
   my $preserve = shift;
  my $preserve = shift;
   my $prettyOSName;
  my $prev_res;
  my $printerName = 'VMware_Virtual_Printer';
  my $printerURI = 'tpvmlp://VMware';
    my $probe = shift; # IN: 1 if to probe only, 0 if to actually load
  my $proc_name = shift;
   my $productName = shift;
  my $product = vmware_product();
  my $prog_name = internal_basename($0);
    my $program;
  my $program;
  my @programList;
  my $promocode;
  my $promoconfig;
    my $prompt = 'Do you want networking for your virtual machines? '
    my %prop;
  my $prop_dst_root = "/etc/vmware/webAccess";
   my $property_file;
     my %prop = identify_suse_variant();
    my %prop = identify_suse_variant();
  my %propRef;
  my $prop_src_root = $tomcat . '/webapps/ui/WEB-INF/classes';
  my $proto = shift;
   my $pulseaudioBin = internal_which("pulseaudio");
  my @quaddot_a;
  my $quaddot = shift;
  my $query;
  my $queryString = 'Your computer has multiple ethernet network interfaces '
    my $r;
  my $re;
   my $regexpat = '^\s*' . $var . '\s*=\s*\"(.+)\"\s*$';
   my $regexp = shift;
   my $regex = qr/evdev\.rules/;
   my $regex = qr/^ *load-module +module-(udev|hal)-detect$/;
   my $regex = qr/vmmouse\.rules/;
   my $regex = shift;
    my $release = `uname -r | cut -f1 -d-`;
   my $release = `uname -r | cut -f1 -d-`;
    my $reply;
  my $res;
    my $reserved = shift;
  my $reserved = shift;
  my %resolutions;
  my $resolution_string = sort_resolutions($cXConfigFile);
   my $rest;
    my $restoreStr;
  my $restoreStr = shift;
    my $result;
  my $result = '';
  my $result;
   my $result = 0;
  my $result = $cPCnet32KernelBlacklist{$gSystem{'version_utsclean'}};
    my $result = 'no';
   my $result = 'no';
  my $result = 'no';
  my $result = shift;
  my $ret = $self->parse($text);
  my $return_val;
   my $retval;
  my $right = shift;
  my @rpcResultLines;
  my $rpcresult = send_rpc('toolinstall.is_image_inserted');
	 my $rpcresult = send_rpc('toolinstall.is_image_inserted');
  my $rpctoolBinary = '';
  my $rpctoolSuffix;
   my $rpmBin = internal_which('rpm');
   my $ruleFound = searchForUdevRule($regex);
   my $ruleName = internal_basename($src);
  my $run_dhcpd = shift;
   my $runlevel;
  my $runSystem;
  my $rv;
         my $rv = get_answer('The configuration file ' . $dst . ' already '
         my $rv = get_answer('You have previously modified the configuration '
  my $rv = system(shell_string($gHelper{'pidof'}) . " " . $proc_name . " > /dev/null");
      my $rv = system("/usr/sbin/selinuxenabled");
  my $samba = $gDBAnswer{'VNET_' . $vHubNr . '_SAMBA'};
      my $sambaInfo = '';
  my $samba = shift;
   my $sbindir = db_get_answer('SBINDIR');
  my $sbindir = db_get_answer('SBINDIR');
  my $screen_mode = get_screen_mode($xversion);
   my @searchDirs = ("/lib/udev/rules.d/", "/etc/udev/rules.d");
  my $sec;
  my($sec, $prefix) = @_;
  my $sectionLine;
  my $sectionName;
              my $seenDeviceSection = 0;
  my $self = {};
  my $self = $proto->create();
  my $self = shift;
  my $serial;
  my $servicePath = internal_which("service");
   my $service = shift;
      my $service = vmware_service_basename();
   my @sessionsDirs;
   my (@setOption, $opt);
      my $shadowFbDrv = '/usr/X11R6/lib/modules/libshadowfb.a';
   my $shippedMod = shift;
  my $shippedMod = shift;
  my $shippedModVer = '';
    my $silencer = '';
  my $silent = shift;
  my $single_quoted = shift;
   my ($sleepingAgentCommand) =
   my ($sleepingAgentDelay) = 15;       # Give session managers a 15s head start.
   my $S_level = shift;
  my $smb_dir = $gRegistryDir . '/' . $vHostIf . '/smb';
  my $sn;
  my $solVersion = direct_command(shell_string($gHelper{'uname'}) . ' -r');
    my $source = "/etc/vmware-tools/vmware-tools-libraries.conf";
  my $source = "/etc/vmware-tools/vmware-tools-prelink.conf";
    my $source = shift;
  my $source = shift;
  my $space = -1;
     my $S_priority;
        my $src;
    my $src_base = shift;
         my $srcDir = $libdirname . '/lib/drm';
  my $src_dir = shift;
  my $srcDir = shift;
  my $src_file = shift;
   my $srcicondir = db_get_answer('LIBDIR') . '/share/icons/hicolor';
   my $src = join('/', db_get_answer('LIBDIR'),
   my $src = shift;
  my $src = shift;
    my $src = $src_base . $index;
   my @S_runlevels = ('2');
        my $s = system("checkmodule -m -M -o $modFile $tmpFile >/dev/null 2>&1");
   my $startCommand = shift;    # Bourne-shell compatible string used to launch
  my $start_file = $gRegistryDir . '/hostd/datastores-template.xml';
      my @statbuf;
    my @statbuf;
   my @statbuf;
  my @statbuf;
   my $state;
  my @stat = stat($file);
    my $status;
  my $status;
    my($status, $name, $value, $start, $end) = $self->parse_line($line);
    my $stopCode = 0;
  my $str1 = shift;
  my $str2 = shift;
  my $string = " ";
  my $string = shift;
      my $str = vmware_service_issue_command($cServiceCommandDirect, 'status');
  my $sub;
  my $subLevel;
  my $subLevel = shift;
    my $subnet;
  my $subnet;
    my $subnet = compute_subnet($hostaddr, $netmask);
      my $subnet = db_get_answer_if_exists('VNET_' . $vHubNr . '_HOSTONLY_SUBNET');
  my $subnet = db_get_answer_if_exists('VNET_' . $vHubNr . '_HOSTONLY_SUBNET');
  my @subnets = ();
  my @subnets;
  my $subnet = shift;
  my $success     = 0;
            my $suffix = "";
   my $suffix = '';
  my $suffix = '';
      my $suffix = vmware_product() eq 'tools-for-solaris' ? '.so' : '.o';
  my $suggested_choice = 3;
	   my $svgaManifestTxt = join('', 'svga', $manifestExt);
   my $symbolic = shift;
  my ($syscmd, $restorecmd, $content, $binary, $style);
   my $sys_font_path = "/etc/fonts/fonts.conf";
  my $system;
   my $systemMod = shift;
  my $systemMod = shift;
  my $systemModVer = '';
  my $system_version = direct_command("sysctl kern.osrelease");
   my $targetdir = shift;
   my $targetname = shift;
  my($templ) = @_;
         my $template_file  = $path . "/WebAccess-template.properties";
   my $template_file = shift;
    my $terse = 'no';
  my ($text) = @_;
  my $text = "";
  my $timeout = shift;
  my $tmp;
      my @tmpArray;
   my $tmpBlock = <<__EOF;
                    my $tmpdev = $1;
                  my $tmpdev = $1;
   my $tmpdir;
  my $tmpdir;
         my $tmpDir = $libdirname . '/backupdir';
  my $tmp_dir = make_tmp_dir($cTmpDirPrefix);
      my $tmpDir = make_tmp_dir($cTmpDirPrefix);
      my $tmp_dir = make_tmp_dir('vmware-auth');
   my $tmp_dir = make_tmp_dir('vmware-block-insert');
  my $tmp_dir = make_tmp_dir('vmware-block-restore');
   my $tmp_dir = make_tmp_dir("vmware-fonts");
   my $tmpdir = make_tmp_dir('vmware-pango');
   my $tmpDir = make_tmp_dir('vmware-pulse');
  my $tmpDir = make_tmp_dir('vmware-vix-installer');
   my $tmpfile = shift;
   my $tmp_file = $tmp_dir . '/fonts.conf';
      my $tmp_file = $tmp_dir . '/tmp_auth';
   my $tmp_file = $tmp_dir . '/tmp_file';
  my $tmp_file = $tmp_dir . '/tmp_file';
   my $tmpFile = $tmpDir . '/tmp_file';
      my $tmpFile = "$tmpDir/tpvmlpcupsd-$$.te";
                  my $tmpmouse = $1;
    my $to_append = '';
      my @tokens;
  my $tomcat = $webAccess_root . '/tomcat/@@TOMCAT_DIST@@';
   my $to = shift;
    my $trgt_base = shift;
      my $trgt = $trgt_base  . $index;
  my $tries;
  my $TTY0;
  my $type;
  my $typename;
  my $type = shift;
  my $udev_file = db_get_answer('LIBDIR')
  my $udev_file = db_get_answer('LIBDIR') . '/configurator/udev/00-vmwgfx.rules';
   my $ui_dir = db_get_answer('LIBDIR') . '/webAccess/tomcat/@@TOMCAT_DIST@@/webapps/ui';
  my $uid = shift;
  my @unmarked = $self->get_unmarked();
            my $updatedb_conf_file = '/etc/updatedb.conf';
  my $usage = <<EOF;
my $useApploader = (vmware_product() eq 'tools-for-linux');
   my $use_desktop_utils = 1;
   my $use_desktop_utils = shift;
  my @usedEthIf = grep(/^VNET_\d+_INTERFACE$/, keys(%gDBAnswer));
  my %used_subnets;
        my @usedSubnets = get_used_subnets();
  my $usedSubnets = shift;
  my $useSavedPath = shift;     # (optional, bool) Define this if you'd like to
   my $useSystem = shift;
         my $usrlibdir = '/usr/lib' . ($is64BitUserLand ? '64/' : '/');
  my $uts_compatible = get_module_compatible_version($uts_release);
  my $uts_headers;
  my $uts_release = $gSystem{'uts_release'};
  my $utsrel = shift;
  my $val = $self->get($name);
    my $value;
  my $value = shift;
  my $var;
   my $var = shift;
  my $version;
     my $version = getFreeBSDVersion();
  my $version = 'GSX';
  my $version = shift;
   my $verStr = '0';
  my $vHostIf = shift;
  my $vHubNr;
    my $vHubNr = get_answer('Which virtual network do you wish to configure? '
  my $vHubNr = shift;
   my $visible = shift;
  my $vixFileRoot = db_get_answer('LIBDIR') . '/vmware-vix/vmware-vix';
  my $vixInstallFile = '/vmware-vix-distrib/vmware-install.pl';
  my $vixTarFile = $vixFileRoot . '.tar.gz';
   my $vmciLoaded = 0;
          my $vmciSymversFile = $gVmciBuildDir . '/vmci-only/Module.symvers';
	   my $vmmouseManifestTxt = join('', 'vmmouse', $manifestExt);
  my $vmnet_dir = $gRegistryDir . '/' . $vHostIf;
   my $vmwareBinary;
   my $vmwareBinPath = db_get_answer('BINDIR');
  my $vmwareToolsScript = vmware_product() eq 'tools-for-freebsd' ?
  my $vmware_version;
  my $vmware_version_string;
   my $vmwgfx_dri = $xorg_libdir . '/vmwgfx_dri.so';
   my $vmwgfx_drv = $xorg_libdir .  '/vmwgfx_drv.so';
        my ($vmxnet_dev, $pcnet32_dev, $es1371_dev) = get_devices_list();
  my ($vmxnet, $pcnet32, $es1371) = (0, 0, 0);
  my ($vmxnet, $pcnet32, $es1371) = get_devices_list();
     my $v = ($name ne "") ? "$name.$var" : $var;
          my $vsockBuilddir = $build_dir . '/vsock-only/';
  my $vtNext;
  my $want_sn;
  my $webAccessLogDir = $gLogDir . '/webAccess';
  my $webAccessRoot = db_get_answer('LIBDIR') . "/webAccess";
  my $webAccess_root = "$libdir/webAccess";
  my $width;
  my $width = shift;
  my $word;
  my $word = shift;
  my $work_dir = $tomcat . '/work';
  my $writeBusIDLine = 0;
   my $x11Base = db_get_answer_if_exists('X11DIR');
   my $x11Base = internal_dirname(xserver_bin());
      my $xaaDrv = '/usr/X11R6/lib/modules/libxaa.a';
  my @xargs = (xserver_bin() . '/X', ':1', 'vt' . $vtNext,
  my $xconfig_backup = '';
  my $xconfig_file = '';
  my $xconfig_file_name;
  my $xconfig_file_name = shift;
  my $xconfig_file_name = 'XF86Config';
  my $xconfig_file_name = 'xorg.conf';
  my $xConfigFile = shift;
  my $xconfig_path;
  my $xconfig_path = '/etc';
  my $xconfig_path = '/etc/X11';
  my $xconfig_path = shift;
  my $xconfigTestFile = $XF86tmp;
   my @xdmcfgs = ("/etc/X11/xdm/xdm-config");
   my @xdmcfgs = ("$x11Base/lib/X11/xdm/xdm-config", "/etc/X11/xdm/xdm-config");
   my $xf86config = shift;
  my $xf86config = shift;
  my $XF86tmp = $tmp_dir . '/XF86Config.' . $$;
   my $XFile;
  my $XFree4_scanpci = xserver_bin() . '/scanpci';
   my $xinitrcCommon = '/etc/X11/xinit/xinitrc.common';
   my $xinitrcd = "/etc/X11/xinit/xinitrc.d";
  my $xLogFile = shift;
  my $xLogFile = $tmp_dir . '/XF86ConfigLog.' . $$;
   my $xorg_libdir = db_get_answer('LIBDIR') . "/configurator/XOrg/7.$compat" . ($gIs64BitX ? '_64' : '');
  my ($xorgMajorVer, $xorgMinorVer, $xorgSubVer) = split_X_version($packedVersion);
	  my $xorgModSrcDir = db_get_answer('LIBDIR')  . "/configurator/XOrg/7.$compat"
   my $xorg_modules_dir = shift;
             my $xorg_modules_dir = xorg_find_modules_dir();
          my $xorg_modules_dir = xorg_find_modules_dir();
	  my $xorg_modules_dir = xorg_find_modules_dir();
  my $xorgScreenIdentifier = '';
  my $xorgServerVersion = '';
  my $xorgServerVersion;
   my $xResources = "$gRegistryDir/vmware-user.Xresources";
  my $xserver3default = xserver_bin() . '/XF86_VGA16';
  my $x_server_file;
  my $x_server_file_name;
  my $x_server_file = shift;
  my $x_server_link;
  my $xserver_link = '';
  my $x_server_link_bin = xserver_bin() . '/X';
   my $xSessionD;
   my $xSessionDst;
   my $xSessionGDM = "$gRegistryDir/xsession-gdm.sh";
   my $xSessionXDM = "$gRegistryDir/xsession-xdm.sh";
  my $xversion = '';
  my $xversion = 3;
  my $xversion = 6;
  my $xversionAll = '';
  my $xversionAll = 0;
  my $xversionAll = shift;
   my $xversion = shift;
  my $x_version = shift;
  my $xversion = shift;
  my $x_wrapper_file_name = 'Xwrapper';
  my $x_wrapper_file = xserver_bin() . '/' . $x_wrapper_file_name;
      my $YFile = $XFile;
               . "\n"
               . "\n");
            . "\n ",
	       "\n" .
		  "\n" .
                     . "\n", 0);
               . "\n", 0);
               "\n", 0);
			. "\n", 0);
      $name .= ' for ' . $gSystem{'system'};
  $name = $gRegistryDir . '/config';
  $name = $gRegistryDir . '/tools.conf';
  ## name is here for compatibility, it should go away soon.
        $nameMap{$name} = $device;
      $name ne 'vmxnet' && $name ne 'vmxnet3') {
           $name = $newName;
                        . $name . '.' . "\n\n", 0);
                     . $name . '.o',
               . "name of length < 32 and containing any of letters of the alphabet, "
Name=$productName
  $names = '';
    $names .= $resolutions{$res};
      $name = substr($line, 0, index($line, '.'));
        $name =~ tr/A-Z/a-z/;
    $name =~ tr/A-Z/a-z/;
                   . $name . ' with major number ' . $major . ' and minor '
  $nat_dir = $gRegistryDir . '/' . $vHostIf . '/nat';
               $nat_dir . '/nat.conf', \%patch,
  # NAT networking
# nat: Set to indicate a desire to count the number of nat networks
   # NB: FreeBSD packages KDE 4 under /usr/local/kde4, and /usr/local/kde4/bin
   # NB: This affects only users who installed Tools with beta versions of
# Needed to access $Config{...}, the Perl system configuration information.
    $needMonitor = 0;
              $needMonitor = 1;
    $needMonitor = 1;
                        . 'need to explicitly specify a network number by '
  # Need to make sure the NAME key is present so that netmap.conf is created properly.
    # need to pollute the local db.
  $netmask = db_get_answer('VNET_' . $vHubNr . '_HOSTONLY_NETMASK');
                                . $netmask . '.  Do you want to keep these '
  $netmask = $gDBAnswer{'VNET_' . $vHubNr . '_HOSTONLY_NETMASK'};
	  $netmask = get_answer('What will be the netmask of your '
          . $netmask . ' {' . "\n" . '    # Note: No range is given, '
                        'netname', $default);
      $nettype = 'bridged';
    $nettype = 'bridged';
      $nettype = 'hostonly';
    $nettype = 'host-only';
      $nettype = 'nat';
    $nettype = 'NAT';
                         'nettype', $nettype);
                        . 'network address intended for assignment to this '
                     . 'network.  Are you sure you want to modify it? '
	      . 'network card is used only for '
  $network = compute_subnet(db_get_answer('VNET_' . $vHubNr
     $network = compute_subnet($hostaddr, $netmask);
# Network configuration editor
# Network configuration wizard
                              'NETWORK_EDITOR_CHANGE', 'yesno', 'no');
                  . 'networking available: bridged and host-only.  A '
                                      'NETWORKING_EDITOR', 'editorwizardhelp',
                  . "networking settings using this script, and choose to keep "
                              'NETWORKING_SKIP_SETUP', 'yesno', 'yes')
                  . 'network is a private network between your virtual '
			      'network' : 'networks', join(', ', @networks)),
               . 'network.' . "\n\n", 0);
                  . 'network.' . "\n\n" . 'If you want your virtual '
                        . 'network number by hand.' . "\n\n", 0);
                 . 'network numbers specified by the Internet Engineering '
                     . "$network_path start" . "\n\n", 0);
                     . "$network_path stop" . "\n", 0);
                 . 'network that virtual machines reside on will not be '
                 . 'network will not be accessible from outside the host '
  # never used on a SuSE system, of course, there could be special cases.
# Newer tools use glib-style ini files which appLoader doesn't grok
       $newMinor = $minor;
       $newMinor = $osDir;
              $newName = $name . ' (' . $id . ')';
                      next;
            next;
          next;
         next;
        next;
      next;
            next if $device =~ /^#/;
         next if not m/$libname/;
               next if ($var =~ m/\b$string\b/);
      next unless -d $_;
                      . "\n\n";
               . "\n\n"
               "\n\n");
            . "\n\n");
          . "\n\n");
                        . "\n\n", 0);
                      . "\n\n", 0);
                   . "\n\n", 0);
                  . "\n\n", 0);
                 . "\n\n", 0);
                 "\n\n", 0);
                . "\n\n", 0);
               . "\n\n", 0);
             . "\n\n", 0);
             "\n\n", 0);
	       . "\n\n", 0);
	       "\n\n", 0);
		       . "\n\n", 0);
		    . "\n\n", 0);
		   . "\n\n", 0);
		 . "\n\n", 0);
		. "\n\n", 0);
          . "\n\n" . 'dhcpd eth0' . "\n\n" . 'Consult the dhcpd(8) and '
                                  . ':' . "\n\n", 'XRESNUMBER', 'number',
    # No interface.  We provide a valid default so that everything works.
        # no longer has a full path for the modules.  Therefore we must
    # No more building modules for 'ws' unless forced to.
#      None.
      #        Non-versioned modules can load into a     versioned kernel.
      # noop
                   ' -noout -subject > /dev/null 2>&1')));
                # Normalize the identifier name
    # No slash
         # not already updated (patched) and leave previously configured files
#    not be used by GNOME.  If this is the case (indicated by $foundGnomeStart
      # not boot.  We need to error out if that is the case.
# not_configured - We installed it, but its not marked as configured
        || (not (-d $answer . '/net'))) {
      not defined db_get_answer_if_exists($prefix . $bin)) {
         && not (defined($nat_network) && $nat_network eq 'yes');
    # Note: Assume (for now) that if AthlonKernel is not defined, then
      # Note: Ensure that these numbers are in sync with the LSB/chkconfig
    # Note: -f bypasses only the kernel version check, not the symbol
# Note: Max length of interface name is 8
     # Note: Mind the Tomfoolery with the first for loop below.  You
     # Note, now that we use modconfig to build the modules on tools-for-linux,
            # note: /proc/mounts replaces spaces with \040
   # Note: RedHat's chkconfig reads LSB INIT INFO if present.
	 # Note:  rpc-on-end has been defaulting to one for some time now.
       # NOTE: See bug 347401. We do not want to interrupt pvscsi services by
  # NOTE: See bug 347401.  We don't want to unload the pvscsi kernel module
  # NOTE: See bug 349327.  We no longer want to interrupt networking during
      # Note that it's okay if this fails since the module can't be removed;
    # Note that svcprop(1) is added for Solaris 10 and later after it is
  # Note that there is a check earlier on to ensure that prebuilt and compile
     # Note that this doesn't handle dependencies of dependencies,
         # Note the default choice. We should not require users to pass
	   # Note: The order of directories in @halDirs is important!
   # NOTE: We don't uninstall the desktop file if we used
  # Note: We must test for -l before, because if an existing symlink points to
      # Note: When using the force flag,
	 # NOTE: You have to check if the image is inserted BEFORE you
  # Note: You have to do this before rebuilding the ramdisk.  Otherwise some
      (not file_name_exist($dstFile))) {
                     . 'not have the same address space size as your running '
# nothing.
    # Not installed by this program
# not_installed - module is not installed.
      not ($isUbuntuHardy == 0 && -e $gConfFlag) &&
        not (lc($gSystem{'page_offset'}) eq lc($prop{'PageOffset'}))) {
          not (lc($header_page_offset) eq lc($gSystem{'page_offset'}))) {
           (not -l '/usr/X11R6/lib/X11/XF86Config')) {
    # not match the running kernel's architecture, this module will get
       not open(BLOCK_OUT, '>' . $tmp_file)) {
       not open(NEWPCF, ">$tmpFile")) {
      # No trailing slash
       not (vmware_product() eq 'server')) {
		  . 'not work well. File saved as ' . $XF86tmp . '. See '
no warnings 'once'; # Warns about use of Config::Config in config.pl
  # Now change the scsi timeout value to 180
    # Now check everything and if any check fails, let the user know why.
	  # Now check to make sure the drivers exist.
  # Now if we can compile the modules, make it happen.  Otherwise just
               # Now that we have found the proper section (potentially one of many)
   # Now try using chkconfig if available.
  # Now unmount the CD.
  # Now we need to adjust the timeout values here so the user doesn't need
	     # No Xorg drivers.  Stop configuring X.
                     . "\n" . $pattern . ' __PAGE_OFFSET') . ' | '
               . "\n", ' Press Enter key to continue ', 0);
            . "\n", ' Press Enter key to continue ', 0);
	       . "\n", ' Press Enter key to continue ', 0);
	      . "\n", ' Press Enter key to continue ', 0);
	  . "\n", ' Press Enter key to continue ', 0);
    $num++;
  $num = 1;
               . 'number in the range 1 to ' . $gMaxNumber . "\n\n", 0);
                   . 'number ' . $minor . ', but there is already a different '
               . ' number of minutes in the range -1 to 99999' . "\n\n", 0);
  # Number of networks configured
   # number of this server package.
               . "numbers, '.\@_-', and and not beginning with a '-'.  The name must "
                 . 'number that is normally unreachable from the ' . $machine
         ++$numSymlinks;
   ($numSymlinks, $foundGnomeStart, $foundKdeStart) = configure_autostart_xdg();
   'nvdk'               => 'nvdk',
                 . 'of Class C subnet numbers to see if they are reachable '
  # Of course, it doesn't check where it points to :-)
# of drivers. In that case, add vmwgfx to the list.
  # of "gcc -dumpversion". Unfortunately, SuSE doesn't use this string like
   # of kde-config (using the augmented argument to internal_which).
                              . 'of memory on this system.  You need at least '
                              of modules.
#  of the tools are packaged up in 32bit and 64bit instances.  In the case of
#  of the tools are packaged up in 32bit and 64bit instances.  So rather than
                   . 'of virtual machines. '
  # of Xorg via this script after a fresh install of tools, the try_X_conf method
               . 'of your current pcnX interface.'
        # Okay, we have a valid kde-config.  Query it for its installation
                   . "older than 2.4.0\n\n", 0);
  # On all the linux machines that I've looked at /dev/parport1 is the 2nd port
                '-once', '-logverbose', '3');
                 . 'on different systems so long as you do not enable IP '
                 . 'one else.' . "\n\n" . 'To setup this host-only networking '
    # one or if the XF86Config file has the XFree 4 syntax, we can use it.
    # one. There are issues if 3.x syntax fields are patched in a 4.x config
                   . ' one? (yes/no)', 'yesno', 'yes') eq 'no') {
  # On FreeBSD, we ship different builds of binaries for different releases.
  # On FreeBSD, we use the gtk toolbox for release 5.0 and higher, and the tcl
  # On Linux and Solaris, we use the gtk toolbox everywhere, and use wrapper
	  . 'only available for 2.6.0 and later kernels.'
    # Only backup the file if we didn't previously add it to the database
	 #       Only eject the tools cd AFTER the toolinstall.end RPC command
  # Only need to modify the $initmodfile for Ubuntu, SuSE, and Fedora 12 (Dracut) style initrd.
    # Only one interface.  Use it.  This gives no choice even when the editor
    # Only re-installs modules.
    # Only return path, so remove file name.
          . 'only runs on ' . $runSystem . '.' . "\n\n");
	    # Only the identifier will stay the same. Everything else
  # on shipped gtk libraries require us to use special wrapper scripts if not
# On some distributions, /usr/bin/compiz is a shell script and had a whitelist
  # On SuSE, this mechanism is completely broken because Xwrapper tries to run
    # on the command line, bridging between the vix db and this one.  So, No
			  "on the host.\n", 0);
                              . 'on this system.  You need at least '
			'on your machine?', $gcc_path, 0);
      open(ADMIN, $auth_file) or error "Could not open $auth_file.\n";
# Open a file binary and read the ELF header. We really only care about the fifth
  open(CFG, "< $file") || return undef;
  open(CFG, "> $file") || return undef;
###  open/close/check file
	   open(CMDOUTPUT, "$eject_cmd $device 2>&1 |");
        open(CPUINFO, '/proc/cpuinfo')
  opendir(LS, $dir) or return ();
    open(EULA, db_get_answer('DOCDIR') . '/EULA') ||
	open(FD, $source);
  open(IFCONFIG, 'LC_ALL=C ' . shell_string($gHelper{'ifconfig'}) . ' -a |');
   open(MODINFO, 'modinfo | tail +2 |');
   open(MYFONT, " < " . $font_path)
  open (OUTFILE, ">" . $file);
   open(OUTFONT, " > " . $tmp_file)
      open(OUTPUT, "$cmd |");
    open(PAGER, '| ' . $gHelper{'more'}) ||
    open (RPCRESULT, shell_string($rpctoolBinary) . " " .
    open (SHIPPED_MOD_VER, "$modinfo $shippedMod |");
#      - OpenSuSE 10's xinitrc.common
#      OpenSuSE:        Revert xinitrc.common.
   # OpenSuSE (xinitrc.common)
      open(SYSFONT, " > " . $sys_font_path)
   open(SYSFONT, " < " . $sys_font_path)
    open (SYSTEM_MOD_VER, "$modinfo $systemMod |");
# Open the database on disk in append mode
  # Open the file w/ overwrite
  open($TTY0, '/dev/tty0') or die "open /dev/tty0 : $!\n";
			       "open-vm-tools",
			       "open-vm-tools-gui",
  open(X_BIN, '<' . $file) || return 0;
  open(XF86CONFIG, '<' . $xf86config) or
   open(XF86CONFIG, '<' . $xf86config) or error("Unable to open " . $xf86config . ".\n");
# operations.
      "/opt/gnome/share/autostart" => undef,
    Option "AutoRepeat" "500 30"
    Option "Buttons" "5"
    Option "Device" "/dev/input/mice"
    Option "Emulate3Buttons" "true"
    Option "NoAutoAddDevices"
  #       Option      "NoAutoAddDevices"
    Option "Protocol" "IMPS/2"
    Option "XkbCompat"  ""
    Option "XkbLayout"  "us"
    Option "XkbModel"   "pc104"
    Option "XkbRules"   "xfree86"
    Option "ZAxisMapping" "4 5"
      "/opt/kde3/share/autostart" => undef,
      "/opt/kde4/share/autostart" => undef,
      "/opt/kde/share/autostart" => undef,
  $opts = ' -C ' . $tmpDir . $opts;
  # or ask the user a valid range of resolutions.
           or error('Unable to open /proc/cpuinfo in read-mode' . "\n\n");
organizationalUnitName  = $unitName
    $/ = $origRecordSeparator;
         # or vmwgfx, so we need to lay those down.
  $os = "Console OS";
    $osDir = $currentMinor;
    $osDir = $minor;
# OS-independent method of loading a kernel module by module name
# OS-independent method of loading a kernel module by object path
# OS-independent method of unloading a kernel module by name
            # others just copy to new file. 'pointer' is the mouse section name
                 . 'Otherwise answer "no", and ' . vmware_product_name()
    # otherwise it is second class match equivalent to the "compatible" match
# Otherwise it needs to go in the updates folder so depmod chooses
    # Otherwise try to compile it.
  # Otherwise, we just use the normal bin and sbin directories, which will
	      . 'our advanced networking interface. '
# our config data in config files.
            . 'our fast networking interface. '
     # our module dependencies and will have redone this code by then
   # Our return status is 1 if successful, 0 if nothing was added.
    # ourselves (we don't invoke modload(1M) since the module is automatically
# $outfile = '/etc/foo.conf'
    $out = $out . "$line";
      $out = $out . "\n";
  $out = $out . "\n";
    $out = $out . "$name = \"$self->{db}{$name}{value}\"\n";
  $out = $out . "###\n### Misc.\n###\n\n";
    $out = $out . "###\n### $sec->{header}\n###\n\n";
    $out = $out . $self->print_section($sec, "");
        $out = $out . $self->print_section($sec->{sublist}, "$dev");
  $out = $out . $self->print_unmarked();
      $out = $out . $self->print_value($prefix . $name, "is not set");
      $out = $out . $self->print_values("$dev", $sec->{values});
      $out = $out . $self->print_values($prefix . $name, $sec->{values});
     $out = $out . $self->print_value($v);
        $out = $out . sprintf("# $sec->{title}\n\n", $dev);
  $output = '';
  $output .= $append;
	   @output = <CMDOUTPUT>;
    $output .= "\n";
  # output of "gcc -v" instead.
      ($output, $pos) = append_output($output, $pos, ' ');
  ($output, $pos) = append_output($output, $pos, $word);
    ($output, $pos, $word) = wrap_one_char($output, $pos, $word,
  ($output, $pos, $word) = wrap_one_char($output, $pos, $word, '', $reserved);
	                      Overrides any VMware related modules installed
#       overrides what we'd use above.)
      --overwrite             Always overwrite user-modified configuration
# overwritten with the result.
	   'package.' . "\n");
package VMware::Config;
     $packedVersion = $1 ? $1 : '0.0.0';
	$packedVersion = $1 ? $1 : '0.0.0';
    $packedVersion = "7." . ($xorgMinorVer - 1) . "." . $xorgSubVer;
        # PAGE_OFFSET + 1MB to PAGE_OFFSET + 1.25MB for bzImage kernel.
      # Page offset does not match
        # PAGE_OFFSET to PAGE_OFFSET + 256KB on normal kernel and
          $page_offset = uc($1).'000000';
	  $page_offset = undef;
  # pair as in use and go to the next set of proxy ports.
             '@@PANGO_MODULES@@' => $liblibdir . "/" . $pango_path);
   $pango_path = "pango/" . $pango_version . "/modules";
   $pango_version = "1.6.0";
# @param - A list of RPM packages to check for.
# @param[in] @commands  List of commands passed to services script or initctl
# @param[in] $useSystem If true, uses system().  Else uses direct_command().
# @param - List of rpm packages to remove
# @param - Regex to match files against.
         $params = "--rebuild-mime-info-cache ";
                 $params . shell_string($desktopConf))) {
# @param - The path to the rule to install
			   . 'parent directories. Is this what you want?',
  # Parse through this to retrieve the version information.
                              'PASS_RAM_CHECK', 'yesno', 'no') eq 'no') {
   %patch = ();
   %patch = ('ACEDataUser>\w*<' => "ACEDataUser>$admin<");
   $patch{'@@AUTHD_PORT@@'} = db_get_answer('AUTHDPORT');
  $patch{'%broadcast%'} = compute_broadcast($nataddr, $netmask);
  $patch{'%broadcast%'} = compute_broadcast($patch{'%hostaddr%'},
   $patch{'##{BUILD_CFGDIR}##'} = $gRegistryDir . '/hostd/';
   $patch{'##{CFGDIR}##'} = $gRegistryDir . '/';
                   \%patch, $cFlagTimestamp);
		 \%patch, $cFlagTimestamp);
  $patch{'##{DS_NAME}##'} = shift;
  $patch{'##{DS_PATH}##'} = shift;
   $patch{'##{ENABLE_AUTH}##'} = 'true';
# Patches and adds a config file for the linker so that certain libs
  $patch{'%hostaddr%'} = db_get_answer('VNET_' . $vHubNr
  $patch{'%hostaddr%'} = $nataddr;
   $patch{'##{HOSTDMODE}##'} = 'server';
   $patch{'##{HTTP_PORT}##'} = $httpAnswer;
   $patch{'@@HTTPS_PORT@@'} = $httpsAnswer;
   $patch{'##{HTTPS_PORT}##'} = $httpsAnswer;
  @patchKeys = keys(%$patchRef);
#   patchlevel    patchlevel string (e.g., '1'), if defined
   $patch{'##{LIBDIR}##'} = db_get_answer('LIBDIR') . '/';
   $patch{'##{LIBDIR_INSTALLED}##'} = db_get_answer('LIBDIR') . '/';
    %patch = ('@@LIBDIR@@' => $libdir);
   %patch = ('@@LIBDIR@@' => $liblibdir);
   $patch{'##{LOGDIR}##'} = $gLogDir . '/';
   $patch{'##{LOGLEVEL}##'} = 'verbose';
  %patch = &$make_patch_func($vHubNr, $vHostIf);
   $patch{'##{MOCKUP}##'} = 'mockup-linux.vha';
  $patch{'%nataddr%'} = $nataddr;
                                            $patch{'%netmask%'});
  $patch{'%netmask%'} = db_get_answer('VNET_' . $vHubNr . '_HOSTONLY_NETMASK');
  $patch{'%netmask%'} = $netmask;
  $patch{'%network%'} = compute_subnet($nataddr, $netmask);
     $patch{'%network%'} = compute_subnet($patch{'%hostaddr%'}, $patch{'%netmask%'});
  $patch{'%network%'} = db_get_answer_if_exists('VNET_' . $vHubNr . '_HOSTONLY_SUBNET');
   %patch = ('@@PANGO_MODULE_FILE@@' => $pango_module_file,
   $patch{'##{PIPE_PREFIX}##'} = '/var/run/vmware/';
   $patch{'##{PLUGINDIR}##'} = db_get_answer('LIBDIR') . '/hostd/';
  $patch{'%range_high%'} = int_to_quaddot(
  $patch{'%range_high%'} = int_to_quaddot(quaddot_to_int($patch{'%broadcast%'})
  $patch{'%range_low%'} = int_to_quaddot(
  $patch{'%router_option%'} = "";
  $patch{'%router_option%'} = "option routers $nataddr;";
  $patch{'%sample%'} = int_to_quaddot(
   $patch{'##{SHLIB_PREFIX}##'} = 'lib';
   $patch{'##{SHLIB_SUFFIX}##'} = '.so';
   $patch{'##{USE_BLKLISTSVC}##'} = 'false';
   $patch{'##{USE_CIMSVC}##'} = 'false';
   $patch{'##{USE_DIRECTORYSVC}##'} = 'false';
   $patch{'##{USE_DYNAMIC_PLUGIN_LOADING}##'} = 'false';
   $patch{'##{USE_DYNAMO}##'} = 'false';
   $patch{'##{USE_DYNSVC}##'} = 'false';
   $patch{'##{USE_HOSTSVC_MOCKUP}##'} = 'false';
   $patch{'##{USE_HTTPNFCSVC}##'} = 'true';
   $patch{'##{USE_LICENSESVC_MOCKUP}##'} = 'true';
   $patch{'##{USE_NFCSVC}##'} = 'true';
   $patch{'##{USE_OVFMGRSVC}##'} = 'true';
   $patch{'##{USE_PARTITIONSVC}##'} = 'false';
   $patch{'##{USE_SECURESOAP}##'} = 'false';
   $patch{'##{USE_SNMPSVC}##'} = 'false';
   $patch{'##{USE_STATSSVC_MOCKUP}##'} = 'false';
   $patch{'##{USE_VDISKSVC}##'} = 'false';
  $patch{'%vmnet%'} = "/dev/" . $vHostIf;
  $patch{'%vmnet%'} = $vHostIf;
   $patch{'##{WORKINGDIR}##'} = $gLogDir . '/';
    $path1 =~ s|//|/|;
    $path1 =~ s|/[^/]*/\.\./|/|;
    $path1 =~ s|/\./|/|;
  $path1 =~ s|^([^/])|$dir/$1|;
    $path2 =~ s|//|/|;
    $path2 =~ s|/[^/]*/\.\./|/|;
    $path2 =~ s|/\./|/|;
  $path2 =~ s|^([^/])|$dir/$1|;
	     "path among guests and host.  The rest of this software " .
# path_compare(dir, path1, path2)
  $path = dir_remove_trailing_slashes($path);
    $path = internal_which('X')
  $path = internal_which('Xorg');
      @paths = (@paths, @{$appendPaths}) if defined $appendPaths;
      @paths = split(':', $useSavedPath ? $gSavedPath : $ENV{'PATH'});
    $path = substr($path, 0, $len - 1)
   # /path/to/vmware-user.desktop.
    # PBMs that are compiled for Athlon Kernels.  Otherwise... don't use the
                            # PCI IDs first
                            'pci:v000015ADd00000720' => 'vmxnet',
                            'pci:v000015ADd00000740' => 'vmci',
                            'pci:v000015ADd000007B0' => 'vmxnet3',
                            'pci:v000015ADd000007C0' => 'pvscsi',
                          . 'pcn >/dev/null 2>&1');
          $pcnet32++;
  # Per bug #41349 the lspci version provided by Mandrake has unwanted
	      . 'performance.' . "\n"
    # (perhaps with some whitespace sprinkled in), followed by a doubly quoted
               . 'person who built your running kernel did not use the "make '
    $pings++;
  $pings = 0;
   $pixmapdir = db_get_answer_if_exists("PIXMAPDIR");
                                      "PIXMAPDIR", "dirpath",
   $pixmapdir = get_persistent_answer("In which directory do you want to "
		 'pkg_add utility.  Refer to the man pages on how to ' .
                 . 'placed on a virtual network that is confined to this '
# placed there by the installer.
  # place holders in /etc/services.
      # Player is bundled with all desktop products.
   'player'             => 'vmware',
	       "Please consider using the --clobber-kernel-modules flag on this " .
              'Please either recompile your kernel with "' . $gHelper{'gcc'} .
	        "Please ensure that the make binary is installed " .
		  'Please ensure that you have enough free space available ' .
              . '.  Please make at least an additional ' . -$space
               . 'Please make sure to use this port when installing remote'
                   . 'Please refer to the VMware Knowledge Base for more '
        . 'Please refer to the VMware Knowledge Base for more '
                "Please re-install the chkconfig application or check your settings.  " .
                "Please re-install the insserv application or check your settings.  " .
            'Please try to use exactly same compiler as one used for ' .
        . 'please visit our Web site at "http://www.vmware.com/go/'
      $p{'^MOUSETYPE=.*$'} = 'MOUSETYPE=imps2';
  # pointing to a setuid root X server.
  # pointing to the Xwrapper, which, of course creates and infinite loop.
   # Point pangorc to the modules and to the pango.modules file.
   # Point the GDK_MODULE_FILE to the loaders
# Point the user to a URL dealing with module-related problems and exits
    # '-p' option, and they just loaded module into the memory.
  # populate_non_vmware_modules can take a while to run.  Add this here to
           populate_vmware_modules();
                                $port);
# port cache with those entries.
    $port = db_get_answer_if_exists("AUTHDPORT");
  $port = get_persistent_answer('Please specify a port for remote'
    $port = get_port_for_authd($gDefaultAuthdPort);
    $port = ($port + 1) % $max_range;
               . "port value." . "\n", 0);
    $pos = 0;
  $pos = 0;
  $pos += length($append);
    $pos = rindex($path, '/');
  $pos = rindex($path, '/');
# Post configuration steps common to every module
  -p, --prebuilt              Force the use of pre-built kernel modules.
#$PREF{'commentChanges'} = 1;
  $prefix_len = length($prefix);
        # prefix, then if an autostart path exists, add it to autodirs.
  # Prepend directory for relative paths
        $present{$dev} = 1;
   # present on x64 machines with drivers being in lib64.
      --preserve              Always preserve user-modified configuration
         # --preserve is used.
	     " Press the Enter key to continue.", 0);
         $prettyOSName = "Debian and Ubuntu";
         $prettyOSName = "Solaris";
###  pretty print should print not present devices not in misc
    # Prevent adding the driver if we already have; prevents errors on two
      $prev_res = db_get_answer($cXPreviousResolution);
#      pre-XDG resource files, scripts, etc.
    print ' ';
  # Print a message describing what we are showing
# Print an error message and exit
   print BLOCK $begin . $block . $end;
       print BLOCK_OUT $begin . $block . $end;
     print BLOCK_OUT $line;
  print CFG $self->pretty_print();
  print CFG $self->update($orig->{text});
  print CFG $self->update($self->{text});
	print "Checked: " . $initDir . "/haldaemon and $initDir/hal\n";
  print CONF <<EOF;
  print CONF "# Hand-editing this file is not recommended.\n";
  print CONF "\n";
        print CONF 'network' . $i . '.device = "' . $device . '"' . "\n";
        print CONF 'network' . $i . '.name = "' . $name . '"' . "\n";
  print CONF "# This file is automatically generated.\n";
	print "Could not locate hal daemon init script.\n";
              #print "DEBUG: Adding $result module with path $modPath to baddie list.\n";
              #print "DEBUG: Found VMW installed $result at $modPath.\n";
      #print "DEBUG: Module Alias $line matched module $modName.\n";
	#print "DEBUG: Module name $1 matched module $mod.\n";
   print DESKTOP <<EOF;
      print DESKTOP "NoDisplay=true\n";
            print DST $_;
      print DST $_;
                 "</Printer>\n";
  print INSTALLDB 'answer ' . $id . ' ' . $value . "\n";
    print INSTALLDB 'config ' . $file . "\n";
  print INSTALLDB 'directory ' . $dir . "\n";
    print INSTALLDB 'file ' . $file . "\n";
    print INSTALLDB 'file ' . $file . ' ' . $statbuf[9] . "\n";
      print INSTALLDB 'modified ' . $file . "\n";
    print INSTALLDB 'modified ' . $file . "\n";
    print INSTALLDB 'remove_answer ' . $id . "\n";
  print INSTALLDB 'remove_directory ' . $dir . "\n";
  print INSTALLDB 'remove_file ' . $file . "\n";
       print join("\n", @missing);
      print $key, ' = ', $val, "\n";
        # printk is always located in first 256KB of kernel - that is from
    print MANIFESTFILE $line1 . "\n";
    print MANIFESTFILE $line2 . "\n";
   print MIMEPACKAGE <<EOF;
   print MIMEPACKAGE "</mime-info>\n";
    print     (  '  # mv /etc/hostname.pcn0 /etc/hostname.vmxnet0' . "\n"
      print "\n";
    print "\n";
   print "\n";
  print "\n";
	 print "\nDisabling timer-based audio scheduling in pulseaudio.\n\n";
    print NEWHANDMAP "# Added by " . vmware_product_name() . "\n";
    print NEWHANDMAP $inline;
    print NEWHANDMAP join('', @output);
    print NEWMODCONF "# Added by " . vmware_product_name() . "\n";
      print NEWMODCONF "# Created by " . vmware_product_name() . "\n";
    print NEWMODCONF $inline;
      print NEWMODCONF join('', @netopt);
    print NEWMODCONF join('', @output);
	 print NEWPCF "$line\n";
	 print NEWPCF "$line tsched=0\n";
    print NEWUPDBCONF $inline;
                  print NEWXF86CONFIG "    BusID       \"PCI:0:15:0\"\n";
                print NEWXF86CONFIG "    Chipset      \"generic\"\n";
                print NEWXF86CONFIG "    Driver      \"vmware\"\n";
                  print NEWXF86CONFIG "EndSection\n";
              print NEWXF86CONFIG "EndSection\n";
    print NEWXF86CONFIG <<EOF;
              print NEWXF86CONFIG "    Identifier  \"VMware SVGA\"\n";
    print NEWXF86CONFIG "    Identifier     \"$xorgScreenIdentifier\"\n";
                print NEWXF86CONFIG "	InputDevice	\"VMware Keyboard\"	\"CoreKeyboard\"\n";
                print NEWXF86CONFIG "	InputDevice \"VMware Mouse\"	\"CorePointer\"\n";
                  print NEWXF86CONFIG "	InputDevice	\"XWorkAround\"\n";
        print NEWXF86CONFIG $line;
                     print NEWXF86CONFIG "   Option \"Device\" \"/dev/input/mice\"\n";
                     print NEWXF86CONFIG "   Option \"Device\" \"/dev/psaux\"\n";
                  print NEWXF86CONFIG "    Option  \"NoAutoAddDevices\"\n";
    print NEWXF86CONFIG "    Screen      \"$xorgScreenIdentifier\"\n";
              print NEWXF86CONFIG "Section \"Device\"\n";
                   print NEWXF86CONFIG $sectionLine;
                  print NEWXF86CONFIG $sectionLine;
                 print NEWXF86CONFIG $sectionLine;
                print NEWXF86CONFIG $sectionLine;
              print NEWXF86CONFIG $sectionLine;
    print NEWXF86CONFIG "Section \"Screen\"\n";
                    print NEWXF86CONFIG "\tOption\t\t" . $option . "\t"
                   print NEWXF86CONFIG "$&VMware Keyboard\"\n";
       print "\n\n";
  print "\n\n";
            print OUT $_;
  print OUTFILE $contents;
         print OUTFONT $font_line;
      print OUTFONT $font_line;
         print OUTFONT "\n";
      print OUTFONT $sys_line;
      # Print out some helpful info so the users know if we were able
            print OUT $var, "\n";
         print OUT $var, "\n";
    print PAGER $eula . "\n";
  print STDERR $usage;
      print STDERR "Warning: Could not find $src or $dstDir.\n\n";
      print STDERR 'Warning: The "' . $tmp . '" directory may be under attack.' . "\n\n";
        print STDERR wrap("Couldn't open \"$desktopConf\".\n"
      print STDERR wrap("Couldn't open \"$mimeConf\".\n"
      print STDERR wrap('Either your ' . $machine . ' is not connected to an '
  print STDERR wrap($msg . 'Execution aborted.' . "\n\n", 0);
           print STDERR wrap('Network name "' . $name . '" for ' . $device .
         print STDERR wrap('Unable to backup the file ' . $file . ' to '
  print STDERR wrap('Unable to backup the file ' . $file . '.  You have too '
         print STDERR wrap("Unable to install the .desktop menu entry file. "
      print STDERR wrap('Unable to open the property file "' . $dir . '/'
      print STDERR wrap('Unable to remove the file ' . $dst_dir . '/misc/'
    print STDERR wrap('Unable to remove the temporary directory ' . $dir . '.'
         print STDERR wrap("Unable to update the MIME-Type database.\n", 0);
     print STDERR wrap("Unable to update the network configuration file.\n", 0);
        print STDERR wrap('We were unable to locate an unused Class C subnet '
      print STDERR wrap('We were unable to locate an unused Class C subnet in '
            print SYSFONT "<dir>", $location, "</dir>\n";
        print TEFILE <<EOF;
    print "VMware Tools for Solaris is only available for Solaris 9 and later.\n";
  print WFD wrap("\n", 0);
    print WFD wrap(". No virtual networks configured.\n", 0);
      print WFD wrap(". vmnet" . $i . ' is a host-only network on private '
      print WFD wrap(". vmnet" . $i . ' is a NAT network on private subnet '
      print WFD wrap(". vmnet" . $i . ' is bridged to ' . $bridge . "\n", 0);
    print wrap('Aborting attempt to change permissions on config files found '
    print wrap ('All your ethernet interfaces are already bridged.'
    print wrap(  'and will cause the Solaris Service Management Facility to '
      print wrap('Answer "yes" if you have received a new serial number. '
  print wrap('Building the ' . $name . ' module.' . "\n\n", 0);
      print wrap('Cannot change permissions on file "' . $cf . '".' . "\n\n",
          print wrap("Configuration of cups backend for selinux failed.\n\n");
  print wrap('Configuring a bridged network for vmnet' . $vHubNr . '.'
  print wrap('Configuring a host-only network for vmnet' . $vHubNr . '.'
  print wrap('Configuring a NAT network for vmnet' . "$vHubNr." . "\n\n", 0);
    print wrap("Creating a new initrd boot image for the kernel.\n", 0);
	     print wrap("Detected a pre-release version of Xorg X server.\n");
	print wrap("Detected GCC binary at \"$gGccPath\".\n", 0);
    print wrap("Detected non-VMware installed module at " .
	print wrap("Detected the kernel headers of the running kernel at " .
	      print wrap ("Eject Failed:  If possible manually eject the " .
    print wrap('Enjoy,' . "\n\n" . '    --the VMware team' . "\n\n", 0);
  print wrap('Enjoy,' . "\n\n" . '    --the VMware team' . "\n\n", 0);
      print wrap ('Error: ' . "$childStatus" . '. X did not start.' .
  print wrap('Extracting the sources of the ' . $name . ' module.' . "\n\n",
      print wrap("Failed to install the $name pre-built module.\n\n",0);
         print wrap('File ' . $file . ' is backed up to ' . $file . '.old.'
    print wrap("Found a compatible pre-built module for $name.  " .
      # print wrap ('Found the device 0x0710' . "\n\n", 0);
         print wrap("Found VMware Tools CDROM mounted at " .
    print wrap($helpString, 0);
      print wrap('[' . $i . ']' . $header . ' ' . $mode . "\n", 0);
  print wrap("Initializing...\n\n", 0);
    print wrap('It appears that your running kernel has not been built from a '
      print wrap($lmsg . " or choose another directory.\n", 0);
      print wrap('Making sure services for ' . vmware_product_name()
    print wrap('Making sure services for ' . vmware_product_name()
    print wrap($message . $default_value, 1 + $reserved);
          print wrap($msg, 0);
        print wrap($msg, 0);
      print wrap($msg, 0);
      print(wrap($msg), 0);
    print wrap("\n" .
  print wrap( "\n"
      print wrap ("\n\n" . 'Could not locate X ' . $xversionAll .
     print wrap("\n\n" . 'Detected XFree86 version ' . $xversionAll . '.'
  print wrap("\n\n" . 'Detected XFree86 version ' . $xversionAll . '.'
  print wrap("\n\n" . 'Detected Xorg X server version ' . $xorgServerVersion . '.'
    print wrap("\n\nDistribution provided drivers for Xorg X server are used.\n\n", 0);
      print wrap("\n\n" . 'No drivers for Xorg X server version: ' . $xorgServerVersion . '.'
    print wrap("\n\n" . 'No drivers for Xorg X server version: ' . $xorgServerVersion . '.'
	     print wrap("\n" . 'No drivers for Xorg X server version: ' . $xorgServerVersion . '.'
      print wrap ("\n\n" . 'The configuration file ' . $xconfig_file .
     print wrap ("\n\n" . 'The configuration file ' . $xconfig_file .
		 print wrap ("No eject (or equivilant) command could be " .
      print wrap('None of the pre-built ' . $name . ' modules for '
      print wrap('Not changing network settings for vmnet' . $vHubNr . '.'
            print wrap("Note that you may need to change this configuration "
    print wrap('Not trying to load the module as it is for a different kernel version.' . "\n\n", 0);
     print wrap ('No X install found.' . "\n\n", 0);
  print wrap("\n" . 'Please choose one of the following display sizes that X '
    print wrap('Number of virtual networks exceeded.  Not creating virtual '
    print wrap("\n Warning: This script could not find mkinitrd or " .
      print wrap("\n" . 'X is running fine with the new config file.' .
       print wrap("One or more selinux tools missing: ".
               print wrap ($outputline, 0);
    print wrap('Please remember to configure your network by adding:' . "\n"
      print wrap('Please try again when you are ready to accept.' . "\n\n", 0);
  print wrap('Probing for an unused private subnet (this can take some '
      print wrap(' Remember to use this port when installing'
  print wrap('Removing a bridged network for vmnet' . $vHubNr . '.' . "\n\n",
  print wrap('Removing a host-only network for vmnet' . $vHubNr . '.' .
  print wrap('Removing a NAT network for vmnet' . $vHubNr . '.' . "\n\n", 0);
  print wrap('Removing obsolete VMware Samba config info. To access the ' .
            print wrap('rmmod pcnet32' . "\n", 0);
          print wrap('rmmod vmxnet' . "\n"
      print wrap("Searching for a valid kernel header path...\n", 0);
      print wrap("Searching for GCC...\n", 0);
    print wrap('Skipping X configuration because X drivers are not included.' . "\n\n", 0);
        print wrap('Skipping X configuration.' . "\n\n", 0);
    print wrap('Thank you.' . "\n\n", 0);
    print wrap("That name is too long, please enter a name"
    print wrap('The answer "' . $answer . '" is invalid. It must be an '
    print wrap('The answer "' . $answer . '" is invalid. It must be either '
    print wrap('The answer "' . $answer . '" is invalid.  It must be of the '
    print wrap('The answer "' . $answer . '" is invalid.  It must be one of '
    print wrap('The answer "' . $answer . '" is invalid. It must be one of '
    print wrap('The answer "' . $answer . '" is invalid.  It must be the '
    print wrap('The answer "' . $answer . '" is invalid. Please enter a valid '
    print wrap('The answer "' . $answer . '" is invalid. Please enter a valid'
    print wrap('The answer ' . $answer_string .' is invalid. Please enter a valid '
        print wrap('The ' . $candidate . ' - ' . $name . ' module '
      print wrap('The "--compile" and "--prebuilt" command line options are '
  print wrap('The configuration of ' . vmware_longname() . ' for this ' .
  print wrap('The configuration of ' . vmware_longname() . ' for this running '
      print wrap('The default port : '. $gDefaultAuthdPort. ' is not free.'
        print wrap('The directory of kernel headers (version '
     print wrap ('The easiest way to install this pakage is by using ' .
      print wrap('The ethernet device "' . $answer . '" is already configured '
       print wrap("The following libraries could not be found on your system:\n", 0);
  print wrap('The following ' . $nettype . ' networks have been defined:'
    print wrap('The installed vmxnet driver will be used for all vlance and '
          print wrap('The kernel defined by this directory of header files does '
        print wrap('The kernel defined by this directory of header files is '
	     print wrap("The module $mod depends on $modDep.  Because of " .
      print wrap("The module $mod has already been installed on this " .
    print wrap("The module $mod must first be installed before it can be " .
      print wrap('The ' . $name . ' module loads perfectly into the running kernel.'
      print wrap('The path "' . $answer . '" does not exist.' . "\n\n", 0);
      print wrap('The path "' . $answer . '" exists, but is not a directory.'
	    print wrap('The path "' . $answer . '" exists, but is not a directory.'
        print wrap('The path "' . $answer . '" is a kernel header file '
      print wrap('The path "' . $answer . '" is a kernel header file '
        print wrap('The path "' . $answer . '" is an existing directory, but it '
      print wrap('The path "' . $answer . '" is an existing directory, but it '
	print wrap('The path "' . $answer . '" is a relative path. Please enter '
      print wrap('The path "' . $answer . '" is not an existing directory.'
      print wrap("The port you chose is not available for use.  Please select another "
    print wrap('There is probably a slight difference in the kernel '
	print wrap('The serial number ' . $sn . ' is invalid.' . "\n\n", 0);
        print wrap('The subnet ' . $subnet . '/' . $netmask . ' appears to be '
        print wrap("The vmblock module is not supported on kernels "
     print wrap ("The VMware pvscsi module is only supported on kernel " .
     print wrap ("The VMware Tools for FreeBSD $version depend on libraries " .
      print wrap('The wizard will present a series of questions that will '
    print wrap('This program does not know where to install the ' . $name
      print wrap('This program previously created the directory ' . $dir . ', '
    print wrap('This program previously created the directory ' . $dir
    print wrap('This program previously created the file ' . $file . ', and '
    print wrap('To enable advanced X features (e.g., guest resolution fit, '
        print wrap('To make use of the vmxnet driver you will need to '
          print wrap('To use the vmxnet driver, restart networking using the '
    print wrap('Unable to build the ' . $name . ' module.' . "\n\n", 0);
      print wrap ('Unable to copy the updated X config file to '
      print wrap('Unable to find the compiler specified in the CC environnment variable: "'
  print wrap('Unable to make a ' . $name . ' module that can be loaded in the '
    print wrap('Unable to untar the "' . $dir . '/' . $name . '.tar'
    print wrap('Untarring ' . $vixTarFile . ' failed.' . ".\n", 0);
   print wrap("  Using " . $admin . " as the " . vmware_product_name()
  print wrap('Using compiler "' . $gHelper{'gcc'}
    print wrap("Using Existing SSL Certificate.\n", 0);
      print wrap('Virtual machines configured to use host-only networking are '
      print wrap('Virtual machines configured to use NAT networking are '
                print wrap("WARNING: A module identified as $result has been found " .
      print wrap("Warning: depmod exited with a non-zero status.\n", 0);
     print wrap("WARNING: The installer initially used the " .
    print wrap('WARNING: ' . vmware_product_name() . ' has been configured to '
      print wrap ('X configuration failed! The updated X config file does '
	print wrap ('You cannot power on any virtual machines until you enter a '
    print wrap('You can now run ' . vmware_product_name() . ' by invoking' .
  print wrap('You can now run ' . vmware_product_name() . ' by invoking "'
    print wrap('You have already setup networking.' . "\n\n", 0);
       print wrap('You must read and accept the End User License Agreement to '
    print wrap('You must restart your X session before any mouse or graphics changes '
    print wrap('You must restart your X session under the Xorg X server before '
    print wrap('Your compiler "' . $gHelper{'gcc'} . '" version "' .
  # prior to any module use.
				 . 'private network?',
				. 'private network?',
                           . 'private subnet? (yes/no/help)',
# private virtual network that Samba uses.  We are also reserving vmnet0
# Probe for an unused private subnet
    # Probe the module without loading it or executing its code.  It is cool
                       . ' /proc/cpuinfo') eq '') {
  # process and the module-only process.
     # Process clobberedKernelModule dependencies
    # Processor
                                                    : 'processor does') . ' not '
                                                  : 'processor does') . ' not '
      . ' /proc/ksyms 2> /dev/null') eq '') ? 'no' : 'yes';
  # (/proc/parport/0) is /dev/parport0, but the second one (/proc/parport/1)
      ($product eq 'ws' || $product eq 'wgs') &&
# Program entry point
    @programList = ('cp', 'uname', 'grep', 'ldd', 'mknod', 'depmod', 'insmod',
    @programList = ('cp', 'uname', 'grep', 'ldd', 'mknod', 'kldload',
    @programList = ('cp', 'uname', 'grep', 'ldd', 'mknod', 'modload', 'modinfo',
    # programs that require root access
                              . 'program to try to build the ' . $name
  $promocode = db_get_answer('DOCDIR') . '/PROMOCODE';
  $promoconfig = $libdir . '/configurator/PROMOCONFIG';
prompt                  = no
# Prompts the user if a binary is not found
        $prop{$1} = $2;
      # Propagate unexpected errors
                                  $prop_dst_root . "/log4j.properties");
                                  $prop_dst_root . "/login.properties");
                                  $prop_dst_root . "/proxy.properties");
   # proper location anyway
	       "properly install the VMware modules.\n\n", 0);
		 'properly use this utility.' . "\n\n", 0);
         $property_file  = $path . "/WebAccess.properties";
        $prop{'ModVersion'} eq 'yes' and
                              proposed answer.
      $propRef{'patchlevel'} = $1;
      $propRef{'variant'} = 'opensuse';
      $propRef{'variant'} = 'sle';
      $propRef{'version'} = $1;
        $prop{'UtsVersion'} = $1;
                # protocol, so should be handled seperately.
    #     -- Provide a means of preserving existing datastores
		 "provided by the $pkg_name package. Unfortunately we were " .
               . 'provided by ' . vmware_product_name()
             "provided by " . vmware_product_name() . " is designed to work " .
    # PRUNEFS = "afs nfs iso9660 cifs"
# Pull data out of the config file.  The format is expected to be 'ModeLine "1111x9999"'
	 pulseDisableTimerBasedAudio();
               push(@candidate_mounts, "${device}::::${mountpoint}");
	     push(@candidate_mounts, "${device}::::${mountpoint}");
          push @currentSection, $line;
      push @currentSection, $line;
      push(@escapedArgv, shell_string($_));
      push(@gAllEthIf, $fields[0]);
      push(@gAvailEthIf, $eth);
  push(@gAvailEthIf, $eth);
        push(@gManifestInstFlags, 'FALSE');
        push(@gManifestNames, $name);
        push(@gManifestVersions, $1);
    push (@gRamdiskModules, "$mod");
	       push @instPkgs, $instPkgName;
        push(@list, ($1, $3, $7));
         push(@list, '"' . $1 . "x" . $2 . '"', $1, $2);
      push @$list, ($candidate, $prop{'ModVersion'});
      push(@list, $name);
         push(@missing, $1);
        push(@netopt, 'install pciehp /sbin/modprobe -q --ignore-install acpiphp;'
      push(@networks, 'vmnet' . $vHubNr);
    push @output, "install pciehp /sbin/modprobe -q --ignore-install acpiphp; /bin/true\n"
  push @output, 'install pcnet32 (/sbin/modprobe -q --ignore-install vmxnet || '
      push @output, "probeall $cNICAlias vmxnet pcnet32\n";
      push @output, sprintf("alias %s %s\n", $key, $ethAliases->{$key});
      push @output, "vmnics\t\t0x00001022 0x00002000 0xffffffff 0xffffffff 0x00000000 0x00000000 0x0\n";
      push @output, "vmxnet\t\t0x000015ad 0x00000720 0xffffffff 0xffffffff 0x00000000 0x00000000 0x0\n";
         push(@setOption, $arg);
      push(@subnets, compute_subnet($hostaddr, $netmask));
      push(@subnets, $subnet);
  push (@xargs, ('-xf86config',  $xConfigFile)) if (-e $xConfigFile);
      push(@xdmcfgs, "$x11Base/lib/X11/xdm/xdm-config");
   # pvscsi is supported on only kernel versions >= 2.6.18.
			     pvscsi  => 'yes',
      $p{'^XMOUSETYPE=.*$'} = 'XMOUSETYPE=IMPS/2';
                       . ' -q '
                     . ' -q 0x0710')/256) == 0 ) {
                     . ' -q ' . ' -b '
                             "-q 'DISTRIB_CODENAME=hardy' /etc/lsb-release " .
                           "-q 'DISTRIB_ID=Ubuntu' /etc/lsb-release " .
			   "-q 'Fedora release 9' /etc/fedora-release " .
    $quaddot_a[$i] = $int & 0xFF;
  @quaddot_a = split(/\./, $quaddot);
    (quaddot_to_int($network) + quaddot_to_int($broadcast) + 1) / 2);
        quaddot_to_int($new_broadcast) >= quaddot_to_int($subnet)) {
    quaddot_to_int($patch{'%broadcast%'}) - 1);
     + quaddot_to_int($patch{'%broadcast%'}) + 1) / 2);
    (quaddot_to_int($patch{'%network%'})
        query($explain, ' Press Enter key to continue ', 0);
   # Query ldconfig(1) for necessary FreeBSD 6 libraries.
      query ($msg, ' Press Enter key to continue ', 0);
      query($msg, ' Press Enter key to continue ', 0);
      query('The communication service is used in addition to the '
	query('The driver for the VMXNET 3 virtual '
      query('The fast network device driver (vmxnet module) is used only for '
            query('The file system sync driver (vmsync) is only used to create safe '
	query('The memory manager driver (vmmemctl module) is used by '
      $query = "The path \"$gcc_path\" appears to be a valid path to the " .
      $query = "The path \"$gcc_path\" is not valid path to the gcc binary.";
      $query = "The path \"$kh_path\" appears to be a valid path to the " .
      $query = "The path \"$kh_path\" is not valid.";
       query("The VM communication interface socket family is used in conjunction " .
    query('This system appears to have a DHCP server configured for normal '
	 query('Unable to compile the pvscsi module.  '
         query('Unable to compile the vmwgfx module. '
    query('You are running Linux version ' . $gSystem{'version_utsclean'}
    query('You must read and accept the End User License Agreement to '
       query('You will need to install these manually before you can run ' .
                                             . ' -r');
RANDFILE                = $tmpdir/seed.rnd
  $re = '^([0-9]|[1-9][0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))'
  $re = '^(([0-9]|[A-Z]){5}-){3}(([0-9]|[A-Z]){5})$';
   # Read from our fonts.conf until reach a <dir> line.  Skip the dir.
	read(IN, $magicnumber, 2, 0);
    # Readin our prelink file, do the appropreiate substitutions, and
         # Read in the initmodfile and find the current modules in the list
        # Read the current config file;
    # Read the properties file
  read(X_BIN, $buf, 1)  || return 0;
  read(X_BIN, $buf, $cSELFMAG)  || return 0;
                   . 'reboot.' . "\n",0);
  # Rebuild the RamDisk here so new modules are included during the install
                     . 'recommended that you use it as a NAT network.  Are '
    # record root access method for later use by module builder and other
   # Refresh icon cache. Some systems (Ubuntu) don't do it automatically
  # Ref to an array of used subnets
         } # Regenerate the property file from the template.
            # Regenerate whole device section, and only one device section
            # Regenerate whole monitor section, and only one monitor section
            # Regenerate whole screen section. This is done below.
                 . 'registered virtual machines?  This will be done by '
	       "re-installed by this configuration script.  Please re-run " .
    reinstall_module('pvscsi');
    reinstall_module('vmblock');
    reinstall_module('vmci');
    reinstall_module('vmhgfs');
    reinstall_module('vmmemctl');
    # reinstall_module('vmsync');
    reinstall_module('vmwgfx');
    reinstall_module('vmxnet');
    reinstall_module('vmxnet3');
    reinstall_module('vsock');
# Reinstalls the module after passing some basic sanity checks.
    # Relative name
  # Release 1.4.0 came out as part of Xorg 7.3
      # Reload available ethernet info in case user does make a change
  # Reload the list of available ethernet adapters
  # remain untouched.
  # Remind Solaris users currently using the Xsun server to switch to Xorg
                 . ' remote clients on other machines.' . "\n", 0);
# Remove a directory from the tar installer database
# Remove a file from the tar installer database
# Remove all clearly delimited blocks from an unstructured text file
  # Remove all directories beginning with $prefix
  # Remove all files beginning with $prefix
    remove_all_networks(0, 0, 1);
    remove_all_networks(0, 1, 0);
    remove_all_networks(1, 1, 1);
# Remove an answer from the tar installer database
# Remove a temporary directory
        remove_bridged_network($i, 'vmnet' . $i);
    remove_bridged_network($vHubNr, $vHostIf);
                 . 'removed.' . "\n\n", 0);
        remove_hostonly_network($i, 'vmnet' . $i);
    remove_hostonly_network($vHubNr, $vHostIf);
# Remove leading and trailing whitespaces
        remove_nat_network($i, 'vmnet' . $i);
    remove_nat_network($vHubNr, $vHostIf);
    remove_net($vHubNr, $vHostIf);
      remove_net($vHubNr, 'vmnet' . $vHubNr);
    # Remove pcn's hold on "pci1022,2000".
# Removes a bridged network
# Removes a hostonly network
# Removes all networks on the system subject to the following
# Removes a NAT network
# Removes a network
      # remove temp dir and it's contents
      # Remove the answer only if the install succeeded.  If installing failed,
  # Remove the flag _before_
  # remove the inner ones before the outer ones
  # Remove the samba settings
# Remove the timestamp data for a file.
    # Remove the trailing slash
          remove_tmp_dir($build_dir);
        remove_tmp_dir($build_dir);
        remove_tmp_dir($gVmciBuildDir);
# remove tmp dir. This encapsulates the pattern.
         remove_tmp_dir($tmpdir);
      remove_tmp_dir($tmp_dir);
      remove_tmp_dir($tmpdir);
   remove_tmp_dir($tmp_dir);
   remove_tmp_dir($tmpdir);
  remove_tmp_dir($tmp_dir);
  remove_tmp_dir($tmpdir);
      remove_tmp_dir($tmpDir);
    remove_tmp_dir($tmpDir);
  remove_tmp_dir($tmpDir);
    remove_tmp_dir($work_dir);
# Remove trailing slashes in a dir path
    # Remove trailng data (subvendor, etc) from PCI IDs
      remove_vmci_build_dir();
    remove_vmci_build_dir();
#      Remove VMware-added blocks relating to vmware-user autostart from
     rename($cupsPrinters . '.bak', $cupsPrinters);
    rename $file, $dstFile;
                             ' -- renaming to "' . $newName . '"' . "\n", 0);
                # Replace mouse device. There are 2 different formats for mouse
                # Replace mouse driver
                # Replace mouse protocol. There are 2 different formats for mouse
      $reply = '';
      $reply = $defaultreply;
        $reply = remove_whitespaces($defaultreply);
    $reply = remove_whitespaces($reply);
      $reply = <STDIN>;
      $reply = '' unless defined($reply);
[ req_distinguished_name ]
# requested levels
require {
# require a reboot.  For more info, see Bug 271286
require Config;
# requires.
      $reserved = 0;
# Reserved vmnets
    # Reserve some room for the reply
          # Reset for next section.
  # Reset the EULA value so the next install asks the question again.
# Reset the timestamp data for a file.
                 . 'residing on the NAT network will appear as the host when '
    # resolution
    $resolutions{$mode_width * $mode_height} .= $mode_name . ' ';
		 restart_hal();
    $restorecmd = $binary . ' -u -k all';
     restorecon($_);
      restorecon($cfgFile);
      restorecon($dst);
   restorecon($dst);
     restorecon($file);
   restorecon($file);
  restorecon($src_file);
# Result:
         $result = 1;
          $result = check_if_vmware_module($modPath);
    $result = compile_module_linux($name, $modconfig, $modDest,
     $result = configure_module_bsd('vmblock');
	$result = configure_module_bsd('vmhgfs');
    $result = configure_module_bsd('vmmemctl');
    $result = configure_module($mod);
       $result = configure_module('pvscsi');
     $result = configure_module_solaris('vmblock');
        $result = configure_module_solaris('vmhgfs');
    $result = configure_module_solaris('vmmemctl');
        $result = configure_module('vmblock');
    $result = configure_module('vmci');
          $result = configure_module('vmhgfs');
      $result = configure_module('vmmemctl');
         $result = configure_module('vmsync');
     $result = configure_module('vmwgfx');
    $result = configure_module('vmxnet');
      $result = configure_module('vmxnet3');
     $result = configure_module('vsock');
# resulting string can be used in a command line.
     $result = mod_pre_install_check('pvscsi');
    $result = mod_pre_install_check('vmblock');
  $result = mod_pre_install_check('vmci');
    $result = mod_pre_install_check('vmmemctl');
   $result = mod_pre_install_check('vmsync');
  $result = mod_pre_install_check('vmwgfx');
  $result = mod_pre_install_check('vmxnet');
    $result = mod_pre_install_check('vmxnet3');
   $result = mod_pre_install_check('vsock');
          $result = 'no';
        $result = 'no';
      $result = 'no';
# Results:
#  Results: yes if configured, no if not
   # result, users who upgrade Tools may find vmware-user launched via a
      $result = 'yes'
      $result = 'yes';
# Retrieve an answer that must be present in the database
# Retrieve and check system information
# Retrieve distribution information
# Retrieves an answer if it exists in the database, else returns undef;
# Retrieve the amount of RAM (in MB)
            return;
         return;
        return '';
        return;
       return;
      return ' ';
      return '';
      return;
     return;
    return '/';
    return '.';
    return '';
    return;
   return ();
  return '';
  return;
	return '';
            return 0;
      return 0;
    return (0);
    return 0;
   return 0
   return 0;
  return `$_[0]`;
  return $> == 0;
  return 0;
    return 0; # Failure
	return 0; # Failure - module not found
# Return 0 if the file can be written safely, 1 otherwise
        return (0, undef, undef);
      return (0, undef, undef);
         return 1;
      return -1;
      return 1;
     return -1;
     return 1;
    return -1;
    return "$1";
    return 1;
   return 1;
  return -1;
  return 1;
  return 1;  
	 return 1;
        return $1.$2;
    return $1.$2;
	 return 1 if ($file =~ $regex);
# Return 1 if success, 0 if failure
# Return 1 if the directory existed before
    return (1, $name, $value, length($prefix1), length($prefix2));
        return (1, $subnet, $netmask);
      return (1, $subnet, $netmask);
    return $2;
            return 3;
         return 3;
   return 3;
    return (4, undef, $xversionAll);
  return (4, xconfig_file_abs_path($xconfig_path, $xconfig_file_name),
     # Return a 1, restorecon was called.
# Return a clean answer if valid, or ''
# Return a clean number if valid, or '0'
# Return an existing directory if valid, or ''
      return $answer;
    return $answer;
  return $answer;
	return $answer;
      return (("$arr1[$indx]" gt "$arr2[$indx]") ? 1 : -1);
  return $availableRAMInMB;
   return $basename
  return $best_name;
      return $bin;
    return 'bridged';
  return ($buf2 eq $cELFCLASS64);
      return 'caldera';
      return $cCreateDirFailure;
  return $cCreateDirSuccess;
    return $cDirExists;
  return check_port_not_registered($port);
  return $chosen_resolution;
    return configure_module_linux($name);
   return $count;
  return $count;
  return count_networks(0, 0, 1, 0);
  return count_networks(0, 1, 0, 0);
  return count_networks(0, 1, 0, 1);
  return count_networks(1, 0, 0, 0);
  return count_networks(1, 1, 1, 0);
   return $cProductServiceTable{vmware_product()};
      return (db_file_ts($file) != $statbuf[9]);
  return db_get_answer('BINDIR') . '/vmware-toolbox';
  return db_get_answer('BINDIR') . '/vmware-toolbox-cmd';
  return db_get_answer('LIBDIR') . '/bin/vmware-vmx';
      return db_get_answer($prefix . $bin);
  return db_get_answer('SBINDIR') . '/vmware-checkvm';
      return 'debian';
    return 'debian';
    return $default;
  return defined($bridged_ethIf);
  return defined($gDBDir{$dir});
  return defined($gDBFile{$file});
  return defined($gDBUserFile{$file});
  return    defined($hostonly_hostaddr)
   return defined($line);
  return    defined($nat_hostaddr)
  return $dest;
  return ((-e "$certLoc/$certPrefix.crt") &&
    return 'editor';
  return $enableXImps2;
    return $extendedVersion;
  return %fileToRestore;
  return @fn;
   return $foundit;
               return $fullbin;
    return $fullpath;
  return $gcc_path;
  return &{$gCheckAnswerFct{$type}}($answer, $source);
  return $gDBAnswer{$id};
  return $gDBFile{$file};
    return get_answer(sprintf('The new private network has collided with '
  return (get_answer('The file ' . $file . ' that this program was about to '
	return (get_answer('The path "' . $answer . '" does not exist currently. '
   return getFreeBSDSuffix();
  return (&get_hostonly_subnets(), &get_nat_subnets());
   return get_persistent_answer('What is the location of the directory which contains ' .
  return $gHelper{'gcc'};
# Return GSX or ESX for server products, Workstation for ws
    return 'help';
    return 'hostonly';
  return    $hostonly
  return ($httpPort, $httpsPort);
      return ($httpProxy, $httpsProxy);
      return $i;
    return 'installed_by_other';
      return 'installed_by_vmware';
   return install_file($src, $dst, \%patch, $cFlagTimestamp);
   return install_link(0, $to, $from);
      return installUdevRule($src);
   return @instPkgs
  return $int;
    return internal_dirname($path);
  return int(($left + $right - 1) / $right);
  return   int_to_quaddot(quaddot_to_int($ip)
  return int_to_quaddot(quaddot_to_int($ip) & quaddot_to_int($netmask));
  return    is_bridged_network($vHubNr)
            return ($jobPath, $suffix);
    return (join("\n", @rpcResultLines));
  return join('.', @quaddot_a);
  return $kh_path;
  return ((-l $file) || (-e $file))
   return $line_added
   return @list;
  return @list;
   return $location;
  return ($major, $minor);
  return ($major, $minor, $sub);
    return 'mandrake';
        return $mod;
   return $modCount;
         return $modDir;
      return $modName;
  return $modName;
  return $moduleConfed;
   return $moduleId;
   return $name;
    return "# $name $notset\n";
  return $names;
    return "$name = \"$val\"\n";
    return 'nat';
          return 'no';
         return 'no';
        return 'no';
       return 'no';
      return 'no';
     return 'no';
    return 'no';
  return 'no';
	  return 'no';
    return 'none';
      return 'no'; # Right now we only build tools from source on Linux
      return 'not_configured';
  return 'not_installed';
   return ($numSymlinks, $foundGnome, $foundKde);
 return ($osProductHash{vmware_product()} =~ m/$OS/i) ? 1 : 0;
  return $out;
  return $output;
  return ($output, $pos);
    return ($output, $pos, $word);
  return ($output, $pos, $word);
  return ($packedVersion, $xorgServerVersion);
  return %patch;
      return $path;
  return path_compare($dirname, $linkDest, $file);
  return (@perfect, @compatible, @dangerous);
  return $port;
        return $prev_res;
# Return product name and version
  return %propRef;
      return 'redhat';
    return 'redhat';
  return remove_whitespaces($buildNr);
        return $reply;
    return $reply;
    return $result;
   return $result;
  return $result;
  return $return_val;
  return $rv;
      return ($rv eq 0);
  return $rv eq 0;
# Returns 1 if a file has changed with respect to its timestamp in the database,
# Returns 1 if it has. 0 otherwise.
# Returns 1 if it uses the shipped module (and 0 otherwise).
# Returns 1 if the first value is greater, -1 if the second
# @returns - -1 if there was an internal error, otherwise
#    Returns 1 if the symlink was installed, and 0 otherwise.
#    Returns 1 if we dropped in a script, and 0 otherwise.
#    Returns 1 if xinitrc.common was modified, and 0 otherwise.
# Returns -1 on failure.
# @returns - A list of the installed RPM packages that this
# Returns a list of VMware kernel modules that were found on the system that were not
   return searchForUdevRule($regex);
  return($self);
  return($self);  
    return $self->{db}{$name}{value};
  return $self->{timestamp};
# @return Service script basename on valid product, undef otherwise.
  return '\'' . $single_quoted . '\'';
    # Return something so we don't get any undef errors.
  return sort(grep(/$pattern/, keys(%{$self->{db}})));
  return sort(keys(%present));
# @returns Return value from system() or direct_command().
# Returns the console name of the product for use in a .desktop file
# Returns the file name of the module on the system.
#    Returns the following triple:
# Returns the name of the .desktop file to produce
# Returns the name of the icon file to produce
# Returns the name of the main binary for this install.
#    Returns the number of xdm-config files modified.
# Returns the string path to the library, or undef
      return (("$str1" eq '') ? -1 : 1);
  return $string;
# @returns - True if a match was found, false otherwise.
# @returns - True if successful, false otherwise.
# Returns true (non-zero) if the operation succeeded, false otherwise.
  return @subnets;
  return substr($_[0], rindex($_[0], '/') + 1);
  return substr($path, 0, $pos);
   return $suffix;
  return $suffix;
# Returns undefined if none of them exists.
      return 'suse';
    return 'suse';
# Returns yes if we should install the module, no otherwise.
      return system(@cmd);
	return !system(shell_string($gHelper{'insmod'}) . ($probe ? ' -p ' : ' ')
	return !system(shell_string($gHelper{'kldload'}) . ' ' . shell_string($modname)
	return !system(shell_string($gHelper{'kldload'}) . ' ' . shell_string($modpath)
	return !system(shell_string($gHelper{'kldunload'}) . ' ' . shell_string($modname)
	return !system(shell_string($gHelper{'modload'}) . ' ' . shell_string($modname)
	return !system(shell_string($gHelper{'modload'}) . ' ' . shell_string($modpath)
	return !system(shell_string($gHelper{'modprobe'}) . ' -r ' . shell_string($modname)
	return !system(shell_string($gHelper{'modprobe'}) . ' ' . shell_string($modname)
		return !system(shell_string($gHelper{'modunload'}) . ' -i ' . $amodid
	return !system(shell_string($gHelper{'rmmod'}) . ' ' . shell_string($modname)
# return the answer if valid or ''
# Return the specific VMware product
# Return the timestamp of an installed file
# Return the version of VMware
  return $tmp . '/' . $prefix . $serial;
  return 'tools-for-linux';
    return 'turbolinux';
      return undef;
    return undef;
   return undef;
  return (undef);  
  return undef;
# Return undef if unable to determine
  return 'unknown';
   return $useSystem ? system($cmd) : direct_command($cmd);
    return '/usr/X11/bin';
     return '/usr/X11R6/bin';
  return $utsrel;
  return $val;
      $return_val = $file;
# @return Valid service script's path relative to INITSCRIPTSDIR unless
# Return value is:
# Return value is (status, subnet, netmask).
# Return value is the complete path if found, or '' if not found
  return $version * 65536 + $patchLevel * 256 + $subLevel;
      return $vHubNr;
      return "vmware-gsx.desktop";
      return "vmware-gsx.png";
   return vmware_product() eq "wgs";
   return vmware_product() eq "ws" || vmware_product() eq "player";
      return vmware_product_name();
      return vmware_product_name() . " Console";
   return vmware_product() =~ /tools-for-/;
  return 'vmware-toolbox';
  return 'VMware Tools';
  return $vmware_version;
      return "vmware-workstation.desktop";
      return "vmware-workstation.png";
  return ($vmxnet, $pcnet32, $es1371);
# Return whether or not this is a hosted desktop product.
# Return whether or not this is a hosted server product.
    return 'wizard';
  return $xconfig_path . '/' . $xconfig_file_name;
   return $XFile;
  return xserver_bin() . '/XF86_VMware';
  return xserver_bin() . '/XFree86';
  return xserver_bin() . '/Xorg';
  return ($xversion, xconfig_file_abs_path($xconfig_path, $xconfig_file_name),
	     return ($xversion, xconfig_file_abs_path($xconfig_path, $xconfig_file_name),
          return 'yes';
        return 'yes';
       return 'yes';
      return 'yes';
    return 'yes';
   return 'yes';
  return 'yes';
	    return 'yes';
# @retval ($path, $suffix) Path containing Upstart jobs, job suffix (ex: .conf).
# @retval ()               Upstart unsupported or unable to determine job path.
                 . '/rfc1918.txt).' . "\n\n" . 'Remember that the host-only '
  # RHEL3: 2.4.21-9.0.1.ELhugemem => 2.4.21-ELhugemem
  # RHEL4: 2.6.9-11.ELsmp => 2.6.9-ELsmp
  # RHEL5: 2.6.18-8.1.1.el5 => 2.6.18-el5
    # Right now, this is linux-only, not sure it even makes sense for other OS.
  # Right now this only applies to 2.4.x kernels as /proc/ksyms was
    $r = int(rand($#subnets + 1));
                    'rm', 'isainfo', 'ifconfig', 'cat', 'mv', 'sed',
                    . 'root).  Would you like to configure the Xorg server now '
    # Round up total memory to the nearest multiple of 8 or 32 MB, since the
    @rpcResultLines = <RPCRESULT>;
    $rpctoolBinary = $libDir . $rpctoolSuffix;
    $rpctoolBinary = "./lib" .  $rpctoolSuffix;
    # rpc tool directly out of the staging area.  Woot!
  $rpctoolSuffix .= getFreeBSDSbinSuffix() . '/vmware-rpctool';
     $rpctoolSuffix = is64BitUserLand() ? '/sbin64' : '/sbin32';
     $rpctoolSuffix = is64BitUserLand() ? '/sbin/amd64' : '/sbin/i86';
                        'rui',
  # rules out /usr/src/linux/include eliminates false positive we
                           "Run and manage remote virtual machines",
                        "Run and manage virtual machines",
             'running kernel completed successfully.' . "\n\n", 0);
		       'running kernel?', $kh_path, 0);
             . 'running kernel:' . "\n", 0);
		 . 'running kernel.' . "\n\n", 0);
#        running Samba.
               . 'run on a port different from the default port. '
    # Run parent code, reading from child
     $runSystem = 'FreeBSD';
     $runSystem = 'Linux';
     $runSystem = 'SunOS';
  $rv = block_remove($src_file, $tmp_file, $begin_marker, $end_marker);
     s/^\ +//;
    safe_chmod(01777, $answer);
        safe_chmod(02755, $_);
  safe_chmod(0400, "$certLoc" . '/' . "$certPrefix" . '.key');
  safe_chmod(0444, "$certLoc" . '/' . "$certPrefix" . '.crt');
    safe_chmod(04711, $x_server_file);
        safe_chmod(04755, $_);
	  safe_chmod(0555, $hgfsmounterBinary);
  safe_chmod(0600, $name);
   safe_chmod(0644, $desktopConf);
  safe_chmod(0644, $dhcpd_dir . '/dhcpd.leases~');
  safe_chmod(0644, $dhcpd_dir . '/dhcpd.leases');
   safe_chmod(0644, $mimeConf);
  safe_chmod(0644, $name);
  safe_chmod(0755, $cConnectSocketDir);
	safe_chmod(0755, $compizfile);
      safe_chmod(0755, $xSessionDst);
      safe_chmod(($statbuf[2] & 07777) | 0555, $dst_dir);
   safe_chmod(($statbuf[2] & 07777) | 0555, $plain_file);
  safe_chmod($statbuf[2] & 07777, $dst);
    safe_mkdir($dir, $flags);
       safe_mkdir(internal_dirname($gXMouseDriverFile));
       safe_mkdir(internal_dirname($gXVideoDriverFile));
         safe_mkdir($tmpDir);
                     . $sambaInfo . "\n", 0);
        $sambaInfo = '  This network had a Samba server running to allow '
        # samba is 20 SuSE
        # samba is 91 on RedHat
# samba: Set to indicate a desire to count the number of hostonly networks
      # Save it as a shell string
# Saves configuration files we changed during configuration.
      # Save the files we have to change.
# Save the tar installer database
#  sbin, a lib compatiblity between 5.0 and older systems appeared.  Rather
      # sbin dir is a special case here and is handled within getFreeBSDSbinSuffix().
# SBINDIR. This "installs" vmware-checkvm, vmware-guestd, vmware-user,
                           $sbindir, 'vmtoolsd');
                      $sbindir . '/vmtoolsd');
                           $sbindir, 'vmware-checkvm');
                  $sbindir . '/vmware-checkvm');
                      $sbindir . '/vmware-guestd');
                           $sbindir, 'vmware-memctld');
                           $sbindir, 'vmware-rpctool');
                  $sbindir . '/vmware-rpctool');
                     $sbindir .  '/vmware-tools-upgrader');
                    '/sbin/modprobe --ignore-install pcnet32 $CMDLINE_OPTS' . "\n");
                . '/sbin/modprobe -q --ignore-install pcnet32 $CMDLINE_OPTS);'
			  '/sbin/mount_vmhgfs');
  # scratch during a previous Tools configuration, or 2) we are about to or
		  "script again.\n\n", 0));
	       "script if you would like to use the VMware installation " .
  # scripts for both the toolbox and vmware-user. Note that the vmware-user
	       "script to install the $mod module.\n\n", 0);
    # script, we look for the vmxnet device and invoke devfsadm(1M) manually
# Searches udev rules for file names that match the given regex
# searchForUdevRule
  # Search PATH for Xorg then X, in case it is somewhere else.
   # second are ones that we can still be bridged.
Section "InputDevice"
                    $sectionLine =~ s/$1/vmmouse/g;
                      ($sectionLine =~ /^\s*Device\s+\"(.+)\"/i)) {
                    ($sectionLine =~ /^\s*Device\s+\"(.+)\"/i)) {
                    $sectionLine =~ /^\s*EndSection/i &&
                  $sectionLine =~ /^\s*EndSection/i) {
                  !($sectionLine =~ /^\s*Pointer\s+/)) {
                    ($sectionLine =~ /^\s*Protocol\s+\"(.+)\"/i)) {
                           $sectionLine =~ s/$tmpdev/\/dev\/input\/mice/;
                    $sectionLine =~ s/$tmpdev/\/dev\/kdmouse/;
                           $sectionLine =~ s/$tmpdev/\/dev\/psaux/;
                      $sectionLine =~ s/$tmpdev/\/dev\/psm0/;
                      $sectionLine =~ s/$tmpdev/\/dev\/sysmouse/;
                    $sectionLine =~ s/$tmpmouse/IMPS\/2/g;
                      $sectionLine =~ s/$tmpmouse/ps\/2/;
                    $sectionLine =~ s/$tmpmouse/ps\/2/g;
                      $sectionLine =~ s/$tmpmouse/SysMouse/;
                  $sectionLine = "$&VMware Mouse\"\n";
Section "Monitor"
      $sectionName = lc($1);
Section "ServerFlags"
Section "ServerLayout"
                                        'secure http (https) connections to use',
# secure way, but none of them is standard. So I wrote this
# Security configuration:  Add certificates for the remote console.
  # See 291453 and
  # See bug#185281 for all the deets.
    # See bug 23196.
  # See bug 291453
  # See bug 330893. Previously, we retrieved the gcc version from the output
  # See bug 349327.  We no longer interrupt the network, so checking for
  # See bug 350735 for details.     -astiegmann
  # See bug 360333
	 #       See bug 409942 for more details.
     # See bug 527827.
  # see if the user would like to modify the existing configuration.
    # See if the version of mkinitrd is the Fedora/Redhat one or the SuSE one.  Check
  seek(X_BIN, $cEI_CLASS, 0) || return 0;
  seek(X_BIN, $cEI_MAG0, 0) || return 0;
                # See matching 'XWorkAround' InputDevice section below.
  # See matching XWorkAround layout entry above.
                    $seenDeviceSection == 0) {
                  $seenDeviceSection = 1;
  # See 'Programming Perl' 3rd edition, p. 781 (p. 110 in an older edition)
# See the comment above install_solaris_symlink().
# See vmware_service_issue_command
                   . ' See '. $xLogFile . ' for details. Do you want to create'
  select((select(INSTALLDB), $| = 1)[0]);
      $self->clear();
  $self->{db} = {};
      $self->{db}{$name}{mark} = 0;
    $self->{db}{$name}{mark} = 0;
  $self->{db}{$name}{mark} = 0;
    $self->{db}{$name}{mark} = 1;
  $self->{db}{$name}{mark} = 1;
      $self->{db}{$name}{modified} = 0;
  $self->{db}{$name}{modified} = 1;
            . "\"" . $self->{db}{$name}{value} . "\"" . substr($line, $end);
      $self->{db}{$name}{value} = $value;
  $self->{db}{$name}{value} = $value;
  $self->{file} = $file;
        $self->mark($name);
    $self->mark($name);
  $self->{text} = $text;
  $self->{timestamp} = $stat[9];
  $self->{tr} = 1;
  $self->{tr} = !$preserve;
  $self->unmark_all();
   #  SELinux policy for it.
# Send an arbitrary RPC command to the VMX
  send_rpc_failed_msgs();
# send_rpc_failed_msgs
  send_rpc('toolinstall.end 0');
           send_rpc('toolinstall.end 1');
  send_rpc("toolinstall.installerActive 0");
  # Send terminating RPC messages
	 # Send the end RPC along with the results of the configurator run.
   # send the end RPC, specify a signal handler in case the user Ctrl-C's
	 #       send the toolinstall.end RPC message, otherwise it won't
    $serial++;
  $serial = 0;
		       'serialnum', '');
  # server, this is XFree86 if XFree 4 is used, our driver if XFree 3 is used.
                                    . '/' . $service) . ' >/dev/null 2>&1')) {
                     . $service . ' reset')) {
  # service touches the installed version of tomcat-users.xml, the file needs
# session managers may not support XDG/KDE-style autostart via .desktop files.
#    sessions.
   @sessionsDirs = ('/usr/share/xsessions',
            # Set and later check to see if the user set $admin to something else.
  # Set Autoflush.  Setting this avoids duplicate output and seems
# Set file contents
      set_file_contents($file, $timeout);
    # set it to $timeout
     set_manifest_component('checkvm', 'TRUE');
     set_manifest_component('hgfsclient', 'TRUE');
     set_manifest_component('hgfsmounter', 'TRUE');
# Set manifest component info
    set_manifest_component("$mod", 'TRUE');
    set_manifest_component('svga33', 'TRUE');
        set_manifest_component('svga42', 'TRUE');
          set_manifest_component('svga43_64', 'TRUE');
          set_manifest_component('svga43', 'TRUE');
        set_manifest_component('svga4', 'TRUE');
          set_manifest_component('svga67_64', 'TRUE');
          set_manifest_component('svga67', 'TRUE');
          set_manifest_component('svga68_64', 'TRUE');
          set_manifest_component('svga68', 'TRUE');
             set_manifest_component('svga70_64', 'TRUE');
             set_manifest_component('svga70', 'TRUE');
	     set_manifest_component('svga71_64', 'TRUE');
	     set_manifest_component('svga71', 'TRUE');
	       set_manifest_component('svga73_64', 'TRUE');
	       set_manifest_component('svga73_99_64', 'TRUE');
	       set_manifest_component('svga73_99', 'TRUE');
	       set_manifest_component('svga73', 'TRUE');
	   set_manifest_component($svgaManifestTxt, 'TRUE');
     set_manifest_component('toolbox-cmd', 'TRUE');
     set_manifest_component('toolboxgtk', 'TRUE');
     set_manifest_component('upgrader', 'TRUE');
    set_manifest_component('vmguestlibjava', 'TRUE');
    set_manifest_component('vmguestlib', 'TRUE');
        set_manifest_component('vmmouse42', 'TRUE');
            set_manifest_component('vmmouse43_64', 'TRUE');
            set_manifest_component('vmmouse43', 'TRUE');
          set_manifest_component('vmmouse67_64', 'TRUE');
          set_manifest_component('vmmouse67', 'TRUE');
          set_manifest_component('vmmouse68_64', 'TRUE');
          set_manifest_component('vmmouse68', 'TRUE');
             set_manifest_component('vmmouse70_64', 'TRUE');
             set_manifest_component('vmmouse70', 'TRUE');
	     set_manifest_component('vmmouse71_64', 'TRUE');
	     set_manifest_component('vmmouse71', 'TRUE');
	       set_manifest_component('vmmouse73_64', 'TRUE');
	       set_manifest_component('vmmouse73_99_64', 'TRUE');
	       set_manifest_component('vmmouse73_99', 'TRUE');
	       set_manifest_component('vmmouse73', 'TRUE');
	   set_manifest_component($vmmouseManifestTxt, 'TRUE');
     set_manifest_component('vmtoolsd', 'TRUE');
     set_manifest_component('vmwareuser', 'TRUE');
  # Set mode according to what was previously chosen in case of an upgrade
   @setOption = ();
# Sets links on configuration files we backed up during configuration.
# Sets links on configuration files we changed during configuration.
# Sets the install destination for a module based on whether or not
# Set the name of the main /etc/vmware* directory.
                 . 'setting new permissions on all files found in the "'
                                . 'settings?', 'yesno', 'yes');
# Set to CUPS in the guest to use thinprint
    set_uid_X_server($x_server_file);
  set_uid_X_server($x_server_file);
      setup32or64Symlinks();
      setupSolarisSymlinks();
          setupSymlinks();
# Setup the hostd configuration files
# Set up the location of external helpers
   # Set up vmware to start/stop at run levels 2, 3 and 5
   # Set up vmware to stop at run levels 0 and 6
    s/"//g;
                   $shadowFbDrv, \%p, 1);
              . 'shared folder feature. The rest of the software provided by '
                       . shell_string('.*') . ' '
      . shell_string('^[0-9a-fA-F]\{8\} __global_cli_R__ver___global_cli')
        . shell_string('^[0-9a-fA-F]\{8\} printk') . ' /proc/ksyms 2> /dev/null'));
        . shell_string('^[0-9a-fA-F]\{8\} Using_Versions') . ' /proc/ksyms 2> /dev/null')
	  . shell_string('^[0-9a-fA-F]\{8\} \w printk') . ' /proc/kallsyms 2> /dev/null'));
                               . shell_string($answer . '/linux/autoconf.h'));
             . shell_string($build_dir . '/' . $name . '-only')
                            . shell_string('caldera') . ' '
             . shell_string('CC=' . $gHelper{'gcc'}) . ' '
         . shell_string("$certCnf") . ' -days 5000 > /dev/null 2>&1');
                   . shell_string("$certLoc") . "/$certPrefix.crt " .
         . shell_string("$certLoc") . '/' . shell_string("$certPrefix")
         . shell_string("$certPrefix") . '.crt -config '
          shell_string($command) . ' 2> /dev/null |');
    . shell_string($conf)) eq '') {
                     . shell_string(db_get_answer('INITSCRIPTSDIR')
                            . shell_string('debian') . ' '
      . shell_string('#define __KERNEL__' . "\n" . '#include <asm/page.h>'
                                       . shell_string('/etc/rc.conf')) =~ /yes/i) {
                       . shell_string('^\(flags\|features\).* tsc')
			   shell_string($gGccPath),
      shell_string($gHelper{'echo'}) . ' '
      . shell_string($gHelper{'gcc'}) . ' ' . shell_string('-I' . $answer)
                     . shell_string($gHelper{'grep'})
                 . shell_string($gHelper{'grep'})
        shell_string($gHelper{'grep'}) . ' '
    shell_string($gHelper{'grep'}) . ' '
	  shell_string($gHelper{'grep'}) . ' '
      . shell_string($gHelper{'grep'}) . ' ' . shell_string($pattern));
			   shell_string($gKernelHeaders),
             . shell_string('GREP=' . $gHelper{'grep'}) . ' '
             . shell_string('HEADER_DIR=' . db_get_answer('HEADER_DIR')) . ' '
      . ' ' . shell_string('-I' . $answer) . ' -E - | '
      . shell_string('#include <linux/autoconf.h>' . "\n" . $pattern
          . shell_string($instruction) . ' /proc/cpuinfo') eq '') {
                       . shell_string(int_to_quaddot(quaddot_to_int($subnet)
                     . shell_string(int_to_quaddot(quaddot_to_int($subnet)
             . shell_string('IS_GCC_3='
                            . shell_string($issue)) eq '')) {
      shell_string($libsbindir . '/vmware-modconfig-console-wrapper');
             . shell_string($major) . ' ' . shell_string($minor))) {
		       . shell_string($modpath)
                                       . shell_string('moused_enable') . ' '
             . ' ' . shell_string($name) . ' ' . shell_string($type) . ' '
      . shell_string($pattern));
                            . shell_string('red *hat') . ' '
                            . shell_string('suse\|s\.u\.s\.e') . ' '
    . shell_string('^[ ' . "\t" . ']*subnet[ ' . "\t" . ']*' . $network) . ' '
      . shell_string($uts_headers . $pattern
                 shell_string('VM_UNAME=' . $gOption{'kernel_version'}) . ' ':'')
# shipped module and will use whatever module is newer.
        $shippedModVer = "$1";
               . " shorter than 256 characters.\n");
  $show_all = 0 if (!defined($show_all));
          show_EULA();
        show_EULA();
      show_net_config(0, 0, 1);
      show_net_config(0, 1, 0);
    show_net_config(1, 0, 0);
  show_net_config(1, 0, 0);
    show_net_config(1, 1, 1);
  show_PROMOCODE();
# Side effects:
      $SIG{ALRM} = sub { die "alarm\n" };
# SIGINT handler (only gets used in tools configurations)
       $SIG{INT} = \&sigint_handler;
       $SIG{QUIT} = \&sigint_handler;
		       . $silencer);
	$silencer = ' >/dev/null 2>&1';
  # Similarly, Release 1.4.0 came out as part of Xorg 7.3.
# Similar to block_remove().  Find the delimited text, bracketed by $begin and $end,
# Simple product name -> service script map accessor.  (See
#  simply lib or bin, there is lib32-6 or bin64-53, where -6 refers to FreeBSD
      # Simulate the enter key
   # Since PATH is overridden in main(), test for other common locations
# Since upstreaming, our module names are not gauranteed to stay the same.
   # Since we are only supporting FreeBSD >= 6.3, we only need the one pango
                # Since we can't know for sure that all InputDevice sections have
  # Since we're not on Solaris, whose tar doesn't support '.gz' and
  $single_quoted =~ s/'/'"'"'/g;
  # skip past this part.
    # skipped.
              $sleepingAgentDelay, db_get_answer('BINDIR'), 'vmware-user');
  # SLES 10/11: 2.6.16.46-0.12-default => 2.6.16.46-default
                # SLES9-SP4 uses "Keyboard" instead "keyboard" as Driver name.
                   . $S_level . $service);
      # SMP does not match
        $sn = '';
    $sn = '';
      $sn = get_answer("Please enter your 20-character serial number.\n\n"
                . 'software provided by ' . vmware_product_name()
  # So its not in the list.  If its configured, then we installed it.  Otherwise
      solaris_10_or_greater() eq 'yes' &&
      solaris_10_or_greater() eq 'yes') {
		&& solaris_9_or_greater())
# Solaris can boot into either its 32-bit or 64-bit kernel and invokes the
                # Solaris guests should use the PS/2 device /dev/kdmouse
      /solaris/i && do {
      # Solaris is an early adopter and is using .so drivers on 6.8.x
	# Solaris won't let us unload by module name, so we have to find the ID from modinfo
      # Solaris' Xorg installation is in /usr/X11 (not /usr/X11R6)
   # Some builds won't have the eclipse plugin packaged (e.g player). Only install it
                    . 'some of them.' . "\n\n", 0);
#  some of whose modes are unsupported by the driver.
      # Some OSes are configured to ignore broadcast ping,
          . 'something like:' . "\n\n" . 'subnet ' . $network . ' netmask '
                      /^\s*Option\s+\"AutoAddDevices\"\s+\"(.+)\"/i &&
        $s or $s = system("semodule -i $ppFile >/dev/null 2>&1");
        $s or $s = system("semodule_package -o $ppFile -m $modFile >/dev/null 2>&1");
# Sort available resolutions for the VMware virtual monitor in increasing order
  # So some distros forget to create the ServerLayout section of the
                    . 'so that you have the option of switching to it in the '
    # so the "/dev/vmmon" block device file is magically created/removed when the
              # so, there is not much we can do.  Instead just warn the user.
    # source directory
# So we cannot trust it to determine the location of other binaries.
  # so we know that asm and net directories must be here for successful build,
      # so we ping <subnet>.1 .
  # so we should update this.
      # Special case: if we are changing a bridge network to another
               . 'specified and your running kernel.  You may want to rebuild '
  # specifiy the BusId in the XF86Config-4 file in that case
                        . 'specify a default IP route.  Consequently, the '
                # specify a device (the driver probes for one and finds it.)
                          . 'specify a network number by hand.' . "\n\n", 0);
                 . 'specify a network number that you want.' . "\n\n" . 'The '
# Split this and take the 3rd substring (at index 2) as the
      sprintf("{ sleep %d && %s/%s &>/dev/null ; } &",
        $S_priority = '19';
        $S_priority = '90';
  # Squash out //'s in paths
  # Squash out ..'s in paths
  # Squash out .'s in paths
  srand(time);
          $src = "guest";
          $src = "host";
      $src = $src_base . $index;
            . 'standard communication between the guest and the host.  '
                                        'standard http connections to use',
                # standard names.
#    startup.
StartupNotify=true
          && (($statbuf[6] & 0xFF) == $minor)
          && (($statbuf[6] >> 8) == $major)
    @statbuf = stat($dst_dir);
    @statbuf = stat($file);
   @statbuf = stat($file);
      @statbuf = stat($name);
   @statbuf = stat($plain_file);
  @statbuf = stat($src);
                 "   State Idle\n" .
            $state = 'inside';
stateOrProvinceName     = California
            $state = 'outside';
   $state = 'outside';
#  status is 0 on failure.
#  status is 1 on success (subnet and netmask are set),
        ($status, $subnet, $netmask) = subnet_probe($vHubNr, $vHostIf,
      $status = system(shell_string(db_get_answer('BINDIR') . '/vmware-ping')
    $status = system(shell_string(db_get_answer('BINDIR') . '/vmware-ping')
                  ' status vmcount') >> 8 == 2 &&
                    . ' stop')) {
        $stopCode = $?;
      $stopCode = $?;
   # Stop VMware's services
  # Stop VMware's services
      $string .= '--' . $flag;
      $string .= $flag . '=' . db_get_answer($flag) . ' ';
        $string .=  '=' . $gOption{$flag} . ' ';
string_mask = nombstr
# string. See if with the appended value, the blacklist string
# Strings for Block Appends.
  $string =~ s/^\s*//;
  $string =~ s/\s*$//;
    $style = '';
    $style = "dracut";
        $style = 'redhat';
    $sub = 0;
    $sub = $3 eq '' ? 0 : $3;
sub add_ethif_info {
sub add_to_list_variable {
sub append_output {
sub assemble_command_line {
sub backup_file {
sub backup_file_to_restore {
sub block_append {
sub block_insert {
sub block_match {
sub block_remove {
sub block_restore {
sub build_module {
sub build_vmblock {
sub build_vmnet {
sub can_build_module {
sub CEILDIV {
sub certificateExists {
sub change_scsi_timeout {
sub check_answer {
sub check_answer_anyethif {
sub check_answer_availethif {
sub check_answer_binpath {
sub check_answer_dirpath {
sub check_answer_dirpath_existing {
sub check_answer_editorwizardhelp {
sub check_answer_headerdir {
sub check_answer_inetport {
sub check_answer_ip {
sub check_answer_netname {
sub check_answer_nettype {
sub check_answer_number {
sub check_answer_serialnum {
sub check_answer_timeout {
sub check_answer_usergrp {
sub check_answer_vmnet {
sub check_answer_yesno {
sub check_answer_yesnohelp {
sub check_gcc_version {
sub check_if_port_active {
sub check_if_port_free {
sub check_if_vmware_module {
sub check_is_running {
sub check_license {
sub check_link {
sub check_mountpoint_for_tools {
sub check_port_not_registered {
sub checkRPMForPackages {
sub check_wgs_memory {
sub clear() {
sub compile_module_linux {
sub compute_broadcast {
sub compute_subnet {
sub configure_authd {
sub configure_autostart {
sub configure_autostart_legacy {
sub configure_autostart_legacy_gdm {
sub configure_autostart_legacy_suse {
sub configure_autostart_legacy_xdm {
sub configure_autostart_legacy_xsessiond($$) {
sub configure_autostart_xdg {
sub configure_bridged_net {
sub configure_compiz_wrapper_whitelist {
sub configureDesktopFiles {
sub configure_dev {
sub configure_dev_flags {
sub configureDeviceKitVmmouse {
sub configure_dracut_dot_conf {
sub configure_eclipse_plugin {
sub configure_fonts_dot_conf {
sub configure_gdk_pixbuf {
sub configure_hostd {
sub configure_hostonly_net {
sub configure_kernel_initrd {
sub configure_ld_dot_so {
sub configure_modprobe_dot_conf {
sub configure_module {
sub configure_module_bsd {
sub configure_module_linux {
sub configure_modules_dot_conf {
sub configure_module_solaris {
sub configure_mon {
sub configure_nat_net {
sub configure_net {
sub configure_net_editor() {
sub configure_net_wizard() {
sub configure_pango {
sub configure_pci_dot_handmap {
sub configure_pp {
sub configure_pvscsi {
sub configure_security() {
sub configure_server {
sub configure_thinprint {
sub configure_tools {
sub configure_udev_scsi {
sub configure_updatedb_dot_conf {
sub configure_vmci {
sub configure_vmhgfs {
sub configure_vmmemctl {
sub configure_vmsync {
sub configure_vmware_gfx_driver {
sub configure_vmwgfx {
sub configure_vmxnet3 {
sub configure_vsock {
sub configure_webAccess {
sub configure_wgs_pam_d {
sub configure_X {
sub config_usage {
sub count_all_networks {
sub count_bridged_networks {
sub count_hostonly_networks {
sub count_nat_networks {
sub count_networks {
sub count_samba_networks {
sub create {
sub createDesktopFile {
sub create_dir {
sub createMimePackageFile {
sub createSSLCertificates {
sub db_add_answer {
sub db_add_dir {
sub db_add_file {
sub db_append {
sub db_dir_in {
sub db_file_in {
sub db_file_ts {
sub db_get_answer {
sub db_get_answer_if_exists {
sub db_get_files_to_restore {
sub db_load {
sub db_remove_answer {
sub db_remove_dir {
sub db_remove_file {
sub db_remove_ts {
sub db_save {
sub db_set_userfile {
sub db_update_ts {
sub db_userfile_in {
sub device_list {
sub dhcpd_consultant {
sub direct_command {
sub dir_remove_trailing_slashes {
sub distribution_info {
sub DoesBinaryExist_Prompt {
sub DoesOSMatchProduct {
sub dot_version_compare {
sub dump_all() {
sub eject_tools_install_cd_if_mounted {
sub error {
sub file_changed_db_ts {
sub file_check_exist {
sub file_name_exist {
sub find_first_exist {
sub findreqlib {
sub find_suitable_XConfigFile {
sub fix_mouse_file {
sub fix_vmlist_permissions {
sub fix_X_conf {
sub fix_X_link {
sub get() {
sub get_answer {
sub get_best_resolution {
sub get_bool() {
sub get_cc {
sub getDesktopConsoleName {
sub getDesktopFileName {
sub get_devices_list {
sub getFreeBSDBinSuffix {
sub getFreeBSDLibSuffix {
sub getFreeBSDSbinSuffix {
sub getFreeBSDSuffix {
sub getFreeBSDVersion {
sub get_free_network {
sub get_gcc_version {
sub get_hostonly_subnets {
sub get_httpd_status() {
sub getIconFileName {
sub get_module_compatible_version {
sub get_module_install_dest {
sub get_module_name {
sub get_module_status {
sub get_nat_subnets {
sub get_network_name_answer {
sub get_persistent_answer {
sub get_port_for_authd {
sub get_proc_tcp_entries {
sub get_samba_net {
sub get_screen_mode {
sub get_services_ports {
sub get_suitable_modules {
sub get_suitable_resolutions {
sub get_supported_modes {
sub get_unmarked() {
sub get_used_subnets {
sub getValidGccPath {
sub getValidKernelHeadersPath {
sub getXorgVersionAll {
sub identify_suse_variant {
sub initialize_external_helpers {
sub initialize_globals {
sub init_version_manifest {
sub install_dir {
sub installed_vmware_version {
sub install_file {
sub install_hardlink {
sub install_link {
sub install_permission {
sub install_solaris_symlink {
sub install_symlink {
sub install_template_file {
sub installUdevRule {
sub install_vix {
sub install_x_module {
sub install_x_module_no_checks {
sub internal_basename {
sub internal_dirname {
sub internal_ls {
sub internal_sed {
sub internal_which {
sub int_to_quaddot {
sub is64BitElf {
sub is64BitKernel {
sub is64BitUserLand {
sub isAthlonKernel {
sub is_bridged_network {
sub isDesktopProduct {
sub is_dev_dynamic {
sub isDeviceKitUsedForXorg {
sub is_good_network {
sub is_hostonly_network {
sub isKernelBlacklisted {
sub is_nat_network {
sub is_network {
sub is_root {
sub is_samba_running {
sub is_selinux_enabled {
sub isServerProduct {
sub isToolsProduct {
sub kernel_version_integer {
sub kmod_load_by_name {
sub kmod_load_by_path {
sub kmod_unload {
                                                         $subLevel);
                                   . $subLevel;
    ($subLevel) = split(/[^0-9]/, $subLevel);
sub link_runlevel {
sub link_services {
sub link_services_solaris {
sub list($) {
sub load_all_ethif_info() {
sub load_ethif_info() {
sub locate_upstart_jobinfo() {
sub main {
sub make_all_net() {
sub make_bridged_net {
sub make_dhcpd_patch {
sub make_hostonly_net {
sub make_nat_net {
sub make_nat_patch {
sub make_tmp_dir {
sub mark($) {
sub memory_get_total_ram {
sub migrate_network_files {
sub mod_pre_install_check {
sub module_error {
sub module_post_configure {
sub module_ramdisk_check {
         $subnet = compute_subnet($hostaddr, $netmask);
       $subnet = compute_subnet($hostaddr, $netmask);
     $subnet = compute_subnet($hostaddr, $netmask);
	$subnet = compute_subnet($hostaddr, $netmask);
    $subnet = db_get_answer_if_exists('VNET_' . $vHubNr . '_HOSTONLY_SUBNET');
    $subnet = $gDBAnswer{'VNET_' . $vHubNr . '_HOSTONLY_SUBNET'};
                     . 'subnet ' . $hostonly_subnet . '.'
                                . $subnet . '/' . $netmask . '.  Do you want '
  @subnets = ();
    $subnets[2 * $i + 1] = '172.16.'  . $i . '.0';
    $subnets[2 * $i    ] = '192.168.' . $i . '.0';
      $subnets[$i] = '';
    $subnets[$r] = '';
                        . 'subnet ' . $subnet . '/' . $netmask . ' appears to '
    $subnet = $subnets[$r];
                        . 'subnet that we tried we received a response to our '
sub new() {
sub overwrite($$) {
sub parse($) {
sub parse_line($) {
sub path_compare {
sub populate_vmware_modules {
sub prelink_fix {
sub prelink_restore {
sub preserve_case($) {
sub pretty_overwrite {
sub pretty_print($) {
sub print_section {
sub print_unmarked() {
sub print_value {
sub print_values {
sub pulseDisableTimerBasedAudio {
sub pulseNeedsTimerBasedAudioDisabled {
sub quaddot_to_int {
sub query {
sub query_user_for_proxy_ports {
sub readin($) {
sub reinstall_module {
sub remove($) {
sub remove_all_networks {
sub remove_bridged_network {
sub remove_hostonly_network {
sub remove_nat_network {
sub remove_net {
sub removeRPMPackages {
sub remove_tmp_dir {
sub remove_vmci_build_dir {
sub remove_whitespaces {
sub restart_hal {
sub restorecon {
sub safe_chmod {
sub safe_chown {
sub safe_mkdir {
sub searchForUdevRule {
    Subsection "Display"
sub send_rpc {
sub send_rpc_failed_msgs {
sub set($$) {
sub set_file_contents {
sub set_manifest_component {
sub set_uid_X_server {
sub setup32or64Symlinks {
sub setupSolarisSymlinks {
sub setupSymlinks {
sub shell_string {
sub show_EULA {
sub show_net_config {
sub show_PROMOCODE {
sub sigint_handler {
sub solaris_10_or_greater {
sub solaris_9_or_greater {
sub solaris_driver_configured {
sub solaris_module_id {
sub solaris_os_version {
sub sort_resolutions {
sub spacechk_answer {
sub split_X_version {
                                           substr($input, $i, 1), 0);
sub subnet_probe {
sub switch_to_guest {
sub switch_to_host {
sub switch_tools_config {
sub symlink_icudt38l {
sub symlink_if_needed {
sub system_info {
sub timestamp() {
sub try_module {
sub try_X_conf {
sub unconfigure_autostart_legacy {
sub unconfigure_samba {
sub uninstall_dir {
sub uninstall_file {
sub uninstall_prefix {
sub unmake_samba_net {
sub unmark_all() {
sub update($) {
sub update_file {
sub verify_bsd_libcompat {
sub vmware_binary {
sub vmware_check_vm_app_name {
sub vmware_longname {
sub vmware_product {
sub vmware_product_name {
sub vmware_service_basename {
sub vmware_service_issue_command {
sub vmware_service_path {
sub vmware_tools_app_name {
sub vmware_tools_cmd_app_name {
sub vmware_version {
sub vmware_vmx_app_name {
    sub VT_OPENQRY () { 0x5600; }
sub was_samba_answered {
sub wrap {
sub wrap_one_char {
sub write_datastore_config {
sub write_dhcpd_config {
sub write_manifest_file {
sub write_module_config {
sub write_nat_config {
sub write_netmap_conf {
sub write_new_tools_config() {
sub writeout($) {
sub write_tools_config {
sub write_vmware_config {
sub xconfig_file_abs_path {
sub xfree_3 {
sub xfree_4 {
sub xorg {
sub xorg_find_modules_dir {
sub xserver3 {
sub xserver4 {
sub xserver_bin {
sub xserver_xorg {
    # successive invocations of this script
      $suffix = '';
      $suffix = '-5';
      $suffix = '-53';
      $suffix = '-63';
      $suffix = getFreeBSDSuffix();
                  $suffix = $testSuffix;
                                  $suggested_choice);
      $suggested_choice = $i;
    # suppoed to be binary compatible (hopefully).
   # supported by the driver, whereas XF86Config is a more general list.
   #        supported XDG path, or
#  Supporting the Gtk2 version of toolbox, we need to make sure pango.modules
              . 'support the ' . $instruction . ' instruction. '
      # SuSE-style.
    switch_to_guest();
# switch_to_guest
    switch_to_host();
# switch_to_host
         switch_tools_config();
# switch_tools_config
      symlink $file . db_get_answer($cSwitchedToHost), $file;
    symlink $filesBackedUp{$file}, $file;
    symlink_icudt38l();
        symlink_if_needed('/hgfs', '/mnt/hgfs');
    symlink_if_needed($x_server_file, $x_server_link);
  symlink_if_needed($x_server_file, $x_server_link_bin);
    symlink_if_needed($x_server_link, $x_server_link_bin);
#    symlink is installed which will cause XDG autostart aware session managers
   #  - Symlink xsession-gdm to /etc/X11/xinit/xinitrc.d/vmware-user.sh.
      # syntax error on line $num
	  $syscmd = $binary;
      $syscmd = $binary . " -f " . $content . " " . $image_file . " "
    $syscmd = $binary . ' -u -k ' . `uname -r`;
    $syscmd = join(' ', $binary, '--force', '--add-drivers', "\"$content\"", '>/dev/null 2>&1');
	  $syscmd = join(' ', $binary, $kernelList, $initrdList);
  $syscmd = $restorecmd = $content = $binary = $style = '';
    $syscmd = undef;
      $sys_font_path = $tmp_dir . '/system_fonts.conf';
		 "system by another installer or package " .
		 "system by another package but has been marked for " .
     system("chgrp --reference=/dev/ttyS0 $_"); # match serial port
    system("chmod --reference=$cupsConf $cupsPrinters");
    system("chown --reference=$cupsConf $cupsPrinters");
         system(db_get_answer('INITSCRIPTSDIR') .  '/udev restart > /dev/null 2>&1');
    system($gHelper{'more'} . ' ' . shell_string($promocode));
	system($halScript . ' restart');
   system_info();
   system(internal_which('touch') . ' -m ' . shell_string($desticondir) . '>/dev/null 2>&1');
   system(internal_which('touch') . ' -m ' . shell_string($srcicondir) . '>/dev/null 2>&1');
      system(join(' ', $gHelper{'cp'}, $tmpFile, $cfgFile));
         system('ldconfig &> /dev/null');
      system('ldconfig &> /dev/null');
  system($ld_lib_string . " " . shell_string("$openssl_exe") . ' req -new -x509 -keyout '
          !(system($ld_lib_string . " " . shell_string("$openssl_exe") . ' x509 -in '
        system('ls -AlR ' . shell_string($dir));
      system("$modconfig --pbm-available $name $appLoaderArgs") == 0) {
	 system("$modconfig --validate-kernel-headers \"$gKernelHeaders\" " .
        $systemModVer = "$1";
     system("/sbin/restorecon " . $file);
     system("$servicePath hal restart");
    system(shell_string(db_get_answer('INITSCRIPTSDIR') . '/vmware') . ' start');
        system(shell_string($gHelper{'add_drv'}) . ' -n -m \'* 0600 root sys\''
      system(shell_string($gHelper{'add_drv'}) . ' -n -m \'* 0600 root sys\''
          system(shell_string($gHelper{'add_drv'}) . ' vmci >/dev/null 2>&1');
        system(shell_string($gHelper{'add_drv'}) . ' vmmemctl >/dev/null 2>&1');
        system(shell_string($gHelper{'cp'}). ' ' . $initmodfile . $cBackupExtension . ' ' .
       # system(shell_string($gHelper{'cp'}). ' ' . $initmodfile . $cBackupExtension . ' ' .
  system(shell_string($gHelper{'cp'}) . " " . $name . " " . $backupName);
        system(shell_string($gHelper{'cp'}) . ' ' . $src . ' ' . $trgt);
   system(shell_string($gHelper{'cp'}) . " " . $tmp_file . " " . $font_path);
      system(shell_string($gHelper{'cp'}) . ' /usr/lib/isaexec ' . $isaexec);
          system(shell_string($gHelper{'cp'}) . ' ' . $vmciSymversFile . ' ' . $vsockBuilddir);
    system(shell_string($gHelper{'depmod'}) . ' -a');
  system(shell_string($gHelper{'depmod'}) . ' -a');
  system(shell_string($gHelper{'killall'}) . ' -TERM vmware-hostd '
      system(shell_string($gHelper{'mv'}) . ' ' . $tmp_file . ' ' . $auth_file);
    system(shell_string($gHelper{'mv'}) . ' ' . $tmp_file . ' ' . $src_file);
      system(shell_string($gHelper{'rem_drv'}) . ' pcn >/dev/null 2>&1');
      system(shell_string($gHelper{'update_drv'}) . ' -d -i \'"pci1022,2000"\' '
        (system(shell_string($GPMBinary) . ' -t help | '
        (system(shell_string($GPMBinary) . ' -t help | ' . $gHelper{'grep'}
   system(shell_string(internal_which('gtk-update-icon-cache')) . ' >/dev/null 2>&1');
   system(shell_string(internal_which('gtk-update-icon-cache')) . " -t $srcicondir >/dev/null 2>&1");
         # systems (Ubuntu starts X in rcS). By using /etc/modules, vmwgfx is loaded
    system("touch $cupsPrinters");
# Table mapping vmware_product() strings to applicable services script or
   # tail +2 skips the header line (why is it not +1?)
               . 'take effect.' . "\n\n", 0);
# Takes a hash reference as a parameter.  Fills hash with the following:
  # '.tar.gz' and not worry about the '.tar' case.
		    'tar', 'modinfo');
                 . 'Task Force (IETF) in RFC 1918 (http://www.isi.edu/in-notes'
# Tell if the user is the super user
  # Tell the user what resolution was detected on their host system.
    # Tell vix install that it is in a nested install.  This flag will be passed
Terminal=false
      $terse = db_get_answer('TERSE');
# Test if specified file contains line matching regular expression
#    Tests for the existence of well-known paths used to support the XDG
    $text = $text . $_;
#  than sbin32, which exists normally for 5.0 and older systems, there needs
                "That application did not run successfully.  " .
# that aren't already filled by earlier calls to get_tcp_listeners()
     # that chkconfig cannot be found.  Warn the user..
  # that configuration until then.
            # that filesystems of type 'vmhgfs' are excluded from its crawling.
     # that insserv cannot be found.  Warn the user...
    # that of the running kernel.  If the properties file specified
  # that PAGE_OFFSET for running kernel matches one specified in kernel
  # That's my story and I'm sticking to it  - DavidE
# that they appear to be a valid certificate).
# that we specify will appear in the system library path
  # The 1.3.0 release of the X-server had a little goof where it would say
       # The 7.0 drivers work on 6.9.x as well (see bug 92501)
  # The -a is important because it lists all interfaces (not only those
            # the appropriate output.
                 . 'The automatic selection process works by testing a series '
#  '': the binary has not been found
#  the binary name if it has been found
# the bit-itude of our platform.  If we're running on Solaris we don't have
# the block at the first regexp match.
# The caller is responsible for determining that we're running on some
   # the check here anymore.
    # The check is also NOT in at the moment, as the FreeBSD
                 . "  The component directory should have the"
  # the current systems uts_release value.
    # The DB didn't help.  But no matter, we can
      # The default, install the X free 4 driver which works with
  # The default must make sure that the product will be correctly installed
         # The device is already correctly configured
	  . '.  The driver for the VMXNET 3 virtual network card is '
# the entire line.  Remove this, once we have better "block handling" of
      # The environment variable sometimes contains the pager name _followed by
       # the existing driver.
# The fifth is a boolean informing weather an extra section must be added
   # The file could be a link to another location.  Remove it
  # The file could be a symlink to another location.  Remove it
  # the file for restoring (if the backup already exists, backup_file_to_restore
      # the files we will use
# The first argument is a complete path to a file which will be read and
# The first argument is a complete path to a new xconfig file
   # The first list is all the adapters that we have.  The
      # the first versions of X.
    # The "flags" field became the "features" field in 2.4.0-test11-pre5
               ' the following command: "' . db_get_answer('BINDIR') .
	      "the following reason(s)...\n";
# The fourth is a boolean informing weather the Imwheel mouse is used
  # The ->get with default is how we are sure to only change if it isn't
                     . 'the header files associated with your running kernel?',
  # The host has a normal dhcpd setup
  # The initramfs rebuilding process happens in the
# The installer packages up both 32 and 64 bit userlevel binaries, leaving
   # the jslib directory name contains the build number of the wbc built into
              . "the kernel initrd image.\n";
# The kernel module loader does quite a good job when modules are versioned.
    # The last word doesn't fit in the end of the line. Break the line before
   The letters a, b, c, ...
      # The link might change, do not keep the timestamp.
# the list, making sure not to add duplicates. This is probably best explained with an
                 . 'the ' . $machine . '.  The first one that is unreachable '
# them all in LIBDIR. This function links the correct thing in BINDIR and
        # the message about installing the driver as it is already installed.
	  # The minor version of 5 was chosen to prevent regressions from appearing
    # The module does not exist
# the module is already installed on the system.
	       "The module $mod has been installed by a non-VMware package " .
      # Then copy the module to /kernel/drv/ and /kernel/drv/amd64
  # the network settings, but the necessary configuration files such as
                . "the new file for any new values that you may need to migrate to "
# the new vmxnet driver: /etc/hostname.vmxnet0, /etc/dhcp.vmxnet0.
	  # the next version of xorg-server and treat it as the next version.
    # the -n flag so the driver is not loaded.  Later, in our /etc/init.d
  # Then pick up any drivers we haven't got yet.
	 # Then pulseaudio's version is >= 0.9.19
  # Then start VMware's services
  # Then start VMware's services.
        # Then the module may not be there.  In Ubuntu 9.04, modules.dep
    # Then the module was installed by us and can be reinstalled by us.
      # Then the shipped module is newer than sytem module.
   The numbers 0, 1, 2, ...
  # Then use less accurate methods that should work even on old distributions,
      # then vmware-config.pl should try the install next time around. E.G.
     # Then we have gotten here, but gone past the chkconfig section, indicating
     # Then we have gotten here, but gone past the insserv section, indicating
       # Then we should only load modules that are not forbidden
       # Then we should skip all PBMs that require Athlon Kernels to run
  # The old installer allowed people to manually build modules without .o
    # The only slash is at the beginning
          . "the operation of the webAccess service.\n");
               # The option NoAutoAddDevices needs to be added.
  # The parport numbering scheme in 2.2.X is confusing:
      # The path does not exist
    # The path does not exist
	# The path is an existing directory
    # The path is not a directory
# the pcnet driver on a 32bit machine to the vmxnet driver, the files
		 "the $pkg_name package from the FreeBSD Ports Tree before " .
        # the port is really a 'maybe' in use.
      # The previous answer is valid.  Make it the default value
                 . 'the private network numbers specified by the Internet '
                . " the problem, run " . $cConfiguratorFileName . " again.\n";
  # the PRUNEFS definition, modify it slightly before copying it over.
                        . 'the range of private network numbers.  For each '
                        . 'the range of private network numbers.  You will '
            # There are several different kinds of inputdevice section, such as
  # therefore needs gunzip, we need only look for a file ending in
    # There is a previous answer in the database
    # there is no make, our users will know exactly why we can't compile our
      # There is no other '/' in the name
# There is no /usr/X11R6 directory for X window in some distribution like
       # there's no vmware-user yet either
            . 'The rest of the software provided by '
	      . 'The rest of the software provided by '
            . 'The rest of the software provided by ' . vmware_product_name()
#            the return value of RPM
# the same heading.
  # These commands are Linux-specific
# The second argument will be only read and should be current xconfig file
# The second argument will be only read and should be the system file present
# These DHCP options are needed for the hostonly network.
# These DHCP options are needed for the NAT network.
     . "These files have a .desktop file extension.",
   # the server package.  And it is not necessarily the same as the build
     # the symlink here any more.  But we still set the manifest_component here.
    # the system (this should be done regardless of whether the VM currently
    # the target architecture, and if the specified target architecture does
# The third argument is the version of XFree86
# the Tools depend on the "misc/compat6x" package.  (This package contains
      # the user declined the EULA but now wants VIX installed.
         # the user.  For more details see bug170327.
                  # The user specified AutoAddDevice something.
#    The vendor specific methods are preferred, so if either of those succeeds,
# The VMware Tools for FreeBSD 6 and beyond are shared.  For FreeBSD 7+ users,
  # The workaround is to add
  # the X config file does exist, there are two cases: 1) we created it from
         # the Xorg auto-conf logic.
# They are a lot of small utility programs to create temporary files in a
  # they are available.  Even if one of the pair is in use, treat the whole
              # they might not be in the standard locations
  # they're both specified and available or at least user approved.
  # They will be modified by the daemon, don't timestamp them
# This allows a switch of configuration depending if the system is
   # this call MUST come after setupSymlinks (if setupSymlinks is deemed necessary)
  # This case is often encountered on a SuSE system.
    # This comment fixes emacs's broken syntax highlighting"
  # This comment fixes emacs's broken syntax highlighting
  # This comment is a fix for emacs's broken syntax-highlighting code
	       "This configuration script will only rebuild modules that " .
# This defines module dependencies.  It is a temporary solution
			"this dependency, $modDep has been added to the " .
   # This doesn't matter if (a) file doesn't exist, (b) doesn't have a
# This does the checks in the following order
# this ensures that the all necessary RPC end messages are sent.
            . 'this feature.' . "\n"
	      . 'this feature.' . "\n"
              . 'this feature.' . "\n\n" . 'If you wish to have the shared folders '
                   . 'this feature?', 'XPRMNTL_VMSYNC',
        . 'this feature?', 'XPRMNTL_VMWGFX',
# This function is taken from the old tools installer.
# This function should never know about filenames. Only database
# This function takes a module name and translates it to the name of the
# This $gMaxNumber as well as the $gAnswerSize{'number'} has to be updated
#    this guest.
# This is a function in case a future product name contains language-specific
   #    (This is a hardcoded path in gdm sources.)
     # This is all handled in the tar installer auto-magically now so don't do
        # This is _already_ a shell string
# This is done for RHEL 3, 4, and 5, and for SLES 10 and 11.
# This is for module-init-tools (2.6 kernels)
# This is for module-init-tools (2.6 kernels) and hotplug
# (this is from openSuSE 11.3 m3):
#    This is intended only for guests which do not support XDG-style
      # This is not always the case as demonstrated by bug 18371.
    # this is safe.
    # this is the line that will need to be uncommented, as well as
   # This is the vmware-user launch command for pre-XDG autostart guests.  The
# This is used for a VMware dictionary-compatible configuration file.
    # This is what the 1 is for
# This list simply defined what modules need to be included
  # This may never succeed (if we are racing with a malicious process), but at
      # This means fontconfig was not installed/configured. In this case,
  # This message is wrong.  I have found no evidence for this.
        # This must come after write_vmware_config()
         # This only applies to linux currently.
    # this PBM is forbidden from running on AthlonKernels
            . '.  This product only runs on 2.0.0 and later kernels.' . "\n\n");
			   . 'This program is going to create it, including needed '
   # * This refers to any version of Tools that included the decoupled
#    This routine is heuristically inclined.  We'll install XDG style .desktop
# This routine looks for the libraries, and if they aren't found, informs the
#    This routine will make use of hooks provided by the following:
# This script is intended only as a last resort in order to launch the VMware
                "This script will now attempt to manually setup the " .
	       "this script without the --modules-only flag in order to " .
  # This search order is issued from the XF86Config man page.
      # This value lives in a config file that we would normally not touch directly
#     - This Xsession script sources /etc/X11/xinit/xinitrc.common for common
# through the dictionary functions.
      # Timed out
             . 'time)...' . "\n\n", 0);
   # timestamp anyway or (c) the timestamp is zero. Usually (b) and (c)
      @tmpArray = glob("$_/gnome.desktop");
      @tmpArray = glob("$_/kde*.desktop");
                   $tmpBlock . "\n" . $startCommand . "\n",
  $tmp = defined($ENV{'TMPDIR'}) ? $ENV{'TMPDIR'} : '/tmp';
   $tmpdir = make_tmp_dir($cTmpDirPrefix);
  $tmpdir = make_tmp_dir($cTmpDirPrefix);
                  . 'to a host-only network may only communicate directly '
		     $to_append, $cMarkerEnd) == 1) {
                                # to append custom directories to $gSavedPath or
      $to_append .= $line . "\n";
#  to be a specific sbin:  sbin32-5.  There is no 64bit set.
  # to be removed from the db, along with its timestamp, and re-added without
# to both GCC and their kernel headers.
                  . 'to communicate with other machines on the network to '
  # To continue, CUPS must be where we expect it on the guest.
      # to detect gcc/kernel headers on our own.
    # to /devices.  Here we are only concerned with installing the driver on
# to disable hotplug (see bug 291453).
   # TODO: Add comments to the other code which generates the filenames
               . 'to do one (or more) of the following:' . "\n"
### TODOs:
# to get our dependency information.
# to guess and can just ask isainfo(1) how many bits userland is directly.
                                . 'to keep these settings?', 'yesno', 'yes');
  # to keep X from crashing/hanging when we are testing the new config
      $tokens[0] = DoesBinaryExist_Prompt($tokens[0]);
      @tokens = split(' ', $ENV{'PAGER'});
#    to launch vmware-user as part of the user's session.
#    to launch vmware-user before its usual Xsession script.
    # to let the users know about it.
     #       to make the keys function happy.
  # tomcat-users.xml needs to be unconditionally removed.  Since the tomcat
                # To mitigate the risk of affecting behavior on other guests,
              # to new file directly. Otherwise, rename the keyboard identifier
               . $to . '".' . "\n\n");
  # toolbox otherwise. vmware-user is only available from release 5.3 or
  # tools configuration.
# Tools configurator
   # Tools configurator entry point
    'tools-for-freebsd' => 'freebsd'
   'tools-for-freebsd'  => 'vmware-tools.sh',
    'tools-for-linux'   => 'linux',
   'tools-for-linux'    => 'vmware-tools',
    'tools-for-solaris' => 'sunos',
   'tools-for-solaris'  => 'vmware-tools',
			  "Tools installer from the guest cdrom mounted " .
    # Tools lowest supported FreeBSD version is now 6.1.  Since the lowest
                          . 'to our ICMP ping packets from a ' . $machine
		 "to override.\n\n", 0);
               # to prevent any double expansion in the second regular expression
  # to reboot thier machine before this takes effect.
      # to right place.
	# to set right mouse protocol, driver, display, etc.
                 . 'To setup NAT networking you need to select a network '
                 . 'to specify the location of this program by hand?', 'yesno',
    # "total" amount of memory reported by Linux is the total physical memory
  # totally reasonable cases where this might happen.
               . 'to the /etc/rc.conf file and start the network with:'
                          . 'to this machine.  Because no private subnet '
   #  - Touch xdm-config to source our Xresources.
               . 'to use the vmxnet interface using DHCP.' . "\n\n", 0);
               . 'to verify your network settings accordingly.'
    # Trap the PIPE signal to avoid broken pipe errors on RHEL4 U4.
    $tries++;
  $tries = 0;
  # truly, it's a standalone X server release that came out after Xorg 7.2.
    # Try and just lay down the file.  If that is not an option, then
      # Try a to find a gcc-x.y binary
	 #       trying to cancel the tools install.
  try_module($name, $build_dir . '/' . $name . '.o', 0, 0);
        # try out both a full path and one relative to the modules
  # Try to analyze some usual suspects
	 # Try to detect if there is a vmware tools install cd in a drive,
# Try to determine the current screen size
# Try to eject the guest tools install cd so the user doesn't have to manually.
# Try to find a free port for authd use starting from default passed in
   # Try to install a hard link to /usr/lib/isaexec.  If that doesn't work, we
   # Try using insserv if it is available.
  # try_X_conf has problem with old X window, please refer to bug 78985
      !try_X_conf($xconfigTestFile, $xLogFile)) {
    # Turning off networking turns off hostonly.
  # Two examples of $gcc_version at this stage are:
Type=Application
    $type = 'b';
    $type = 'c';
   type cupsd_t;
    $typename = 'block';
    $typename = 'character';
   type var_lock_t;
		       . "Type XXXXX-XXXXX-XXXXX-XXXXX or 'Enter' to cancel: ",
   # typically isn't automatically added to users' search paths, so (for now)
	   # Ubuntu 10.04 (and eventually other distros) use device kit to load vmmouse
  # Ubuntu 8.04 has a very corner case issue where if you change the resolution
                # Ubuntu 8.04's mouse config section by default does not
     # Ubuntu needs SETGID only, all others need SETUID
                          . "Unable to create the .desktop menu entry file. "
                    . "Unable to create the MIME-Type package file.\n", 0);
        # Unable to find page_offset: accept anything
		 'unable to locate these libraries on your system.  Please install ' .
# unconfigure_autostart_legacy --
   unconfigure_autostart_legacy($cMarkerBegin, $cMarkerEnd);
     unconfigure_samba();
# Unconfigures Samba from the hostonly network
# Unconfigures the now obsolete Samba networking
      : undef;
    undef $/;
  undef %fileToRestore;
  undef %gDBAnswer;
  undef %gDBDir;
  undef %gDBFile;
  undef %gPortCache;
  undef $modName;
        undef $modPath;
#  undef on failure
        undef %p;
       undef %p;
      undef %p;
    undef %p;
   undef %p;
  undef %p;
         undef %patch;
       undef %patch;
      undef %patch;
    undef %patch;
   undef %patch;
  undef %patch;
    undef %prop;
  undef %resolutions;
  # unfortunately, insmod tries them first.  Let's move them.
      # Uninstall
   # Uninstall
# Uninstall a directory previously installed by us
# Uninstall a file previously installed by us
      uninstall_dir($dir);
    uninstall_file('/dev/' . $vHostIf);
  uninstall_file($dst);
      uninstall_file($file);
  uninstall_file($gConfFlag);
   uninstall_file($name);
  uninstall_file($name);
# Uninstall files and directories beginning with a given prefix
      uninstall_prefix($desktopdir);
   uninstall_prefix($mimePackagePath);
      uninstall_prefix($pixmapdir);
    uninstall_prefix($smb_dir);
  uninstall_prefix($vmnet_dir);
                                                 : 'uniprocessor') . '.'
                                             : 'uniprocessor') . ', while '
  unless(defined(&VT_OPENQRY)) {   # find available vt
   unless (($ldconfigOutput =~ /(^|\n)[ \t]*\d+:-lc\.6 => /) &&
    unless (system(sprintf("$modconfig --build-mod %s %s %s %s %s $appLoaderArgs",
      unlink($dotdScript);
  unlink($dst);
      unlink $file;
      unlink $gXVideoDriverFile;
      unlink $mouse_file;
   unlink($name);
      unlink $shadowFbDrv;
      unlink $xaaDrv;
    unlink $xconfig_backup or
    unlink $XF86tmp;
  unlink $XF86tmp;
    unlink $XF86tmp or
    unlink $xLogFile;
  unlink $xLogFile;
    unlink "$xLogFile.old" or
    unlink $xLogFile or
    unlink xserver3();
       # unloading the kernel module.
  # Unmake Samba just in case they have it from a previous product version
  unmake_samba_net($gDefHostOnly, 'vmnet' . $gDefHostOnly);
    unmake_samba_net($vHubNr, $vHostIf);
  unmake_samba_net($vHubNr, $vHostIf);
  # unmount the CD.
                 . 'unreachable from the ' . $machine . '.  We can '
                 . 'unreachable is used.  The subnet numbers are chosen from '
unstructuredName        = ($curTime),$certUniqIdent
        . 'unsup-linux-products" and "http://www.vmware.com/go/'
        . 'unsup-linux-tools".' . "\n\n");
      } until $childStatus == -1;
        } until (is_good_network($hostaddr, $netmask) eq 'yes');
    # until there actually is a device.  As such, we invoke add_drv(1M) with
# until we eventually move over to using the modules.xml file
                   . 'unused.' . "\n\n", 0);
                        . 'unused you will need to explicitly specify a '
         # Update any jslib directory.  The action will only happen for files
                                        $updatedb_conf_file . $cBackupExtension);
	       "update-initramfs and cannot remake the initrd file!\n\n", 0);
                  . "update it to reflect the new layout of the network."
# update LIBDIR/libconf/etc/fonts/fonts.conf with system font dirs.  Take
# Update or replace the kernel's boot ramfs so that certain vmware drivers
   # Update pango.modules so it knows where to find our modules.
	   # Update the Manifest.  Entries look something like svga74_64.
   # Update the MIME database
  # Update the port cache.  It has happened that services active when entries
   # Update the port value for the WebAccess.properties file.
  # upgrade leaves us in an inconsistent state.  The database will have
   # Upstart/initctl case.
# Upstart job name.
# Upstart jobs should be installed and any job file suffix.
Usage: $prog_name [OPTION]...
	 # Use 7.1 driver for 7.1 through 7.3.98
       # use 7.1 drivers for 7.2
	 # Use 7.3.99 driver for 7.3.99 only.
	 # Use 7.3 driver for most 7.3,
        # Use a default usual location
  # Use an artifical last '' separator to process the last word
          . 'use.  Beware that you should teach it how not to interfere with '
# Use Config module to update VMware host-wide configuration file
      # Used by the Linux wizard to determine if a hostonly network is
  # Used by the Linux wizard to determine if Samba is configured on the
      $use_desktop_utils = 0;
  @usedEthIf = map($gDBAnswer{$_}, @usedEthIf);
                                                    \@usedSubnets);
    $used_subnets{$i} = 1;
             . '". Use environment variable CC to override.' . "\n\n", 0);
# Use /proc/net/tcp as a list of ports in use and fillout the
                           'user');
# User Agent (vmware-user) in legacy $prettyOSName VMs whose shipped X11
# user and prompts him to determine whether or not we continue with installation.
  # userland support) we use binaries from the -53 directories.
      # User must specify 'EULA_AGREED=yes' on the command line
  # Users will expect the output to be "Solaris", despite what uname -s says
# Uses a regexp to find a particular spot in the file and adds
use strict;
                 . 'use the editor.' . "\n\n", 0);
         # Use the first '<dir>' as a marker for inserting the new '<dir>'
		 "Use the flag --clobber-kernel-modules=$mod " .
  # use them in our startup scripts.
# Use the Perl system configuration information to make a good guess about
                                . 'use the private subnet ' . $subnet . '/'
# Use this when the answer shouldn't be stored in the database
# Use this when you don't care about the validity of the answer
# Use this when you want an answer to be stored in the database
#    Use unconventional hooks to launch vmware-user at X session startup.
  # use utsrelease.h.  We include both just in case somebody moves UTS_RELEASE
                 . ' use. You may override this value now.' . "\n", 0);
                  # Using input hotplug isn't recommended inside a VM anyways.
  # Using /proc/bus/pci/devices instead of the output of lspci/lspcidrake
                                      . 'using the wizard or the editor? '
#!/usr/bin/perl
#!/usr/bin/perl -w
                  "/usr/bin/" ."tpvmlp");
                  "/usr/bin/" ."tpvmlpd");
			'/usr/bin/vmmouse_detect', \%p, 1);
   '/usr/lib/X11/fonts', '/usr/lib64/X11/fonts');
      "/usr/local/kde4/share/autostart" => undef,
      "/usr/local/share/autostart" => undef,
      "/usr/local/share/gnome/autostart" => undef,
                    '/usr/local/share/xsessions',
     "/usr/share/applications");
      "/usr/share/autostart" => undef,
      "/usr/share/gnome/autostart" => undef,
			      '/usr/share/hal/fdi/policy/20thirdparty/11-x11-vmmouse.fdi', \%p, 1);
                                      "/usr/share/pixmaps");
  # /usr/X11R6/bin/X !
                    /usr/X11R6/lib64/modules /usr/local/lib/xorg/modules
                    /usr/X11R6/lib/modules /usr/X11R6/lib/xorg/modules);
                    '/usr/X11R6/share/xsessions');
    # usually handles adding an entry to /etc/driver_aliases, loading the
        $uts_compatible eq get_module_compatible_version($prop{'UtsRelease'})) {
      $uts_headers .= "#include <linux/utsrelease.h>\n";
    $uts_headers = "#include <linux/version.h>\n";
                     . ' UTS_RELEASE') . ' | ' . shell_string($gHelper{'gcc'})
                                           . ' -v');
                                          . ' -v 2>&1 < /dev/null');
    $val = 0;
    $val = 1;
    $val = $default;
		    . 'valid serial number. To enter the serial number, run this '
      $val = $self->get_bool("$dev.present");
      $value = $6;
      $value = $7;
# value is greater, or 0 if they are equal.
#          - value is the backed up file.
  # values already chosen.  Count the ports as found if and only if
  # values to get.
                                       . "values?", 'USE_CURRENT_PORTS', 'yesno', 'yes');
# $var = 'drivers'
  # variables that tell us our modules names and locations so we can
#   variant       'sle' or 'opensuse', if defined
				    '/var/lib/vmware/Virtual Machines');
               $var .= " $string";
            $var .= "\"";                # terminating quote
            $var = "$var=\"$1";  # we add the terminating quote later
         $var = "$var=\"$content\"";
   '@@VCLI_PRODUCT@@'   => '@@VCLI_PRODUCT_PATH_NAME@@',
    VendorName      "VMware, Inc"
       verify_bsd_libcompat();
# Verify gcc version, finding a better match if needed.
                        $version,
                             ' -version 2>&1') =~
          "version 2.6.18 and newer.\n", 0);
#  version 6.0 and 53 to FreeBSD 5.3.
      #            Versioned modules can load into a non-versioned kernel.
   # version for now.
           '" version "' . $gSystem{'gcc_version'} . '". ';
              '" version "'. $gSystem{'gcc_version'} . '", or restart ' . $0 .
			      version instead of the running one, implies
# version of SuSE.
    ($version, $patchLevel, $subLevel) = split(/\./, $gSystem{'uts_release'});
#   version       version string (e.g., '10' or '11.0'), if defined
                           . 'version.  Would you still like to keep it '
                           . 'version?', 'yesno', $default);
	     $verStr = $1;
    VertRefresh     1-10000
        # VGA mode: better left untouched
        ViewPort    0 0
        ViewPort 0 0
				    . 'virtual machine files?', 'VMDIR', 'dirpath',
	      . 'virtual machine.' . "\n"
               . 'virtual machine.' . "\n\n");
                     . 'virtual machines to share the ' . $os . '\'s '
                              . 'virtual networks settings? (yes/no)',
                  . 'virtual network. There are primarily two types of '
   'vix-disklib'        => 'vmware-vix-disklib',
    # vix in a nested install and the '--default' option.
  # Vix needs to know what version of workstation or server
       $vmciLoaded = 1;
  # vmhgfs is supported only since 2.4.0 Linux kernels, Solaris 9, and FreeBSD 6.0
    # vmhgfs is supported on Solaris 11
   # VM inventory file modifiable during use.
    # "vmmon" module is loaded/unloaded (was bug 15571 and 72114)
  # vmmouse binary shipped with some distribution is buggy
					'VMMOUSE_FDI');
                # vmmouse has already loaded.  So provide a workaround void
                            'vmnet', '');
          . 'vmnet-dhcpd will deal with this subnet.' . "\n" . '}' . "\n\n"
                                    . 'vmnet' . $vHubNr . '?',
                         . 'vmnet' . $vHubNr . '? (bridged,hostonly,nat,none)',
                   . '(vmsync) is a new feature that creates backups '
                      'vmsync', 'pvscsi', 'vmxnet3',
      (vmware_binary() ne 'vmplayer')) {
                           $vmwareBinary . " -o %f",
                        $vmwareBinary, "Run a virtual machine",
      $vmwareBinary = $vmwareBinPath . '/vmplayer';
      $vmwareBinary = $vmwareBinPath . '/' . vmware_binary();
                           "vmware-console-uri-handler.desktop",
			       "vmware-guest-kmp-debug",
			       "vmware-guest-kmp-default",
			       "vmware-guest-kmp-desktop",
			       "vmware-guest-kmp-pae",
	      . 'VMware host software to efficiently reclaim memory from a '
			       "vmware-kmp-default",
			       "vmware-kmp-pae",
			       "vmware-kmp-trace",
                        'VMware Management Interface');
			       "vmware-netcfg.desktop", "Virtual Network Editor",
			       "vmware-netcfg.png", "$vmwareBinPath/vmware-netcfg",
                        "vmware-player.desktop", "VMware Player",
                        "vmware-player.png",
          vmware_product() eq 'tools-for-freebsd' ||
       vmware_product() eq 'tools-for-freebsd' ||
      vmware_product() eq 'tools-for-freebsd' ||
    vmware_product() eq 'tools-for-freebsd' ||
	vmware_product() eq 'tools-for-freebsd' ||
      (vmware_product() eq 'tools-for-linux') &&
      vmware_product() eq 'tools-for-linux' )) {
      vmware_product() eq 'tools-for-linux') {
			     || vmware_product() eq 'tools-for-linux')) {
          vmware_product() eq 'tools-for-solaris') {
       vmware_product() eq 'tools-for-solaris') {
      vmware_product() eq 'tools-for-solaris') {
    vmware_product() eq 'tools-for-solaris') {
	 || (   vmware_product() eq 'tools-for-solaris'
	vmware_product() eq 'tools-for-solaris') &&
       (vmware_product() eq 'tools-for-solaris') and
# vmware_product() has no such script.
                      . vmware_product_name()
                 . vmware_product_name()
            . vmware_product_name()
	      . vmware_product_name()
              vmware_product_name() . ' cannot work in such configuration. ' .
              .  vmware_product_name() . ' is designed to work independently of '
			      . vmware_product_name() . ' is suitable '
		 . vmware_product_name() . ' is suitable for your '
            vmware_product_name() . ' may crash if you\'ll continue. ' .
          . vmware_product_name() . ".\n\n");
             vmware_product_name() . ".\n\nPress enter to continue.", '', 0);
          . vmware_product_name() . '\'s DHCP server.  There are two ways to '
              . vmware_product_name() . ' will not run on this system.' . "\n\n"
      vmware_product() ne 'tools-for-freebsd') {
      vmware_product() ne 'tools-for-solaris') {
# vmware_service_basename
# vmware_service_issue_command
    vmware_service_issue_command($cServiceCommandSystem, 'start');
        vmware_service_issue_command($cServiceCommandSystem, 'stop');
      vmware_service_issue_command($cServiceCommandSystem, 'stop');
# vmware_service_path
                     . 'VMware shared folders feature.';
               '/vmware-toolbox".' . "\n\n", 0);
	     . vmware_tools_cmd_app_name() . '" from the command line or by '
                    . 'VMware Tools for Solaris only supports the Xorg server '
                "vmware-tools service.\n\n", 0);
                          '/vmware-tools.sh' : '/vmware-tools';
# vmware-tools-upgrader, vmware-hgfsclient, vmware-hgfsmounter, and the
                                # vmware-user.
   #   vmware-{user,guestd}.
    $vmware_version = $1;
  $vmware_version_string = direct_command(shell_string($gHelper{"vmware"})
    $vmware_version = "Workstation";
# VMware virtual monitor
                            'vmware_vmblock' => 'vmblock',
                            'vmware_vmhgfs' => 'vmhgfs',
                            'vmware_vmmemctl' => 'vmmemctl',
                            'vmware_vmsync' => 'vmsync',
                            'vmware_vsock' => 'vsock');
		      'vmwgfx');
			     'vmwgfx');
                'vmwgfx force_stealth=1' . "\n",
        . '(vmwgfx) is a new feature that provides OpenGL '
         # vmwgfx is loaded by /etc/modules. If it is loaded by the initrd, it
          $vmxnet++;
      $vmxnet = 0;
  # vmxnet3 is supported only since 2.6.0 Linux kernels
    # vmxnet loading.
		   'vmxnet_load="YES"' . "\n",
                       "vmxnet\n",
               . 'vmxnet network devices on this system.  Existing vlance '
                      'vmxnet', 'vmci', 'vsock',
			     vmxnet  => 'yes');
                                    'VNET_' . $vHubNr . '_INTERFACE',
                                  'VNET_' . $vHubNr . '_INTERFACE',
                        'VNET_' . $vHubNr . '_NAME',
                                        . ' -v') =~ / SMP /) ? 'yes' : 'no';
     # vsock needs the vmci module loaded first.
    $vtNext = unpack("I", $data);
      $want_sn = get_answer('Do you want to enter a serial number now? '
    $want_sn = 'yes';
  # want to backup the file since we created it; for case 2, we need to backup
                  'want to continue?', 'yesno', 'no') eq 'no') {
  # WARNING: In this case, someone could very easily create a link /etc/X11/X
  # Warning, the return after the end of the if statement
               . 'was about to remove it.  Somebody else apparently did it '
    # Was bug 15880
                 . '.  We can automatically select this number for you, or '
    # We can't rebuild the initrd if we get here.  Not fatal, but we need
  # We can't use get_used_subnets because we want the broadcast address
# we check for non-vmware modules on the system.
# We do not attempt to find ISA vlance or sb.
       # We don't currently support vmblock on Solaris 9; that's okay because
  # We don't ship libconf for Solaris, so we don't need to change the
  # We don't yet know if vmware-rpctool was copied into place.
    # We expect to find the variable PRUNEFS followed with an equals sign
# we find it, it has the form:
   # We forgot to fully clean up after ourselves when uninstalling Tools.  As a
  # We found a separator.  Process the last word
      # We found a valid page offset
	# We found one, we need to update the global values.
  # We give the user the choice so that a sysadmin can perform a normal
    # We have other interfaces, but they have all been allocated.
#    we have reason to believe that the XDG solution didn't fully apply to
                 . ' We have selected a suitable alternative port for '
#    we'll avoid calling into the xdm & gdm routines.
        # We'll consider a socket free if it is in TIME_WAIT state
   # We'll dump our '<dir>' lines and use the system's.
  # Well, if that's not true, just clobber it, whatever it is or was.
   # we'll need to search there directly.
    # We'll try to find a good default port that is free
    # We look for vmxnet_load even in the middle of line, so administrator
  # We might be tempted to zap the use of this var place
# We must set up various symlinks for each of our Tools products.
# we need to add symlinks for both the 32-bit and 64-bit versions and a hard
    # We need to check where we installed the module.
     # we no longer need to load the vmci modules as it is handled automatically
   # We no longer support FreeBSD < 6.3 hence we do not need to worry about
      # We only deal with lines within sections. For other lines,
               . '"w", "e" or "h".' . "\n\n", 0);
                  # We override his choice
                           "We reccomend you remove one of them, run " .
  # were first retrieved are now no longer active.
    # we're using a Redhat/Fedora style mkinitrd.  Else SuSE.
  # We sort them by decreasing order of their length, to ensure that we will
  # We use modinfo to determine if a module is installed or not in modconfig
      # We want to be before networking (because we load network modules).
     # We want VMware to start before samba. If this becomes messy in the future
         # We were unable to find any fonts.  Just quit.
     # we will probably have to dynamically determine the right priority to use
     # we will use the XML file from the modules directory to determine
   'wgs'                => 'vmware',
     "What directory contains your desktop menu entry files? "
    # When installing the modules, kernels 2.4+ setup a symlink to the kernel
         # When this branch is reached, we default to clobbering unless
   # where Solaris's mount expects to find it. We only install 32
  # Where /var/X11R6/bin/X is a little like /etc/X11/X but the Xwrapper is
    # whether the help message mentions "--with=<module>" or not.  If it does then
  # which are up).  The vmnet driver knows how to deal with down interfaces.
                    . '(which can be switched to by running kdmconfig(1M) as '
                                    . '. Which one do you want to bridge to '
                  . 'which the ethernet card is attached.  A host-only '
    while (1) {
  while (1) {
      while (<ADMIN>) {
  while ($answer ne 'no') {
   while ($#ARGV != -1) {
  while ($#avail_modes > -1) {
  while (<CFG>) {
  while (check_answer_inetport($port, "default") ne $port) {
  while (<CONF>) {
  while (defined $file) {
  while (defined($inline = <SYSHANDMAP>)) {
  while (defined($inline = <SYSMODCONF>)) {
  while (defined($inline = <SYSUPDBCONF>)) {
      while (defined($line = <BLOCK>)) {
  while (defined($line = <EXISTINGXF86CONFIG>)) {
  while (defined($line = <MEMINFO>)) {
    while (defined($line = <PCI>)) {
           } while (defined($nameMap{$newName}));
    while (defined($_ = <SRC>)) {
  while (<F>) {
      while(<FD>) {
  while (<FH>) {
    while  (<FILE>) {
    while (file_name_exist($src)) {
   while ($font_line = <MYFONT>) {
  while ($#gAvailEthIf > -1) {
  while ($#gDefaultHttpProxy != -1) {
  while (<IFCONFIG>) {
           while (<IMF>) {
      while (<IN>) {
  while (<INSTALLDB>) {
      while (($key, $value) = each %patch) {
     while (<KSYMS>) {
      while (<LDD>) {
         while (<MNTTAB>) {
   while (<MODINFO>) {
    while ($#mod_list > -1) {
    while (<MODULESDEP>) {
         while (<MOUNTS>) {
  while ($path1 =~ /\/.*\/\.\.\//) {
  while ($path1 =~ /\/\//) {
  while ($path1 =~ /\/\.\//) {
  while ($path2 =~ /\/.*\/\.\.\//) {
  while ($path2 =~ /\/\//) {
  while ($path2 =~ /\/\.\//) {
    while (<PROP>) {
    while ($sn eq '') {
  while ($space < 0) {
   while (<SRC>) {
   while ($sys_line = <SYSFONT>) {
    while (<TCP>) {
   while (<XF86CONFIG>) {
  while (<XF86CONFIG>) {
           '", while you are trying to use "' . $gHelper{'gcc'} .
      # whitespace) before dealing with it.
  ($width, $height) = split(' ', $gSystem{'resolution'});
  # will be called.
  # will cause gdm to restart.  So we have to sneak past this bug by checking if the
                 . ' will continue to run just fine.' . "\n\n", 0);
  # will do the right thing).
# Will either return a valid path to the GCC bin or will return
# Will either return a valid path to the kernel headers or will return
            . ' will not run on this system.' . "\n\n");
                      . '" will prevent some users from using '
                  . 'will start with:' . "\n\n",
  # will void everything after.
			      . 'wish to add it?', scalar(@networks) == 1 ?
              ' with CC environment variable pointing to the "gcc" version "' .
	  # with --default can cause an infinite loop, however
                 . 'with each other, and with the ' . $os . '.' . "\n\n"
          . 'within a ' . $src . ' and dropping or pasting them onto '
                  . 'with other virtual machines or the ' . $os
# _without_ interpolating variables (Perl does it by default)
    # without limits we now honor administrator decision to disable
	     "with the VM communication interface to provide a new communication " .
                                      'wizard');
                                      . '(wizard/editor/help)',
                 . 'wizard.  To remove or edit existing networks, you should '
  $word = '';
    $word .= $char;
# Wordwrap system: append some content to the output
# Wordwrap system: deal with the next character
# Wordwrap system: word-wrap a string plus some reserved trailing space
   # workaround is to simply take that step here.
  # works fine but it unnecessarily complicates the configuration script.
   # Workstation and Fusion*, so we can likely pull this block out (while still
                # work without one. Not sure what to do if there is no mouse
# wrapper script for vmware-toolbox.
  # wrapper script is marked setuid.
    # wrinkle: the file modprobe.conf.local.  That gets included into
      $writeBusIDLine = 1;
# Write component version info to the manifest file
    write_datastore_config('standard', $answer);
    write_dhcpd_config($vHubNr, $vHostIf, \&make_dhcpd_patch);
  write_dhcpd_config($vHubNr, $vHostIf, \&make_nat_patch);
           write_manifest_file();
    write_module_config();
# Write NAT configuration files
  write_nat_config($vHubNr, $vHostIf);
     write_netmap_conf();
  write_new_tools_config();
   # Write out only <dir> lines.
# Write out the netmap.conf file
  # Write the config file, but not the tools.conf file. That file
# Write the VMware datastore configuration file
# Write the VMware host-wide configuration file
# Write the VMware tools configuration file
     write_vmware_config();
# Write VMware's DHCPd configuration files
   'ws'                 => 'vmware',
                # X 7.2(.X) thinks no default mouse is loaded even when
                   $xaaDrv, \%p, 1);
  $xconfig_backup = $xconfig_file . $cBackupExtension;
	       $xconfig_file)) {
    $xconfig_file = "/etc/X11/XF86Config" . ($xversion >= 4 ? '-4' : '');
    $xconfig_file_name = $ENV{'XF86CONFIG'};
    $xconfig_file_name = $ENV{'XORGCONFIG'};
      $xconfig_file_name = 'XF86Config';
    $xconfig_file_name = 'XF86Config';
      $xconfig_file_name = 'XF86Config-4';
    $xconfig_file_name = 'XF86Config-4';
    $xconfig_file_name = 'xorg.conf';
    $xconfig_file_name = 'xorg.conf-4';
		  . $xconfig_file . "\n\n");
    # X config file not found
    $xconfig_path = '/etc';
    $xconfig_path = '/etc/X11';
    $xconfig_path = '/usr/X11R6/etc/X11';
    $xconfig_path = '/usr/X11R6/lib/X11';
    $xconfigTestFile = $xconfig_file;
X-Desktop-File-Install-Version=0.9
         # XDG autostart do so via a GNOME-specific autostart directory.
   # xdm
#      - xdm (all known versions)
#      xdm:             Revert xdm-config(s).
         . $xf86config . '" in read-mode.' . "\n\n");
   $XFile = db_get_answer('LIBDIR') . '/configurator/ModeLines';
      $XFile = db_get_answer('LIBDIR') . '/configurator/XFree86-'
    # XFree 3 and XFree 4, which is usually the case on RH 7.x and
    /XFree86 Version (\d+\.\d+\.?\d*)/ ? $1: '0.0.0';
                             /XFree86 Version (\d+\.\d+\.?\d*)/ ? $1: '3.0'
	    -x internal_which('mount')) {
	     -x internal_which('umount')) {
		  . $xLogFile . ' for details.' . "\n\n");
<?xml version="1.0" encoding="UTF-8"?>
             . ' -xopf ' . shell_string($dir . '/' . $name . '.tar'))) {
  # Xorg.conf file (Debian 5.1 is a great example).  If they don't have
			      $xorg_modules_dir . '/drivers/vmware_drv.so');
                              $xorg_modules_dir . '/drivers/vmwlegacy_drv.so');
			      $xorg_modules_dir . '/input/vmmouse_drv.so');
		$xorgScreenIdentifier = "$1";
    $xorgScreenIdentifier = 'VMware Screen';
               . 'Xorg server.' . "\n\n", 0);
  $xorgServerVersion = $packedVersion;
     $xorgSubVer = 0;
   # X.Org's XDM
				 'XPRMNTL_VMHGFS_FREEBSD', 'yesno', 'no')
                 xserver3(), \%p, 1);
  $x_server_file_name = internal_basename($x_server_file);
      $x_server_file = xserver3();
      $x_server_file = xserver4();
      $x_server_file = xserver_xorg();
  $x_server_link = '/etc/X11/X';
  $x_server_link = '/usr/X11R6/bin/X';
  $x_server_link = '/var/X11R6/bin/X';
#    Xsession.d directory, and vmware-user will launch during X11 session
         $xSessionD = '/etc/X11/Xsession.d';
         $xSessionDst = "$xSessionD/9999.autostart-vmware-user.sh";
         $xSessionDst = "$xSessionD/99-vmware_vmware-user";
         $xSessionD = '/usr/dt/config/Xsession.d';
#    Xsession script.
                         . ($xversion >= 4 ? '-4': '');
               . ($xversion >= 4 ? '-4': ''),
		   . ($xversion >= 4 ? '-4': ''),
                         . ($xversion >= 4 ? '4' : $xversion) . '/XF86Config'
               . ($xversion >= 4 ? '4' : $xversion) . '/XF86Config'
		   . ($xversion >= 4 ? '4' : $xversion) . '/XF86Config'
          $xversionAll);
  $xversionAll = direct_command(shell_string(xserver4()) . ' -version 2>&1') =~
          $xversionAll, $disableHotPlug);
  $xversionAll, $disableHotPlug) = @_;
		     $xversionAll, $disableHotPlug);
  $xversionAll = file_name_exist($xserver3default) ?
  ($xversionAll, $xorgServerVersion) = getXorgVersionAll();
               $xversion, $enableXImps2, $xversionAll, $disableHotPlug);
		   $xversion, $enableXImps2, $xversionAll, $disableHotPlug);
    ($xversion, $xconfig_file, $xversionAll, $disableHotPlug) = xorg();
    ($xversion, $xconfig_file, $xversionAll) = xfree_3();
    ($xversion, $xconfig_file, $xversionAll) = xfree_4();
  # X was set to use imps2
  # X Window System, Release 1.3.0. so $major == 1 and $minor == 3. But
# XXX as a side effect, if the string being replaced is '', remove
    # XXX check $answer for a null value which can happen with the get_answer
# XXX Document return value(s).
# XXX Duplicated in pkg_mgr.pl
          # XXX Fix dot_version_compare to support a comparison like 0.6.5 to 0.6.
    # XXX important...
      # XXX internal error: parse_line returned unknown status \"$status\"
    # XXX NOT IMPLEMENTED
      # XXX syntax error on line $num
  # XXX The polarity of this boolean is inverted. 0 is true.
    # XXX This part of the wizard needs some refinement:
    # XXX This relies on the locale
   # XXX Using mockups for now. Change these once they've been implemented.
  # XXX We only consider class C subnets for the moment
                                    'yes');
                   'yes') {
                   'yes') eq 'no') {
                 'yes') eq 'no') {
			 'yesno', $default);
                              'yesno', '') eq 'no') {
               . '(yes/no/help)';
                           'yesnohelp', 'yes');
                            . '(yes/no/help)', 'yesnohelp', 'no');
		      'yesno', 'no');
                     'yesno', 'no') eq 'no') {
                   'yesno', 'no') eq 'no') {
                   'yesno', 'no') eq 'yes') {
        'yesno', 'no') eq 'yes')) {
                   'yesno', 'yes') eq 'no') {
                      'yesno', 'yes') eq 'yes') {
			   'yesno', 'yes') eq 'yes') ? $answer : '';
                     . '(yes/no)', 'yesno', 'no') eq 'no') {
                   . '(yes/no)', 'yesno', 'no') eq 'no') {
# 'yes', then treat the value is more of the blacklisted version
                # yet seen a Device line, add it, because vmmouse will not
               . '"y", "n" or "h".' . "\n\n", 0);
               . '"y" or "n".' . "\n\n", 0);
		 'you attempt to configure VMware Tools.' . "\n\n", 0);
                 . 'you can specify a network number that you want.' . "\n\n"
                           . "You must add it to your menus by hand.\n", 0);
                          . "You must add it to your menus by hand.\n", 0);
                 . 'you need to select a network number that is normally '
                     . 'you probably do not have the kernel-source package '
                . "your current " . $dest_file . ".\n\n";
            . 'your ' . $dest . ' (' . $src . ' to ' . $dest
               . 'your Linux distribution to fix the problem.  In the '
		       . 'your machine?', 'binpath', '');
				 . 'your ' . $machine . ' on the '
              . 'Your /proc/cpuinfo is:' . "\n\n" . "@cpuinfo");
                   . 'your running kernel is '
                   . 'your system.  Available ethernet devices detected on '
		  'Your system currently may not have a functioning init ' .
                   . 'your system include ' . join(', ', @gAvailEthIf) . '.  '
                  . "your version of a configuration file, you may need to "
      'your XOrg modules?', 'XORGMODULEDIR', 'dirpath_existing', '');
                   . 'you sure you want to configure a bridged ethernet '
                     . 'you sure you want to modify it? (yes/no)',

$0 =~ m!/([^/]+)\s*$!;
# and do not show "(recommended)" in the CUPS web interface. This mode
    # a new clear-text ID
 -A             : show all Printer ID's and compatible drivers
                  Available CUPS PPD URIs are listed by 
 cat <CUPS PPD URI> : Generate PPD file appropriate to the <CUPS PPD URI>.
                  characters).
	    chomp $line;
	close CONF;
# command line options).
        $conffilename = "$cupsserverroot/foomatic.conf";
        $conffilename = "/etc/cups/foomatic.conf";
                  cups-driverd
	# cups-driverd operation
    cupslistppds();
# "-d", "-A", and "-P" command line options) or for automatic
	# dashes in the PPD file name, as some drivers (ex. hpijs-pcl3)
    @data = $db->getppd($opt_w);
    $db->get_overview();
	$db->get_overview();
    $db->get_overview(1, 1 + $listreadymadeppds);
	    $dcount = @{$printer->{'drivers'}};
 -d <driver>    : Driver name
# Default settings for listing PPDs by cups-driverd
	die "ERROR: Could not determine driver name for $ppdname.ppd!\n"
    die "ERROR: $progname: No PPD file for printer '$poid' and driver '$driver'!\n"
	    die "ERROR: $progname: Printer '$poid' does not have default driver!\n";
    die "ERROR: $progname: That printer and driver combination is not possible.\n"
    die "ERROR: $progname: There is neither a custom PPD file nor the driver database entry contains sufficient data to build a PPD file.\n"
		$dlist .= "$d ";
                  driver for Windows (GUI strings are limited to 39 
	    $driver = join('-', @drivercomponents);
		$drivername,$nickname,$modelname) =
	$driver = $pentry->{'driver'};
    } else {
} else {
	} else {
} elsif ($ARGV[0] =~ /^cat$/i) {
	    } elsif ($line =~
} elsif ($poid) {
} elsif ($showall or $showmatch) {
# /etc/cups/foomatic.conf
exit(0);
	exit 1;
# "foomatic").
		    Foomatic::DB::getppdheaderdata($printer, $driver, 
		     !Foomatic::DB::member($printer, @printers));
    foomaticlistppds($showmatch);
# Foomatic PPD file generator for manual PPD generation (via "-p",
		foreach my $driver (@drivers) {
	foreach my $driver (@sorteddrivers) {
    for my $d (@drivers) {
    for my $d (@drvlist) {
	    for my $d (@{$printer->{'drivers'}}) {
    for my $printer (@{$db->{'overview'}}) {
	for $printer (@{$db->{'overview'}}) {
# for their PostScript printers. As these PPDs are often also linked to
                  for the <printerid> is used.
    $found = 0;
    # Generate and return the selected PPD file (cups-driverd command line)
    # Generate and return the selected PPD file (manual operation)
    generateppd($ARGV[1]);
    generateppd($poid, $drv);
    # Get all the data about this driver/printer pair
getopts("AP:d:p:hwt:");
	    # Get PPD header data from the PPD file generator
	# Go through all the drivers and list the PPD entries
	# have dashes in their names.
    help();
help() if !@ARGV;
help() if ($#ARGV > 1) && !($poid);
help() if $opt_h;
 -h             : show help information
if ($ARGV[0] =~ /^list$/i) {
	if (!$db->{'dat'}{'cmd'}) && (!$db->{'dat'}{'ppdfile'});
	    if ($dcount > 1){
    if (!$driver || ($driver =~ /(default|recommended)/i)) {
	if (Foomatic::DB::member($recdriver, @drivers)) {
	    if ($line =~
    if (my $cupsserverroot = $ENV{CUPS_SERVERROOT}) {
	    if( $name eq $lcname ){
	if not @data;
	if( not defined( $driver ) ){
    if ( not $found ) {
	if (not $match or "$name" =~ m{$match}o) {
	    if (!$onlyrecommended) {
    if (!$pentry || ($pentry->{'noxmlentry'} != 0)) {
	    if( !$poid );
	if (!$possible);
    if ($ppduri =~ /^$progname:(.*)\.ppd$/) {
	if( $printer->{'drivers'} ){
    if (-r $conffilename and
                  If the driver is not specified then the default driver 
    # If the user supplies an old numerical printer ID, translate it to
	    # Invalid entry for the recommended driver
    # is no custom PPD file
	join ("\nDEBUG2: $progname: ", split(/\n/, Dumper($pentry))) .
	    last;
	last if ($found = ($driver eq $d));
    # List all available PPD files (format for cups-driverd)
    # List all PPD files or files matching regexp (manual operation)
# listing of these PPDs by CUPS would result. Therefore we suppress
# listing the ready-made PPDs. This behaviour can be changed by using
 list           : List all possible PPDs in the format needed by the
# List only the PPD file with the reconmmended driver for each printer
		$listreadymadeppds = 0;
		$listreadymadeppds = 1;
# "ListReadyMadePPDs Yes" or "ListReadyMadePPDs No" in
# makes CUPS setup with the web interface very easy for beginners.
	# manual operation
                  matched by the RE.  For example:
    my $conffilename;
    my @data;
    my $db = Foomatic::DB->new();
	my $dcount = 0;
my $debug = 0;
	my $dlist = "";
	my @drivercomponents = ();
	my $driver = ($printer->{'driver'} || "No Default Driver");
    my @drivers = $db->get_driverlist();
	my @drivers = @{$printer->{'drivers'}};
    my @drvlist = $db->get_drivers_for_printer($poid);
my $drv = $opt_d;
    my $found = 0;
	my $id = $printer->{'ieee'};
	    my ($ieee1284,$pnpmake,$pnpmodel,$filename,$longname,
    my $lcname = lc( $poid );
    my $listreadymadeppds = 0;
my $listreadymadeppds = 0;
	my $make = $printer->{'make'};
    my ($match) = @_;
	my $model = $printer->{'model'};
	    my $name = lc( $printer->{'id'} );
	my $name = "$pr $model";
    my $onlyrecommended = 0;
my $onlyrecommended = 0;
#my ($opt_h, $opt_d, $opt_p, $opt_A, $opt_P, $opt_w);
    my $pentry = $db->get_printer($poid);
    my $poid;
	my @poidcomponents = split(/-/, $ppdname);
my $poid   = $opt_p;
	my $poid = $printer->{'id'};
    my $possible = $db->getdat($driver, $poid);
	my $ppdname = $1;
    my ($ppduri, $driver) = @_;
    my $printer;
	my @printers = $db->get_printerlist();
my $progname = ($1 || $0);
	my $pr = $printer->{'make'};
	my $recdriver = $printer->{'driver'};
my $showall   = $opt_A;
my $showmatch   = $opt_P;
	my @sorteddrivers;
	next if $#drivers < 0;
	    next if (!Foomatic::DB::member($driver, @drivers) or
	    next if $onlyrecommended;
	"\n" if $debug;
	# No drivers => No PPDs
						   ($onlyrecommended ? '' :
		$onlyrecommended = 0;
		$onlyrecommended = 1;
# on-the-fly PPD generation by CUPS 1.2 or newer (via "cat" and "list"
	open CONF, "< $conffilename") {
		$pentry = $printer;
	$pentry = undef;
# -*- perl -*-
                   -P HP will match all names with HP in them
    $poid = Foomatic::DB::translate_printer_id($poid);
		$poid = $pentry->{'id'};
	$poid = $ppduri;
	    $poid = $printer;
 -p <printerid> : Printer ID
 -P <regexpr>   : show all Printer ID's whose names and model
		print " CompatibleDrivers='$dlist'";
    print @data;
						    $printer->{'driver'}));
	    $printer = join('-', @poidcomponents);
    print <<HELP;
	    print "\n";
	    print "$name Id='$printer->{'id'}' Driver='$driver'";
	    print "\"$progname:$printer->{'id'}-$driver.ppd\" en \"$make\" \"$nickname\" \"$ieee1284\"\n";
	    print STDERR "DEBUG2: $progname: compare '$lcname' to '$name'\n" if $debug;
    print STDERR "DEBUG: Printer '$poid' not found!\n" if ($debug && not defined $pentry );
	print STDERR "DEBUG: $progname: Driver '$driver' not in database!\n" if $debug;
    print STDERR "DEBUG: $progname: Found $pentry->{id}\nDEBUG2: $progname: " .
		print STDERR "DEBUG: $progname: Using printer entry '$poid'\n" if $debug;
	# probably will take the first PPD which matches the printer model
$progname -A
$progname cat <CUPS PPD URI> [-w]
$progname -h
                  "$progname list".
$progname list
$progname -p <printerid> [-d <driver>] [-w]
$progname -P <regexpr>
		    push(@sorteddrivers, $driver) if $driver ne $recdriver;
	    push(@sorteddrivers, $recdriver);
	# Put the reconmmended driver to the beginning of list, as CUPS
    # Read configuration in /etc/cups/foomatic.conf
		     /^\s*ListReadyMadePPDs\s+(No|Off|False|0)\s*$/i) {
		/^\s*ListReadyMadePPDs\s+(Yes|On|True|1)\s*$/i) {
		     /^\s*OnlyRecommended\s+(No|Off|False|0)\s*$/i) {
		/^\s*OnlyRecommended\s+(Yes|On|True|1)\s*$/i) {
	    @sorteddrivers = @drivers;
    # Stop if the driver entry has an empty command line prototype or if there 
    # Stop if the printer is not supported by the given driver
sub cupslistppds {
sub foomaticlistppds {
sub generateppd {
sub help {
# the directories in which CUPS links directly to PPD files, duplicate
# The Foomatic database does not only generate PPD files from Foomatic
# This can be set by "OnlyRecommended Yes" or "OnlyRecommended No" in
	    undef $recdriver;
	    unshift(@drivercomponents, pop(@poidcomponents));
use Data::Dumper;
use Foomatic::DB;
use Foomatic::Defaults;
use Getopt::Std;
# Use program name as the first part of the PPD URI for CUPS (should be 
#use strict;
#!/usr/bin/perl
	    # Valid entry for the recommended driver
	warn "ERROR: $progname: Printer '$poid' and driver '$driver' are not compatible\n";
	# We try to split between printer name and driver name at all
 -w             : Generate PPD which is compatible with the CUPS PostScript
	while (my $line = <CONF>) {
	while ($#poidcomponents > 1) {
# XML data but also of ready-made PPDs mainly from printer manufacturers

            ');;
      (*'
    (*\'*)
  (*\'?*)
  (*\'*)
'* | *'&'* | *'\'* | *'|'*)
  (-[0123456789abcdhHiIKLlnoqrRsTuUvVwxyzZ]?*)
  (-[ABCDefm] | --binary-* | --file | --[lm]a* | --reg*)
# Adapted from a version sent by Charles Levert <charles@comm.polymtl.ca>
    arg2=-\'$(expr "X${option}X" : 'X-.[0-9]*\(.*\)' | sed "$escape")
# (at your option) any later version.
# autodetection. This way memory usage limit and thread limit can be
  (--binary-*=* | --[lm]a*=* | --reg*=*)
#!/bin/bash
    break;;
# but WITHOUT ANY WARRANTY; without even the implied warranty of
    *[-.]bz2 | *[-.]tbz | *.tbz2) uncompress="bzip2 -cdfq";;
case ${0##*/} in
  case ${1?"Missing pattern; try \`${0##*/} --help' for help"} in
    case ${1?"$option option requires an argument"} in
      case $i in
  case $i in
    case $option in
  case $option in
    continue;;
# Copyright (C) 1993 Jean-loup Gailly
# Copyright (C) 1998, 2001, 2002, 2006, 2007 Free Software Foundation
  (-[drRzZ] | --di* | --exc* | --inc* | --rec* | --nu*)
    echo "$usage" || exit 2
    echo "$version" || exit 2
  (-[ef]* | --file | --file=* | --reg*)
  *egrep*) prog=xzegrep; grep=${GREP:-egrep};;
    elif test $files_without_matches -eq 1; then
    elif test $with_filename -eq 0 &&
    else
# environment variables.
    esac
      esac
escape='
      eval "$grep"
      eval "$grep" || {
        (eval "$grep" 4>&-; echo $? >&4) 3>&- | sed "$sed_script" >&3 4>&-
      eval "$grep" && { printf '%s\n' "$i" || exit 2; }
    eval "set -- $arg2 "'${1+"$@"}'
eval "set -- $operands "'${1+"$@"}'
exec 3>&1
        exec 4>&1
    exec 5>&1
    exit;;
    exit 2;;
        exit $r
      exit $r
exit $res
      # Fail if grep or sed fails.
  # Fail if xz or grep (or sed) fails.
  *fgrep*) prog=xzfgrep; grep=${GREP:-fgrep};;
        fi
    fi >&3 5>&-
files_with_matches=0
    files_with_matches=1;;
files_without_matches=0
    files_without_matches=1;;
for i; do
# GNU General Public License for more details.
    grep="$grep -- '$1'";;
  grep="$grep $option$optarg"
    grep="$grep -- '"$(printf '%sX\n' "$1" | sed "$escape");;
  grep="$grep -q"
have_pat=0
    have_pat=1;;
  (--h | --he | --hel | --help)
  (-H | --wi | --wit | --with | --with- | --with-f | --with-fi \
if test $# -eq 0; then
if test $files_with_matches -eq 1 || test $files_without_matches -eq 1; then
    if test $files_with_matches -eq 1; then
if test $have_pat -eq 0; then
        if test $r -eq 1; then
# Instead of unsetting XZ_OPT, just make sure that xz will use file format
        i=$(printf '%s\n' "$i" |
# it under the terms of the GNU General Public License as published by
  (-l | --files-with-*)
  (-L | --files-witho*)
Look for instances of PATTERN in the input FILEs, using their
    *[-.]lzo | *[-.]tzo) uncompress="lzop -cdfq";;
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Modified for XZ Utils by Andrew Dudman and Lasse Collin.
              $!N
# newlines correctly) turn trailing X on last line into '.
  (--no-f*)
no_filename=0
    no_filename=1;;
operands=
      operands="$operands '$option'";;
      operands="$operands '"$(printf '%sX\n' "$option" | sed "$escape");;
  optarg=
      optarg=" '$1'";;
      optarg=" '"$(printf '%sX\n' "$1" | sed "$escape");;
  option=$1
    option=$(expr "X$option" : 'X\(-.[0-9]*\)');;
    option=\'$(expr "X${option}X" : 'X\(.*\)' | sed "$escape");;
    option="'$option'";;
OPTIONs are the same as for '$grep'.
    ${POSIXLY_CORRECT+break}
    printf >&2 '%s: %s: Option not supported\n' "$0" "$option"
          printf '%s\n' "$i" || r=2
  *)       prog=xzgrep; grep=${GREP:-grep};;
        r=$?
      r=$(
      ) || r=2
Report bugs to <lasse.collin@tukaani.org>."
            sed '
      sed_script="s|^|$i:|"
# sed script to escape all ' for the shell, and then (to handle trailing
  set -- -
#SET_PATH - This line is a placeholder to ease patching this script.
              $s/[&\|]/\\&/g
  s/'\''/'\''\\'\'''\''/g
    shift;;
              $s/\n/\\n/g
# specified via XZ_OPT. With gzip, bzip2, and lzop it's OK to just unset the
  $s/X$/'\''/
         { test $# -eq 1 || test $no_filename -eq 1; }; then
  test $res -lt $r && res=$r
  test "$xz_status" -eq 0 || test "$xz_status" -eq 2 || r=2
# the Free Software Foundation; either version 2 of the License, or
# This program is distributed in the hope that it will be useful,
# This program is free software; you can redistribute it and/or modify
uncompressed contents if they are compressed.
    ($uncompress -- "$i" 5>&-; echo $? >&5) 3>&- |
    *) uncompress="$xz -cdfq";;
unset GZIP BZIP BZIP2 LZOP
usage="Usage: ${0##*/} [OPTION]... [-e] PATTERN [FILE]...
version="$prog (XZ Utils) 5.1.0alpha"
  (-V | --v | --ve | --ver | --vers | --versi | --versio | --version)
while test $# -ne 0; do
  | --with-filename)
with_filename=0
    with_filename=1
  | --with-fil | --with-file | --with-filen | --with-filena | --with-filenam \
# xzgrep -- a wrapper around a grep program that decompresses files as needed
  xz_status=$(
xz='xz --format=auto'
    *[-.][zZ] | *_z | *[-.]gz | *.t[ag]z) uncompress="gzip -cdfq";;

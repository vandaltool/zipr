            ;;
          *)
        *)
      ;;
###############################################################################
    || abort "could not create directory \`$tmpdir'"
# abort(errmsg)
abort() { errmsg "texlinks: $1."; cleanup 1; }
#      Added unlink option (-u) to aid OpenBSD package uninstall
#       add version string
#   an existing binary, possibly adding the executable extension if
  # append .exe if supplied (for cygwin).
    | awk '{print $1, $2}' > cnf_file_ln.$$
        */bin) dirs=$selfautoloc;;
#!/bin/sh
      *)  break;;
    case $1 in
      case $selfautoloc in
        case $silent in
  case $src in
        case $unlink in
  cd "$tmpdir" || cleanup 1
check_for_binary()
# cleanup()
cleanup()
cleanup 0
#      cleanup now has an argument for the return code
#   clean up the temp area and exit with proper exit status
      --cnffile|-f)
  cnf_file=    # global variable: full name of the config file
    # cnf_file_ln.$$ has lines with "format engine" pairs
cnf=fmtutil.cnf   # name of the config file
      # context includes wrapper scripts that create/run these.
    */cont-??|*/mptopdf)
#   create a symlink like ln -s dest src, but make sure that src is not
Create symbolic links format -> engine according to fmtutil setup.
                        (default: issue warning)
                        (default: operate only in directory for this platform)
#   Delete a previously installed link
  dest=$1; src=$2
          dest=mfw  # name for windows-enabled mf, once upon a time
#   directory. Also check if this directory is writable.
  dirs="$*"
               dirs=`find $parent -type f -name kpsewhich -print \
      dirs=$selfautoloc
    done
#       do not create symlinks for cont-??, metafun and mptopdf
  do test $# -gt 0 && shift; done
      echo "$i/$testbin"
          echo "$progname version $version"; exit 0;;
          echo "$usage"; exit 0;;
#      Edd Barrett <vext01@gmail.com>
      --e*|-e) shift; exeext=$1;;
  -e, --exeext EXT     append EXT to symlink targets (default: none)
    else
      else
      || { errmsg "$d: no write permissions. Skipping..."; continue; }
errmsg() { echo "$@" >&2; }
      -*) errmsg "fmtutil: unknown option \`$1' ignored.";;
            errmsg "install_link $src -> $dest failed: file already exists."
# error message to stderr:
    esac
      esac
        esac
  exeext=
  exit $rc
export PATH
  -f, --cnffile FILE   use FILE as config file (default: fmtutil.cnf)
      fi
        fi
      fmt=$1; engine=$2; shift; shift
  for d in $dirs; do
  for i in `sed 's@ .*@@' cnf_file_ln.$$`; do
#   Fr Apr  8 19:15:05 CEST 2005
#   (Further changes in ChangeLog.)
# give message to stderr only if "verbose" mode is on:
# hack around a bug in zsh:
          # have both mf and mf-nowin binaries.  no link.
      --h*|-h)
  -h, --help           show this help text
# History:
#       honor $TMPDIR, $TEMP and $TMP, not just $TMP
# $Id: texlinks 13904 2009-06-23 00:47:00Z karl $
  # if no cnf_file from command-line, look it up with kpsewhich:
#   if $PATH has only symlinks to the real binaries, update that directory
      if test "$dest" = mf-nowin; then
  if test -e $link; then
      if test -f "$d/$engine"; then
        if test -f $selfautoloc/mf && test -f $selfautoloc/mf-nowin; then
        if test -f $selfautoloc/mfw; then
  if test -f "$selfautoloc/tl$$"; then
      if test -f "$src"; then
    if test -h $link; then
    if test $multiplatform = true; then
  if test -z "$dirs"; then
    if [ -x "$i/$testbin" ]; then
install_link()
# install_link(dest src)
          install_link "$engine" "$d/$fmt";;
    install_link "$selfautoloc/$i" "$symlinkdir/$i"
# in verbose mode: show command that is executed:
#       kpseaccess instead of access
    kpseaccess -w $d \
  kpseaccess -w "$symlinkdir" || return 1
  : ${KPSE_DOT=$thisdir}; export KPSE_DOT
  kpsewhich=`check_for_binary kpsewhich`
likewise not specified, the directory of this script itself is used.
  link=$1;
#   look if $PATH has only symlinks to the real binaries and find that
# main()
main ${1+"$@"}
      main_args_while="$@"
      # main_args_while variable.
  # make symlink    src -> dest
Mandatory arguments to long options are mandatory for short options too.
    */mf)
      --m*|-m) multiplatform=true;;
  -m, --multiplatform  operate in all platform specific directories
#   Mon May 10 20:52:48 CEST 2004
  multiplatform=false
  needsCleanup=false
  $needsCleanup && return
  $needsCleanup && test -n "$tmpdir" && test -d "$tmpdir" \
  needsCleanup=true
operate.  If no directories are specified and --multiplatform is
        *)     parent=`kpsewhich --expand-var='$SELFAUTODIR'`
#   parse commandline arguments, initialize variables,
#   passed on the command.
#   print `errmsg' to stderr and exit with error code 1
progname=texlinks
  -q, --quiet          silently skip existing scripts / binaries
#      remove special cases for csplain,cslatex,pdfcslatex,pdfcsplain
Report bugs to tex-k@tug.org.'
      # restore positional arguments:
          return
      return 0
    return 0
    return 1
  return 1
        rm -f "$src"
    rm -f "$symlinkdir/tl$$"
    && { rm -f "$tmpdir"/*; cd /; rmdir "$tmpdir"; }
# rm_link()
rm_link()
          rm_link "$d/$fmt";;
  && { RUNNING_BSH=true; export RUNNING_BSH; exec /bin/bsh $0 ${1+"$@"}; }
  && { RUNNING_SH5=true; export RUNNING_SH5; exec /bin/sh5 $0 ${1+"$@"}; }
# search a binary along $PATH:
# search_symlinkdir()
search_symlinkdir()
  search_symlinkdir || return 0
  sed '/^[ 	]*#/d; /^[ 	]*$/d' $cnf_file \
                       | sed 's@/kpsewhich$@@'`;;
  selfautoloc=`kpsewhich --expand-var='$SELFAUTOLOC'`
# set successful return code
#   set up a temp directory and a trap to remove it
  setupTmpDir
# setupTmpDir()
setupTmpDir()
    set x `cat cnf_file_ln.$$`; shift
  set x `echo "$PATH" | sed 's/^:/.:/; s/:$/:./; s/::/:.:/g; s/:/ /g'`; shift
      set x $main_args_while; shift
      # shellfunction. Therefore, we save and restore them "by hand" in the
          shift; cnf_file=$1;;
  silent=false
#   So Mar 27 18:52:06 CEST 2005
      # Some broken shells destroy the positional arguments when calling a
  -s, --silent         same as -q
      --s*|-s|--q*|-q) silent=true;;
#   Sun Aug 28 21:41:06 CEST 2005
#   switch into temp. direcrory, execute desired command
  symlinkdir=`echo $kpsewhich | sed 's@/*kpsewhich$@@'`
  testbin=$1
test -f /bin/bsh && test -z "$RUNNING_BSH" \
test -f /bin/sh5 && test -z "$RUNNING_SH5" \
  test -f "$cnf_file" || abort "config file \`$cnf' not found"
  test -n "$exeext" && dest="$dest$exeext"
test -n "${ZSH_VERSION+set}" && alias -g '${1+"$@"}'='"$@"'
      test "x$fmt" = "x$engine" && continue
      test "x$src" != "x`(ls -ld $src | awk '{print $NF}') 2>/dev/null`" &&
  test -z "$cnf_file" && cnf_file=`kpsewhich --format='web2c files' $cnf`
  test -z "$kpsewhich" && return 1
# texlinks: script to maintain symlinks from format to engine. Interprets
#   that holds the symlinks
The DIRECTORY arguments are an optional list of directories in which to
# the lines given in fmtutil.cnf.
  thisdir=`pwd`
# Thomas Esser, 1999, 2002, 2003. public domain.
#   Thu Dec 25 22:11:53 CET 2003, te:
  tmpdir=${TMPDIR-${TEMP-${TMP-/tmp}}}/texlinks.$$
  touch "$symlinkdir/tl$$"
  trap 'cleanup 1' 1 2 3 7 13 15
          true)
        true)
#   Tue Apr  9 22:46:34 CEST 2002, te:
#   Tue Oct  9 14:23:01 BST 2007
  (umask 077; mkdir "$tmpdir") \
  && { UNAMES=`uname -s`; test "x$UNAMES" = xAIX; } 2>/dev/null \
  && { UNAMES=`uname -s`; test "x$UNAMES" = xULTRIX; } 2>/dev/null \
  unlink=false
unset RUNNING_BSH
unset RUNNING_SH5
  upd_symlinkdir
# upd_symlinkdir()
upd_symlinkdir()
usage='Usage: texlinks [OPTION]... [DIRECTORY]...
  -u, --unlink	       remove symlinks created by texlinks
      --u*|-u) unlink=true;;
        verbose_do ln -s "$dest" "$src"
      verbose_do rm -Rf $link
verbose_do() { verbose_echo "$@"; "$@"; }
          verbose_echo "both mfw and mf-nowin exists, $src linked to $dest"
      verbose_echo "kept $link, since not a symlink"
      verbose_echo "skipped ConTeXtish symlink $src -> $dest (special case)"
        verbose_echo "skipped $d/$engine, engine does not exist"
    verbose_echo "skipped $link, non-existent"
          verbose_echo "skipped metafont symlink $src -> $dest (special case)"
verbose_echo() { $verbose && errmsg "$@"; }
  verbose=false
      --version)
version=20090623.0228
  --version            show version string
  -v, --verbose        enable verbose messages (default: off)
      --v*|-v) verbose=true;;
  while 
    while test $# != 0; do
With --multiplatform, all child dirs of an upper-level bin/ dir are used.

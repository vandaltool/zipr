                 . ' '
               }
              }
            }
           }
          '.';
          }
         }
        }
        #
       }
	       }
                 ,0);
      # 00000 are developer builds, which are implicitly newer
#  >= 0 number of blocks removed on success
#  0 on no regexp match (nothing added)
0.organizationName      = VMware, Inc.
#  0x1 write this directory creation in the installer database
#  0x1 write time stamp
# 1.  Check for PCI IDs
#  -1 on failure
#  1 on success
#        = 1:  There is a mismatch
# 2.  Check for VMware module Aliases
	. ' 2>/dev/null|');
	. ' 2>/dev/null|') or error("Failed to open 'du'.");
# 3.  Check for module file names (legacy).
# a '/'...
    # Absolute name
  # ACE packages may be installed from CD/DVDs, which don't have the same file
		 'ACE update package. ', 0);
   'acevm'              => 'acevm',
  acevm_create_desktop_icon($gManifest{'acename'}, $gManifest{'aceid'}, $gRegistryDir .
      acevm_install_host_policies();
      acevm_uninstall_host_policies();
    # active.
# Add a directory to the tar installer database
# Add a file to the tar installer database
# Add an answer to the tar installer database
  #     adding it to our installer database.  This file will never get
	 # add the flag if its not already there.
# Add the variable, vix.libdir, to /etc/vmware/config
# a digit or a letter, as in e.x.p build-000000
      # a few command line options_.
      # after the services are stopped in uninstall().
  # a full path to the vmware-user binary instead of having to
                       "again for encrypted connections.\n\n", 0);
                  'a host policies file from another package installed. ' .
# A list of known open-vmware tools packages
    # All module files are under LIBDIR
      # allows the init script to check for certain conditions (e.g., not
    # Allow the script to limit output in terse mode.  Usually dictated by
# All the known modules that the config.pl script needs to
             . 'all the loaded components are removed from the memory and '
         # a lower rev level for this sync group is scheduled for installation.
               . 'already.' . "\n\n", 0);
      # Also restore the system Ramdisk (either initrd or initramfs)
   # Also strip off anything sh wouldn't like.  Bug 502544
# A matching ACE package must already have been installed
		 . 'an absolute path.' . "\n\n", 0);
# and allowing the user to abort(error out) if they don't want the
    #and ask them if they want that.
# and filter it out as the file is written out to a tmp file. Typicaly, block_remove()
   # and if so, try to eject it, then verify.
# and product type, with a single command parameter.
# and stop the vmware-serverd
# and the shipped module.  If it finds information in the sytem
   #       and volumeids which this code is now dependent upon.
                 . ', and was about to remove it. Since there are files in '
               . ', and was about to remove it. Somebody else apparently did '
                'an hour depending upon its size.' . "\n\n", 0);
  # an install ontop of a current product, the uninstall part is called with the
  #       a non-existing file, -e will be false
           $ans = get_answer('It appears that you are running a Xen kernel.  Running '
      $answer = '';
	  $answer = '';
	$answer = '';
		 $answer . "'. ", 0);
 	$answer = $1;
        $answer = acevm_get_dir($rootdir);
        $answer = acevm_get_updatedir($rootdir);
    $answer = $answer . '/bin';
  $answer = check_answer_binpath($bin, 'default');
    $answer = check_answer($gDBAnswer{$id}, $type, 'db');
    $answer = check_answer(query($msg, $default, $gAnswerSize{$type}), $type, 'user');
  $answer = dir_remove_trailing_slashes($answer);
        ($answer eq 'yes')) {
  $answer = get_answer('An old installation of the tools is detected. '
      $answer = get_answer('In which directory do you want to install '
  $answer = get_answer('In which directory do you want to install '
      $answer = get_answer('In which directory do you want to install the '
    $answer = get_answer("In which directory do you want to install this ACE?",
      $answer = get_answer($msg, $type, $default);
  $answer = get_answer($msg, $type, $default);
    $answer = get_answer('Which directory contains the ACE you want to update?',
  $answer = get_initscriptsdir();
        $answer = get_persistent_answer('Before running '
       $answer = get_persistent_answer('Before running the VMware software for '
      $answer = get_persistent_answer($msg, $id, $type, $default);
  $answer = get_persistent_answer('What is the directory that contains the init'
  $answer = $gOption{'prefix'} || spacechk_answer('In which directory do you want '
        $answer = 'no';
      $answer = 'no';
		   $answer . "'. Please choose another directory.\n\n", 0);
    $answer = spacechk_answer('In which directory do you want '
  $answer = spacechk_answer('In which directory do you want '
  $answer = spacechk_answer('In which directory do you want to '
    $answer = spacechk_answer('In which directory do you want to install '
  $answer = spacechk_answer('In which directory do you want to install '
  $answer = spacechk_answer('In which directory do you want to install the '
                 $answer . (vmware_product() eq 'tools-for-freebsd' ?
    # anymore.
# A place that gets called when the configurator/installer bails out.
# Append a clearly delimited block to an unstructured text file
               'application menu under the "VMware ACE" folder.  You may have to ' .
              'appropriate packaged-based mechanism, and then restart this ' .
                            # Arbitrary aliases next
#  architecture and thus should be matched to the running OS.
# are currently installed by RPM on the system.
# are.  If this is the standalone version, create config.
# ARGH! More code duplication from pkg_mgr.pl
         $arg = shift(@ARGV);
        $arg = shift(@ARGV);
      @argv = ($initctl, @_, $service);
      @argv = (vmware_service_path(), @_);
  @arr1 = split(/\./, "$str1");
  @arr2 = split(/\./, "$str2");
  # As a side effect, sets INITSCRIPTSDIR in the locations database.
  # as a user, and thus the suid bit on vmware-user-suid-wrapper being
  # as described in their documentation (they overwrite permissions of
# Ask a question to the user and propose an optional default value
# Ask the user for file locations for libs, bins, etc.  Check
      # Ask the user what to do, default to 'no'(abort install) to avoid infinite loop on --default.
      # as too the wrappers for vmware-user and vmware-toolbox.
                           "at $gNonVmwareModules{$result} and at $modPath.  " .
  # At last, replace the original files.
        # At least one instance of VMware is still running. We must refuse to
			  "at $mountpoint before canceling tools install " .
# Attempts to remove the given list of RPM packages
  $backslash = chr(92);
      $backslash . $dollar . 'Name: (\S+)? ' . $backslash . $dollar . ';' . $dollar;
  # backup.
            backup_file($file);
      backup_file($$filesToRestoreRef{$origFile});
      backup_file($gDBMove{$MovedFile});
        backup_file($MovedFile);
      backup_file($origFile);
      backup_file_to_restore($cfgFile, "orig");
   backup_file_to_restore($systemMod, $bkupExt);
# based audio support disabled in pulse.  Make this call
# based on the version of pulseaudio installed on the system.
# Based on user feedback, the conflicting product will either be removed,
# Basic support for IRIX style chkconfig
	  'be a system administrator. Try running this setup program with sudo or ' .
  # because any modified config file is not removed but left in place,
            # Because config files need to survive the install and uninstall
    # because it can change over time
      # because there are symbol problems, or the module is badly formed, or
  # Because we didn't know about that at the beginning, the previous
                             # become unused as a result of unloading $modname
              'been installed using a package-based mechanism (rpm or deb) ' .
		   'before continuing the installation of ' . vmware_product_name() .
  # Before we can check the permission, $dst must exist. Walk up the directory path
  # Before we can check the space, $dst must exist. Walk up the directory path
    ### Begin check for non-VMware modules ###
### BEGIN INIT INFO
# BEGINNING_OF_CONFIG_DOT_PM
# BEGINNING OF THE LIBRARY FUNCTIONS
# BEGINNING OF THE SECOND LIBRARY FUNCTIONS
# BEGINNING_OF_UTIL_DOT_PL
#BEGIN UNINSTALLER SECTION
        # behavior, that is automatically exit the first time it reaches
    # Be secure
	   # be the equivalent of a loopback mount in linux.
    # Beware, beyond this point, $gInstallerObject does not exist
  # binaries located in the -6 directories.
                                  . ' binary files?', 'dirpath',
      # Binary wrappers can be run by any user and need to read the
  $bindir = "$rootdir/bin";
  $bindir = "$rootdir/lib/vmware-vix-disklib/bin";
    $binfile = $bindir . "/vmplayer";
    $binfile = $bindir . "/vmware";
  $bkp = $bkp_dir . '/prev_db2.tar.gz';
  $bkp = $bkp_dir . '/prev_db.tar.gz';
  $bkp_dir = make_tmp_dir('vmware-installer');
   $bkupExt =~ s/^(\w+).*$/$1/;
    # block insert it into the prelink.conf file.
      block_restore('/etc/fstab', $cMarkerBegin, $cMarkerEnd);
	  block_restore('/etc/fstab', $cMarkerBegin, $cMarkerEnd);
         block_restore($file, $cMarkerBegin, $cMarkerEnd);
	    block_restore($file, $cMarkerBegin, $cMarkerEnd);
         block_restore($_, "!$markerBegin", "!$markerEnd");
    block_restore($prelink_file, $cMarkerBegin, $cMarkerEnd);
      block_restore($xinitrcCommon, $markerBegin, $markerEnd);
  $build_dir = make_tmp_dir($cTmpDirPrefix);
  $buildNr = '8.4.4 build-301548';
  build_perl_api();
  # Build the pattern without using the dollar character, so that CVS doesn't
  # Build the temp file's path
                     '.bundle';
        # but that is a more complicated issue.
      # by comparing the device and inode of the BINDIR against
    # by the installer.
  #     by the VMware package manager
		    . 'by this installer.  This is a comma seperated list of modules.'
         # calling them all 'oldest version' is sufficient for now.
  # Call restorecon on the source file.
# Call restorecon on the supplied file if selinux is enabled
   # Call restorecon to set SELinux policy for this file.
	# Call the prelink_restore function to fix that if it has been modified.
#  Call to specify lib suffix, mainly for FreeBSD tools where multiple versions
# Can we install host.vmpl? We will install our host.vmpl if:
# case sensitivity.
      # Catch error result to see if configurator died abnormally.
Categories=VirtualMachines;ACE;
                           "cause a race condition when a device is added.  " .
  $certCnf = "$tmpdir/certificate.cnf";
# characters.
      chdir($1);
# Check a mountpoint to see if it hosts the guest tools install iso.
# Check available space when asking the user for destination directory.
   # check for an uninstaller in BINDIR
  # check for conflicting installed product
  # check for inetd
    # Check for open-vm-tools and related packages before we install
  # check for xinetd
# Check if a file name already exists and prompt the user
# Check if a file name exists
      # Check if the modules.dep file exists.  If so, then
### Check if this ace instance is running.
# Checks for versioning information in both the system module
# Checks to see if any of the package names in a given list
# Checks to see if the given module is one of ours.  If so, return what module
      # Check that there are no VMs active else the server will fail to stop.
      # Check the DB to see if we need to restart HAL.
# Check the validity of an answer based on its type
# Check the validity of an answer whose type is authdport
# Check the validity of an answer whose type is dirpath
# Check the validity of an answer whose type is existdirpath
# Check the validity of an answer whose type is initdirpath
# Check the validity of an answer whose type is initscriptsdirpath
# Check the validity of an answer whose type is username
# Check the validity of an answer whose type is yesno
    # Check the validity of the temporary directory. We do this in the loop
# Check to see if a conflicting product is installed and how it relates
  # check to see if $gRegistryDir is still around.  If it has no files,
      # Check to see if it has been moved by seeing if BINDIR exists
### Check to see if "now" falls outside this package's valid date range.
# check to see if the certificate files exist (and
### Check to see if the passed in instance has the same ace id as this update package
# Check to see if the product we are installing is the same as the
      # Check to see if this instance has been copied
  # Check to see if this uninstall is part of an upgrade.  When an upgrade occurs,
              # Check to see if we have already found a module for this.  If
	  # Check to see if we modified ld.so.conf.  If we did, then we need
#  Check to see that the product architecture is a mismatch for this os.
# Check to see what product is installed, and how it relates to the
      # Check valid range for this package
    # Check whether we need to add the two new keywords for each virtual network:
# chkconfig: 235 03 99
                    "chkconfig application to setup the vmware-tools service.  " .
                "chkconfig application to setup the vmware-tools service.  " .
   $chk_msg = product_os_match();
# chmod() that reports errors
      chomp;
    chomp;
	    chomp($aline);
   chomp($chompedMarkerBegin);
    chomp($dhcp);
        chomp($fp1);
        chomp($fp2);
	 chomp $instPkgName;
    chomp($kvers);
         chomp $line;
      chomp ($line);
      chomp $line;
      chomp($line);
	 chomp $line;
         chomp($mountline);
 chomp($OS);
   chomp($release);
      chomp($reply);
  chomp($rpcresult);
    chomp ($shippedModVer);
      chomp($solVersion);
    chomp ($systemModVer);
   chomp($version_str_A);
   chomp($version_str_B);
    chop($kind);
  chop($kind);
      chop($version);
  # chosen has enough space to hold the data.
#                       cleaned up separately.)
# Cleanup after vnetlib
      # Clean up drivers with rem_drv(1M) (corresponds to add_drv(1M) calls in
  # Clean up the broken links.
  # Cleanup the files that aren't mentionned in the install database.
# Cleanup the inetd.conf file.
      # Clean up the module loader config file from vmxnet.
# Cleanup the xinetd.d directory.
        $clear_db = 1;
  # cleared before install.  Also taking care of the only other known installed
		    . '--clobber-kernel-modules=<module1,module2,...>'
      close(BLOCK);
	   close(CMDOUTPUT);
  close(CONF);
  close(CONFIGFILE);
   close(DESKTOP);
  close DIR;
      closedir(CDROMDIR);
  closedir(LS);
  close(DST);
    close(EULA);
    close FH;
  close(FILE);
  close(INSTALLDB);
   close(INSTDB);
  close MANIFEST;
         close(MNTTAB);
    close(MODULESDEP);
         close(MOUNTS);
   close NEWPCF;
    close(OLDCONFIG);
   close ORGPCF;
  close OUTPUT;
    close(PAGER);
      close(PERLINC);
       close PKGCONFIG;
    close(PLAYERINSTALLDB);
  close(PSOUT);
    close RPCRESULT;
    close (SHIPPED_MOD_VER);
      close(SRC);
  close(SRC);
    close (SYSTEM_MOD_VER);
    close(TESTFILE);
   close(XEN);
   $cmd = join(' ', @escapedArgv);
  $cmd = sprintf "%s configureNATSubnet %s 2> /dev/null",
  $cmd = sprintf "%s --install-host-policy%s > /dev/null",
                                        . 'command for you now?'
	       ' command: "vmplayer ' . $vmx . '"' . "\n\n", 0);
# Common error message when we can't compile or install our perl modules
commonName              = $hostname
# Compares variant length version strings against one another.
               . ' completed successfully. '
                 " completed successfully.\n\n", 0);
                        compute_subnet($addr, $mask) . "\n";
# Compute the subnet address associated to a couple IP/netmask
  # Conf file that we will use to generate SSL certificates.
      $configResult = system(shell_string(db_get_answer('BINDIR') .
       configure_gtk2();
                                        . 'configure it by invoking the '
      # configure_module_solaris() in configure script).  This needs to happen
# Configures gtk.  Returns 1 on success, 0 on failure.
      configure_vnetlib();
# Configure vnetlib
		   $conflicting_product . ' installed.  Continuing this ' .
    $conflicting_product='rcli';
    $conflicting_product='viperl';
  #conflicts with itself, even if its one of those.
                          "connections will be unavailable until you install the " .
# Constant defined as the largest vmnet that is allowed
# Constant defined as the smallest vmnet that is allowed
# Constants
                   'contact your system administrator for help.' . "\n\n");
	  'contact your system administrator for help.' . "\n\n");
  # contain binaries predominantly built against 3.2.
  # containing $gInstallerMainDB.
# contains a VMX file, make sure this package does not. Finally, there must be enough
# content.
                        'Continuing this install will DOWNGRADE to the latest version by first ' .
                   'Continuing this install will DOWNGRADE to the latest version by first ' .
                   'Continuing this install will first uninstall the currently installed version.' .
                   'Continuing this install will first uninstall this product.  ' .
                        'Continuing this install will REINSTALL by first ' .
                        'Continuing this install will upgrade to the latest version by first ' .
                   'Continuing this install will upgrade to the latest version by first ' .
# Contrary to a popular belief, 'which' is not always a shell builtin command.
  $control = './control.tar';
# Convert a string to its equivalent shell representation
# Converts an integer into a quad-dotted IPv4 address
# Converts an quad-dotted IPv4 address into a integer
  # Convert the previous installer database to our format and backup it
# Copyright 1998-2008 VMware, Inc.  All rights reserved.
  # copy VM to installPath
      # Could be '/' or any other character. Ok.
            $count++;
         $count++;
   $count = 0;
   $count = $count gt 0 ? " $count" : '';
   # count number of packages from this ACE master
   # count on the recorded BUILD_NUMBER in the installdb
countryName= US
		    'cp', 'chown');
# $cProductServiceTable.)
  # -> Create a directory with a name that didn't exist before
# Create a hierarchy of directories with permission 0755
#  Create a list of products that support both a 32bit and a 64bit
# Create a temporary directory
   # create base menu file structure
   # create desktop entry
      create_dir($answer,0);
  create_dir($answer, 0x1);
    create_dir($certLoc, $cFlagDirectoryMark);
    create_dir("/etc/vmware", 0x1);
   create_dir($homedir . '/.local/share/applications', 0);
    create_dir(internal_dirname($dir), $flags);
  create_dir($pkgdir, 1);
  create_dir("$rootdir/bin", 1);
    create_initial_database();
# Create launcher (shortcuts) in the user's home directory.
  # Create the directory
  # Create the directory structure to welcome the restored database
   # Create the K symlink
                        "create the launcher by hand or launch the ACE VM directly.");
# Create the links for VMware's services taking the service name and the
    # Create the parent directory separately so install_dir() can be called on the
   # Create the S symlink
   # creating this one.
   # Crypt-SSLeay-0.55-0.9.7
   # Crypt-SSLeay-0.55-0.9.8
                          "Crypt::SSLeay module.\n\n", 0);
    # current location.  With that info, we can invoke the
# currently installed product, this is used to tell whether we are in
           . ' -czopf ' . shell_string($bkp) . ' '
      # database.
  db_add_answer('BINDIR', $answer);
  db_add_answer('BINDIR', $gRegistryDir);
        db_add_answer('BINDIR', $newbin);
   db_add_answer('BINDIR', "$rootdir/bin");
  db_add_answer('BINDIR', "$rootdir/bin");
  db_add_answer('BUILD_NUMBER', "301548");
  db_add_answer('DOCDIR', $answer);
  db_add_answer($id, $answer);
    db_add_answer('INITDIR', $initdir);
    db_add_answer('INITSCRIPTSDIR', $initscriptsdir);
      db_add_answer('INIT_STYLE', 'chkconfig');
      db_add_answer('INIT_STYLE', 'custom');
      db_add_answer('INIT_STYLE', 'lsb');
    db_add_answer('INSTALL_CYCLE', 'yes');
      db_add_answer($key, $val);
    db_add_answer('LIBDIR', $answer);
  db_add_answer('LIBDIR', $answer);
  db_add_answer('LIBDIR', $libdir);
    db_add_answer('MANDIR', $answer);
    db_add_answer('NETWORKING', 'yes');
      db_add_answer('PRELINK_CONFED', $prelink_file);
      db_add_answer('PULSE_AUDIO_CONFED', $cfgFile);
      db_add_answer('SBINDIR', $answer);
  db_add_answer('SBINDIR', $answer);
      db_add_answer('TERSE', 'yes');
    db_add_answer('UPSTARTJOB', $upstartJobFile);
  db_add_answer('VIXDISKLIBDIR', $libdir);
  db_add_answer('VIXLIBDIR', $answer);
	    db_add_answer('VNETLIB_CONFED', 'yes');
	db_add_answer('VNETLIB_CONFED', 'yes');
    db_add_dir($dir);
    db_add_dir($gRegistryDir);
  db_add_dir($gRegistryDir, 0x0);
    db_add_dir($gStateDir);
    db_add_dir($libdir . '/vmware-vix');
  db_add_file("$certLoc/$certPrefix.crt", $cFlagTimestamp);
  db_add_file("$certLoc/$certPrefix.key", $cFlagTimestamp);
  db_add_file($dst, $flags);
    db_add_file($gInstallerMainDB, 0);
  db_add_file($gInstallerMainDB, 0);
  db_add_file($name, 0);
  db_add_file($name, 0x1);
       db_add_file($pcfile, 0);
         $DBAnswer{$1} = '';
         $DBAnswer{$1} = $2;
      db_append();
    db_append();
  db_append();
  db_clear();
# db_clear
         $DBDir{$1} = '';
         $DBFile{$1} = 0;
         $DBFile{$1} = $2;
      && db_file_in(db_get_answer('INITSCRIPTSDIR') . $service_name)) {
                                        . db_get_answer('BINDIR')
                                       . db_get_answer('BINDIR')
               . db_get_answer('BINDIR') . '/' . $gUninstallerFileName . '".'
	       . db_get_answer('BINDIR') . '/' . $gUninstallerFileName . '".'
      || (db_get_answer('EULA_AGREED') eq 'no')) {
	  db_get_answer('HAL_RESTART_ON_UNINSTALL') eq 'yes') {
      db_get_answer_if_exists('UPSTARTJOB')) {
                   db_get_answer('INITDIR') . '/rc0' . '.d/K'
                   db_get_answer('INITDIR') . '/rc6' . '.d/K'
                   db_get_answer('INITDIR') . '/rc' . $level . '.d/K'
                   db_get_answer('INITDIR') . '/rc' . $level . '.d/S'
      db_get_answer('NESTED') eq 'yes' &&
          db_get_answer($restorePrefix . $restoreStr
             db_get_answer('VMHGFS_CONFED') eq 'yes') {
	    db_get_answer('VMHGFS_CONFED') eq 'yes') {
             db_get_answer('VMMEMCTL_CONFED') eq 'yes') {
	  db_get_answer('VMWGFX_CONFED') eq 'yes' &&
             db_get_answer('VMXNET3S_CONFED') eq 'yes') {
             db_get_answer('VMXNET_CONFED') eq 'yes') {
          db_get_answer('VMXNET_CONFED') eq 'yes') {
        db_is_file_changed($origFile) eq 'yes') {
         $DBLink{$2} = $1;
      db_load();
    db_load();
  db_load();
# db_load
         $DBMove{$2} = $1;
      db_remove_answer('EULA_AGREED');
  db_remove_answer($id);
      db_remove_answer('ISC_COPYRIGHT_SEEN');
  db_remove_answer('TERSE');
  db_remove_dir($dir);
            db_remove_file($file);
      db_remove_file($file);
    db_remove_file($file);
      db_remove_file($origFile);
     db_remove_file($vmwHgfsmntPath);
      db_save();
    db_save();
  db_save();
#      Debian/Ubuntu:   Remove script from Xsession.d.
   # Debian (Xsession.d) - We forgot to simply call db_add_file() after
      deconfigure_vnetlib();
      $default = $answer;
                    . '    default: Automatically answer questions with the '
default_bits		= 1024
default_keyfile 	= $certPrefix.key
                    . ' [[-][-]d[efault]]' . "\n"
	$defaultOpt .= ' --clobber-kernel-modules=' .
      $defaultOpt .= defined($gOption{'prefix'}) ? ' --prefix'
			     $defaultOpt . $rpcOpt . $shortcutOpt . ' --preserve');
# Default-Start: 2 3 5
# Default-Stop: 0 6
  # Default to returning true. Return false only if either of the
	    defined db_get_answer_if_exists('LD_DOT_SO_DOT_CONF_MODIFIED')) {
          defined db_get_answer_if_exists('VMXNET_CONFED') &&
		       . ((defined($doForce) && $doForce) ? ' -f ' : ' ')
	&& defined($doRecursive) && $doRecursive) { # Linux (with $doRecursive)
  defined $subnet && chomp($subnet);
                (defined $subnet && defined $dhcp) ? "=$subnet,$dhcp" : "";
            $del = 1;
         delete $DBAnswer{$1};
         delete $DBDir{$1};
         delete $DBFile{$1};
      delete $$filesToRestoreRef{$origFile};
      delete $gDBAnswer{$1};
    delete $gDBAnswer{$id};
      delete $gDBAnswer{$key};
      delete $gDBDir{$1};
  delete $gDBDir{$dir};
      delete $gDBFile{$1};
  delete $gDBFile{$file};
  # delete our shipped .o file(s).
                           "'depmod -a' and then re-run this configurator.\n\n" ,0);
     depmod_all_kernels();
# depmod_all_kernels
# description: Manages the services needed to run VMware software
# Description: Manages the services needed to run VMware Tools
[Desktop Entry]
            "destination manually by setting the PERLLIB directory.\n\n");
   # Determine greatest version of OpenSSL that's installed.
# Determine if a directory belongs to the tar installer database
# Determine if a file belongs to the tar installer database
  # determine if we use upstart.
# Determines if the system at hand needs to have timer
# Determine what version of FreeBSD we're on and convert that to
# Determine whether SELinux is enabled.
# Determine whether Upstart is supported, and if so, return the path in which
  # Devel only
                           ' "' . $device . '"');
	   $device = $1;
            ($device, $mountpoint, $fstype, $rest) = split;
      ($device, $mountpoint) = split('::::',$candidate_mount);
            ($device, $rest) = split;
            $device =~ s/\\040/\ /g;
                      . $devLinkTable);
                       . ' ' . $devLinkTable . ' > /dev/null 2>&1') == 0) {
                                       . ' >/dev/null 2>&1')) {
	 . '> /dev/null 2>&1');
		       . ' >/dev/null 2>&1');
			       . ' >/dev/null 2>&1');
			    ">/dev/null 2>&1") ? 0 : 1;
    $dhcp = $dhcp eq "yes" ? 1 : 0;
    die 'check_answer(): type ' . $type . ' not implemented :(' . "\n\n";
    die 'get_answer(): type ' . $type . ' not implemented :(' . "\n\n";
      # different name for FreeBSD Tools so that they get stopped correctly.
     # Different systems, different names...
            direct_command(internal_which('umount') .
# directly copied over from the old installer
                                  .' directories (rc0.d/ to rc6.d/)?'
               '" directory.' . "\n\n", 0);
        # directory of the currently running kernel.
    # directory to launch a symlink attack)
			 'dirpath', $rootdir, 0);
# Disables timer based audio scheduling in the default config
# Display a usage error message for the install program and exit
# Display the end-user license agreement
distinguished_name	= req_distinguished_name
                   . 'distribution to see if there is a perl-devel package.  '
    $docdir = $rootdir . '/doc';
  $docdir = $rootdir . '/share/doc';
  $docdir = $rootdir . '/share/doc/vmware-vix-disklib';
                            $docdir . '/vmware-api', './doc');
                            $docdir . '/vmware', './doc');
                            $docdir . '/vmware-vix', 'doc');
                            . 'documentation files?', 'dirpath',
                            . 'documentation files?', 'dirpath', $docdir
                            . ' document pages?', 'dirpath',
    # documents.
# doesn't we'll try to construct it from the acename entry.
       && !DoesOSMatchProduct()) {
### Does the dstDir have enough space to hold srcDir
# Does the package we're about to install have host.vmpl or host-update.vmpl?
### Does the user have permission to write to this directory?
  $dollar = chr(36);
  # Do not timestamp it
    # Don't allow installation of tools-for-solaris unless this is Solaris 9
   # Don't bother checking directories unless initctl is available and
  # Don't display a double slash
   # Don't display a double slash (was bug 14109)
  # Don't display a double slash (was bug 14109)
#Don't encrypt the key
  # Don't forget the vix perl tar ball..
    # -> Don't give write access to other users (so that they can not use this
  # Don't overwrite existing user data
   # don't show EULA when called from RCLI
      # Do the bulk of the file uninstallation. Pass in the (slightly)
  # do this before we remove the files, because we use guestd to
          (dot_version_compare($1, "0.6.0") >= 0)) {
	dot_version_compare ("$shippedModVer", "$systemModVer") > 0) {
         # double check that it really failed before showing the output to
# down the Xs and return a value that shows which string represents a newer
                      . '. Do you want to set those permissions properly?',
		   '.  Do you wish to continue? (yes/no)', 'yesno', 'no') eq 'no') {
                   '  Do you wish to continue? (yes/no)', 'yesno', 'yes') eq 'no') {
                   'Do you wish to continue? (yes/no)', 'yesno', 'yes') eq 'no') {
                 . '.d/S99vmmemctl';
        $dstDir = internal_dirname($dstDir);
    $dstDir = internal_dirname($dstDir);
   # $dst file has been modified, call restorecon to set the
      $dstSpace = $parser[3];
          (-e "$certLoc/$certPrefix.key") &&
      $eject_cmd = internal_which('cdcontrol') . " eject";
      $eject_cmd = internal_which('eject');
	   $eject_failed = $?;
	   $eject_failed = 1;
	      $eject_really_failed = 1;
            # $eject_really_failed ensures this message is not printed
    eject_tools_install_cd_if_mounted();
            } else {
          } else {
         } else {
         else {
        else {
       else {
      } else {
      else {
     else {
    } else {
   } else {
   else {
  } else {
	 } else {
	} else {
    } else { # new install
      } elsif (!acevm_can_install_host_policies()) {
    } elsif (!acevm_checkMasterID($cfgFile)) {
      } elsif (acevm_is_instance_running()) {
      } elsif (/^answer (\S+)/) {
    } elsif (/^answer (\S+)/) {
         } elsif ($arg =~ /=yes/ || $arg =~ /=no/) {
        } elsif ($arg =~ /=yes/ || $arg =~ /=no/) {
  } elsif ($char eq ' ') {
    } elsif (check_disk_space('.', internal_dirname($answer)) < 0) {
    } elsif ("$chkconfig" ne '') {
    } elsif (/^config (\S+)/) {
   } elsif($DBAnswer{$id} eq '') {
    } elsif (db_get_answer_if_exists('VNETLIB_CONFED')) { # post-vnetlib upgrade
  } elsif (defined($gDBAnswer{'INITSCRIPTSDIR'})
    } elsif (defined($gHelper{'kldload'})) { # FreeBSD
    } elsif (defined($gHelper{'kldunload'})) { # FreeBSD
    } elsif (defined($gHelper{'modload'})) { # Solaris
    } elsif (defined($gHelper{'modunload'})) { # Solaris
    } elsif (defined($gHelper{'rmmod'})) { # Linux (otherwise)
      } elsif (/^directory (.+)$/) {
    } elsif (/^directory (.+)$/) {
    } elsif (-d $src_loc) {
    } elsif (-e '/etc/vmware-vix/database' && vmware_product() eq 'vix') {
  } elsif (-f $bindir . "/vmplayer") {
        } elsif (-f "$fp1") {
      } elsif (/^file (.+)$/) {
    } elsif (/^file (.+)$/) {
      } elsif (/^file (.+) (\d+)$/) {
    } elsif (/^file (.+) (\d+)$/) {
     elsif (-f "$initDir/hal") {
  } elsif (-f $prelink_file) {
      } elsif ($gDBMove{$MovedFile} =~ /\.new$/) {
  } elsif ($gManifest{'validTo'} > 0 && $gManifest{'validTo'} < $now) {
      } elsif ("$id" eq 'VNET_HOSTONLY') {
      } elsif ("$id" eq 'VNET_HOSTONLY_HOSTADDR') {
      } elsif ("$id" eq 'VNET_HOSTONLY_NETMASK') {
      } elsif ("$id" eq 'VNET_INTERFACE') {
      } elsif ("$id" eq 'VNET_SAMBA_MACHINESID') {
      } elsif ("$id" eq 'VNET_SAMBA_SMBPASSWD') {
  } elsif (!is_root()) {
         } elsif (lc($arg) =~ /^--clobber-kernel-modules=([\w,]+)$/) {
	 } elsif (lc($arg) =~ /^(-)?(-)?nested$/) {
         } elsif (lc($arg) =~ /^(-)?(-)?(no-create-shortcuts)$/) {
         } elsif (lc($arg) =~ /^-?-?prefix=(.+)/) {
      } elsif (/^link (\S+) (\S+)/) {
    } elsif (/^link (\S+) (\S+)/) {
    } elsif (/^modified (\S+)/) {
      } elsif ($module->{'module'}->VERSION gt $module->{'version'}) {
      } elsif ($module->{'module'}->VERSION lt $module->{'version'}) {
      } elsif (/^move (\S+) (\S+)/) {
    } elsif (/^move (\S+) (\S+)/) {
    } elsif (not rmdir($dir)) {
   } elsif (opendir CDROMDIR, $mountpoint) {
      } elsif ($product_version == $installed_version) {
    } elsif ($release >= 5.0) {
    } elsif ($release >= 5.3) {
      } elsif (/^remove_answer (\S+)/) {
    } elsif (/^remove_answer (\S+)/) {
      } elsif (/^remove_answer\s+$key\s*$/) {
      } elsif (/^remove_directory (.+)$/) {
    } elsif (/^remove_directory (.+)$/) {
      } elsif (/^remove_file (.+)$/) {
    } elsif (/^remove_file (.+)$/) {
      } elsif ($state eq 'inside') {
    } elsif ($vers == 1) {
    } elsif ($version == 2) {
  } elsif( $version == 2 ) {
    } elsif ($version == 3) {
  } elsif ( $version == 3 ) {
   } elsif ($versions_A[$index] =~ /\d+/ && $versions_B[$index] =~ /\w+/) {
   } elsif ($versions_A[$index] =~ /\w+/ && $versions_B[$index] =~ /\d+/) {
  } elsif (vmware_product() eq 'acevm') {
    } elsif (vmware_product() eq 'rcli') {
  } elsif (vmware_product() eq 'rcli') {
         } elsif (vmware_product() eq 'tools-for-freebsd') {
      } elsif (vmware_product() eq 'tools-for-freebsd') {
  } elsif (vmware_product() eq 'tools-for-freebsd') {
   } elsif (vmware_product() eq 'tools-for-freebsd' and
    } elsif (vmware_product() eq 'tools-for-linux' ||
  } elsif (vmware_product() eq 'tools-for-linux' ||
  } elsif (vmware_product() eq 'tools-for-linux') {
   } elsif (vmware_product() eq 'tools-for-solaris') {
  } elsif (vmware_product() eq 'tools-for-solaris') {
    } elsif (vmware_product() eq 'viperl') {
  } elsif (vmware_product() eq 'viperl') {
    } elsif (vmware_product() eq 'vix') {
  } elsif (vmware_product() eq 'vix') {
    } elsif (vmware_product() eq 'vix-disklib') {
  } elsif (vmware_product() eq 'vix-disklib') {
    } elsif (vmware_product() eq 'ws') {
  } elsif (vmware_product() ne 'acevm') {
emailAddress            = ssl-certificates\@vmware.com
# Emulate a simplified basename program
# Emulate a simplified dirname program
# Emulate a simplified ls program for directories
# Emulate a simplified sed program
Encoding=UTF-8
encrypt_key             = no
### END INIT INFO
# END_OF_CONFIG_DOT_PM
        # end-of-file.
# END OF THE LIBRARY FUNCTIONS
# END OF THE SECOND LIBRARY FUNCTIONS
# END_OF_UTIL_DOT_PL
# END UNINSTALLER SECTION
          . ' End User License Agreement to continue.'
   # Ensure we have a unique backup suffix for this file.
  # Ensure you send the terminating RPC message before you
      # entry from /etc/fstab, and instead mounting/unmounting dynamically
                 . $ENV{'CC'} . '".' . "\n\n", 0);
   $ENV{'PATH'} = '/bin:/usr/bin:/sbin:/usr/sbin';
          && ($ENV{'VMWARE_DEBUG'} eq 'yes')) {
             '-e perl_inc |')) {
      # equivalent:
    error('');
  error('');
      error("$0: can't open EULA file: $!\n");
      error("$0: can't open $gHelper{'more'}: $!\n");
         error("An incompatible VMware product is already installed on this " .
        error("An incompatible VMware product is already installed on this " .
      error("ASSERT: Failed to determine my service name.\n") unless defined $service;
    error('Bad character detected in dot_version_compare');
        error ('Cannot get install directory. Unable to contine.' . "\n\n");
     error ('Cannot install this package because this ACE appears to be ' .
         error ('Cannot uninstall because this ACE appears to be running. ' .
         error ('Cannot uninstall because this ACE has been copied.' . "\n\n");
         error('Cannot uninstall because this ACE has been moved from ' .
                 error("Can't find home directory, unable to continue.\n\n");
     error($chk_msg);
      error("Could not open $source\n");
    error("Could not read $shippedMod\n");
    error('Failed. Can\'t find vmx file for this package' . "\n\n");
	     error("Failed to remove the following packages:\n\n" .
      error('Failure' . "\n\n");
    error('Failure' . "\n\n");
      error('Invalid default answer!' . "\n");
    error ('LIBDIR must be defined before prelink_fix is called');
        error($lmsg . ".\n");
        error($msg);
     error('Please re-run this program as the super user.' . "\n\n");
            error("The Perl module we were about to install, " . $module->{'module'}
    error('This ACE package does not contain a VMware Player installer. You must ' .
            error('This package contains a host policies file, but there is already ' .
      error ('This package installed host policies and must be uninstalled by a ' .
            error ('This package specifies host policies and must be installed by a ' .
    error('This program can install VMware Player installer for you, but you must ' .
  error('This program must be named ' . $cInstallerFileName . ' or '
         error('This setup program cannot continue. This ACE can only be ' .
      error('This ' . vmware_product_name()
      error('"' . $tmp . '" is not a directory.' . "\n\n");
      error('"' . $tmp . '" should be writable and executable.' . "\n\n");
    error('Unable to change the access rights of the file ' . $file . '.' . "\n\n");
        error('Unable to continue.' . "\n\n");
      error('Unable to continue.' . "\n\n");
    error('Unable to copy the source file ' . $src . ' to the destination file ' . $dst . '.' . "\n\n");
    error('Unable to create symbolic link "' . $name . '" pointing to file "'
    error('Unable to create the directory ' . $file . '.' . "\n\n");
      error("Unable to determine share_dir.  You may set the destination " .
      error("Unable to determine the Perl module directory.  You may set the " .
       error('Unable to determine where the ' . vmware_longname()
     error("Unable to extract VIPerl installation.\n\n");
      error("Unable to finalize ACE, installation failed.\n\n")
    error('Unable to find the answer ' . $id . ' in the installer database ('
      error('Unable to find the tar installer database file (' .
      error('Unable to find the ' . vmware_product_name() .
    error('Unable to find the VMware VmPerl Scripting API. '
      error('Unable to get the access rights of destination directory "' . $dst_dir . '".' . "\n\n");
    error('Unable to get the access rights of source file "' . $src . '".' . "\n\n");
      error('Unable to get the last modification timestamp of the destination file ' . $file . '.' . "\n\n");
     error("Unable to install VIPerl.\n\n");
      error("Unable to look up VIX libdir.\n");
    error("Unable to open $certCnf to create SSL certificate.")
      error("Unable to open kernel module dependency file\n.");
    error('Unable to open the installer database ' . $gInstallerMainDB . ' in append-mode.' . "\n\n");
    error('Unable to open the MANIFEST file in read-mode.' . "\n\n");
      error('Unable to open the tar installer database ' . $gInstallerMainDB
    error('Unable to open the tar installer database ' . $gInstallerMainDB
      error('Unable to remove the file "' . $file . '".' . "\n");
    error('Unable to remove the temporary directory ' . $dir . '.' . "\n\n");
        error('Unable to stop ' . vmware_product_name()
          error("Unable to uninstall VIPerl.\n\n");
      error('Unable to write into ' . $dst_dir . "\n\n");
      error("Unable to write VIX libdir to configuration file.\n");
      error("Uninstall failed.  Please correct the failure and re run the install.\n\n");
        error ('User aborted install.');
            error "User canceled install.\n";
      error "User canceled install.\n";
              error('User quit install' . "\n\n");
      error("VIPerl requires Perl version 5.8 or later.\n\n");
       error(vmware_longname() . ' will not install on the operating system you are ' .
            error('VMware Player installation failed.  Please install manually then '.
        error('VMware Tools cannot be installed, since they have already ' .
        error('VMware Tools for Solaris is only supported on Solaris 10 and later.'
            error('You cannot install ' .
           error('You have selected to not install VMware Tools for Solaris on '
   # Escape parameters, then join by a single space.
# /etc/vmware/config.  Call uninstall on the whole tree.
                    /etc/X11/XF86Config /etc/X11/XF86Config-4)) {
# EULA if it's not an official build.
    $eula =~ s/(.{50,76})\s/$1\n/g;
      eval "require $module->{'module'}";
     # Even if close fails, make sure to call restorecon.
      # Even if close fails, make sure to call restorecon on $dst.
# Executes a VMware services script, determined by locations database contents
# Execute the command passed as an argument
Exec=$vmplayerFile "$vmx"
			 'existdirpath', $rootdir, 0);
# existing installed product to be removed (as in for an up/downgrade
  # existing, non-empty directories with permissions stored in the archive)
      exit 0;
    exit 0;
      exit 1;
  exit 1;
  $exitValue = $? >> 8;
#                       (ex: start, stop, status vm).
    # extract a path to the untarred tarball installer from our
                   . " -F alias $modPath 2>/dev/null";
# file for PulseAudio
	 $fileModified = 1;
        file_name_exist($$fileToRestore{$origFile})) {
	  file_name_exist('./VM/host-update.vmpl'));
   $file . '.old.N, where N is a number. Please delete some of them.' . "\n\n", 0);
  #     file, parse the config file to find the xinet.d directory.  Or parse if
  $Files[0] = db_get_answer('INITSCRIPTSDIR') . '/vmmemctl';
# files containing references to these modules have been restored then simply
    # 'file' statement for the main database file
  # files we install.  For the timebeing until vmis obsoletes this code,
        $fileToRestore{db_get_answer($restorePrefix . $restoreStr)} =
      %fileToRestore = db_get_files_to_restore();
      filter_out_bkp_changed_files(\%fileToRestore);
### Finalize this ACE package so it can be used.
  finalize_vix_install();
  # Finally check the module name.
# Find a suitable backup name and backup a file
  # Finds the location of the initscripts dir
    # find them, suggest to the user how they can install the files.
# find the vix tar package within the workstation distribution tree and install
### Find the vmx file for this package.
  find_vix_tar();
  # First check for PCI IDs/Aliases
#  first matching line on success
  # First off, only a few products even have "mismatches", i.e. can possibly conflict.
                     . 'first time, you need to configure it by invoking the'
  # First, write BINDIR. It's the same directory as the one
# flags:
# flags are forwarded to db_add_file()
# flags are forwarded to install_file calls and recursive install_dir calls
  @fn = grep(!/^\.\.?$/, readdir(LS));
     folders such as man, bin, doc, lib, etc. will be placed.', 'PREFIX', 'dirpath',
                                        . 'following command: "'
                                       . 'following command: "'
                     . ' following command: "' . db_get_answer('BINDIR')
                . "following installed Perl modules:"
  # following is true:
  for (;;) {
  for(;;) {
  # Force a flush after every write operation.
		    . '    Forcefully removes any VMware related modules '
   # Force the path to reduce the risk of using "modified" external helpers
	foreach $aline (@lines) {
   # For each architecture, first collect a list of mounted cdroms.
   foreach (@argv) {
  foreach $dir (sort {length($b) <=> length($a)} keys %gDBDir) {
  foreach $File (@Files) {
   foreach $file (glob("$homedir/.local/share/applications/*.desktop")) {
  foreach $file (internal_ls($src_dir)) {
  foreach $file (keys %gDBFile) {
  foreach $File (qw(/etc/modules.conf /etc/conf.modules /etc/XF86Config
    foreach $id (keys %gDBAnswer) {
    foreach $line (<FH>) {
  foreach $line (@modInfoOutput) {
    foreach $line (<SHIPPED_MOD_VER>) {
    foreach $line (<SYSTEM_MOD_VER>) {
  foreach $LinkedFile (keys %gDBLink) {
   # For each mounted cdrom, check if it's vmware guest tools installer,
  foreach $MovedFile (keys %gDBMove) {
  foreach my $arch (qw(32 64)) {
   foreach my $candidate_mount (@candidate_mounts) {
      foreach my $entry ( @dircontents ) {
   foreach my $file (split(':', $list)) {
  foreach my $indx (0 .. ($max - 1)) {
      foreach my $instPkgName (<OUTPUT>) {
   foreach my $kRel (internal_ls('/lib/modules/')) {
  foreach my $lib (split(/\n/, $ldd_out)) {
   foreach my $line (<BLOCK_IN>) {
   foreach my $line (direct_command("ldconfig -v 2> /dev/null")) {
   foreach my $line (<ORGPCF>) {
      foreach my $line (<OUTPUT>) {
    foreach my $mod (@cKernelModules) {
	  foreach my $mod (@cKernelModules) {
	     foreach my $modDep ($cKernelModuleDeps{"$mod"}) {
   foreach my $module (@install) {
   foreach my $module (@modules) {
      foreach my $mountline (@mountlines) {
            foreach my $outputline (@output) {
    foreach my $path ("$gRegistryDir/networking.*", "$gRegistryDir/vmnet*",
	 foreach my $pkgName (@pkgList) {
            foreach my $testSuffix (".conf") {
    foreach $opt (@setOption) {
  foreach $origFile (keys %$filesToRestoreRef) {
  foreach $origFile (keys %$fileToRestore) {
      foreach $patchKey (@patchKeys) {
      foreach $path (@paths) {
  foreach $program (@programList) {
  foreach $program ('tar', 'perl', 'make', 'touch') {
    foreach $restoreStr (split(/:/, db_get_answer($restoreBackList))) {
  foreach $runlevel ('0', '1', '2', '3', '4', '5', '6', 'S', 's') {
    foreach $state_file (internal_ls($bkp_dir . $gStateDir)) {
  foreach $testdir (@rcDirList) {
   foreach (@xdmcfgs) {
# For files modified with block_append(), rather than restoring a backup file
  # For FreeBSD 5.0, we use binaries from the sbin32-5 directory.
  # For FreeBSD 6.0 and higher (which shipped new versions of libc) we use the
  for ($i = 0; $i < 100; $i++) {
  for ($i = 0; $i < 4; $i++) {
  for ($i = 0; $i < length($input); $i++) {
  for ($i = 3; $i >= 0; $i--) {
    for ($i = $gMinVmnet; $i < $gMaxVmnet; $i++) {
# for it and return the path or '' if we can't find it.
# format of the returned hash:
      for my $module (@lower) {
  # For releases between 5.3 and 6.0 (which were the first to ship with 64-bit
                                        . ' for the first time, you need to '
      # For the fix to bug 304998, we are removing the hard-coded vmhgfs
      # For the rpm3|tar3 format, a number of keywords were removed.  In their
    # For the rpm4|tar4 format, two keyword were added. We add them here if
# for the tar4|rpm4 upgrade
         # For unknown reasons, eject can succeed, but return error, so
      $found = 1;
               $foundit = 1;
         $foundit = 1;
         # Freebsd doesn't auto unmount along with eject.
  #   - 'from' is valid and we're not there yet.
  #     from the init.d script somewhere.  If they use init.d.
      # from the tools init script at startup/shutdown respectively. This
	   $fstype = $3;
   $fullbin = $path . '/' . $bin;
# function
#            function checked for and found (if any).
    $gACEVMUpdate = (defined $gManifest{'update'}) && ($gManifest{'update'} == 1);
$gAnswerSize{'authdport'} = 5;
$gAnswerSize{'binpath'} = 20;
$gAnswerSize{'dirpath'} = 20;
$gAnswerSize{'existdirpath'} = 20;
$gAnswerSize{'initdirpath'} = 15;
$gAnswerSize{'initscriptsdirpath'} = 15;
$gAnswerSize{'username'} = 8;
$gAnswerSize{'yesno'} = 3;
$gCheckAnswerFct{'authdport'} = \&check_answer_authdport;
$gCheckAnswerFct{'binpath'} = \&check_answer_binpath;
$gCheckAnswerFct{'dirpath'} = \&check_answer_dirpath;
$gCheckAnswerFct{'existdirpath'} = \&check_answer_existdirpath;
$gCheckAnswerFct{'initdirpath'} = \&check_answer_initdirpath;
$gCheckAnswerFct{'initscriptsdirpath'} = \&check_answer_initscriptsdirpath;
$gCheckAnswerFct{'username'} = \&check_answer_username;
$gCheckAnswerFct{'yesno'} = \&check_answer_yesno;
      $gConfData{$1} = $2;
      $gConfFlag = $gRegistryDir . '/not_configured';
  $gConfFlag = $gRegistryDir . '/not_configured';
    $gConfigFile = '/etc/vmware/config';
    $gConfig = new VMware::Config;
    $gConfig->readin($gConfigFile);
  $gConfig->remove('vix.libdir');
  $gConfig->set("vix.libdir", $libdir);
					  '/' . $gConfigurator) .
                                        . '/' . "$gConfigurator" . '". Do you '
                                       . '/' . $gConfigurator . '". Do you want this '
                     . '/' . "$gConfigurator" . '"' . "\n\n", 0);
    $gConfigurator = 'vmware-config-api.pl';
    $gConfigurator = 'vmware-config.pl';
    $gConfigurator = 'vmware-config-tools.pl';
    $gConfigurator = 'vmware-config-vix-disklib.pl';
    $gConfigurator = 'vmware-config-vix.pl';
      $gDBAnswer{$1} = '';
      $gDBAnswer{$1} = $2;
  $gDBAnswer{$id} = $value;
      $gDBConfig{$1} = 'config';
      $gDBDir{$1} = '';
  $gDBDir{$dir} = '';
      $gDBFile{$1} = 0;
      $gDBFile{$1} = $2;
    $gDBFile{$file} = 0;
      $gDBFile{$file} ne $statbuf[9]) {
    $gDBFile{$file} = $statbuf[9];
      $gDBLink{$2} = $1;
      $gDBMove{$2} = $1;
      $gDBUserModified{$1} = 'modified';
            $gDBUserModified{$file} = 'modified';
#      gdm:             None.  (gdm mechanism used install_symlink, so that will be
       # Generic spots for the vmware-user/toolbox wrapper
        && get_answer('Current access permissions on directory "' . $dst_dir
    # (get_answer, get_persistent_answer) routines into util.pl eventually.
# Get a valid non-persistent answer to a question
# Get a valid persistent answer to a question
      get_initial_database();
  get_initscriptsdir();
         # get_installed_version() slightly modified, but this semantic of
      # Get the file names before they disappear from the database.
# Get the installed directory for an already installed ACE package that we will update.
# Get the installed kind of VMware
# Get the installed version of VMware
# Get the install (non-update) directory for this ACE package. If the directory
  # get the src usage
        $gFirstCreatedDir = $dstDir;
      $gFirstCreatedDir = $dstDir;
  $gHelper{'chkconfig'} = internal_which('chkconfig');
  $gHelper{'gcc'} = '';
          $gHelper{'gcc'} = DoesBinaryExist_Prompt('gcc');
      $gHelper{'gcc'} = internal_which('egcs');
    $gHelper{'gcc'} = internal_which($ENV{'CC'});
    $gHelper{'gcc'} = internal_which('gcc');
        $gHelper{'gcc'} = internal_which('kgcc');
  $gHelper{'insserv'} = internal_which('insserv');
                                  $gHelper{'kldstat'} : $gHelper{'lsmod'})) =~
    $gHelper{'more'} = '';
      $gHelper{'more'} = DoesBinaryExist_Prompt('more');
        $gHelper{'more'} = join(' ', @tokens); # This is _already_ a shell string
      $gHelper{'more'} = shell_string($gHelper{'more'}); # Save it as a shell string
      $gHelper{$program} = DoesBinaryExist_Prompt($program);
           $gHelper{'vmware-acetool'} = acevm_find_acetool();
      $gHelper{'vmware-acetool'} = acevm_find_acetool();
      $gHelper{'vmware-config.pl'} = internal_dirname($gHelper{'vmware-acetool'}) .
    $gHelper{"vmware"} = DoesBinaryExist_Prompt("vmware");
      $gInstallerMainDB = $gRegistryDir . '/locations';
  $gInstallerMainDB = $gRegistryDir . '/locations';
             . $gInstallerMainDB . ' in read-mode.' . "\n\n");
      $gInstallerMainDB . ')' . "\n\n");
  $gInstallerMainDB = $OldInstallerDB;
  $gInstallerMainDB = $TmpMainDB;
          . $gInstallerMainDB . '). You may want to re-install '
      $gInstallerObject = $gRegistryDir . '/installer.sh';
  $gInstallerObject = $gRegistryDir . '/installer.sh';
    $gIsUninstallerInstalled = 0;
   $gIsUninstallerInstalled = 1;
  $gIsUninstallerInstalled = 1;
# Given a product version string ala 'VMware Server X.X.X build-000000', break
            # Give pcn its claim on pci1022,2000 back
                    $globallibdir . '/' . $shared_object);
# Global variables
                                              $gManifest{'acename'}) .
    %gManifest = acevm_parse_manifest($dirname . '/' . $cManifestFilename);
    ($gManifest{'hasVM'} ? '/ACE Resources' : '');
    $gManifest{'validFrom'} = 0;
    $gManifest{'validTo'} = 0;
              $gNonVmwareModules{$result} = "$modPath";
	  $gOption{'clobberKernelModules'};
           $gOption{'clobberKernelModules'} = "$1";
           $gOption{'create_shortcuts'} = 0;
  $gOption{'create_shortcuts'} = 1;
      $gOption{'default'} = 0;
    $gOption{'default'} = 0;
   $gOption{'default'} = 0;
  $gOption{'default'} = 0;
           $gOption{'default'} = 1;
      $gOption{'default'} == 1) {
  $gOption{'default'} = $old_default;
      $gOption{'default'} = $previous;
   $gOption{'default'} = $previous;
  $gOption{'default'} = $previous;
    $gOption{'default'} = $tmp;
  $gOption{'eula_agreed'} = 0;
  $gOption{'nested'} = 0;
           $gOption{'nested'} = 1;
                     . '=' . $gOption{'prefix'} : '';
           $gOption{'prefix'} = $1;
  $gOption{'upgrade'} = 0;
           $gOption{'upgrade'} = 1;
  $gOption{'ws-upgrade'} = 0;
	$gOption{'ws-upgrade'} = 1;
                 . ' got changed or overwritten between the time '
    $gPlayerBundle = 'VMware-Player.' . (is64BitUserLand() ? 'x86_64' : 'i386') .
      $gRegistryDir= $answer;
    $gRegistryDir = $dirname;
    $gRegistryDir = '/etc/vmware';
    $gRegistryDir = '/etc/vmware-api';
    $gRegistryDir = '/etc/vmware-rcli';
    $gRegistryDir = '/etc/vmware-tools';
    $gRegistryDir = '/etc/vmware-viperl';
    $gRegistryDir = '/etc/vmware-vix';
    $gRegistryDir = '/etc/vmware-vix-disklib';
      $gStateDir = $gRegistryDir . '/state';
  $gStateDir = $gRegistryDir . '/state';
        . $gUninstallerFileName . '.' . "\n\n");
    $gUninstallerFileName = 'vmware-uninstall-ace.pl';
    $gUninstallerFileName = 'vmware-uninstall-api.pl';
    $gUninstallerFileName = 'vmware-uninstall.pl';
    $gUninstallerFileName = 'vmware-uninstall-rcli.pl';
    $gUninstallerFileName = 'vmware-uninstall-tools.pl';
    $gUninstallerFileName = 'vmware-uninstall-viperl.pl';
    $gUninstallerFileName = 'vmware-uninstall-vix-disklib.pl';
    $gUninstallerFileName = 'vmware-uninstall-vix.pl';
  `gunzip vmware-viperl.tar.gz 2> /dev/null`;
              $gVmwareInstalledModules{$result} = "$modPath";
                    'gzip', 'du', 'df', 'isainfo');
  # hal daemon instead of the init scripts.  Check for /etc/init to
	$halScript = "$initDir/hal";
	$halScript = "$initDir/haldaemon";
# Handle an update to a packaged ACE vm.
# Handle the installation and configuration of a packaged ACE vm.
# Handle the installation and configuration of vmware's perl module
  # Handle vmware-hgfsmounter in a special manner so it will work with
             . ' has been detected.' . "\n\n", 0);
# Hashes to track vmware modules.
# Hash of multi architecture supporting products
# Hash of product conflicts
# Has the uninstaller been installed?
	  # havent been configured yet when the vmware-tools service
      # have to do anything
      # have to do much
      # have to do too much
# Helper function to create SSL certificates
    # Here is where we check (if necessary) for file ownership in this folder to actually "work"
  # his/her previous answers but we do want to make sure the directory
  # his/her previous answers.  Even though this is asking for a directory,
                   "home directory can't be found.\n\n";
Icon=vmware-acevm
            # I don't think there are actually ever comments in /etc/mnttab.
     if (0 == system(shell_string($gHelper{'chkconfig'}) . ' '
       if (0 == system(shell_string($gHelper{'chkconfig'}) . ' --del ' . $trim_service_name)) {
     if (0 == system(shell_string($gHelper{'insserv'}) . ' '
        if (0 == system(shell_string($gHelper{'insserv'}) . ' -r '
  if (@_ < 1) {
      if ("$1" eq $mod) {
  if ('301548' != 0) {
   if ($] < 5.008) {
      if (!($? >> 8 eq 0)) {
  if (!($? >> 8 eq 0)) {
    # If ace.crt exists, install it next to host policies. ace.crt
      if (!acevm_check_valid_date()) {
    if (acevm_find_vmx($answer) ne '' && $gManifest{'hasVM'}) {
         if (acevm_install_vmplayer()) {
    if (acevm_is_instance_running()) {
      if (acevm_package_has_host_policies()) {
  if (acevm_package_has_host_policies()) {
      if ($aIno != $bIno || $aDev != $bDev) {
      # if a nested install, it is the responsibility of the parent to
           if ( $ans eq 'no' ){
  if (($answer =~ /^\d+$/) && ($answer > 0) && ($answer < 65536)) {
      if ($answer eq '') {
    if ($answer eq '' && !$gOption{'default'}) {
      if ($answer eq 'no')
  if ($answer eq 'no') {
    if ($answer eq 'yes') {
  if ( $answer =~ m/init.d/ ) {
      if (/^answer (\S+) (.+)$/) {
    if (/^answer (\S+) (.+)$/) {
      if (/^answer\s+$key\s+(.+)$/) {
    if ($answer && ($space = check_disk_space($srcDir, $answer)) < 0) {
     if ($#ARGV > -1) {
    if ($#ARGV > -1) {
    if ("$arr1[$indx]" ne "$arr2[$indx]") {
  if ($basename ne 'bin') {
  if ( $binfile eq '' ){
  if ( $binfile eq 'UNKNOWN' ){
  if ( $binfile eq 'UNKNOWN' or $binfile eq '' ){
    if (block_insert($prelink_file, '^ *-b', $cMarkerBegin,
  if (block_remove($cServices, $tmp, $cMarkerBegin, $cMarkerEnd) >= 0) {
        if (block_remove($loader_conf, $tmp, $cMarkerBegin, $cMarkerEnd) >= 0) {
  if (certificateExists($certLoc, $openssl_exe, $certPrefix)) {
    if (($cfgFile = acevm_find_vmx($answer)) eq '') {
  if ($char eq "\n") {
        if (check_answer_initdirpath($initdir, 'default') eq '') {
      if (check_answer_initdirpath($initdir, 'default') eq '') {
    if (check_answer_initdirpath($initdir, 'default') eq '') {
  if (check_answer_initdirpath($initdir, 'default') eq '') {
    if (check_answer_initscriptsdirpath($initscriptsdir, 'default') eq '') {
  if (check_answer_initscriptsdirpath($initscriptsdir, 'default') eq '') {
      if (!check_dir_writeable($answer)) {
      if (check_disk_space('.', internal_dirname($answer)) < 0) {
   if (check_for_xen()) {
  if (check_is_running('inetd')) {
  if (check_is_running('xinetd')) {
      if (check_mountpoint_for_tools($mountpoint)) {
  if (chmod($mode, $file) != 1) {
  if ($clear_db == 1) {
   if (compare_dot_version_strings('0.9.8', $installed_ssl_version) <= 0) {
      if (compare_dot_version_strings($installed_ssl_version, $1) <= 0) {
  if (compare_version_strings($installed_version, $product_version) > 0) {
  if ($Config::Config{archname} =~ /^(x86_64|amd64)-/) {
  if (-d $answer) {
    if (db_file_in($origFile) && !-l $origFile &&
    if (db_file_ts($file)) {
        if (db_file_ts($file) != $statbuf[9]) {
  if (db_get_answer_if_exists('NESTED') &&
    if (db_get_answer_if_exists('TERSE')) {
   if (db_get_answer_if_exists('UPSTARTJOB')) {
    if (!db_get_answer_if_exists('VNETLIB_CONFED') && $gOption{'ws-upgrade'}) {
  if (-d $bkp_dir . $gStateDir) {
  if (-d $dir) {
    if (defined($addr) and defined($mask)) {
   if (defined($chk_msg)) {
  if (defined($cmd)) {
  if (!defined(db_get_answer_if_exists('BINDIR'))) {
      if (defined db_get_answer_if_exists('BUILD_NUMBER')) {
      if (defined db_get_answer_if_exists('HAL_RESTART_ON_UNINSTALL') and
	if (defined db_get_answer_if_exists('LD_DOT_SO_DOT_CONF_ADDED_FILE') or
	  if (defined db_get_answer_if_exists('LD_DOT_SO_DOT_CONF_MODIFIED')) {
  if (defined db_get_answer_if_exists($restoreBackList)) {
      if (defined db_get_answer_if_exists($restorePrefix . $restoreStr)) {
         if (defined db_get_answer_if_exists('VMHGFS_CONFED') &&
	if (defined db_get_answer_if_exists('VMHGFS_CONFED') &&
         if (defined db_get_answer_if_exists('VMMEMCTL_CONFED') &&
      if (defined db_get_answer_if_exists('VMWGFX_CONFED') &&
         if (defined db_get_answer_if_exists('VMXNET3S_CONFED') &&
         if (defined db_get_answer_if_exists('VMXNET_CONFED') &&
  if (defined $dhcp) {
    if (defined($doSilent) && $doSilent) {
  if (defined $eclipse_dir) {
  if (defined($ENV{'CC'}) && (not ($ENV{'CC'} eq ''))) {
    if (defined($ENV{'PAGER'})) {
   if (defined $ENV{'SUDO_USER'}) {
      if (   defined($ENV{'VMWARE_DEBUG'})
  if (!defined $gConfig) {
  if (defined $gConfigFile) {
  if (defined($gDBAnswer{$id})) {
          if (defined($gDBConfig{$file})) {
    if (defined($gDBConfig{$file}) && defined($gDBUserModified{$file})) {
  if (defined $gDBFile{$file} && $gDBFile{$file} ne '0' &&
    if (defined($gHelper{'insmod'})) { # Linux
    if (defined($gHelper{'modprobe'})
    if (defined($gHelper{'modprobe'})) { # Linux
  if (!defined($gManifest{'validFrom'})) {
  if (!defined($gManifest{'validTo'})) {
              if (defined $gNonVmwareModules{$result}) {
      if (defined $gOption{'clobberKernelModules'}) {
   if (! defined($gOption{'prefix'})) {
  if (defined($gOption{'prefix'})) {
       if (!defined($gOption{'upgrade'}) || $gOption{'upgrade'} == 0) {
  if (!defined($gOption{'upgrade'}) || $gOption{'upgrade'} == 0) {
      if (defined($hostaddr) && defined($netmask)) {
    if (!defined($id)) {
  if (!defined($libdir)) {
  if (defined($libdir)) {
   if (!defined($markerBegin) || !defined($markerEnd)) {
    if (defined $modName) {
        if (defined $modPath) {
  if (!defined($multi_arch_products{vmware_product()})) {
  if (!defined $name) {
      if (defined($newbin)) {
  if (defined $prelink_file) {
  if (!defined($reserved)) {
      if (defined($statbuf[9])) {
         if (defined($syncGroup{$module->{'syncGroup'}}) &&
   if (defined($x11Base)) {
  if (-d '/etc/init' and $servicePath ne '') {
  if (! -d "/etc/vmware") {
            if ($device =~ /vmwaretools$/) {
    if (-d $globallibdir) {
  if ((! -d $globallibdir) && (! -d '/usr' . $globallibdir)) {
  if (-d $gRegistryDir) {
  if (-d internal_dirname($dest)) {
    if (!direct_command('find ' .  $gRegistryDir . '  -type f -o -type l')) {
  if (direct_command('LANG=C ' .
    if (direct_command(shell_string($gHelper{'isainfo'}) . ' -b') =~ /64/) {
            if (direct_command(shell_string($gHelper{'uname'}) . ' -r') =~ 5.9) {
      if (! $dir_existed)
  if ($dir_existed) {
         if ( -d $jobPath ) {
  if (-d './man') {
      if (dot_version_compare($verStr, "0.9.19") ge 0) {
    if (-d '/usr' . $globallibdir) {
  if (-d 'vmware-vix/api' ) {
  if ( -d $xinetd_dir ) {
    if (-e $cConfFlag) {
  if (! -e $certLoc) {
  if (-e $cRegistryDir . '-' . $conflicting_product . '/locations') {
      if (! -e db_get_answer('BINDIR')) {
      if (-e $dspMarkerFile) {
    if (-e '/etc/vmware/database' && (vmware_product() eq 'ws' ||
    if (-e $gDBMove{$MovedFile}) {
  if (!-e $gPlayerBundle) {
  if ( -e $inetd_conf ) {
  if (-e $inetd_restart) {
   if ( -e $InstallDB ) {
	      if ($eject_cmd eq '') {
	 if ($eject_cmd ne '') {
         if ($eject_failed && check_mountpoint_for_tools($mountpoint)) {
      if (-e "./lib/$module->{'path'}/lib") {
      if (-e "./lib/$module->{'path'}/share") {
    if (-e $MovedFile) {
            if ($entry =~ /vmware-freebsd-tools\.tar\.gz$/) {
            if ($entry =~ /VMwareTools-.*\.tar\.gz$/) {
  if (!-e $OldInstallerDB) {
  if (-e $OldInstallerDBOld) {
  if (! $? eq 0) {
         if ($_ eq $begin) {
         if ($_ eq $end) {
          if ($_ eq "\n") {
  if (-e $vixTarFile) {
  if (-e $xinetd_restart) {
  if (-f $bindir . "/vmware") {
    if ((-f $bin) && (-x $bin)) {
      if (-f $_ && block_match($_, "!$chompedMarkerBegin")) {
    if (-f $cInstallerMainDB) {
      if (-f $depmodPath) {
   if (-f $dotdScript && !db_file_in($dotdScript)) {
      if (-f "/etc/vmware-viperl/locations") {
      if (-f $file) {
        if (-f "$fp2") {
   if ((-f $fullbin) && (-x $fullbin)) {
    if ($file =~ /^.+\.$/) {
  if (file_check_exist($dst)) {
  if (file_check_exist($name)) {
      if ($file =~ /$gManifest{'aceid'}(.)*\.desktop$/) {
   if ($fileModified) {
    if (file_name_exist($ace_crt_file)) {
  if (file_name_exist($answer)) {
  if (! file_name_exist($answer . '/vmrun')) {
  if (file_name_exist($file)) {
    if (file_name_exist($File)) {
      if (file_name_exist($gConfFlag)) {
    if (file_name_exist("$gHostVmplDir/host.vmpl")) {
  if (file_name_exist("$gRegistryDir/host.vmpl")) {
  if (file_name_exist($hostvmpl)) {
    if (file_name_exist($origFile) &&
    if ($File =~ /\S+\/dualconf(\.sh)?$/) {
    if ($File !~ /\/tmp\S+/) {
     if (-f "$initDir/haldaemon") {
  if ($flags & 0x1) {
    if ($force eq '1') {
	   if ($fstype eq "cd9660" && $device !~ /^\/dev\/md/) {
            if ($fstype eq "iso9660" && $device !~ /loop/ ) {
      if (-f $where) {
   if (-f $xinitrcCommon && block_match($xinitrcCommon, $chompedMarkerBegin)) {
      if ($gACEVMUpdate) {
    if ($gACEVMUpdate) {
  if (!$gConfig->writeout($gConfigFile)) {
  if ($gDBAnswer{$id} eq '') {
    if (get_answer('Do you accept? (yes/no)', 'yesno', '') eq 'no') {
  if (get_answer('Setup is unable to find the "' . $bin . '" program on your machine. Please make sure it is installed. Do you want to specify the location of this program by hand?', 'yesno', 'yes') eq 'no') {
    if (get_answer('Uninstallation of previous install failed. ' .
        if (get_answer('WARNING: VMware Tools for Solaris is officially supported '
         if (get_answer('You already have the same version of '.vmware_product_name().' installed.  ' .
    if (get_answer('You have a conflicting installation of VMWare-' .
         if (get_answer('You have a more recent version of '.vmware_product_name().' installed.  ' .
    if (get_answer('You have a more recent version of '.vmware_product_name().' installed.  ' .
         if (get_answer('You have a previous version of '.vmware_product_name().' installed.  ' .
    if (get_answer('You have a previous version of '.vmware_product_name().' installed.  ' .
    if (get_answer('You have a product that conflicts with '.vmware_product_name().' installed.  ' .
    if (get_answer('You have a version of '.vmware_product_name().' installed.  ' .
  if (get_cc() eq '') {
   if ($gHelper{'chkconfig'} ne '') {
        if ($gHelper{'gcc'} eq '') {
      if ($gHelper{'gcc'} eq '') {
    if ($gHelper{'gcc'} eq '') {
  if ($gHelper{'gcc'} eq '') {
      if ($gHelper{'insserv'} ne '') {
   if ($gHelper{'insserv'} ne '') {
      if ($gHelper{'more'} eq '') {
    if ($gHelper{'more'} eq '') {
      if ($gHelper{$program} eq '') {
      if ($gHelper{'vmware-acetool'} eq '' || acevm_included_player_newer()) {
    if ($gHelper{"vmware"} eq '') {
  if ($gIsUninstallerInstalled == 0) {
               if (glob ("$jobPath/*$testSuffix")) {
  if ($gManifest{'hasVM'} == 1) {
  if ($gManifest{'validFrom'} > 0 && $gManifest{'validFrom'} > $now) {
  if ($gOption{'clobber-xorg-modules'} or $installShippedModule) {
      if ($gOption{'default'} == 1) {
    if ($gOption{'default'} == 1) {
      if ($gOption{'nested'} != 1) {
     if ($halScript ne "") {
   if (! $homedir) {
  if ($hostVmplPresent && vmware_product() eq 'acevm') {
      if ("$id" eq 'VNET_SAMBA') {
    if (index($bin, '/') == -1) {
  if (index($dir, '/') != -1) {
   if ($index > $#versions_A) {
   if ($initctl ne '' and ( -x $initctl )) {
      if (($initctl_version_string =~ /upstart ([\d\.]+)/) and
   if ("$init_style" eq 'chkconfig') {
    if ("$init_style" eq 'lsb') {
   if ("$init_style" eq 'lsb') {
    if ("$insserv" ne '') {
   if (internal_basename($0) eq $cInstallerFileName) {
  if (internal_basename($0) eq $cModuleUpdaterFileName) {
  if (internal_basename($0) eq $gUninstallerFileName) {
      if (internal_sed($file, $file . '.old.' . $i, 0, \%patch)) {
	  if (internal_which('ldconfig') ne '') {
  if (is64BitUserLand() == (vmware_product_architecture() eq "x86_64")) {
  if (is64BitUserLand() != (vmware_product_architecture() ne "x86_64")) {
    if ((isDesktopProduct()) || (isServerProduct())) {
         if (!is_root()) {
    if (!is_root()) {
    if (is_root()) {
   if (is_selinux_enabled()) {
  if ($is_suid_dir)
   if ($isXen == 0) {
    # If it has no version, assume the one we ship is newer.
  # If it is not enabled, return a -1, restorecon was NOT called.
      # if it isn't located.
      if (/^(.*\.k?o):.*$/) {
  if (lc($answer) =~ /^n(o)?$/) {
  if (lc($answer) =~ /^y(es)?$/) {
         if (lc($arg) =~ /^(-)?(-)?d(efault)?$/) {
        if (lc($arg) =~ /^(-)?(-)?u(pgrade)?$/) {
    if ($len < 2) {
    if ((-l $File) && (-e ($File . '.org'))) {
    if ($lib =~ '(\S+) => not found') {
    if ($line =~ m/^(pci:v[0-9A-F]{8}d[0-9A-F]{8})/) {
	 if ($line =~ /pulseaudio *([0-9\.]+)/) {
      if ($line =~ $regex and $line !~ /tsched/) {
     if ($line =~ /($regexp)/ and not $line_added) {
      if ($line !~ /->\s+libssl\.so\.(\d+\.?\d*\.?\d*[a-zA-Z]*)/) {
      if ($line =~ /version: +([0-9\.]+)/) {
         if (! $linker_installed) {
         if ($link_ssleay) {
      if ($@ && $@ =~ /locate/) {
    if (-l $src_loc) {
    if ($made_dir1) {
  if ($made_dir1) {
  if ($made_dir2) {
      if ($major != 5 || $minor < 9) {
      if ($minor == 9) {
  if (mkdir($file, 0000) == 0) {
    if (mkdir($tmp . '/' . $prefix . $serial, 0755)) {
  if ("$modinfo" ne '' and -r "$systemMod") {
	    if ($modname eq $amodname) {
  if ($modPath =~ m,^.*/(\w+)\.k?o,) {
      if ($module->{'module'} eq 'Crypt::SSLeay') {
         if ($mountline =~ /^(.+)\ on\ (.+)\ \(([0-9a-zA-Z]+),/) {
      if ($mountpoint =~ /vmwaretools$/) {
      if ($MovedFile =~ /\S+\.org/) {
    if (m/vmware-vmx.+$vmxFile/) {
    # If neither of the above worked, the links will be removed automatically
    if (not ($answer eq '')) {
  if (not ($answer eq '')) {
  if (not (($char eq "\n") || ($char eq ' ') || ($char eq ''))) {
   if (not close(BLOCK)) {
   if (not close(BLOCK_IN) or not close(BLOCK_OUT)) {
   if (not close(DST)) {
   if (not close(SRC)) {
  # If not_configured is found, then install has already run once and has
  if (not (-d $answer)) {
    if (not (-d $answer . '/' . $testdir)) {
  if (not db_dir_in($dir)) {
  if (not db_file_in($file)) {
            if (not db_file_in($modPath)) {
  if (not (-d $docdir)) {
      if (not(defined($bindir))) {
   if (not defined($DBAnswer{$id})) {
  if (not defined($gAnswerSize{$type})) {
  if (not defined($gCheckAnswerFct{$type})) {
  if (not defined($gDBAnswer{'BINDIR'})) {
  if ((not defined($gDBAnswer{'EULA_AGREED'}))
  if (not defined($gDBAnswer{$id})) {
    if (not defined($gDBAnswer{'LIBDIR'})) {
  if (not defined($gHelper{'more'})) {
    if (not defined($gHelper{$program})) {
  if (not defined($gHelper{"vmware"})) {
         if (not defined($interface)) {
   if (not defined($list)) {
    if (not (defined($statbuf[2]))) {
  if (not (defined($statbuf[2]))) {
    if (not (defined($statbuf[9]))) {
    if (not (-d $gHostVmplDir)) {
  if (not (-d $gRegistryDir)) {
    if (not (-d $gStateDir)) {
    if (not (-d $mandir)) {
   if ((not -d '/proc/xen') ||
    if (not (-d $tmp)) {
    if (not (-e $cInstallerMainDB)) {
    if (not (-e $gInstallerMainDB)) {
  if (not (-e $gInstallerMainDB)) {
  if (not -e $gInstallerMainDB || -e $gRegistryDir . '/' . $gConfFlag) {
            if (not $eject_really_failed) {
  if (not (file_name_exist($control))) {
  if (not file_name_exist($file)) {
    if (not file_name_exist($file . '.old.' . $i)) {
      if (not file_name_exist($inc . '/perl.h')) {
    if ((not file_name_exist($origFile)) &&
  if (not ("$fullpath" eq '')) {
    if (not (($installed_version eq '8.4.4') and
  if (not internal_sed($src, $dst, 0, $patchRef)) {
  if (not internal_sed($tmp, $inetd, 0, \%patch)) {
  if ((not isDesktopProduct()) && (not isServerProduct())) {
   if (not open(BLOCK, '>>' . $file)) {
   if (not open(BLOCK_IN, '<' . $file) or
  if (not open(CONF, '>' . $certCnf)) {
  if (not open(DST, (($append == 1) ? '>>' : '>') . $dst)) {
   if (not open(DST, '>' . $dst)) {
    if (not open(FH, $source)) {
  if (not open(FILE, '<' . db_get_answer('BINDIR') . $gConfigurator)) {
    if (not open(INSTALLDB, '>' . $gInstallerMainDB)) {
  if (not open(INSTALLDB, '>>' . $gInstallerMainDB)) {
  if (not open(INSTALLDB, '>' . $gInstallerMainDB)) {
  if (not open(MANIFEST, '<' . $path)) {
    if (not open(MODULESDEP, "/lib/modules/$kvers/modules.dep")) {
   if (not open(ORGPCF, "<$cfgFile") or
   if (not open(SRC, '<' . $src)) {
  if (not open(SRC, '<' . $src)) {
    if (not open(TESTFILE, '>' . $tmpfilenam)) {
  if (not -r $shippedMod) {
  if (not symlink($to, $name)) {
   if (not system(shell_string($gHelper{'mv'}) . " $tmp_file $file")) {
      if (not ($tokens[0] eq '')) {
    if (not unlink($file)) {
   if (not (vmware_product() eq 'server')) {
    if (not ((-w $tmp) && (-x $tmp))) {
  if (not (-x $cInstallerObject)) {
  if (not (-x "$rpctoolBinary")) {
   if (open(BLOCK, '<' . $file)) {
   if (!open(DESKTOP, ">$tmpfile")) {
      if (open(MNTTAB, '</etc/mnttab')) {
      if (open(MOUNTS, '</proc/mounts')) {
  if (open(OLDCONFIG, $registryFile)) {
    if (open(PERLINC, shell_string($gHelper{'perl'}) . ' -MExtUtils::Embed ' .
     if (open(PKGCONFIG, '>' . $pcfile)) {
  if (open(PLAYERINSTALLDB, '<' . $db_file)) {
    if ($parser[0] ne 'Filesystem') {
  if ($#patchKeys == -1) {
    if (/$pattern/) {
	    if ($pkgName eq $instPkgName) {
       if (@pkgs) {
	  if ($pkillBin ne '') {
    if ($pos) {
  if ($pos == 0) {
  if ($pos == -1) {
  if ($pos >= $cTerminalLineSize) {
    if ($pos != $len - 1) {
  if (($pos + $length) > $cTerminalLineSize) {
  if ($product_str =~ /$product_name/){
      if (($product_version == 0) ||
    if ( $progpath =~ /(.*?)\/$scriptname/ ) {
    if ($release >= 6.0) {
	  if (removeRPMPackages(@pkgs) ne 0) {
    if ($reply eq '') {
          if ($result ne '') {
    if (!$ret) {
    if ($ret == 0) {
  if ($ret ne '') {
   if ($rootdir eq '/') {
  if ($rootdir eq '/') {
  if ("$rpcresult" =~ /1/) {
  if ($rv >= 0) {
   if (scalar(@lower) > 0) {
  if (scalar(@missing) > 0) {
    if ($serial % 200 == 0) {
      if ($source eq 'user') {
    if ($source eq 'user') {
  if ($source eq 'user') {
        if (s/$patchKey/$$patchRef{$patchKey}/g) {
   # If SSLeay is going to be installed by us, they must have a linker on the system
    if (   ($statbuf[2] & 0555) != 0555
    if ($statbuf[4]!=0 or ($statbuf[2] & 07000)!=04000) {
  if ( !$statbuf[7]) {
      if      ($state eq 'outside') {
    if ($status) {
  if ($status) {
      if ($status == 2) {
  if ("$str1" =~ /[^0-9\.]+/ or "$str2" =~ /[^0-9\.]+/) {
    if ("$str1" eq '' and "$str2" eq '') {
  if ("$str1" eq '' or "$str2" eq '') {
  if (substr($answer, 0, 1) ne '/') {
  if (substr($bin, 0, 1) eq '/') {
    if (substr($dir, 0, $prefix_len) eq $prefix) {
    if (substr($file, 0, $prefix_len) eq $prefix) {
         # If syncGroup{} is already set, and it is not set to 0 then modules installed
         # If syncGroup{} is already set and its value is not 1, then modules from
  if (system('cd ' . shell_string($build_dir . '/control-only') . ' && ' .
            if (system("ld $path/SSLeay.o -o $path/SSLeay.so -shared -lcrypto -lssl") >> 8) {
    if ("$systemModVer" eq '' or
      if (system(shell_string(db_get_answer('INITSCRIPTSDIR') . '/vmware') .
            if (system(shell_string($gHelper{'grep'}) . ' ' . $searchString
  if (system(shell_string($gHelper{'make'}) . ' -C '
  if (system(shell_string($gHelper{'rm'}) . ' -rf ' . shell_string($dir))) {
  if (system(shell_string($gHelper{'tar'}) . ' -C ' . shell_string($build_dir) . ' -xopf ' .
    if (system(shell_string($gInstallerObject) . ' version >/dev/null 2>&1')) {
    if (!system(shell_string($inetd_restart) . ' restart')) {
    if (!system(shell_string($xinetd_restart) . ' restart')) {
  if ($system_version =~ /: *([0-9]+\.[0-9]+)-/) {
	if (system("$vnetlib --migrate-network-settings $gInstallerMainDB") == 0) {
      if ($terse eq 'yes') {
	   # If the device begins with /dev/md it will most likely
  # If the installer DB is missing there is no product already installed so
  # If the product has man pages ask for the man pages location. */
            # If the product is not tools, we need to bail on detecting a xen kernel.
# - If there is a host.vmpl, is this an update? Specifically, the aceid of this
# If there is a pid for this process, consider it running.
      # If the "required" perl module isn't found, the error message will note
  # If there's no database, then there isn't any
    # if the string contains init.d, do not default to containing init.d,
  # If the system uses upstart, then we should use service to restart
   # If the user has a special system setup, he will will prompted for the
      # If this fails, don't bother trying to unmount, or error.
            # If this fails, the eject will fail, and the user will see
    # If this file is a config file and already exists or is modified,
  # If this is a workstation tar install there will be a vix tarball:
  # If this is not the Vix product in here, then the only thing to do is to launch
# If this was a WGS build, remove our inetd.conf entry for auth daemon
        if ($tokens[0] eq internal_which('less')) {
    if (!uninstall_product($conflicting_product)) {
        if (!uninstall_product("viperl")) {
    if (($unlinked == 0) and ($gHelper{'chkconfig'} ne '')) {
    if ($vers == 0) {
    if ($version < 2) {
  if ($version < 2) {
  if ($version >= 2) {
   if ($versions_A[$index] =~ /\d+/ && $versions_B[$index] =~ /\d+/) {
    if (vmware_product() eq 'acevm') {
  if (vmware_product() eq 'acevm') {
    if (vmware_product() eq 'acevm' && file_name_exist($gInstallerMainDB)) {
  if (vmware_product() eq 'acevm' && (my $vmx = acevm_find_vmx($gRegistryDir)) ne '') {
    if (vmware_product() eq 'api') {
  if (vmware_product() eq 'api') {
      if (vmware_product() eq 'tools-for-freebsd' &&
      if (vmware_product() eq 'tools-for-freebsd') {
    if (vmware_product() eq 'tools-for-freebsd') {
  if (vmware_product() eq 'tools-for-freebsd') {
         if (vmware_product() eq 'tools-for-freebsd' and
   if (vmware_product() eq 'tools-for-freebsd' && $release == 5.0) {
         if (vmware_product() eq 'tools-for-linux') {
      if (vmware_product() eq 'tools-for-linux') {
    if (vmware_product() eq 'tools-for-linux' ||
    if (vmware_product() eq 'tools-for-linux') {
   if ((vmware_product() eq 'tools-for-linux' ||
   if (vmware_product() eq 'tools-for-linux') {
  if (vmware_product() eq 'tools-for-linux' ||
  if (vmware_product() eq 'tools-for-linux' &&
  if (vmware_product() eq 'tools-for-linux') {
  if (vmware_product() eq 'tools-for-linux' and
  if (vmware_product() eq 'tools-for-linux' and -d '/sbin') {
    if (vmware_product() eq 'tools-for-linux' and $isOpenSuse) {
      if (vmware_product() eq 'tools-for-solaris') {
    if (vmware_product() eq 'tools-for-solaris' ||
    if (vmware_product() eq 'tools-for-solaris') {
   if (vmware_product() eq 'tools-for-solaris') {
  if (vmware_product() eq 'tools-for-solaris') {
   if ((vmware_product() eq 'viperl') ||
  if (vmware_product() eq 'viperl') {
    if (vmware_product() eq 'vix') {
    if (((vmware_product() eq 'wgs') ||
    if (vmware_product() eq 'wgs') {
  if (((vmware_product() eq 'wgs') ||
  if (vmware_product() eq 'wgs') {
  if (vmware_product() eq 'wgs' || vmware_product() eq 'ws' ||
  if (vmware_product() eq 'wgs' || vmware_product() eq 'ws') {
    if (vmware_product() eq 'ws') {
  if (vmware_product() eq 'ws') {
    if (vmware_product() eq 'ws' || vmware_product() eq 'tools-for-linux') {
    if (vmware_product() eq 'ws' || vmware_product() eq 'wgs') {
   if (vmware_product() ne 'acevm' && !is_root()) {
    if ((vmware_product() ne 'api') && (vmware_product() ne 'acevm') &&
    if (vmware_product() ne 'api' && vmware_product() ne 'acevm' &&
      if (vmware_product() ne 'tools-for-linux' &&
        if (vmware_product() ne 'vix') {
  if (vmware_product() ne 'vix') {
    if (vmware_product() ne 'ws') {
      if (vmware_product() =~ /^tools-for-(linux|freebsd|solaris)$/) {
  if ($vmware_version_string =~ /.*VMware\s*(\S+)\s*Server.*/) {
  if ($vmxFile eq '') {
  if ($vmxPath eq '') {
      if ($_ =~ /\w+/) {
  #        If we don't modify the config file here, prelink could be
  # If we found the binary, send the RPC.
  # If we get here, we were unable to parse kern.osrelease
  # If we just removed the last bits from the file, statbuf[7] == size in bytes,
	# If we modfified the ld.so cache during the install, we need to
      # If we're the tools installer, forego sending the end RPC and let
    if ($where) {
  # If workstation is already installed and VIX has not already defined
  if (-x $gInstallerObject) {
   if ( -x $InstallerObject ) {
   if (-x $pulseaudioBin) {
  if (-x "$rpctoolBinary") {
   if (-x $rpmBin) {
      if (! -x $uninstaller) {
   if (-x "/usr/sbin/selinuxenabled") {
# If your copy of perl is not in /usr/bin, please adjust the line above.
    # In case service links were created the LSB way, remove them
    # in config.pl but not with the get_answer in pkg_mgr.pl.  Moving these
      $inc =~ s/\s*-I//;
      $index++;
      $index = $#versions_A;
   # indicates that Upstart is active.
                      . $inetd . "\n\n", 0);
          $initdir = '';
        $initdir = '/etc';
  $initdir = '/etc/init.d';
      $initdir = '/etc/rc.d';
                                  , 'INITDIR', 'initdirpath', $initdir);
    $initdir = '/sbin/init.d';
  $initDir =~ s/\'//g; # Remove quotes
    $initdir = '/usr/local/etc/rc.d';
   initialize_external_helpers();
   initialize_globals(internal_dirname($0));
  init_product_arch_hash();
      $initscriptsdir = '';
    $initscriptsdir = $answer;
  $initscriptsdir = $answer . '/init.d';
  $initscriptsdir = db_get_answer('INITSCRIPTSDIR');
                                  , 'initscriptsdirpath', $initscriptsdir);
    $initscriptsdir = '/usr/local/etc/rc.d';
                    $initscriptsdir . '/vmware-autostart');
                    $initscriptsdir . '/vmware-core');
                    $initscriptsdir . '/vmware-mgmt');
# Insert a clearly delimited block to an unstructured text file
                     "insserv application to setup the vmware-tools service.  " .
                "insserv application to setup the vmware-tools service.  " .
# Install a file permission
# Install a host policy file, a ace.dat, maybe an an ace.crt, and restart
                     . 'install already exists. Overwrite?',
# Install a pair of S/K startup scripts for a given runlevel
# Install a tar package or upgrade an already installed tar package
             . 'installation of the module can be found here: ' . $dir
                   . 'installation program.' . "\n\n", 0);
    install_content();
      install_content_acevm();
      install_content_acevm_update();
    install_content_player();
      install_content_rcli();
    install_content_tools();
      install_content_viperl();
    install_content_vix();
      install_content_vix_disklib();
      install_content_webAccess();
               . $InstallDB . ' in read-mode.' . "\n\n");
   install_dir('./apps', "$rootdir/lib/vmware-viperl/apps", \%patch, 0x1);
  install_dir('./bin32', $bindir . '32', \%patch, 0x1);
  install_dir('./bin64', $bindir . '64', \%patch, 0x1);
  install_dir('./bin', $answer, \%patch, 0x1);
   install_dir('./bin', "$rootdir/bin", \%patch, 0x1);
  install_dir('./doc', $answer, \%patch, 0x1);
  install_dir('./doc', $docdir, \%patch, 0x1);
   install_dir('./doc', "$rootdir/share/doc/vmware-viperl", \%patch, 0x1);
   install_dir('./etc', $gRegistryDir, \%patch, 0x1);
  install_dir('./etc', $gRegistryDir, \%patch, 0x1);
  install_dir('./external_bin', $bindir, \%patch, 0x1);
  install_dir('./include', "$rootdir/lib/vmware-vix-disklib/include", \%patch, 0x1);
  install_dir('./internal_bin', "$libdir/bin", \%patch, 0x1);
  install_dir('./lib32', $libdir . '32', \%patch, 0x1);
  install_dir('./lib64', $libdir . '64', \%patch, 0x1);
  install_dir('./lib', $answer, \%patch, 0x1);
  install_dir('./lib', db_get_answer('LIBDIR'), \%patch, 0x1);
  install_dir($libdir, $answer, \%patch, 0x1);
  install_dir('./lib', "$libdir/lib", \%patch, 0x1);
         install_dir("./lib/$module->{'path'}/lib", "$lib_dir", \%patch, 0x1);
         install_dir("./lib/$module->{'path'}/share", "$share_dir", \%patch, 0x1);
    install_dir('./man', $answer, \%patch, 0x1);
  install_dir('./man', $mandir, \%patch, 0x1);
  install_dir('./plugins32', "$rootdir/lib/vmware-vix-disklib/plugins32", \%patch, 0x1);
  install_dir('./plugins64', "$rootdir/lib/vmware-vix-disklib/plugins64", \%patch, 0x1);
      install_dir($src_loc, $dst_loc, $patchRef, $flags);
  install_dir('./system_etc', '/etc', \%patch, 1);
  install_dir('./usr', '/usr', \%patch, 1);
  install_dir("./VM", $gRegistryDir, \%patch, 0x0);
  install_dir('vmware-vix/api', db_get_answer('VIXLIBDIR') . '/api', \%patch, 0x1);
    install_dir( './vmware-vix/api', $libdir . '/vmware-vix/api', \%patch, 0x1);
  install_dir('vmware-vix/include', $rootdir . '/include', \%patch, 0x1);
    install_dir('vmware-vix/man', $answer, \%patch, 0x1);
  install_dir("./webAccess", db_get_answer('LIBDIR') . "/webAccess", \%patch, 0x1);
		    . 'installed by any other installer and installs the modules provided '
               'installed during its valid time period.' . "\n\n");
             . 'installed.  Errors encountered during compilation and '
             ($installed_kind eq 'tar'))) {
    $installed_kind = get_installed_kind();
		"installed on the system and will now remove them:\n\n" .
        (installed_product_mismatch() != 0)) {
      (installed_product_mismatch() != 0)) {
         $installed_ssl_version = $1;
  # installed standalone, then the uninstall would remove vmrun.  If not,
                 . ' installed the file and now.' . "\n\n"
         $installed_version="00001";
         $installed_version=db_get_answer('BUILD_NUMBER');
    $installed_version = get_installed_version();
  # installed vmrun.  No reason to check for 'NESTED' really.  If we're
      ' installer database file (' . $cInstallerMainDB . ').' .
               . ' installer database format to the tar4 installer database format.'
             . ' installer database using the tar4 format.' . "\n\n", 0);
              'installer' . "\n\n");
               . ' installer (version ' . $version . ').' . "\n\n", 0);
      install_file($ace_crt_file, "$gHostVmplDir/ace.crt", \%patch, 0x0);
    install_file("$cInstallerDir/upstart-job.conf", $upstartJobFile, undef, 0);
    install_file($cStartupFileName,
    install_file($cStartupFileName, "$gRegistryDir/services.sh", undef, 0);
  install_file($cStartupFileName, $initscriptsdir . '/vmware', \%patch, 0x1);
    install_file("$gRegistryDir/ace.dat", "$gHostVmplDir/ace.dat", \%patch, 0x0);
    install_file("$gRegistryDir/host.vmpl", "$hostVMPolicy", \%patch, 0x0);
  install_file("./installer.sh", $gRegistryDir . '/installer.sh', \%patch, 0x0);
  install_file("./MANIFEST", $gRegistryDir . '/MANIFEST', \%patch, 0x0);
   install_file ("$shippedMod", "$systemMod", \%patch, 1);
    install_file($source, $dest, \%patch, 1);
      install_file($src_loc, $dst_loc, $patchRef, $flags);
   install_file($tmpfile, $desktop_dest, \%patch, 1);
    install_file($vixTarFile, $vixInstalledTarFile, \%patch, 0x1);
  install_file("./vmware-install.pl", $gRegistryDir . '/' . $gUninstallerFileName,
    install_file('./vmware-vix/bin/vmrun', $answer . '/vmrun', \%patch, 0x1);
     install_file($vmwHgfsmntPath, $sbinHgfsmntPath, \%patch, 0x1);
		   "installing VMware Tools.\n\n");
    install_module();
   # install modules in @install
  # install on a NFS server and then answer 'no' NFS clients
# Install one directory (recursively)
# Install one file
# Install one symbolic link
    install_or_upgrade();
# install package values.
    install_perl_api();
    install_permission($src_dir, $dst_dir);
  install_permission($src, $dst);
             . ' install >>' . shell_string($build_dir . '/control-only')
      $installShippedModule = 1;
    $installShippedModule = 1;
      install_symlink($answer . '/' . $shared_object,
      install_symlink($answer . '/' . $shared_object, '/lib/' . $shared_object);
  install_symlink("$bindir$suffix/vmware-mount", "$rootdir/bin/vmware-mount");
  install_symlink("$bindir$suffix/vmware-uninstall-vix-disklib.pl",
  install_symlink("$bindir$suffix/vmware-vdiskmanager", "$rootdir/bin/vmware-vdiskmanager");
   install_symlink(db_get_answer('DOCDIR') . '/EULA',
   install_symlink(db_get_answer('INITSCRIPTSDIR') . '/' . $service,
    install_symlink($initscriptsdir . '/vmware',
       install_symlink($libbindir, $libdir . "/bin");
     install_symlink("$libdir$arch/libcrypto.so.0.9.8", "$bindir$arch/libcrypto.so.0.9.8");
     install_symlink("$libdir$arch/libssl.so.0.9.8", "$bindir$arch/libssl.so.0.9.8");
       install_symlink($liblibdir . "/libconf", $libdir . "/libconf");
       install_symlink($liblibdir, $libdir . "/lib");
       install_symlink($libsbindir, $libdir . "/sbin");
  install_symlink("libvixDiskLib.so.1",
      install_symlink(readlink($src_loc), $dst_loc);
     install_symlink($sbinHgfsmntPath, $vmwHgfsmntPath);
  install_symlink("vix-disklib-$suffix.pc", "$pkgdir/vix-disklib.pc");
  install_symlink("vmware-vix-disklib/lib$suffix/libvixDiskLib.so.1",
                   . 'Install that package if it exists and then re-run this '
                            . 'install the binary files?', 'dirpath',
# Install the content of the module package
# Install the content of the tar package
# Install the content of the tools tar package
    # install the service script.
    # Install the SIGINT handler. Don't bother resetting it, see
  # Install the startup script (and make the old installer aware of this one)
     # . Install the uninstaller ASAP
           install_usage();
	  'install VMware Player before installing this package.' . "\n\n");
		   'install will UNINSTALL the conflicting product ' .
    install_x_module_no_checks($shippedMod, $systemMod);
    # instead just default to the initdir as the initscripstdir
  $int = 0;
    $int <<= 8;
    $int >>= 8;
# interfaces. We prefix host only interfaces with 'vmnet' leaving us only 2
      $intermediate_format = 'tar';
      $intermediate_format='tar2'
      $intermediate_format = 'tar3';
      $intermediate_format = 'tar4';
             internal_dirname(spacechk_answer('In which directory do you want to install '
             internal_dirname(spacechk_answer('In which directory do you want to install ' .
  internal_sed ('./etc/vmware-user.desktop', $filePath, 0, \%patch);
  internal_sed($inetd, $tmp, 0, \%patch);
	  (internal_which('ldconfig') ne '')) {
# in the system ramdisk when we rebuild it.
  # into /etc/vmware/config.
# into the 7 variables mentioned below.
    $int |= $quaddot_a[$i];
  #        invoked by cron and would modify our binaries before config.pl
            . ' in write-mode.' . "\n\n");
          . ' in write-mode.' . "\n\n");
                     . ' -i \'"pci103c,104c" "pci1022,2000"\' pcn >/dev/null 2>&1');
		  is64BitUserLand() ? 'x86_64' : 'i386');
      # Isolate the program name (we are certain it does not contain a
  #        is run.  Modifying the prelink.conf file here should prevent
    # is still around if the database is found.
    $is_suid_dir=0;
    $is_suid_dir=shift;
# is to encapsulates all the compatibilty issues in this (consequently ugly)
# is used in the pattern:  create tmp dir, create tmp file, block_remove(), mv file,
         $isXen++;
    # it
               . 'it already.' . "\n\n", 0);
         # it could be extracted from vmware-uninstall-[viperl|rcli].pl ala
# it into db_get_answer('LIBDIR')/vmware-vix
# it is.
# It returns '' if there is no product, 'UNKNOWN' if a product but
  # its final spot in the tree.  If this is an rpm install, the tarball
              # Its one of our modules.  Lets keep track of where they are as
               "its original location.\n\n");
  # it's own BINDIR, then base the default root on the workstation BINDIR.
  # it will already exist and coveniently avoid processing here.  It's
      ? join('/', db_get_answer('INITSCRIPTSDIR'), $basename)
		   join("\n", @pkgs) .
		join("\n", @pkgs) .
	 # just print the line.
              . 'KB available';
               . ' Kernel Modules '
            . ' Kernel Modules package is intended to be used in conjunction '
   # kernel running.
#          - key is the system file
         . '.key -out ' . shell_string("$certLoc") . '/'
      ($key, $val) = ($opt =~ /^([^=]*)=([^=]*)/);
  $kind = direct_command(shell_string($cInstallerObject) . ' kind');
    $kind = direct_command(shell_string($gInstallerObject) . ' kind');
                   . $K_level . $service);
	     kmod_unload($mod, 0);
		kmod_unload($modDep, 0) if defined $modDep;
# know about.  Modules in this list are searched for when
    # know if the user changed it, so I back it up.
                  last;
         last;
        last;
      last;
	     last
         last if ($line =~ /$block/);
  $ld_lib_path .= ';' . $libdir . '/libssl.so.0.9.8;' . $libdir . '/libcrypto.so.0.9.8';
  # least it is secure
    # leave it in place to save the users' modifications.
                           "Leaving both modules in there could potentially " .
      # Legacy autostart hooks involved modifying system files, so we must manually
     # legacy purposes.  Also call restorecon for good measure.
  # Legacy SYSV/rc support for all products.
   # Legacy SYSV style.
  $length = length($word) + $reserved;
    $len = length($path);
  # Let anyone read the certificate
  # Let's first try getting the location from the DB.
  # Let the VMX know that we're uninstalling the Tools. We need to
    $libdir = $answer;
  $libDir = db_get_answer_if_exists('LIBDIR');
  $libdir = "$rootdir/lib/vmware-rcli";
  $libdir = "$rootdir/lib/vmware-vix-disklib/lib";
                   $libdir . '/share/EULA.txt');
  $libdir = 'vmware-vix/lib';
                            . ' library files?', 'dirpath',
			       "libvmtools0");
			       "libvmtools-devel",
                            . '/lib/vmware-tools', './lib');
       $line = "$1";
       $line_added = 1;
    $line =~ m/^(.+)=(.+)$/;
### line of the 'ps -ef' output.
	$line =~ s/$key/$value/g;
    $line =~ s/\r//g;
   link_runlevel(2, $service, $S_level, $K_level);
   link_runlevel(3, $service, $S_level, $K_level);
   link_runlevel(5, $service, $S_level, $K_level);
            $link_ssleay = 1;
# Linux doesn't allow more than 7 characters in the names of network
   $list = db_get_answer_if_exists('APPENDED_FILES');
# list of files that are config failes users may modify
   # List of questions answered with command-line arguments
    # lives either in the VM directory or in the Resources directory.
      $lmsg = 'There is insufficient disk space available in ' . $answer
      load_config();
           load_config(); # reload /etc/vmware/config
localityName            = Palo Alto
    local $SIG{PIPE} = sub {};
			     "located.\n");
# locate_upstart_jobinfo
                    . "location.  This implies '--default'."
               "logout and log back in for it to appear.\n\n", 0);
	# longer in the system library path.
    # Look for the header files needed to build the Perl module.  If we don't
# Look for the location of an answer in a different database and return the
# Look for the location of the vmware-acetool binary. We search /etc/vmware/locations
               "machine.  You must uninstall it by running vmware-uninstall.\n\n");
              "machine.  You must uninstall it by running vmware-uninstall-vix.\n\n");
  $made_dir1 = 0;
    $made_dir1 = 1;
  $made_dir1 = create_dir($gRegistryDir, 0);
  $made_dir2 = 0;
      $made_dir2 = 1;
  # Make key readable only by root (important)
             . '/make.log 2>&1')) {
      # make sure no conflicting products are installed
  # Make sure stuff is installed in a 'bin' dir.
    # Make sure there is no default answer here
  # Make sure the verbose meter is turned up.
   # Make sure we are using a valid path for Crypt-SSLeay
  # Make sure we have a compiler available
# Make sure we have an initial database suitable for this installer. The goal
                              $mandir, './man');
      $mandir = $rootdir . '/man';
    $mandir = $rootdir . '/share/man';
  $mandir = "$rootdir/share/man/man8";
# MANIFEST file and hash for installing ACE VMs
                              . ' man pages?', 'dirpath',
            "manually using PERLSHARE.\n\n");
   # Match on non-spaces to allow for either numbers or letters.  I.E. e.x.p and 1.0.4
# match the output of 'uname -s' to the product. These are compared without
  $max = (scalar(@arr1) > scalar(@arr2) ? scalar(@arr1) : scalar(@arr2));
      # mention locate it means the module is very likely found but can't load
# mkdir() that reports errors
    $mode |= 0200;
  $mode = $statbuf[2] & 07777;
          # Modified since this program installed it
  # modify the pattern in tagged builds (bug 9303)
  # Modify vmware-user.desktop so that the Execute variable gets
                    'modload', 'modunload', 'umount', 'mv', 'uname',
    $modName = $cKernelModuleAliases{"$line"};
          $modPath = "$fp1";
          $modPath = "$fp2";
		    'modprobe', 'rmmod', 'grep');
     {'module' => 'Archive::Zip',          'version' => '1.20',   'path' => 'Archive-Zip-1.20', 'syncGroup' => '0'},
     {'module' => 'Class::MethodMaker',    'version' => '2.08',   'path' => 'Class-MethodMaker-2.10', 'syncGroup' => '0'},
     {'module' => 'Compress::Raw::Zlib',   'version' => '2.005',  'path' => 'Compress-Raw-Zlib-2.005', 'syncGroup' => '1'},
     {'module' => 'Compress::Zlib',        'version' => '2.005',  'path' => 'Compress-Zlib-2.005', 'syncGroup' => '1'},
     {'module' => 'Crypt::SSLeay',         'version' => '0.55',   'path' => "Crypt-SSLeay-0.55-$ssl_version", 'syncGroup' => '0'},
     {'module' => 'Data::Dumper',          'version' => '2.102',  'path' => 'Data-Dumper-2.121', 'syncGroup' => '0'},
     {'module' => 'IO::Compress::Base',    'version' => '2.005',  'path' => 'IO-Compress-Base-2.005', 'syncGroup' => '1'},
     {'module' => 'IO::Compress::Zlib',    'version' => '2.005',  'path' => 'IO-Compress-Zlib-2.005', 'syncGroup' => '1'},
# module, it compares it against the version information of the
     {'module' => 'LWP',                   'version' => '5.8.05', 'path' => 'libwww-perl-5.805', 'syncGroup' => '0'},
                   .  $module->{'module'}->VERSION . ")";
# Module PCI ID and alias definitions.
    # modules we ship are for 6.3, we will just use these instead.  They are
            ($module->{'syncGroup'} && $syncGroup{$module->{'syncGroup'}} == 0)) {
            ($module->{'syncGroup'} && $syncGroup{$module->{'syncGroup'}} == 1)) {
  # Module updater.
                   .  $module->{'version'} . ")";
                . "   (" . $module->{'version'} . "),  is in version conflict with the "
     {'module' => 'VMware::VIRuntime',     'version' => '0.9',    'path' => 'VMware', 'syncGroup' => '0'}
     {'module' => 'XML::LibXML::Common',   'version' => '0.13',   'path' => 'XML-LibXML-Common-0.13', 'syncGroup' => '0'},
     {'module' => 'XML::LibXML',           'version' => '1.58',   'path' => 'XML-LibXML-1.63', 'syncGroup' => '0'},
     {'module' => 'XML::NamespaceSupport', 'version' => '1.09',   'path' => 'XML-NamespaceSupport-1.09', 'syncGroup' => '0'},
     {'module' => 'XML::SAX',              'version' => '0.16',   'path' => 'XML-SAX-0.16', 'syncGroup' => '0'},
  # More code duplication from pkg_mgr.pl (really, really bad)
# Moreover, SuSE 6.1's 'which' is unable to handle program names beginning with
                    'mount', 'cat', 'update_drv', 'grep', 'gunzip',
	   $mountpoint = $2;
                    "${mountpoint}. Ejecting device $device ...\n");
               $mountpoint = $rest;
            $mountpoint =~ s/\\040/\ /g;
               $mountpoint =~ s/(.*)\s+hsfs.*/$1/;
# Moved from various scripts that include util.pl
# Moved out of config.pl to support $gOption in spacechk_answer
     # Move vmware-hgfsmounter to /sbin and setup a link for
       $msg .= "\n\n";
          $msg .= "  Thank you for having tried this software.";
      m/^\s*(\S*)\s*=\s*(\S*)/;
  $multi_arch_products{'api'} = 1;
  $multi_arch_products{'vix'} = 1;
  $multi_arch_products{'wgs'} = 1;
  $multi_arch_products{'ws'} = 1;
            # multiple times.
    # must answer the EULA question before continuing.
   # Must be a xen system.
                    'mv', 'uname', 'mount', 'du', 'df', 'kldload', 'kldunload');
    my $ace_crt_file = sprintf "$gRegistryDir/%s/ace.crt",
   my $aceid = shift;
   my $acename = shift;
    my $addr = db_get_answer_if_exists('VNET_HOSTONLY_HOSTADDR');
      my ($aDev, $aIno) = stat(internal_dirname($progpath));
	my $aline;
	    my($amodid, $dummy2, $dummy3, $dummy4, $dummy5, $amodname) = split(/\s+/, $aline);
           my $ans;
     my $answer;
    my $answer;
  my $answer = '';
  my $answer;
      my $answer = get_answer('The installer was unable to set-uid to root on files in ' . $dst_dir . '.  Would you like ' .
  my $answer = shift;
      my $answer = undef;
  my $answer = undef;
  my $append = shift;
         my $arg;
        my $arg;
    my @args = ("sh", "$gPlayerBundle");
   my @argv;
  my @arr1;
  my @arr2;
  my $backslash;
  my $basename = internal_basename($answer);
   my $basename = vmware_service_basename();
      my ($bDev, $bIno) = stat(db_get_answer('BINDIR'));
  my $begin_marker = shift;
   my $begin = shift;
  my $bindir;
  my $bindir = db_get_answer('BINDIR');
      my $bindir = ext_db_get_answer_if_exists($InstallDB, 'BINDIR');
  my $bindir = $gConfig->get('bindir');
  my $binfile;
  my $binfile = get_installed_product_bin();
  my $bin = shift;
  my $bkp;
  my $bkp_dir;
   my $bkupExt = internal_basename($systemMod);
   my $block = shift;
  my $build_dir;
  my $buildNr;
   my @candidate_mounts;
my $cChkconfigInfo = <<END;
my $cConfFlag = $cRegistryDir . '/not_configured';
  my $certCnf;
  my $certLoc = shift;
  my $certPrefix = shift;
  my $certUniqIdent = "(564d7761726520496e632e)";
  my $cfgFile;
   my $cfgFile = '/etc/pulse/default.pa';
my $cFlagConfig        =   0x2;
my $cFlagDirectoryMark =   0x4;
my $cFlagFailureOK     =  0x10;
my $cFlagTimestamp     =   0x1;
my $cFlagUserModified  =   0x8;
  my $char = shift;
    my $chkconfig = internal_which('chkconfig');
   my $chk_msg;
   my $chompedMarkerBegin = $markerBegin; # block_match requires chomped markers
my $cInstallerDir = './installer';
my $cInstallerFileName = 'vmware-install.pl';
my $cInstallerMainDB = $cRegistryDir . '/locations';
my $cInstallerObject = $cRegistryDir . '/installer.sh';
my %cKernelModuleAliases = (
my %cKernelModuleDeps = (vsock => ('vmci'));
my @cKernelModules = ('vmblock', 'vmhgfs', 'vmmemctl',
  my $clear_db = 0;
my $cLSBInitInfo = <<END;
my $cManifestFilename = 'MANIFEST';
my $cMarkerBegin = "# Beginning of the block added by the VMware software\n";
my $cMarkerEnd = "# End of the block added by the VMware software\n";
    my $cmd;
   my $cmd;
  my $cmd;
  my $cmd = db_get_answer_if_exists('RESTORE_RAMDISK');
   my $cmd = join(' ', $rpmBin, '-qa --queryformat \'%{NAME}\n\'');
   my $cmd = "$pulseaudioBin --version";
   my @cmd = (("$rpmBin", '-e'), @pkgList);
    my $cmd = sprintf "%s checkMasterID %s %s > /dev/null 2>&1",
    my $cmd = sprintf("%s --postinstall %s,%s,1 > /dev/null", $vnetlib, vmware_product(), $vers);
  my $cmd = sprintf "%s --uninstall-host-policy > /dev/null",
my $cModuleUpdaterFileName = 'install.pl';
  my $command = shift;
  my $conf_dir = shift;
    my $configResult;
  my $conflicting_product;
  my $control;
my @cOpenVMToolsRPMPackages = ("vmware-kmp-debug",
   my $count;
   my $count = 0;
my %cProductServiceTable = (
my %cRamdiskKernelModules = (vmxnet3 => 'yes',
my $cRegistryDir = '/etc/vmware';
my $cServiceCommandDirect = 0;
my $cServiceCommandSystem = 1;
my $cServices = '/etc/services';
my $cStartupFileName = $cInstallerDir . '/services.sh';
my $cTerminalLineSize = 79;
  my $cTmpDirPrefix = 'api-config';
  my $cTmpDirPrefix = "vmware-ssl-config";
  my $curTime = time();
my $cVixMarkerBegin = "# Beginning of the block added by the VMware VIX software\n";
my $cVixMarkerEnd = "# End of the block added by the VMware VIX software\n";
   my %DBAnswer;
   my %DBDir;
   my %DBFile;
  my $db_file = shift;
   my %DBLink;
   my %DBMove;
      my $defaultOpt = ($gOption{'default'} == 1) ? ' --default' : '';
    my $defaultreply = shift;
  my $default = shift;
    my $default_value = $defaultreply eq '' ? '' : ' [' . $defaultreply . ']';
      my $del = 0;
   my $depmodBin = shell_string($gHelper{'depmod'});
      my $depmodPath = "/lib/modules/$kRel/modules.dep";
   my $DESKTOP;
   my $desktop_dest = $homedir . "/.local/share/applications/$desktop_file_name";
   my $desktop_file_name = $aceid . $count . '.desktop';
  my $dest = '/etc/prelink.conf.d/vmware-tools-prelink.conf';
   my $device;
            my $devLinkTable = "/etc/devlink.tab";
  my $dhcp;
  my $dir;
      my @dircontents = readdir CDROMDIR;
  my $dir_existed = create_dir($dst_dir, $flags);
  my $dirname = shift;
  my $dir = shift;
  my $docdir;
    my $doForce = shift; # IN: Flag to indicate whether loading should be forced
  my $dollar;
    my $doRecursive = shift; # IN: Whether to also try loading modules that
    my $doSilent = shift; # IN: Flag to indicate whether loading should be done silently
   my $dotdScript = '/etc/X11/Xsession.d/99-vmware_vmware-user';
my $dspMarkerFile = '/usr/lib/vmware-tools/dsp';
      my $dstDir = $gRegistryDir;
  my $dst_dir = shift;
  my $dstDir = shift;
    my $dst_loc = $dst_dir . '/' . $file;
   my $dst = shift;
  my $dst = shift;
  my $dstSpace;
  my $eclipse_dir = db_get_answer_if_exists('ECLIPSEDIR');
   my $eject_cmd = '';
   my $eject_failed = 0;
   my $eject_really_failed = 0;
  my $end_marker = shift;
   my $end = shift;
   my $errval;
   my @escapedArgv;
    my $eula = <EULA>;
  my $execStr = 'Exec=' . db_get_answer('BINDIR') . '/vmware-user';
  my $exitValue;
   my @fields;
  my $file;
	    my $file = db_get_answer('LD_DOT_SO_DOT_CONF_MODIFIED');
   my $fileModified = 0;
  my $filePath = $gRegistryDir . '/vmware-user.desktop';
  my @Files;
   my $file = shift;
  my $file = shift;
  my $filesToRestoreRef = shift;
      my %fileToRestore;
  my %fileToRestore;
  my $fileToRestore = shift;
  my $flags = shift;
  my @fn;
  my $force = shift;
  my $found = 0;
   my $foundit = 0;
        my $fp1 = $1;
        my $fp2 = join('/', $modDir, $fp1);
   my $fstype;
   my $fullbin;
  my $fullpath = internal_which($answer);
my $gACEVMUpdate = 0;
my %gAnswerSize;
my %gCheckAnswerFct;
my %gConfData;
my $gConfFlag;
my $gConfig;
my $gConfigFile;
my $gConfigurator;
my %gDBAnswer;
my %gDBConfig;
my %gDBDir;
my %gDBFile;
my %gDBLink;
my %gDBMove;
my %gDBUserModified;
my $gDefaultAuthdPort = 902;
my $gFirstCreatedDir = undef;
my %gHelper;
my $gHostVmplDir = "/etc/vmware/vmware-ace";
my $gInstallerMainDB;
my $gInstallerObject;
my $gIsUninstallerInstalled;
  my $globallibdir = is64BitUserLand() ? '/lib64' : '/lib32';
my %gManifest;
my $gMaxVmnet = '99';
my $gMinVmnet = '0';
my %gNonVmwareModules = ();
my %gOption;
my $gPlayerBundle = '';
my $gRegistryDir;
my $gStateDir;
my $gUninstallerFileName;
my %gVmwareInstalledModules = ();
my $gWebAccessWorkDir = '/var/log/vmware/webAccess/work';
  my $halScript = "";
   my $homedir = get_home_dir();
      my $home = get_home_dir() ||
      my $hostaddr  = db_get_answer_if_exists($pre . 'HOSTONLY_HOSTADDR');
  my $hostname = direct_command(shell_string($gHelper{"hostname"}));
  my $hostvmpl = "$gHostVmplDir/host.vmpl";
  my $hostVmplPresent = file_name_exist("$gHostVmplDir/host.vmpl");
  my $hostVMPolicy = "$gHostVmplDir/host$update.vmpl";
    my $i;
  my $i;
    my $id;
   my $id = shift;
  my $id = shift;
      my $inc = <PERLINC>;
   my $index = 0;
  my $inetd_conf  = "/etc/inetd.conf";
  my $inetd_restart = db_get_answer('INITSCRIPTSDIR') . '/inetd';
  my $inetd = shift;
      my $initctl = internal_which('initctl');
   my $initctl = internal_which('initctl');
      my $initctl_version_string = direct_command(shell_string($initctl) . " version");
  my $initdir;
  my $initDir = shell_string(db_get_answer('INITSCRIPTSDIR'));
  my $initscriptsdir;
    my $init_style = db_get_answer_if_exists('INIT_STYLE');
   my $init_style = db_get_answer_if_exists('INIT_STYLE');
  my $input = shift;
    my $insserv = internal_which('insserv');
   my $InstallDB = $cRegistryDir . '-' . $product . '/locations';
   my $InstallDB = shift;
    my $installed_kind;
   my $installed_ssl_version = 0;
      my $installed_version;
    my $installed_version;
  my $installed_version = direct_command($binfile . ' -v');
   my $InstallerObject = $cRegistryDir . '-' . $product . '/installer.sh';
   my @install; # list of modules to be installed
  my $installShippedModule = 0;
   my @instPkgs;
  my $int;
      my $interface = db_get_answer_if_exists($pre . 'INTERFACE');
  my $intermediate_format;
  my $int = shift;
  my $ip = shift;
      my $is64BitUserland = is64BitUserLand();
    my $isOpenSuse = system("grep -q openSUSE /etc/SuSE-release " .
  my $is_suid_dir;
   my $isXen = 0;
         my $jobPath = "/etc/init";
    my ($jobPath, $jobSuffix) = @upstartJobInfo;
    my $key;
  my $key = shift;
       my ($key, $val);
      my ($key, $val);
  my $kind;
   my $K_level = shift;
    my $kvers = direct_command(shell_string($gHelper{'uname'}) . ' -r');
  my $ldd_out = direct_command(shell_string($gHelper{'ldd'}) . ' ' .
  my $ld_lib_path = $ENV{'LD_LIBRARY_PATH'};
  my $ld_lib_string = "LD_LIBRARY_PATH='" . $ld_lib_path . "'";
    my $len;
  my $length;
   my $level = shift;
      my $libbindir = $libdir . ($is64BitUserland ? '/bin64' : '/bin32');
  my $libdir;
   my $lib_dir = $Config::Config{'archlib'} || $ENV{'PERL5LIB'} || $ENV{'PERLLIB'} ||
  my $libdir = db_get_answer_if_exists('LIBDIR');
  my $libdir = db_get_answer_if_exists('VIXLIBDIR');
      my $libdir = db_get_answer('LIBDIR');
  my $libdir = db_get_answer('LIBDIR') . '/lib';
      my $liblibdir = $libdir . ($is64BitUserland ? '/lib64' : '/lib32');
      my $libsbindir = $libdir . ($is64BitUserland ? '/sbin64' : '/sbin32');
    my $line;
  my $line;
   my $line_added = 0;
	my @lines = split('\n', direct_command(shell_string($gHelper{'modinfo'})));
   my $line = undef;
  my $LinkedFile;
   my $linker_installed = `which ld`;
   my $link_ssleay = 0;
   my $list = '';
      my $lmsg;
        my $loader_conf = '/boot/loader.conf';
  my $loop;
   my @lower;   # list of modules whose versions are less than the shipped
  my $made_dir1;
  my $made_dir2;
      my ($major, $minor) = split /\./, $solVersion; # / Fix emacs fontification
  my $mandir;
   my $markerBegin = shift;     # IN: block begin marker
   my $markerEnd = shift;       # IN: block end marker
    my $mask = db_get_answer_if_exists('VNET_HOSTONLY_NETMASK');
  my $max;
    my $message = shift;
  my @missing;
        my $modDir = join('/', '/lib/modules', $kvers);
  my $mode;
  my $mode = shift;
  my $modInfoCmd = shell_string($gHelper{'modinfo'})
  my $modinfo = internal_which('modinfo');
  my @modInfoOutput = map { chomp; $_ } (`$modInfoCmd`);
  my $modName;
    my $modname = shift;     # IN: Module name
    my $modname = shift; # IN: Module name
  my $modPath = '';
  my $modPath = shift;
    my $modpath = shift; # IN: Path to module object file
   my @modules = (
      my @mountlines = split('\n', direct_command(internal_which('mount')));
   my $mountpoint;
   my $mountpoint = shift;
  my $MovedFile;
  my $msg;
  my $msg = shift;
       my $msg = 'The removal of ' . vmware_longname() . ' completed '
        my $msg = vmware_product_name() . ' cannot quiesce.  Please '
my %multi_arch_products;
  my $name;
  my ($name, $passwd, $uid, $gid) = getpwnam($answer);
      my ($name,$passwd,$uid,$gid,$quota,$comment,$gcos,$home) = getpwnam($user);
  my $name = shift;
  my $nameTag;
   my $name = vmware_product_name() . ' ' . vmware_version();
      my $netmask   = db_get_answer_if_exists($pre . 'HOSTONLY_NETMASK');
  my $netmask = shift;
    my $newbin;
      my $newid = $id;
  my $now = time();
  my $old_default = $gOption{'default'};
  my $OldInstallerDB = '/etc/vmware-tools/tools_log';
  my $OldInstallerDBOld = '/etc/vmware/tools_log';
  my $openssl_exe = shift;
  my ($openssl_exe, $vmware_version, $certLoc, $certPrefix, $unitName) = @_;
  my $origFile;
    my $origRecordSeparator = $/;
 my %osProductHash = (
 my $OS = `uname -s`;
  my $output;
	 my @output = ();
  my $output = shift;
  my @parser;
      my %patch;
    my %patch;
   my %patch;
  my %patch;
      my $patchKey;
  my @patchKeys;
  my $patchRef = shift;
  my %patch = ('^# VMware auth.*$' => '',
    my $path;
  my $path = $gConfig->get('bindir') .  "/vmware-acetool";
            my $path = "./lib/$module->{'path'}/lib/auto/Crypt/SSLeay";
    my @paths;
  my $path = shift;
  my $pattern;
     my $pcfile = "$pkgdir/vix-disklib-$arch.pc";
  my $pkgdir = "$rootdir/lib/pkgconfig";
   my @pkgList = @_;
       my @pkgs = checkRPMForPackages(@cOpenVMToolsRPMPackages);
	  my $pkillBin = internal_which('pkill');
    my $pos;
  my $pos;
  my $pos = shift;
  my $prefix_len;
  my $prefix = shift;
  my $prelink_file = db_get_answer_if_exists('PRELINK_CONFED');
  my $prelink_file = '/etc/prelink.conf';
      my $previous = $gOption{'default'};
   my $previous = $gOption{'default'};
  my $previous = $gOption{'default'};
      my $pre = 'VNET_' . $i . '_';
    my $probe = shift; # IN: 1 if to probe only, 0 if to actually load
  my $proc_name = shift;
my %product_conflicts;
  my $product_name = vmware_product_name();
   my $product = shift;
  my $product_str = direct_command($binfile . ' -v');
      my $product_version;
  my $product_version = vmware_version();
   my $progpath = $0;
  my $program;
  my @programList;
   my $pulseaudioBin = internal_which("pulseaudio");
  my @quaddot_a;
  my $quaddot = shift;
  my @rcDirList;
  my $redo = 1;
   my $regexp = shift;
   my $regex = qr/^ *load-module +module-(udev|hal)-detect$/;
  my $registryFile = shift;
    my $release = `uname -r | cut -f1 -d-`;
   my $release = `uname -r | cut -f1 -d-`;
    my $reply;
    my $reserved = shift;
  my $reserved = shift;
   my $rest;
  my $restoreBackList = 'RESTORE_BACK_LIST';
  my $restoreBackupSuffix = '_BAK';
  my $restorePrefix = 'RESTORE_';
    my $restoreStr;
   my $result;
  my $result = '';
  my $result;
    my $ret;
  my $ret = '';
  my $ret;
  my %ret;
  my $ret = 1;
    my $ret = acevm_finalize();
   my $retval;
   my $rootdir;
  my $rootdir;
      my $rootdir = $home . '/vmware-ace/' . $gManifest{'acename'};
  my $rootdir = shift;
      my $rpcOpt = (vmware_product() eq 'tools-for-linux' ||
  my @rpcResultLines;
  my $rpcresult = send_rpc('toolinstall.is_image_inserted');
  my $rpctoolBinary = '';
  my $rpctoolSuffix;
   my $rpmBin = internal_which('rpm');
  my $runlevel;
  my $rv;
  my $rv = system(shell_string($gHelper{'pidof'}) . " " . $proc_name . " > /dev/null");
      my $rv = system("/usr/sbin/selinuxenabled");
     my $sbinArch = (is64BitUserLand() ? '64' : '32');
     my $sbinHgfsmntPath = '/sbin/mount.vmhgfs';
   my $scriptname = internal_basename($progpath);
            my $searchString = "name=vmhgfs";
  my $serial;
  my $service_name = shift;
  my $servicePath = internal_which("service");
   my $service = shift;
      my $service = vmware_service_basename();
   my (@setOption, $opt);
   my $share_dir = $Config::Config{'installprivlib'} || $ENV{'PERLSHARE'} ||
  my $shared_object = 'libvixAllProducts.so';
   my $shippedMod = shift;
  my $shippedMod = shift;
  my $shippedModVer = '';
      my $shortcutOpt = $gOption{'create_shortcuts'} ? '' : ' --no-create-shortcuts';
    my $silencer = '';
  my $single_quoted = shift;
   my $S_level = shift;
      my $solVersion = direct_command(shell_string($gHelper{'uname'}) . ' -r');
  my $source = "/etc/vmware-tools/vmware-tools-prelink.conf";
  my $source = shift;
  my $space = -1;
  my $src_dir = shift;
  my $srcDir = shift;
  my $src_file = shift;
    my $src_loc = $src_dir . '/' . $file;
   my $src = shift;
  my $src = shift;
  my $srcSpace;
   my $ssleay_installed = 0;
   my $SSLeay_ssl_version = '0.9.7';
   my $ssl_version;
      my @statbuf;
    my @statbuf;
  my @statbuf;
   my $state;
  my $state_file;
  my $state_files;
    my $status;
  my $status;
  my $str1 = shift;
  my $str2 = shift;
  my $string = shift;
  my $subnet;
         my $subnet = compute_subnet($hostaddr, $netmask);
            my $suffix = "";
   my $suffix = '';
  my $suffix = '';
  my $suffix = is64BitUserLand() ? '64' : '32';
   my %syncGroup;
   my %syncModules;
   my $systemMod = shift;
  my $systemMod = shift;
  my $systemModVer = '';
  my $system_version = direct_command("sysctl kern.osrelease");
    my $terse = 'no';
  my $testdir;
  my $tmp;
  my $tmp_db = $gInstallerMainDB;
        my $tmp_dir;
  my $tmp_dir;
  my $tmpdir;
    my $tmpDir;
   my $tmp_dir = make_tmp_dir('vmware-block-insert');
  my $tmp_dir = make_tmp_dir('vmware-block-restore');
   my $tmpdir = make_tmp_dir('vmware-installer');
  my $tmp_dir = make_tmp_dir('vmware-installer');
   my $tmpDir = make_tmp_dir('vmware-pulse');
    my $tmpfilenam = $dst_dir . '/' . 'vmware_temp_'.$$;
   my $tmpfile = $tmpdir . '/' . $desktop_file_name;
   my $tmp_file = $tmp_dir . '/tmp_file';
  my $tmp_file = $tmp_dir . '/tmp_file';
   my $tmpFile = $tmpDir . '/tmp_file';
               my $tmpFile = "/tmp/VMware.devlink.tab";
    my $tmp = $gOption{'default'};
  my $TmpMainDB = $gInstallerMainDB;
  my $tmp = $tmp_dir . '/tmp';
        my $tmp; # / unconfuse emacs fontification
    my $to_append = '';
      my @tokens;
  my $to = shift;
       my $trim_service_name = (substr($service_name, 0, 1) eq '/')
  my $type = shift;
      my $uninstaller = $bindir . '/vmware-uninstall-' . $product . '.pl';
    my $unlinked = 0;
  my $update = '';
    my $upstartJobFile = "$jobPath/vmware-tools$jobSuffix";
  my @upstartJobInfo;
      my $user = get_answer('Enter a username to change package ownership',
   my $useSystem = shift;
    my $value;
  my $value = shift;
    my $vers;
  my $version;
   my @versions_A = split(/\./, $version_str_A);
   my @versions_B = split(/\./, $version_str_B);
   my $version_str_A = shift;
   my $version_str_B = shift;
   my $verStr = '0';
  my $vixInstalledTarFile = db_get_answer('LIBDIR') . '/' . $vixTarFile;
  my $vixTarFile = 'vmware-vix/vmware-vix.tar.gz';
   my $vmplayerFile = $gConfig->get('bindir') . '/vmplayer';
  my $vmware_version;
  my $vmware_version_string;
     my $vmwHgfsmntPath = "$vmwSbinDir/vmware-hgfsmounter";
     my $vmwSbinDir = join('/', $answer, 'sbin' . $sbinArch);
   my $vmx = acevm_find_vmx($gRegistryDir);
  my $vmxFile = acevm_find_vmx($gRegistryDir);
  my $vmxPath = acevm_find_vmx($gRegistryDir);
  my $vmxPath = shift;
    my $vnetlib = shell_string("$gDBAnswer{'BINDIR'}/vmware-networks");
    my $where = alt_db_get_answer('/etc/vmware-vix/locations', 'BINDIR');
  my $word;
  my $word = shift;
   my $x11Base = db_get_answer_if_exists('X11DIR');
   my @xdmcfgs = ("/etc/X11/xdm/xdm-config");
  my $xinetd_dir  = "/etc/xinetd.d";
  my $xinetd_restart = db_get_answer('INITSCRIPTSDIR') . '/xinetd';
   my $xinitrcCommon = '/etc/X11/xinit/xinitrc.common';
                           . "\n"
		    . "\n"
Name=$acename$count
        $name .= ' for FreeBSD';
        $name .= ' for Linux';
        $name .= ' for Solaris';
  $name = $gRegistryDir . '/config';
                                         . $name . ' in write-mode.' . "\n\n");
  $nameTag = '';
      $nameTag = defined($2) ? $2 : '';
    # necessary.  Note that it is only necessary to check the existence of two
# Needed for WIFSIGNALED and WTERMSIG
# Needed to access $Config{...}, the Perl system configuration information.
                                       . ' need to configure it for your '
      $newbin = alt_db_get_answer($cInstallerMainDB, 'BINDIR');
        $newid='VNET_0_INTERFACE';
        $newid='VNET_1_HOSTONLY';
        $newid='VNET_1_HOSTONLY_HOSTADDR';
        $newid='VNET_1_HOSTONLY_NETMASK';
# new product being installed, asking the user relevant questions,
  # New school Upstart support for Linux Tools.
               next;
            next;
         next;
      next if ($del);
            next if $device =~ /^#/;
                "\n\n");
              . "\n\n");
          . '.' .  "\n\n");
	        "\n\n";
	    "\n\n");
                 . "\n\n", 0);
               . "\n\n", 0);
             . "\n\n", 0);
	       . "\n\n", 0);
		    . "\n\n", 0);
		 . "\n\n", 0);
             . "\n" . '********' . "\n\n", 0);
		   "\n\nPlease manually remove them before " .
		. "\n\n", vmware_product_name(),
      "\n\n" . 'You may want to re-install the ' .
             . "\n\n" . 'You will not be able to use the "vmware-cmd" '
    # No conversions necessary between version 3 and 4, so add all answers
    # No installer object -> this is the old installer, which we don't support
# no known bin.
        # no longer has a full path for the modules.  Therefore we must
#      None.
                   ' -noout -subject > /dev/null 2>&1')));
    # No slash
  # not added to the db so it will not be uninstalled next time.
                 . 'not be removed.' . "\n\n", 0);
    # note: for solaris, the amd64 version is a symlink to this i86 version
            # note: /proc/mounts replaces spaces with \040
       (not -e '/proc/xen/capabilities') ||
   # Note: RedHat's chkconfig reads LSB INIT INFO if present.
      # Note that we no longer use the samba variables, so these entries are
  # Note:  We have no choice but to fix this here because time is a factor.
  # Note: We must test for -l before, because if an existing symlink points to
        # Nothing to do for /etc/rc and /etc/rc.shutdown
   # nothing worked
    # Not installed by this program
       not open(BLOCK_OUT, '>' . $tmp_file)) {
       not open(NEWPCF, ">$tmpFile")) {
       (not open(XEN, '/proc/xen/capabilities'))) {
      # No trailing slash
      # No version method -> this is version 1
no warnings 'once'; # Warns about use of Config::Config in config.pl
	  # Now remove the vmware-user service if its still running.
  #Now that the group of other-conflicting products is handled, we are sure this product simply
  # Now that we know the LIBDIR, we need to add a rule to /etc/prelink.conf
   # Now try using chkconfig if available.
  # Now unmount the CD.
          .  "\n" . 'Press enter to display it.', '', 0);
                      . '.' . "\n" . 'The authentication daemon was not removed from '
   'nvdk'               => 'nvdk',
#  of the tools are packaged up in 32bit and 64bit instances.  In the case of
#  of the tools are packaged up in 32bit and 64bit instances.  So rather than
      # Oh well, at worst the user will have to reboot the machine... The
         '.old.' . $i . '.' . "\n\n", 0);
    $OldInstallerDB = $OldInstallerDBOld;
    # Old tools database not found, assume that the system is clean.
         # old versions did not record their build number.  If really needed
                  ' on a system running a xen kernel.');
  # On FreeBSD, we ship different builds of binaries for different releases.
      # Only find lines related to libssl
                       . 'on Solaris 10 and later, but you are running Solaris 9.  '
			  "on the host.\n", 0);
         # on the system are newer than this module.
              'on this system. If you wish to continue, you must first ' .
# Open and parse the manifest file. This file contains little bits of information
  open(CMD, $cmd . ' |');
	   open(CMDOUTPUT, "$eject_cmd $device 2>&1 |");
  open(CONFIGFILE, '>' . $name) or error('Unable to open the configuration file '
  opendir(DIR, $dir) or return '';
  opendir(LS, $dir) or return ();
    open(EULA, './doc/EULA') ||
  open(INSTALLDB, '<' . $gInstallerMainDB)
   open(INSTDB, '<' . $InstallDB)
      open(OUTPUT, "$cmd |");
  open (OUTPUT, shell_string($gHelper{'df'}) . ' -k ' .  shell_string($dstDir)
  open (OUTPUT, shell_string($gHelper{'du'}) . ' -sk ' . shell_string($srcDir)
    open(PAGER, '| ' . $gHelper{'more'}) ||
  open(PSOUT, 'ps -ef|');
    open (RPCRESULT, shell_string($rpctoolBinary) . " " .
    open (SHIPPED_MOD_VER, "$modinfo $shippedMod |");
#      OpenSuSE:        Revert xinitrc.common.
   # OpenSuSE (xinitrc.common)
    open (SYSTEM_MOD_VER, "$modinfo $systemMod |");
# Open the database on disk in append mode
   # Open the installdb, or error.
			       "open-vm-tools",
			       "open-vm-tools-gui",
		. 'operating system.  Please install the "%s" '
# operations.
        # options. If `less' is used, however, the option '-E' should be
# or conflicting product).
	     'or contact your system administrator for help.' . "\n\n");
      or error('Unable to open the installer database '
    or error('Unable to open the installer database '
organizationalUnitName  = $unitName
                 . $origFile
    $/ = $origRecordSeparator;
                       "or install a development toolchain and run this installer " .
    # or later and 32-bit (for now).  Note that we only officially support
    # or neither.  Depending on what we find, we will modify the patch variable
# or the installation will be aborted.
# OS-independent method of loading a kernel module by module name
# OS-independent method of loading a kernel module by object path
# OS-independent method of unloading a kernel module by name
     # Other installers will be able to remove this installation cleanly only if
  # Otherwise, we just use the normal bin and sbin directories, which will
# our config data in config files.
   # Our return status is 1 if successful, 0 if nothing was added.
    # our scripts need to start/stop.
  $output = '';
  $_ = <OUTPUT>;
  $output .= $append;
	   @output = <CMDOUTPUT>;
    $output .= "\n";
      ($output, $pos) = append_output($output, $pos, ' ');
  ($output, $pos) = append_output($output, $pos, $word);
    ($output, $pos, $word) = wrap_one_char($output, $pos, $word,
  ($output, $pos, $word) = wrap_one_char($output, $pos, $word, '', $reserved);
		 'package can change the ownership (chown) of the package files so ' .
       . ' package installed the library files.' . "\n\n"
#   package matches the aceid of the package that installed the host.vmpl
  # packages are installed by a user under a single directory, it's safe to do
# @param - A list of RPM packages to check for.
# @param[in] @commands  List of commands passed to services script or initctl
# @param[in] $useSystem If true, uses system().  Else uses direct_command().
# @param - List of rpm packages to remove
                       . 'parent directories. Is this what you want?',
# Parse an installer database and return a specified answer if it exists
   # parse arguments
    @parser = split(/\s+/);
  @parser = split(/\s+/);
   # parse the installdb
      # Pass in the clobber kernel modules option if necessary.
	       \%patch, 0x0);
  %patch = ('Exec=.*$' => $execStr);
  @patchKeys = keys(%$patchRef);
    %patch = ('@@LIBDIR@@' => $libdir);
      %patch = ('##VMWARE_INIT_INFO##' => "$cChkconfigInfo");
      %patch = ('##VMWARE_INIT_INFO##' => "$cChkconfigInfo\n\n$cLSBInitInfo");
      %patch = ('##VMWARE_INIT_INFO##' => "$cLSBInitInfo");
  $path = dir_remove_trailing_slashes($path);
      @paths = split(':', $ENV{'PATH'});
    $path = substr($path, 0, $len - 1)
  $pattern = '^  ' . $backslash . $dollar . 'buildNr = ' .
                            # PCI IDs first
                            'pci:v000015ADd00000720' => 'vmxnet',
                            'pci:v000015ADd00000740' => 'vmci',
                            'pci:v000015ADd000007B0' => 'vmxnet3',
                            'pci:v000015ADd000007C0' => 'pvscsi',
                                  . 'pcn >/dev/null 2>&1');
  # permissions of the original package (no write permission). Since these
      # place a more flexible scheme was implemented for which each has a semantic
# placed there by the installer.
                           'Player must be installed with this ACE.' . "\n\n", 0);
   'player'             => 'vmware',
		   "'. Please choose another directory.\n\n", 0);
		 "'. Please choose another directory.\n\n", 0);
                'Please close the running ACE and run this uninstaller again.' .
              . '.  Please make at least an additional ' . -$space
                    "Please re-install the chkconfig application or check your settings.  " .
                "Please re-install the chkconfig application or check your settings.  " .
                     "Please re-install the insserv application or check your settings.  " .
                "Please re-install the insserv application or check your settings.  " .
             . 'Please restart this virtual machine to ensure that '
    # Populate our array with everthing from the conf file.
               . 'port number in the range 1 to 65535.' . "\n\n", 0);
    $pos = 0;
  $pos = 0;
  $pos += length($append);
    $pos = rindex($path, '/');
  $pos = rindex($path, '/');
  $prefix_len = length($prefix);
                    . ' [[-][-]prefix=<path to install product: bin, lib, doc>'
    prelink_fix();
	prelink_restore();
     # . Prevent users from playing with Control-C while doing so
  # previously installed product.
    # pre-vnetlib upgrade
#      pre-XDG resource files, scripts, etc.
    print ' ';
# Print an error message and exit
   print BLOCK $begin . $block . $end;
       print BLOCK_OUT $begin . $block . $end;
     print BLOCK_OUT $line;
	print "Checked: " . $initDir . "/haldaemon and $initDir/hal\n";
  print CONF <<EOF;
  print CONFIGFILE 'libdir = "' . db_get_answer('LIBDIR') . '"' . "\n";
	print "Could not locate hal daemon init script.\n";
              #print "DEBUG: Adding $result module with path $modPath to baddie list.\n";
              #print "DEBUG: Found VMW installed $result at $modPath.\n";
      #print "DEBUG: Module Alias $line matched module $modName.\n";
	#print "DEBUG: Module name $1 matched module $mod.\n";
   print DESKTOP <<EOF;
            print DST $_;
      print DST $_;
      print INSTALLDB 'answer ' . $id . ' ' . $gDBAnswer{$id} . "\n";
  print INSTALLDB 'answer ' . $id . ' ' . $value . "\n";
      print INSTALLDB 'answer ' . $newid . ' ' . $gDBAnswer{$id} . "\n";
            print INSTALLDB 'answer ' . $pre . "DHCP yes\n";
         print INSTALLDB 'answer ' . $pre . 'HOSTONLY_SUBNET ' . $subnet . "\n";
       print INSTALLDB "answer VNET_1_DHCP yes\n";
       print INSTALLDB 'answer VNET_1_HOSTONLY_SUBNET ' .
  print INSTALLDB 'directory ' . $dir . "\n";
    print INSTALLDB 'file ' . $file . "\n";
    print INSTALLDB 'file ' . $file . ' ' . $statbuf[9] . "\n";
    print INSTALLDB 'remove_answer ' . $id . "\n";
  print INSTALLDB 'remove_directory ' . $dir . "\n";
  print INSTALLDB 'remove_file ' . $file . "\n";
     print join("\n", @missing);
         print "$module->{'module'}\n";
      print "\n";
    print "\n";
	 print NEWPCF "$line\n";
	 print NEWPCF "$line tsched=0\n";
     print "\n\n";
    print PAGER $eula . "\n";
       print PKGCONFIG "Cflags: -I\${includedir}\n";
       print PKGCONFIG "Description: VMware VIX DiskLib\n";
       print PKGCONFIG "exec_prefix=\${prefix}\n";
       print PKGCONFIG "includedir=\${prefix}/include\n";
       print PKGCONFIG "libdir=\${exec_prefix}/lib$arch\n";
       print PKGCONFIG "Libs: -L\${libdir} -lvixDiskLib\n";
       print PKGCONFIG "Name: vix-disklib\n";
       print PKGCONFIG "prefix=$rootdir/lib/vmware-vix-disklib\n";
       print PKGCONFIG "Version: " . vmware_version() . "\n";
     print "Restoring the kernel initrd image.:\n";
      print STDERR 'Unable to install shortcuts because the ' .
      print STDERR 'Warning: The "' . $tmp . '" directory may be under attack.' . "\n\n";
  print STDERR wrap($msg . 'Execution aborted.' . "\n\n", 0);
    print STDERR wrap("\n\n" . 'Ignoring attempt to kill the installer with Control-C, because the uninstaller has not been installed yet. Please use the Control-Z / fg combination instead.' . "\n\n", 0);
         print STDERR wrap('This setup program requires that the included VMware ' .
         print STDERR wrap('Unable to backup the file ' . $file .
   print STDERR wrap('Unable to backup the file ' . $file .
    print STDERR wrap('Unable to copy file ' . $tmp . ' back to ' . $inetd
        print STDERR wrap('Unable to get the last modification timestamp of '
      print STDERR wrap("Unable to open file $tmpfile for writing.  You must either " .
      print STDERR wrap('Unable to stop ' . vmware_product_name()
  print STDERR wrap(vmware_longname() . ' installer' . "\n" . 'Usage: ' . $0
    print TESTFILE 'garbage';
	  print "The installer found the following conflicting packages " .
    print wrap('A C compiler is required to install the API.' . "\n\n",  0);
  print wrap('A previous installation of ' . vmware_product_name()
    print wrap('A shortcut to your ACE package has been added to your ' .
          print wrap('Before running ' . vmware_product_name() . ' for the '
  print wrap('Building the VMware VmPerl Scripting API.' . "\n\n", 0);
      print wrap("Checking for active VMs:\n", 0);
	print wrap("Configuring default networks...\n\n", 0);
    print wrap('Converting the ' . $intermediate_format
        print wrap('Could not find necessary components to build the '
  print wrap('Creating a new ' . vmware_product_name()
	      print wrap ("Eject Failed:  If possible manually eject the " .
       print wrap('Enjoy,' . "\n\n" . '    --the VMware team' . "\n\n", 0);
      print wrap('Enjoy,' . "\n\n" . '    --the VMware team' . "\n\n", 0);
         print wrap('File ' . $file . ' is backed up to ' . $file .
    print wrap('Finalizing ACE... ', 0);
         print wrap("Found VMware Tools CDROM mounted at " .
  print wrap('Installing the kernel modules contained in this package.' . "\n\n", 0);
  print wrap('Installing the VMware VmPerl Scripting API.' . "\n", 0);
  print wrap("Installing the VMware VmPerl Scripting API.\n\n", 0);
     print wrap('Installing VMware ACE.  This may take from several minutes to over ' .
    print wrap("Installing VMware Player\n\n", 0);
     print wrap('Installing ' . vmware_product_name() . ".\n\n", 0);
      print wrap($lmsg . " or choose another directory.\n", 0);
    print wrap('Looking for a currently installed '
    print wrap($message . $default_value, 1 + $reserved);
	print wrap("Migrating network settings... ", 0);
       print wrap($msg, 0);
    print wrap("\n", 0);
  print wrap("\n", 0);
      print wrap("\n" . 'File ' . $$filesToRestoreRef{$origFile}
            print wrap("No Crypt::SSLeay Perl module or linker could be found on the " .
		 print wrap ("No eject (or equivilant) command could be " .
	print wrap("No permission to write to directory '" . $answer .
  print wrap('********' . "\n". 'The VMware VmPerl Scripting API was not '
               print wrap ($outputline, 0);
      print wrap('Please choose another directory.' . "\n\n", 0);
      print wrap('Please try again when you are ready to accept.' . "\n\n", 0);
  print wrap("Please wait while copying RCLI files...\n\n", 0);
      print wrap('Removing installer DB, please re-run the installer.' . "\n\n", 0);
	print wrap("Restoring network settings...\n\n", 0);
    print wrap('Stopping services for ' . vmware_product_name() . "\n\n", 0);
    print wrap('Thank you.' . "\n\n", 0);
      print wrap("The ACE in '$answer' does not have the same ID as this " .
    print wrap('The answer "' . $answer . '" is invalid. It must be one of "y" or "n".' . "\n\n", 0);
    print wrap('The answer "' . $answer . '" is invalid. It must be the complete name of a binary file.' . "\n\n", 0);
    print wrap('The answer '. $answer . ' is invalid. Please enter a valid '
     print wrap("The following libraries could not be found on your system:\n", 0);
      print wrap("The following Perl modules were found on the system but may be too old to " .
  print wrap('The installation of the VMware VmPerl Scripting API succeeded.' . "\n\n", 0);
    print wrap('The installation of this VMware ACE package completed successfully. '
    print wrap('The installation of ' . vmware_longname()
    print wrap('The installation of ' . vmware_product_name()
      print wrap('The path "' . $answer . '" exists, but is not a directory.'
         print wrap('The path "' . $answer . '" is a directory which does not contain a ' .
      print wrap('The path "' . $answer . '" is a relative path. Please enter '
      print wrap('The path "' . $answer . '" is not an existing directory.'
      print wrap('The path "' . $answer . '" is not an existing directory.' . "\n\n", 0);
    print wrap('The previous installation was made by the ' . $kind
      print wrap("There are no Active VMs.\n", 0);
      print wrap("There is another ACE already installed in '" . $answer .
      print wrap("There is no ACE installed in '$answer'. ", 0);
	print wrap("There is not enough space to install this ACE in '" .
      print wrap("There is not enough space to install this ACE update package in '" .
      print wrap("The removal of VMware ACE $gManifest{'acename'}" .
    print wrap('The uninstallation of legacy tools completed. '
      print wrap("This ACE was not finalized correctly, undoing installation...\n\n", 0);
      print wrap('This program previously created the directory ' . $dir
    print wrap('This program previously created the directory ' . $dir
    print wrap('This program previously created the file ' . $file . ', and '
    print wrap('Unable to compile the VMware VmPerl Scripting API.' . "\n\n", 0);
    print wrap('Unable to create the VMware VmPerl Scripting API makefile.' . "\n\n", 0);
      print wrap('Unable to find the compiler specified in the CC environnment variable: "'
    print wrap('Unable to install the VMware VmPerl Scripting API.', 0);
    print wrap('Unable to install the VMware VmPerl Scripting API.' . "\n\n", 0);
               print wrap("Unable to link the Crypt::SSLeay Perl module.  Secured " .
    print wrap('Unable to untar the "' . $control . '" file in the "' . $build_dir .
  print wrap('Uninstalling currently installed kernel modules.' . "\n\n", 0);
       print wrap('Uninstalling the tar installation of ' .
       print wrap("Uninstalling VMware ACE $gManifest{'acename'}...\n\n", 0);
  print wrap('Using compiler "' . $gHelper{'gcc'}
    print wrap("Using Existing SSL Certificate.\n", 0);
                print wrap("WARNING: A module identified as $result has been found " .
         print wrap("warning: could not find uninstaller for $product", 0);
         print wrap("warning: could not uninstall $product with its installer object\n\n", 0);
         print wrap("warning: could not uninstall $product with its uninstaller", 0);
          print wrap("WARNING: The installer initially used the " .
         print wrap("WARNING: The installer initially used the " .
     print wrap("WARNING: The installer initially used the " .
    print wrap('You can now run this ACE by invoking the following ' .
      print wrap('You have installed this ACE package as the root user. This setup ' .
    # probably.
            # process.
          ($product_version > $installed_version)) {
      $product_version =~ s/.*build-(.*$)/$1/;
      $product_version = vmware_version();
	     'program again.' . "\n\n");
# Program entry point
    @programList = ('tar', 'sed', 'rm', 'add_drv', 'rem_drv',
    @programList = ('tar', 'sed', 'rm', 'killall', 'lsmod', 'umount', 'mv',
    @programList = ('tar', 'sed', 'rm', 'kldstat', 'umount',
    @programList = ('tar', 'sed', 'rm', 'lsmod', 'umount', 'mv',
    @programList = ('tar', 'sed', 'rm', 'lsmod', 'umount', 'mv', 'gzip',
    @programList = ('tar', 'sed', 'rm', 'mv', 'ps', 'du', 'df', 'cp');
    @programList = ('tar', 'sed', 'rm', 'rmdir', 'mv', 'ps', 'du', 'df', 'mkdir',
    @programList = ('tar', 'sed', 'rm', 'rm', 'mv', 'ps', 'du', 'df', 'ldd');
             . 'program.' . "\n\n" . 'Errors can be found in the log file: '
                                       . 'program to invoke the command for you now?',
        prompt_and_uninstall_conflicting_products();
prompt                  = no
# Prompts the user if a binary is not found
    prompt_user_to_remove_installed_product();
#      prompt_user_to_remove_installed_product)
   # proper location anyway
                    . 'proposed answer.'
# Provides: vmware-tools
               push(@candidate_mounts, "${device}::::${mountpoint}");
	     push(@candidate_mounts, "${device}::::${mountpoint}");
      push(@escapedArgv, shell_string($_));
    push @Files, db_get_answer('INITDIR') . '/rc' . $runlevel
         push @install, $module;
	       push @instPkgs, $instPkgName;
         push @lower, $module;
       push(@missing, $1);
            push(@setOption, $arg);
           push(@setOption, $arg);
           push(@tokens,'-E');
      push(@xdmcfgs, "$x11Base/lib/X11/xdm/xdm-config");
                    . '    Put the installation at <path> instead of the default '
			     pvscsi  => 'yes',
    $quaddot_a[$i] = $int & 0xFF;
  @quaddot_a = split(/\./, $quaddot);
    query('You must read and accept the ' . vmware_product_name()
     query('You will need to install these manually before you can run ' .
RANDFILE                = $tmpdir/seed.rnd
    @rcDirList = ('rc0.d', 'rc1.d', 'rc2.d', 'rc3.d');
    @rcDirList = ('rc0.d', 'rc1.d', 'rc2.d', 'rc3.d', 'rc4.d', 'rc5.d', 'rc6.d');
    # Readin our prelink file, do the appropreiate substitutions, and
# Reads in the database file specified in $gInstallerMainDB and loads the values
# Read the config vars to our internal array
     # Rebuild all the system modules.dep files to reflect
      # rebuild modules.dep for that kernel.
    $redo=1;
  $redo=1;
    $redo=install_dir('./bin', $answer, \%patch, 0x1, 1);
    $redo=install_dir('./lib', $answer, \%patch, 0x1, 1);
      $redo=install_dir('./sbin', $answer, \%patch, 0x1, 1);
    # Relative name
  # rely on the PATH var being set correctly.
# remaking the initrd will put it back into original condition.
# Remove a directory from the tar installer database
# Remove a file from the tar installer database
# Remove all clearly delimited blocks from an unstructured text file
  # Remove all directories beginning with $prefix
  # Remove all files beginning with $prefix
# Remove an answer from the tar installer database
    # Remove any installed product *if* user accepts.
# Remove a temporary directory
      # removed (and not converted):
  # remove it.
# Remove leading and trailing whitespaces
              'remove the currently installed VMware Tools using the '.
        # Remove the directory if we had to create it.
	  # remove the entries for the vmhgfs mount.
  # Remove the files
  # remove the inner ones before the outer ones
    # remove the installer db so the next invocation of install can proceed.
  # Remove the links
      # remove the modules added to the list for the initrd.
# Remove the text we added to the core config file in
    # Remove the trailing slash
    remove_tmp_dir($bkp_dir);
  remove_tmp_dir($bkp_dir);
    remove_tmp_dir($build_dir);
  remove_tmp_dir($build_dir);
# remove tmp dir. This encapsulates the pattern.
        remove_tmp_dir($tmp_dir);
      remove_tmp_dir($tmpdir);
   remove_tmp_dir($tmp_dir);
   remove_tmp_dir($tmpdir);
  remove_tmp_dir($tmp_dir);
  remove_tmp_dir($tmpdir);
# Remove trailing slashes in a dir path
    # Remove trailng data (subvendor, etc) from PCI IDs
#      Remove VMware-added blocks relating to vmware-user autostart from
# remove what was appended.  This will preserve any changes a user may have made
      rename $File . '.org', $File;
      rename $$fileToRestore{$origFile}, $origFile;
        rename $MovedFile, $gDBMove{$MovedFile};
      $reply = '';
      $reply = $defaultreply;
        $reply = remove_whitespaces($defaultreply);
    $reply = remove_whitespaces($reply);
      $reply = <STDIN>;
      $reply = '' unless defined($reply);
         # report back the highest installed version of libssl
[ req_distinguished_name ]
# requested levels
require Config;
# Required-Start: \$local_fs
# Required-Stop: \$local_fs
require POSIX;
      $reserved = 0;
    # Reserve some room for the reply
    # Reset these answers in case we have installed new versions of these
	restart_hal();
  restart_inetd();
# Restart the inetd service
  restart_xinetd();
#Restart xinetd
      restore_appended_files();
      restore_backedup_files(\%fileToRestore);
                        . $restoreBackupSuffix);
      restorecon($cfgFile);
      restorecon($dst);
   restorecon($dst);
     restorecon($file);
   restorecon($file);
     restorecon($sbinHgfsmntPath);
  restorecon($src_file);
      restore_kernel_initrd();
  # Restore the database ready to be used by our installer
  # Restore the original database file name in case we don't have
      # restore the VMware-added blocks.
# Result:
      $result =  0;
      $result =  1;
      $result = -1;
          $result = check_if_vmware_module($modPath);
  $result = close(CMD);
# Results:
      $result = $versions_A[$index] - $versions_B[$index];
    $ret = 0;
    $ret = 1;
    $ret{$1} = $2;
    $ret = $dir . '/' . $ret;
      $ret = $file;
# Retrieve an answer that must be present in the database
# Retrieves an answer if it exists in the database, else returns undef;
  #     retrieve the installed version
    $ret = system($cmd);
    $ret = system($cmd) == 0;
  $ret = system(shell_string($gHelper{'vmware-acetool'}) . ' finalizePolicies '
            return;
       return;
      return '';
      return;
    return '/';
    return '.';
    return '';
    return;
   return ();
  return '';
         return 0;
      return 0;
    return 0;
   return 0
   return 0;
  return `$_[0]`;
  return $> == 0;
  return 0;
  return(0);
    return 0; # Failure
	return 0; # Failure - module not found
# Return 0 if the file can be written safely, 1 otherwise
# return = 0:  There is a match
         return 1;
      return -1;
      return 1;
     return -1;
     return 1;
    return "$1";
    return 1;
    return(1);
   return 1;
  return -1;
  return 1;
	    return 1;
	 return 1;
# Return 1 if success, 0 if failure
# Return 1 if the directory existed before
  return 301548 gt int($gConfig->get('product.buildNumber', ''));
     # Return a 1, restorecon was called.
# Return a clean answer if valid, or ''
#  Return an error string if there is a mismatch, otherwise return undef
      return $answer;
    return $answer;
  return $answer;
      return (("$arr1[$indx]" gt "$arr2[$indx]") ? 1 : -1);
   return $basename
      return $bin;
  return $binfile;
   return $count;
   return $cProductServiceTable{vmware_product()};
      return $DBAnswer{$id};
  return defined($gDBDir{$dir});
  return defined($gDBFile{$file});
  return (defined $gManifest{'configFile'} ? $gManifest{'configFile'} :
   return defined($line);
  return ($dstSpace - $srcSpace);
  return ((-e "$certLoc/$certPrefix.crt") &&
      return $ENV{'SUDO_USER'};
      return $ENV{'USER'};
  return $exitValue == 0;
  return file_name_exist($path) ? $path : '';
  return (file_name_exist('./VM/host.vmpl') ||
  return %fileToRestore;
  return @fn;
  return $found;
   return $foundit;
     return $fullbin;
    return $fullpath;
  return &{$gCheckAnswerFct{$type}}($answer, $source);
  return $gDBAnswer{$id};
  return $gDBFile{$file};
  return (get_answer('The file ' . $file . ' that this program was about to '
    return (get_answer('The path "' . $answer . '" does not exist currently. '
  return get_answer('What is the location of the "' . $bin . '" program on your machine?', 'binpath', '');
   return getFreeBSDSuffix();
   return (getpwnam(get_user()))[7] || (getpwuid($<))[7];
  return $gHelper{'gcc'};
# Return GSX or ESX for server products, Workstation for ws
    return $initscriptsdir;
   return @instPkgs
  return $int;
  return int_to_quaddot(quaddot_to_int($ip) & quaddot_to_int($netmask));
            return ($jobPath, $suffix);
    return (join("\n", @rpcResultLines));
  return join('.', @quaddot_a);
  return $kind;
  return ((-l $file) || (-e $file))
   return $line_added
        return $mod;
      return $modName;
   return $name;
    return 'no';
 return ($osProductHash{vmware_product()} =~ m/$OS/i) ? 1 : 0;
  return $output;
  return ($output, $pos);
    return ($output, $pos, $word);
  return ($output, $pos, $word);
      return $path;
    return(perl_config_fail($build_dir));
  return '@@PRODUCT_ARCHITECTURE@@';
# Return product name and version
  return remove_whitespaces($buildNr);
        return $reply;
    return $reply;
   return $result;
  return $ret;
  return %ret;
    return $ret == 0;
  return (($ret >> 8) == 0);
  return $rv;
      return ($rv eq 0);
  return $rv eq 0;
# Returns 1 if it uses the shipped module (and 0 otherwise).
# Returns 1 if the first value is greater, -1 if the second
# @returns - -1 if there was an internal error, otherwise
# @returns - A list of the installed RPM packages that this
# Returns a list of VMware kernel modules that were found on the system that were not
# Returns an array with the list of files that changed since we installed
# @return Service script basename on valid product, undef otherwise.
  return '\'' . $single_quoted . '\'';
    # Return something so we don't get any undef errors.
  return sprintf('This version of "%s" is incompatible with this '
# @returns Return value from system() or direct_command().
      return (("$str1" eq '') ? -1 : 1);
  return $string;
# returns true if product was successfully uninstalled, false otherwise
# returns true if the included build player is newer
# Returns true (non-zero) if the operation succeeded, false otherwise.
  return substr($_[0], rindex($_[0], '/') + 1);
  return substr($path, 0, $pos);
   return $suffix;
  return $suffix;
      return system(@cmd);
  return system($cmd) == 0;
	return !system(shell_string($gHelper{'insmod'}) . ($probe ? ' -p ' : ' ')
	return !system(shell_string($gHelper{'kldload'}) . ' ' . shell_string($modname)
	return !system(shell_string($gHelper{'kldload'}) . ' ' . shell_string($modpath)
	return !system(shell_string($gHelper{'kldunload'}) . ' ' . shell_string($modname)
	return !system(shell_string($gHelper{'modload'}) . ' ' . shell_string($modname)
	return !system(shell_string($gHelper{'modload'}) . ' ' . shell_string($modpath)
	return !system(shell_string($gHelper{'modprobe'}) . ' -r ' . shell_string($modname)
	return !system(shell_string($gHelper{'modprobe'}) . ' ' . shell_string($modname)
		return !system(shell_string($gHelper{'modunload'}) . ' -i ' . $amodid
	return !system(shell_string($gHelper{'rmmod'}) . ' ' . shell_string($modname)
    return system("sh $gPlayerBundle") == 0;
   return system(sprintf "%s/bin/configure-gtk.sh", db_get_answer("LIBDIR")) == 0;
  # Return the amount of space available in kbytes.
# Return the config filename. Usually, the MANIFEST file has this for us. If it
# Return the kind if found, or ''
   # return the requested answer key value
# Return the specific VMware product
# Return the timestamp of an installed file
# Return the version if found, or ''
# Return the version of VMware
  return $tmp . '/' . $prefix . $serial;
  return 'tools-for-linux';
      return undef;
    return undef;
    return 'UNKNOWN';
   return $useSystem ? system($cmd) : direct_command($cmd);
# @return Valid service script's path relative to INITSCRIPTSDIR unless
# Return value is:
# Return value is the complete path if found, or '' if not found
  return $version;
   return vmware_product() eq "wgs";
   return vmware_product() eq "ws" || vmware_product() eq "player";
   return vmware_product() =~ /tools-for-/;
  return 'VMware Tools';
  return $vmware_version;
  return (-w $dstDir);
# Return whether or not this is a hosted desktop product.
# Return whether or not this is a hosted server product.
  # Return whether this directory is writeable.
    return 'yes';
# @retval ($path, $suffix) Path containing Upstart jobs, job suffix (ex: .conf).
# @retval ()               Upstart unsupported or unable to determine job path.
        rmdir($dst_dir);
      rmdir($gRegistryDir);
     $rootdir = '';
    $rootdir = '';
                                  $rootdir . '/bin', './bin', 'BINDIR');
                              $rootdir . '/bin', './bin', 'BINDIR');
                            $rootdir . '/bin', './bin', 'BINDIR');
                "$rootdir/bin/vmware-mount");
     "$rootdir/bin/vmware-uninstall-vix-disklib.pl");
  $rootdir = get_persistent_answer("What prefix do you want to use to install " .
    $rootdir = $gOption{'prefix'};
   $rootdir = $gOption{'prefix'} ||
  $rootdir = $gOption{'prefix'} ||
  $rootdir = internal_dirname($answer);
                            $rootdir . '/lib/'. $libdir, 'vmware-vix/lib' );
                  "$rootdir/lib/libvixDiskLib.so");
                  "$rootdir/lib/libvixDiskLib.so.1");
                            $rootdir . '/lib/vmware-api', './lib');
                              $rootdir . '/lib/vmware', './lib');
                              $rootdir . '/man', 'vmware-vix/man');
    $rootdir = '/usr';
  $rootdir = '/usr';
    $rootdir = '/usr/local';
# RPC for us in tools installations.
		    ' --rpc-on-end' : '';
    @rpcResultLines = <RPCRESULT>;
    $rpctoolBinary = $libDir . $rpctoolSuffix;
    $rpctoolBinary = "./lib" .  $rpctoolSuffix;
    # rpc tool directly out of the staging area.  Woot!
  $rpctoolSuffix .= getFreeBSDSbinSuffix() . '/vmware-rpctool';
     $rpctoolSuffix = is64BitUserLand() ? '/sbin64' : '/sbin32';
     $rpctoolSuffix = is64BitUserLand() ? '/sbin/amd64' : '/sbin/i86';
                                        , 'RUN_CONFIGURATOR', 'yesno', 'yes');
                                       'RUN_CONFIGURATOR', 'yesno', 'yes');
	# run ldconfig here to ensure that the tools libraries are no
                                       . 'running kernel by invoking the '
      # running on ESX) before deciding to do the mount.
	    'running. Please be sure you install the version of ' .
	     'running. Please close the running ACE and run this setup ' .
# Runs depmod on all installed kernels on the system.
                  'run setup again.');
             . 'run this installer again to continue with the upgrade.'
  # Runtime
  $rv = block_remove($src_file, $tmp_file, $begin_marker, $end_marker);
  safe_chmod(0400, "$certLoc" . '/' . "$certPrefix" . '.key');
  safe_chmod(0444, "$certLoc" . '/' . "$certPrefix" . '.crt');
  safe_chmod(0444, $name);
    safe_chmod(04555, $answer . '/bin32-63/vmware-user-suid-wrapper');
    safe_chmod(04555, $answer . '/bin32/vmware-user-suid-wrapper');
    safe_chmod(04555, $answer . '/bin64-63/vmware-user-suid-wrapper');
    safe_chmod(04555, $answer . '/bin64/vmware-user-suid-wrapper');
    safe_chmod(04555, $answer . '/bin/i86/vmware-user-suid-wrapper');
  safe_chmod(04555, $answer . '/bin/vmware-vmx');
  safe_chmod(04555, $answer . '/bin/vmware-vmx-debug');
  safe_chmod(04555, $answer . '/bin/vmware-vmx-stats');
    safe_chmod(04555, $answer . '/sbin32/vmware-hgfsmounter');
    safe_chmod(04555, $answer . '/sbin64/vmware-hgfsmounter');
    safe_chmod(04555, $answer . '/sbin/i86/vmware-hgfsmounter');
    safe_chmod(04555, $answer . '/vmware-authd');
  safe_chmod(04555, $answer . '/vmware-ping');
    safe_chmod(04755, $tmpfilenam);
      safe_chmod(0644, $gInstallerMainDB);
  safe_chmod(0755, $dir);
      safe_chmod(0755, $gHostVmplDir);
  safe_chmod(0755, $gRegistryDir);
    safe_chmod(0755, $gStateDir);
  safe_chmod($mode, $dst);
      safe_chmod(($statbuf[2] & 07777) | 0555, $dst_dir);
  safe_mkdir($dir);
      safe_mkdir($gHostVmplDir);
    safe_mkdir($gRegistryDir);
      safe_mkdir($gStateDir);
# Save the tar installer database
      "'" . '(\S+) ' . "'" . ' ' . $backslash . '. q' .
#  sbin, a lib compatiblity between 5.0 and older systems appeared.  Rather
      # sbin dir is a special case here and is handled within getFreeBSDSbinSuffix().
  # scratch
                                  .' scripts?', 'INITSCRIPTSDIR'
  # script will look for the tar file.
# secure way, but none of them is standard. So I wrote this
  # See bug 368867 for details.  -astiegmann
  # See 'Programming Perl', p. 110
# See vmware_service_issue_command
  # selected the root directory, we can give him better default answers than
  select((select(INSTALLDB), $| = 1)[0]);
   #  SELinux policy for it.
  # SELinux.  See bug 527827.
# Send an arbitrary RPC command to the VMX
  send_rpc_failed_msgs();
# send_rpc_failed_msgs
  send_rpc('toolinstall.end 0');
      send_rpc("toolinstall.installerActive 0");
  send_rpc("toolinstall.installerActive 0");
      send_rpc("toolinstall.installerActive 1");
    send_rpc('tools.set.version 0');
  # Send terminating RPC messages
  # send the RPC. But we'd like to do it as late as possible in the
    $serial++;
  $serial = 0;
                                    . '/' . $service) . ' >/dev/null 2>&1')) {
                                  . $service_name) . ' stop') >> 8;
                     . $service . ' reset')) {
	  # service will start properly after running config.pl for
      @setOption = ();
   @setOption = ();
# Set the name of the main /etc/vmware* directory.
    # Setuid root
  # Setuid root
  # Setup NAT
      # Setup the environment to match what configure-gtk expects,
# Set up the location of external helpers
   # Set up vmware to start/stop at run levels 2, 3 and 5
   # Set up vmware to stop at run levels 0 and 6
                shell_string("$bindir/vmware-networks"),
               shell_string("$bindir/vmware-networks");
             . shell_string($build_dir . '/control-only') . ' '
         . shell_string($build_dir . '/control-only') . '/* >>'
             . ' >>' . shell_string($build_dir . '/control-only') . '/make.log 2>&1')) {
         . shell_string($build_dir . '/control-only') . '/make.log 2>&1');
             . shell_string('CC=' . $gHelper{'gcc'}) . ' '
         . shell_string("$certCnf") . ' -days 5000 > /dev/null 2>&1');
                   . shell_string("$certLoc") . "/$certPrefix.crt " .
         . shell_string("$certLoc") . '/' . shell_string("$certPrefix")
         . shell_string("$certPrefix") . '.crt -config '
          shell_string($command) . ' 2> /dev/null |');
             shell_string($control))) {
           . shell_string($cServices));
                     . shell_string(db_get_answer('INITSCRIPTSDIR')
                        . shell_string(db_get_answer('INITSCRIPTSDIR') . $service_name)
             . shell_string($dir . '/control-only/make.log')
                      . shell_string($gHelper{'grep'}) . ' -v ' . $searchString
           . shell_string($gHelper{'gunzip'}) . ' -c ' . shell_string($bkp)
           . ' | ' . shell_string($gHelper{'gzip'}) . ' > ' . shell_string($bkp));
             shell_string($gHelper{'perl'}) . ' Makefile.PL > make.log 2>&1')) {
           . shell_string($gHelper{'tar'}) . ' -copf - '
           . ' | ' . shell_string($gHelper{'tar'}) . ' -xopf -');
                 shell_string($gHelper{'vmware-acetool'}),
           shell_string($gHelper{'vmware-acetool'}),
           . shell_string('.' . $gInstallerMainDB) . $state_files
           . shell_string('.' . $gInstallerMainDB) . $state_files);
                 shell_string($gManifest{'aceid'});
                 shell_string($hostvmpl),
           shell_string($hostVMPolicy);
           . shell_string($intermediate_format) . ' ' . shell_string($bkp));
                 . shell_string($loader_conf));
		       . shell_string($modpath)
                     shell_string(vmware_product() eq 'tools-for-freebsd' ?
		. shell_string($vmxPath));
	 . shell_string($vmxPath) . ' ' . shell_string($gManifest{'aceid'})
# shipped module and will use whatever module is newer.
        $shippedModVer = "$1";
# Short-Description: VMware Tools service
                       . 'Should this installation be removed ?',
      show_EULA();
    show_EULA();
  show_EULA();
# Side effects:
    # sigint_handler for details.
# SIGINT handler. We will never reset the handler to the DEFAULT one, because
    $SIG{INT} = \&sigint_handler;
    $SIG{QUIT} = \&sigint_handler;
		       . $silencer);
	$silencer = ' >/dev/null 2>&1';
# Similar to block_remove().  Find the delimited text, bracketed by $begin and $end,
# Simple product name -> service script map accessor.  (See
#  simply lib or bin, there is lib32-6 or bin64-53, where -6 refers to FreeBSD
      # Simulate the enter key
   # Since we are root, lets use ldconfig to view the installed libraries
  $single_quoted =~ s/'/'"'"'/g;
                   . $S_level . $service);
    # Solaris 10 Update 1 and higher, but we'll allow users to install on 9.
                 . 'Solaris 9.' . "\n\n");
    # Solaris' default tar(1) does not support gnu tar's -C or -z options.
	# Solaris won't let us unload by module name, so we have to find the ID from modinfo
  # Some versions of tar (1.13.17+ are ok) do not untar directory permissions
    # so that our startup script has only the info it needs.  This gets us around
              # so, there is not much we can do.  Instead just warn the user.
# so the Vix API can figure out where its libraries
# So we can not trust it to determine the location of other binaries.
  # spacechk_answer() below handles it.
# space to hold the package.
    # specific subdir rather than any and all subdirs when passing just 'vmware-vix'.
        # specified (see bug 254808).
  $srcSpace = $parser[0];
              . '\'s services. Aborting the uninstallation.' . "\n\n");
                        . '\'s services.' . "\n\n", 0);
      $SSLeay_ssl_version = '0.9.8';
                           . 'startup script?', 'dirpath', $answer);
    @statbuf = stat($dst_dir);
      @statbuf = stat($file);
    @statbuf = stat($file);
  @statbuf = stat($file);
  @statbuf = stat($gConfigFile);
  @statbuf = stat($src);
    @statbuf = stat($tmpfilenam);
  $state_files = '';
      $state_files .= ' ' . shell_string('.' . $gStateDir . '/'. $state_file);
            $state = 'inside';
stateOrProvinceName     = California
            $state = 'outside';
   $state = 'outside';
    $status = 1;
    $status = system(shell_string(db_get_answer('INITSCRIPTSDIR')
    $status = system(shell_string($gInstallerObject) . ' uninstall --upgrade');
                    ' status vmcount > /dev/null 2>&1') >> 8 == 2) {
    # Step 1:  Install services script in $gRegistryDir.
    # Step 2:  Install Upstart job.
	  # stops.  Hence we need to unload them all manually now so our
    # Stop the services
  # Stop the services
          '^.*stream\s+tcp\s+nowait.*vmauthd.*$' => '',
          '^.*stream\s+tcp\s+nowait.*vmware-authd.*$' => '');
string_mask = nombstr
# Strings for Block Appends.
  $string =~ s/^\s*//;
  $string =~ s/\s*$//;
    # Strip carriage returns, if they exist.
sub acevm_can_install_host_policies {
sub acevm_checkMasterID {
sub acevm_check_valid_date {
sub acevm_create_desktop_icon {
sub acevm_finalize {
sub acevm_find_acetool  {
sub acevm_find_vmx {
sub acevm_get_config_filename {
sub acevm_get_dir {
sub acevm_get_updatedir {
sub acevm_included_player_newer {
sub acevm_install_host_policies() {
sub acevm_install_vmplayer {
sub acevm_is_instance_running {
sub acevm_package_has_host_policies  {
sub acevm_parse_manifest {
sub acevm_uninstall_host_policies() {
sub alt_db_get_answer  {
sub append_output {
sub backup_file {
sub block_append {
sub block_insert {
sub block_match {
sub block_remove {
sub block_restore {
sub build_perl_api {
sub certificateExists {
sub check_answer {
sub check_answer_authdport {
sub check_answer_binpath {
sub check_answer_dirpath {
sub check_answer_existdirpath {
sub check_answer_initdirpath {
sub check_answer_initscriptsdirpath {
sub check_answer_username {
sub check_answer_yesno {
sub check_dir_writeable {
sub check_disk_space {
sub check_for_xen {
sub check_if_vmware_module {
sub check_is_running {
sub check_mountpoint_for_tools {
sub checkRPMForPackages {
sub compare_version_strings {
sub compute_subnet {
sub configure_gtk2 {
sub configure_vnetlib() {
sub create_dir {
sub create_initial_database {
sub createSSLCertificates {
sub db_add_answer {
sub db_add_dir {
sub db_add_file {
sub db_append {
sub db_clear {
sub db_dir_in {
sub db_file_in {
sub db_file_ts {
sub db_get_answer {
sub db_get_answer_if_exists {
sub db_get_files_to_restore {
sub db_is_file_changed {
sub db_load {
sub db_remove_answer {
sub db_remove_dir {
sub db_remove_file {
sub db_save {
sub deconfigure_vnetlib() {
sub depmod_all_kernels {
sub direct_command {
sub dir_remove_trailing_slashes {
sub DoesBinaryExist_Prompt {
sub DoesOSMatchProduct {
sub dot_version_compare {
sub eject_tools_install_cd_if_mounted {
sub error {
sub ext_db_get_answer_if_exists {
sub file_check_exist {
sub file_name_exist {
sub filter_out_bkp_changed_files {
sub finalize_vix_install {
sub find_vix_tar {
sub get_answer {
sub get_cc {
sub getFreeBSDBinSuffix {
sub getFreeBSDLibSuffix {
sub getFreeBSDSbinSuffix {
sub getFreeBSDSuffix {
sub getFreeBSDVersion {
sub get_home_dir {
sub get_initial_database {
sub get_initscriptsdir {
sub get_installed_kind() {
sub get_installed_product_bin {
sub get_installed_version() {
sub get_persistent_answer {
sub get_user {
sub initialize_external_helpers {
sub initialize_globals {
sub init_product_arch_hash {
sub install_content {
sub install_content_acevm {
sub install_content_acevm_update {
sub install_content_player {
sub install_content_rcli {
sub install_content_tools {
sub install_content_viperl {
sub install_content_vix {
sub install_content_vix_disklib {
sub install_content_webAccess {
sub install_dir {
sub installed_product_mismatch {
sub installed_vmware_version {
sub install_file {
sub install_module {
sub install_or_upgrade {
sub install_perl_api {
sub install_permission {
sub install_symlink {
sub install_usage {
sub install_x_module {
sub install_x_module_no_checks {
sub internal_basename {
sub internal_dirname {
sub internal_ls {
sub internal_sed {
sub internal_which {
sub int_to_quaddot {
sub is64BitUserLand {
sub isDesktopProduct {
sub is_root {
sub is_selinux_enabled {
sub isServerProduct {
sub isToolsProduct {
sub kmod_load_by_name {
sub kmod_load_by_path {
sub kmod_unload {
sub link_runlevel {
sub link_services {
sub load_config() {
sub locate_upstart_jobinfo() {
sub main {
sub make_tmp_dir {
  ($subnet, $dhcp) = <CMD>;
sub perl_config_fail {
sub populate_vmware_modules {
sub prelink_fix {
sub prelink_restore {
sub product_os_match {
sub prompt_and_uninstall_conflicting_products {
sub prompt_user_to_remove_installed_product {
sub pulseDisableTimerBasedAudio {
sub pulseNeedsTimerBasedAudioDisabled {
sub quaddot_to_int {
sub query {
sub readConfig {
sub removeRPMPackages {
sub remove_tmp_dir {
sub remove_whitespaces {
sub restart_hal {
sub restart_inetd {
sub restart_xinetd {
sub restore_appended_files {
sub restore_backedup_files {
sub restorecon {
sub restore_kernel_initrd {
sub safe_chmod {
sub safe_mkdir {
sub send_rpc {
sub send_rpc_failed_msgs {
sub shell_string {
sub show_EULA {
sub sigint_handler {
sub spacechk_answer {
                                           substr($input, $i, 1), 0);
               ? substr($service_name, 1) : $service_name;
sub unconfigure_autostart_legacy {
sub uninstall {
sub uninstall_content_legacy_tools {
sub uninstall_dir {
sub uninstall_file {
sub uninstall_inetd {
sub uninstall_module {
sub uninstall_prefix {
sub uninstall_product {
sub uninstall_superserver {
sub uninstall_vix {
sub uninstall_wgs {
sub uninstall_xinetd {
sub vmware_longname {
sub vmware_product {
sub vmware_product_architecture {
sub vmware_product_name {
sub vmware_service_basename {
sub vmware_service_issue_command {
sub vmware_service_path {
sub vmware_version {
sub wrap {
sub wrap_one_char {
sub write_vmware_config {
                 . 'successfully.';
      $suffix = '';
      $suffix = '-5';
      $suffix = '-53';
      $suffix = '-63';
      $suffix = getFreeBSDSuffix();
                  $suffix = $testSuffix;
  # suid file- vmware-hgfsmounter.
    # suppoed to be binary compatible (hopefully).
    # suspend any '--default' option to force user interaction here.  The user
                                        . 'suspend or power off each VM.' . "\n\n";
  # Swap the db with the old one temporarely.
         $syncGroup{$module->{'syncGroup'}} = 0;
         $syncGroup{$module->{'syncGroup'}} = 1;
                . $syncModules{$module->{'syncGroup'}} . "\n\n");
         $syncModules{$module->{'syncGroup'}} .= "\n\t\t" . $module->{'module'} . " ("
	     'system administrator. Try running this setup program with sudo ' .
                   'system administrator. Try running this setup program with sudo or ' .
    system('cd /;'
    system('cd ' . shell_string($bkp_dir) . ';'
         system("chown -R $uid:$gid " . shell_string(db_get_answer('BINDIR')));
         system("chown -R $uid:$gid " . shell_string($gFirstCreatedDir));
         system("chown -R $uid:$gid " . shell_string($home . '/.local'));
     system($cmd);
     system($gHelper{'rm'} . ' -rf ' . $eclipse_dir . '/../configuration/com.vmware.bfg*');
	system($halScript . ' restart');
	 system(join(' ', $depmodBin, '-a', $kRel));
      system(join(' ', $gHelper{'cp'}, $tmpFile, $cfgFile));
	    system('ldconfig &> /dev/null');
	  system('ldconfig &> /dev/null');
  system($ld_lib_string . " " . shell_string("$openssl_exe") . ' req -new -x509 -keyout '
          !(system($ld_lib_string . " " . shell_string("$openssl_exe") . ' x509 -in '
        system('ls -AlR ' . shell_string($dir));
        $systemModVer = "$1";
	     system("$pkillBin vmware-user >/dev/null 2>&1");
                       "system.  Please either install SSLeay from your distribution " .
     system("/sbin/restorecon " . $file);
     system("$servicePath hal restart");
       system(shell_string(db_get_answer('BINDIR') . '/' . $gConfigurator));
      system(shell_string($File) . ' stop');
              system(shell_string($gHelper{'add_drv'})
               system(shell_string($gHelper{'cat'}) . ' ' . $devLinkTable . ' | '
    system(shell_string($gHelper{'depmod'}) . ' -a');
    system(shell_string($gHelper{'killall'}) . ' -HUP inetd');
  system(shell_string($gHelper{'killall'}) . ' -TERM vmware-serverd  >/dev/null 2>&1');
    system(shell_string($gHelper{'killall'}) . ' -USR2 xinetd');
          system(shell_string($gHelper{'mv'}) . ' -f ' . shell_string($tmp)
    system(shell_string($gHelper{'mv'}) . ' -f ' . shell_string($tmp) . ' '
               system(shell_string($gHelper{'mv'}) . ' ' . $tmpFile . ' '
    system(shell_string($gHelper{'mv'}) . ' ' . $tmp_file . ' ' . $src_file);
            system(shell_string($gHelper{'rem_drv'}) . ' vmhgfs');
            system(shell_string($gHelper{'rem_drv'}) . ' vmmemctl');
            system(shell_string($gHelper{'rem_drv'}) . ' vmxnet');
            system(shell_string($gHelper{'rem_drv'}) . ' vmxnet3s');
       system(shell_string($gHelper{'rm'}) . " -rf $path");
      system(shell_string($gHelper{'rm'}) . ' -rf ' . shell_string($dir));
    system(shell_string($gHelper{'tar'}) . ' -C ' . shell_string($bkp_dir)
    system(shell_string($gHelper{'tar'}) . ' -C / -xzopf ' . shell_string($bkp));
  system(shell_string($gHelper{'touch'}) . ' '
              system(shell_string($gHelper{'update_drv'}) . ' -a -i \'"pci1022,2000"\' '
  system(shell_string($gHelper{'vmware-acetool'}) . ' checkMasterID '
    system(shell_string($gInstallerObject) . ' convertdb '
      system(shell_string("$gRegistryDir/$gUninstallerFileName"));
      system(shell_string($InstallerObject) . ' uninstall');
      system(shell_string($uninstaller));
        system(shell_string($where));
  system("vmware-viperl-distrib/vmware-install.pl --default --prefix=$rootdir --nested");
# Table mapping vmware_product() strings to applicable services script or
# Tar package manager for VMware
  `tar xf vmware-viperl.tar 2> /dev/null`;
# Tell if the user is the super user
    # Tell the Host that the installer for tools is now
  # tell the Vix world where to find the libs, putting the VIXLIBDIR value
            # Tell the world that a system module is more recent than the packaged one.
         # Tell the world that  we're planning on installing a packaged module.
   # temporary database
      $terse = db_get_answer('TERSE');
         $testdir . ' directory.' . "\n\n", 0);
# Test if specified file contains line matching regular expression
#  than sbin32, which exists normally for 5.0 and older systems, there needs
		 'that another user may run this package.'. "\n\n", 0);
                     "That application did not run successfully.  " .
                    "That application did not run successfully.  " .
                "That application did not run successfully.  " .
     # that chkconfig cannot be found.  Warn the user..
                 . 'that directory that this program did not create, it will '
  #        that from happening.
     # that insserv cannot be found.  Warn the user...
      # that require "can't locate" the desired module.  If the message does not
# that they appear to be a valid certificate).
      # that we backed up and was changed in the mean time by someone else
    # The acevm install puts all files for a given install, including the installdb,
  # the actual source of the files is within the source ./lib so the
            # the appropriate output.
      # The best database format those installers know is tar. We will have to
#  '': the binary has not been found
#  the binary name if it has been found
# the bit-itude of our platform.  If we're running on Solaris we don't have
# the block at the first regexp match.
      # the configurator do it.
                           . 'the daemon files?', 'dirpath', $rootdir . '/sbin');
                       . 'the daemon files?', 'dirpath', $rootdir . '/sbin');
    # The DB didn't help.  But no matter, we can
        # The "Debian" way
  # The default must make sure that the product will be correctly installed
# The directory must exist already and there must be enough space to hold the update
      # the directory this uninstaller is in.
                            . 'the documentation files?', 'dirpath',
# the entire line.  Remove this, once we have better "block handling" of
      # The environment variable sometimes contains the pager name _followed by
                            . 'the executable files?', 'dirpath',
               'the executable files?', 'dirpath', '/usr/bin', './external_bin', 'BINDIR'));
  # The file could be a symlink to another location.  Remove it
  # The file could be a symlink to another location. Remove it
                          . 'the file ' . $file . '.' . "\n\n", 0);
	  # the first time.
                                       . 'the first time after this update, you'
# The initrd in place includes modules we added on configure.  If the module
	  # The init script won't unload them either because the modules
    # The installation process ran far enough to create the startup script
    # the issue where RedHat tries (unsuccessfully) to use LSB info to determine where
    # The last word doesn't fit in the end of the line. Break the line before
                              . 'the library files?', 'dirpath',
                            . 'the library files?', 'dirpath',
                            . 'the library files?', 'dirpath', $rootdir
                              . 'the manual files?', 'dirpath',
  # the normal uninstall pieces occurr.
	 # Then pulseaudio's version is >= 0.9.19
  # then remove the file so it won't get left behind in an uninstall.
        # Then the module may not be there.  In Ubuntu 9.04, modules.dep
      # Then the shipped module is newer than sytem module.
      # Then use 0.9.8
  # then vmrun will already exist.
     # Then we have gotten here, but gone past the chkconfig section, indicating
     # Then we have gotten here, but gone past the insserv section, indicating
      # Then we should use the LSB information
    # The only slash is at the beginning
	  # The open-vm tools don't always unload the modules properly.
  # The path does not exist
    # The path is an existing directory
  # The path is not a directory
      # The previous answer is valid. Make it the default value
# the product is Workstation and is the 64bit version at that.
      # there are bad dependencies, etc. Only mark the module for installation
       # There are only two possible arguments
      # The "RedHat" way
    # There is a previous answer in the database
      # There is currently only one option:  --upgrade.
# - There is no /etc/vmware-ace/host.vmpl installed
  # there is no mismatch.
      # There is no other '/' in the name
    # There is no way to tell what may currently be installed, but something
#            the return value of RPM
# the same thing as the default (kills the process) and even sends the end
# These are installed per user.
# These quaddot functions and compute_subnet are from config.pl and are needed
    # The "SuSE version < 7.1" way
    # The "SuSE version >= 7.1" way
  # The "SuSE version >= 7.1" way
    # The uninstall of legacy tools must come before get_initial_database()
         # the user.  For more details see bug170327.
  # The usual way
# the value or the empty string if no answer or file is found.
  # the Vix uninstaller.  When Vix comes through here, skipping this if, all of
# They are a lot of small utility programs to create temporary files in a
     # they find the uninstaller. That's why we:
              # they might not be in the standard locations
  # This comment is a fix for emacs's broken syntax-highlighting code
# This defines module dependencies.  It is a temporary solution
# This does the checks in the following order
# this ensures that the all necessary RPC end messages are sent.
  # This file is going to be modified after its creation by this program.
# This function returns i386 under most circumstances, returning x86_64 when
# This function should never know about filenames. Only database
#      This function uninstalls previous products found (now managed by
# this is a function instead of a macro in the off chance that product_name
    # This is due to the fact that if the destdir is on a squash_root nfs mount, things fail miserably
  # This is necessary for old installations of the tools
    # this is only relevant for wgs
        # This is the behavior of `more', regardless of the command line
  # This is the first installation. Create the installer database from
    # This is what the 1 is for
# This list simply defined what modules need to be included
  # This may never succeed (if we are racing with a malicious process), but at
                       . 'This program is going to create it, including needed '
                     "This script will now attempt to manually remove the " .
                    "This script will now attempt to manually remove the " .
                "This script will now attempt to manually setup the " .
                           . 'this software on Xen kernels has not been tested and is '
# This sub fetches the installed product's binfile and returns it.
  # this will workaround the scenario of the install tarball being extracted
      # Those installers at least know about the tar2 database format. We won't
      # Those installers at least know about the tar3 database format. We won't
      # Those installers at least know about the tar4 database format. We won't
               . 'time by invoking the following command: "'
	       . 'time by invoking the following command: "'
  $tmp = defined($ENV{'TMPDIR'}) ? $ENV{'TMPDIR'} : '/tmp';
  $tmpdir = make_tmp_dir($cTmpDirPrefix);
        $tmp_dir = make_tmp_dir('vmware-installer');
  $tmp_dir = make_tmp_dir('vmware-installer');
                      . ' > ' . $tmpFile);
        $tmp = $tmp_dir . '/loader.conf';
  $tmp = $tmp_dir . '/tmp';
       # to access so it won't need to know lib32, etc.
		     $to_append, $cMarkerEnd) == 1) {
      $to_append .= $line . "\n";
  # To avoid that, we must re-package the database backup
#  to be a specific sbin:  sbin32-5.  There is no 64bit set.
   # TODO: Add comments to the other code which generates the filenames
    # TODO: Need a way to inhibit creation of shortcuts.  env variable
         ' to ' . $file . '.old.' . $i .'.' . "\n\n", 0);
# to get our dependency information.
# to guess and can just ask isainfo(1) how many bits userland is directly.
                              . 'to install the binary files?', 'dirpath',
                                  . 'to install the ' . vmware_product_name()
                              . 'to install the ' . vmware_product_name()
                            . 'to install the ' . vmware_product_name()
  #   - 'to' is valid and we've already passed it.
      $tokens[0] = DoesBinaryExist_Prompt($tokens[0]);
      @tokens = split(' ', $ENV{'PAGER'});
          . $to . '".' . "\n\n");
  # Tools are gone when they're still there.
    'tools-for-freebsd' => 'freebsd'
   'tools-for-freebsd'  => 'vmware-tools.sh',
    'tools-for-linux'   => 'linux',
    # tools-for-linux.  Only check on OpenSuSE for now since they ship
   'tools-for-linux'    => 'vmware-tools',
    'tools-for-solaris' => 'sunos',
   'tools-for-solaris'  => 'vmware-tools',
			  "Tools installer from the guest cdrom mounted " .
    # Tools lowest supported FreeBSD version is now 6.1.  Since the lowest
  # to prevent it from toying with apploader or any of our apps.
	  # to properly restore it.
  # to reboot because of the loaded vmmemctl.
# to see if this build is an official one or not, and show the
                              'to select a different directory?  If you select no, the install will be aborted.','yesno','no');
# to the new product being installed, asking the user relevant questions.
# to these files after install/config ran.
    # Trap the PIPE signal to avoid broken pipe errors on RHEL4 U4.
# Try and figure out which "superserver" is installed and unconfigure correct
        # try out both a full path and one relative to the modules
              # Try to add back the pcn driver we removed
# Try to eject the guest tools install cd so the user doesn't have to manually.
  # Try to retrieve the installed version from the configurator program. This
   # try to use an installer object if it exists
   # Try using insserv if it is available.
Type=Application
                  'Unable to continue' . "\n\n");
                    'uname', 'mount', 'du', 'df', 'depmod', 'ldd');
                    'uname', 'mount', 'du', 'df', 'depmod', 'pidof',
                    'uname', 'mount', 'du', 'df', 'depmod', 'pidof');
# unconfigure_autostart_legacy --
         unconfigure_autostart_legacy($cMarkerBegin, $cMarkerEnd);
      : undef;
    undef $/;
      undef $answer;
  undef %fileToRestore;
  undef %gDBAnswer;
  undef %gDBConfig;
  undef %gDBDir;
  undef %gDBFile;
  undef %gDBLink;
  undef %gDBMove;
  undef %gDBUserModified;
  undef $modName;
        undef $modPath;
#  undef on failure
      undef %patch;
    undef %patch;
   undef %patch;
  undef %patch;
    # under a single directory.
        # uninstall
        uninstall();
         uninstall('/acevm');
# Uninstall a directory previously installed by us
# Uninstall a file previously installed by us
# uninstall a product
# Uninstall a tar package
  # uninstallation may have included the directory structure in their database
      # uninstallation process should now go as far as possible
      uninstall_content_legacy_tools();
      uninstall_dir($dir, vmware_product() eq 'acevm' ? '1' : '0');
  #     uninstalled by our uninstaller
  # uninstalled everything.
# Uninstaller section for old style MUI installer: Most of this code is
  uninstall_file($dst);
      uninstall_file($file);
      uninstall_file("$gHostVmplDir/ace.dat");
      uninstall_file($gInstallerMainDB);
    uninstall_file("$gRegistryDir/host.vmpl");
  uninstall_file($name);
# Uninstall files and directories beginning with a given prefix
# Uninstall host policies
    uninstall_inetd($inetd_conf);
                        'uninstalling the existing installation.  Do you wish to continue? (yes/no)', 'yesno', 'no') eq 'no') {
                        'uninstalling the more recent version.  Do you wish to continue? (yes/no)', 'yesno', 'no') eq 'no') {
                   'uninstalling the more recent version.  Do you wish to continue? (yes/no)', 'yesno', 'no') eq 'no') {
                        'uninstalling the previous version.  Do you wish to continue? (yes/no)', 'yesno', 'yes') eq 'no') {
                   'uninstalling the previous version.  Do you wish to continue? (yes/no)', 'yesno', 'yes') eq 'no') {
    uninstall_module();
# Uninstall modules
  uninstall_prefix('');
  uninstall_prefix(db_get_answer('LIBDIR') . '/modules');
  # uninstall process so that we won't accidentally tell the VMX that the
  uninstall_superserver();
    # Uninstall the previous installation
  # Uninstall the previous installation
      uninstall_vix();
         uninstall('/vmware');
      uninstall('/vmware');
      uninstall('/vmware-rcli');
	uninstall('/vmware-tools');
	uninstall('/vmware-tools.sh');
      uninstall('/vmware-viperl');
      uninstall('/vmware-vix-disklib');
    uninstall_wgs();
    uninstall_xinetd($xinetd_dir);
      unlink($dotdScript);
  unlink($dst);
          $unlinked = 1;
      unlink $File;
      unlink $$filesToRestoreRef{$origFile};
    unlink ($gConfigFile);
      unlink $gDBMove{$MovedFile};
    unlink("$gHostVmplDir/ace.dat");
      unlink $gInstallerMainDB;
  unlink $gInstallerMainDB;
    unlink($hostVMPolicy);
    unlink $LinkedFile;
        unlink $MovedFile;
  unlink($name);
      unlink $origFile;
    unlink($tmpfilenam);
     unlink($vmwHgfsmntPath);
  # unmount the CD.
  # Unregister the IP service.
# Unsets all variables modified in the db_load process
unstructuredName        = ($curTime),$certUniqIdent
                           . 'unsupported.' . "\n"
# untar and install vmware-player.
# until we eventually move over to using the modules.xml file
  # until we find something that exists.
      $update = '-update';
  # upgrade option set to 1.
    # Upgrade the database format: keep only the 'answer' statements, and add a
      # upgrade the format
   # Upstart/initctl case.
      (@upstartJobInfo = locate_upstart_jobinfo())) {
# Upstart job name.
# Upstart jobs should be installed and any job file suffix.
   # Use 0.9.8 for newer ssl libs
  # Use an artifical last '' separator to process the last word
    # Use chkconfig
# Use Config module to update VMware host-wide configuration file
  # Used for removing links that were not added as files to the database.
             . '". Use environment variable CC to override.' . "\n\n", 0);
  # userland support) we use binaries from the -53 directories.
			 'username', get_user());
	       . 'user on this system.' . "\n\n", 0);
# Uses a regexp to find a particular spot in the file and adds
use strict;
# Use the Perl system configuration information to make a good guess about
# Use this when the answer shouldn't be stored in the database
# Use this when you don't care about the validity of the answer
# Use this when you want an answer to be stored in the database
     '/usr');
                            '/usr/bin', './bin', 'BINDIR'));
#!/usr/bin/perl
#!/usr/bin/perl -w
                      '/usr' . $globallibdir . '/' . $shared_object);
     # us ripping out all of the kernel modules.
  # 'u+w' on everything.
                                          . ' -v 2>&1 < /dev/null');
   # Valid paths are
# value is greater, or 0 if they are equal.
#          - value is the backed up file.
		      "/var/run/vmnat.*", "/var/log/vnetlib", "$gRegistryDir/networking",
		      "/var/run/vmnet-*") {
   '@@VCLI_PRODUCT@@'   => '@@VCLI_PRODUCT_PATH_NAME@@',
	    $vers = 0;
	$vers = 0;
	$vers = 1;
  $version = '';
      $version = '1';
      $version = $1;
#  version 6.0 and 53 to FreeBSD 5.3.
      $version = direct_command(shell_string($gInstallerObject) . ' version');
# version number, the same version number, or an older version number.  X may be
		. 'version of this program instead.'
   $version_str_A =~ s/\D*(\S+.\S+.\S+)\s+build-(\d+)/$1.$2/;
   $version_str_B =~ s/\D*(\S+.\S+.\S+)\s+build-(\d+)/$1.$2/;
	     $verStr = $1;
   # viperl and rcli don't have binfile to report version, instead they
   'vix-disklib'        => 'vmware-vix-disklib',
    # vix in a nested install and the '--default' option.
                            '/VM/' . $gManifest{'configFile'});
                     /vmmemctl/) {
                      'vmsync', 'pvscsi', 'vmxnet3',
                                                     '/vmware-config.pl';
  # vmware-distrib/vmware-vix/vmware-vix.tar.gz.  "Install" it into
			       "vmware-guest-kmp-debug",
			       "vmware-guest-kmp-default",
			       "vmware-guest-kmp-desktop",
			       "vmware-guest-kmp-pae",
			       "vmware-kmp-default",
			       "vmware-kmp-pae",
			       "vmware-kmp-trace",
      vmware_longname() . ' package, then re-run this program.' . "\n\n");
               . vmware_longname() . ' tar package.' . "\n\n", 0);
# vmware-netdetect
        (vmware_product() eq 'player')) &&
       (vmware_product() eq 'player')) &&
       (vmware_product() eq 'rcli')) {
             vmware_product() eq 'tools-for-freebsd' ||
           vmware_product() eq 'tools-for-freebsd' ||
        vmware_product() eq 'tools-for-freebsd' ||
        vmware_product() eq 'tools-for-freebsd') {
      vmware_product() eq 'tools-for-freebsd' ||
		    vmware_product() eq 'tools-for-freebsd' ||
	vmware_product() eq 'tools-for-freebsd' ||
        vmware_product() eq 'tools-for-linux'   ||
      vmware_product() eq 'tools-for-linux') {
             vmware_product() eq 'tools-for-solaris') {
           vmware_product() eq 'tools-for-solaris') {
        vmware_product() eq 'tools-for-solaris')
      vmware_product() eq 'tools-for-solaris') {
		    vmware_product() eq 'tools-for-solaris') ?
	vmware_product() eq 'tools-for-solaris') {
                                      vmware_product() eq 'wgs')) {
        (vmware_product() eq 'ws') ||
       (vmware_product() eq 'ws') ||
# vmware_product() has no such script.
                                        . vmware_product_name()
                      . vmware_product_name()
                  vmware_product_name() .
                 . vmware_product_name()
          . vmware_product_name() . "." .  "\n\n");
       vmware_product_name() . '.' . "\n\n", 0);
           vmware_product_name() . ".\n\nPress enter to continue.", '', 0);
     vmware_product_name() . "?\n\n" . 'The prefix is the root directory where the other
	    vmware_product_name() . ' that is appropriate for your operating system.' .
          vmware_product() ne 'rcli') {
          vmware_product() ne 'tools-for-freebsd' &&
          vmware_product() ne 'tools-for-solaris' &&
          vmware_product() ne 'viperl' &&
        (vmware_product() ne 'viperl') && (vmware_product() ne 'rcli') &&
        vmware_product() ne 'viperl' && vmware_product() ne 'rcli' &&
        (vmware_product() ne 'vix-disklib') && (vmware_product() ne 'viperl') &&
        vmware_product() ne 'vix-disklib' && vmware_product() ne 'viperl') {
# vmware_service_basename
# vmware_service_issue_command
    vmware_service_issue_command($cServiceCommandSystem, 'stop');
# vmware_service_path
                            . '/vmware-tools', './doc');
                     "vmware-tools service.\n\n", 0);
                    "vmware-tools service.\n\n", 0);
                "vmware-tools service.\n\n", 0);
                            '/vmware-tools.sh' : '/vmware-tools'), \%patch, 0x1);
    $vmware_version = $1;
               . vmware_version() . ' completed successfully.' . "\n\n", 0);
       . vmware_version() . ' package, then re-run this program.' . "\n\n");
  $vmware_version_string = direct_command(shell_string($gHelper{"vmware"})
    $vmware_version = "Workstation";
                            'vmware_vmblock' => 'vmblock',
                            'vmware_vmhgfs' => 'vmhgfs',
                            'vmware_vmmemctl' => 'vmmemctl',
                   . 'VMware VmPerl Scripting API.  Look in your Linux '
                            'vmware_vmsync' => 'vmsync',
                            'vmware_vsock' => 'vsock');
		      'vmwgfx');
                      'vmxnet', 'vmci', 'vsock',
			     vmxnet  => 'yes');
      #   VNET_HOSTONLY_HOSTADDR -> VNET_1_HOSTONLY_HOSTADDR
    # VNET_HOSTONLY_ keywords since the rpm2|tar2 format contained only a few
      #   VNET_HOSTONLY_NETMASK  -> VNET_1_HOSTONLY_NETMASK
      #   VNET_HOSTONLY          -> VNET_1_HOSTONLY
      #   VNET_INTERFACE         -> VNET_0_INTERFACE
    # VNET_ keywords
    #   VNET_n_DHCP            -> 'yes' iff VNET_n_INTERFACE is not defined and
    #                              VNET_n_HOSTONLY_{HOSTADDR,NETMASK} are defined
    #   VNET_n_HOSTONLY_SUBNET -> set if VNET_n_HOSTONLY_{HOSTADDR,NETMASK} are set
      #   VNET_SAMBA_MACHINESID  -> VNET_1_SAMBA_MACHINESID
      #   VNET_SAMBA_SMBPASSWD   -> VNET_1_SAMBA_SMBPASSWD
      #   VNET_SAMBA             -> VNET_1_SAMBA
                                        . 'want this program to invoke the '
      # Warn users that we don't support Solaris 9, but they can install
               . 'was about to remove it.  Somebody else apparently did it '
    # Was bug 15880
                 . ' was not restored from backup because our file '
      # We are in the case of bug 25444 where we are restoring a file
# we check for non-vmware modules on the system.
  #     We could do a ps -ax, look for xinetd, parse the line, find the config
  # We don't use default answers here because once the user has
  # We don't use get_persistent_answer() here because once the user has
  # We don't yet know if vmware-rpctool was copied into place.
  # We don't yet maintain ownership and permissions metadata for all the
### We do this by pattern matching 'vmware-vmx' and the vmx filename in a single
  # We found a separator.  Process the last word
  # We give the user the choice so that a sysadmin can perform a normal
        # We have to clean up the ugliness before we abort.
  # We might be in a 'NESTED' install and workstation would have already
    # We need to check whether or not the system has either insserv, or chkconfig,
# we need to install and ACE.
       # We need to trim the leading '/' off of the service name.
   # We need version 0.9.7 or greater.  We ship 0.9.8
   # We only allow tools and viperl/vicli(rcli) to be installed with the xen
# We really need to have some kind of include system
                           "We reccomend you remove one of them, run " .
  # We sort them by decreasing order of their length, to ensure that we will
  # We touch all our files in case the system clock is set to the past.  Make will get confused and
   'wgs'                => 'vmware',
# what would be considered an upgrade situation or a conflict.
  # when /etc/vmware was one and unique dump for all the products
      $where .= '/vmware-uninstall-vix.pl';
        # Whichever PAGER the user has, we want them to have the same
       while ($#ARGV != -1) {
      while ($#ARGV != -1) {
      while (!-d $dstDir) {
  while (! -d $dstDir) {
  while (!defined($answer)) {
  while( defined ($file = readdir(DIR)) ) {
      while (defined($line = <BLOCK>)) {
    while(defined($_ = <SRC>)) {
  while (<FILE>) {
   while (($index < $#versions_A + 1) && ($versions_A[$index] eq $versions_B[$index])) {
  while (<INSTALLDB>) {
   while (<INSTDB>) {
      while (($key, $value) = each %patch) {
  while ($line = <MANIFEST>) {
         while (<MNTTAB>) {
    while (<MODULESDEP>) {
         while (<MOUNTS>) {
    while (<OLDCONFIG>) {
  while (<OUTPUT>) {
    while (<PLAYERINSTALLDB>) {
  while (<PSOUT>) {
    while($redo) {
  while ($redo) {
  while ($space < 0) {
   while (<SRC>) {
   while (<XEN>) {
      # whitespace) before dealing with it.
  # will already be in its final location.  This is where the vmware-config
# will one day contain a language-specific escape character.
                      . '" will prevent some users from using '
    #Without a binfile, we can't detect version, so we simply warn the user we are about to uninstall
# _without_ interpolating variables (Perl does it by default)
# with the exception of pre-uninstaller not being installed, this one does
            . 'with the ' . vmware_longname() . ' tar package only.' . "\n\n");
    # with those packages installed by default.
  $word = '';
    $word .= $char;
# Wordwrap system: append some content to the output
# Wordwrap system: deal with the next character
# Wordwrap system: word-wrap a string plus some reserved trailing space
  # works for both the tar and the rpm installers
                 "work with VIPerl:\n\n", 0);
                           . 'Would you like to continue (NOT RECOMMENDED)?', 'yesno', 'no');
                       . 'Would you like to continue with the installation?',
		   'Would you like to remove the install DB?', 'yesno', 'no') eq 'yes') {
#  Write the VMware host-wide configuration file - only if console
  write_vmware_config();
   'ws'                 => 'vmware',
   # xdm
#      xdm:             Revert xdm-config(s).
	    -x internal_which('mount')) {
	     -x internal_which('umount')) {
# X-Start-Before: \$network
# X-Stop-After: \$network
# XXX as a side effect, if the string being replaced is '', remove
    # XXX check $answer for a null value which can happen with the get_answer
    # XXX Consider using v_s_i_c below.
  # XXX Could be a problem, as they could start xinetd with '-f config_file'.
# XXX Duplicated in config.pl
          # XXX Fix dot_version_compare to support a comparison like 0.6.5 to 0.6.
  # XXX In the future, we should use a method of the installer object to
# XXX Mostly duplicated from the main server installer.
               # XXX There has to be a better way, but I don't know Perl
# XXX This code is mostly duplicated from the main server installer.
        # XXX This could leave a dangling hierarhcy
  # XXX This is deeply broken: we let a third party tool install a file without
  # XXX This is not clean. We really need separate packages, managed
  # XXX Use the block_*() API instead, like we do for $cServices.
    # XXX we do not have a timestamp for those files so we can't
           . ' -xzopf ' . shell_string($bkp));
                       'yesno', 'yes');
                       'yesno', 'yes') eq 'no') {
                      'yesno', 'yes') eq 'yes') {
                     'yesno', 'yes') eq 'yes') ? 0 : 1;
                       'yesno', 'yes') eq 'yes') ? $answer : '';
               . 'You can decide to remove this software from your system at any '
	       . 'You can decide to remove this software from your system at any '
   '. You have too many backups files. They are files of the form ' .
       . 'You may want to re-install the ' . vmware_product_name() . ' '
          . 'You may want to re-install ' . vmware_product_name()

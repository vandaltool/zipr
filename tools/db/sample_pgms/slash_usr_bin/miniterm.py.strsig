                        ))
                ))
        """
        )
        ))
0: just print what is received
--- 1 2 3         set stop bits (1, 2, 1.5)
1: escape non-printable characters, do newlines as unusual
2: escape non-printable characters, newlines too
3: hex dump everything""",
--- 7 8           set data bits
        action = "count",
        action = "store",
        action = "store_true",
            args.pop(0)
    ascii_code = ord(character)
                        backup = self.serial.baudrate
            baudrate,
                baudrate = int(args[0])
    baudrate = options.baudrate
--- b             change baud rate
                                        break
                    break                                   # exit app
    'break': key_description('\x02'),
# (C)2002-2009 Chris Liechti <cliechti@gmx.net>
                    c = console.getkey()
    class Console:
class Miniterm:
                        console.cleanup()
        console.cleanup()
    console = Console()
                        console.setup()
    console.setup()
CONVERT_CR   = 1
CONVERT_CRLF = 2
CONVERT_LF   = 0
        convert_outgoing = CONVERT_CR
    convert_outgoing = CONVERT_CRLF
        convert_outgoing = CONVERT_LF
            convert_outgoing=convert_outgoing,
            c = os.read(self.fd, 1)
                    c = '\x03'
                data = self.serial.read(1)
--debug can be given multiple times:
        default = 0
        default = 0x14
        default = 0x1d
        default = 9600
        default = False
        default = 'N'
        default = None
    def cleanup_console():
        def cleanup(self):
    def dump_port_settings(self):
def get_help_text():
        def getkey(self):
        def __init__(self):
    def __init__(self, port, baudrate, parity, rtscts, xonxoff, echo=False, convert_outgoing=CONVERT_CRLF, repr_mode=0):
    def join(self, transmit_only=False):
def key_description(character):
def main():
    def reader(self):
        def setup(self):
    def start(self):
    def stop(self):
    def writer(self):
        description = "Miniterm - A simple terminal program for the serial port."
        dest = "baudrate",
        dest = "cr",
        dest = "dtr_state",
        dest = "echo",
        dest = "exit_char",
        dest = "lf",
        dest = "menu_char",
        dest = "parity",
        dest = "port",
        dest = "quiet",
        dest = "repr_mode",
        dest = "rtscts",
        dest = "rts_state",
        dest = "xonxoff",
                    # direct output, just have to care about newline setting
# done), received characters are displayed as is (or escaped trough pythons
    'dtr': key_description('\x04'),
---       %(dtr)s  DTR          %(break)s  BREAK
    'echo': key_description('\x05'),
            echo=options.echo,
                    elif c == '1':                          # 1 -> change to 1 stop bits
                    elif c == '2':                          # 2 -> change to 2 stop bits
                    elif c == '3':                          # 3 -> change to 1.5 stop bits
                    elif c == '7':                          # 7 -> change to 8 bits
                    elif c == '8':                          # 8 -> change to 8 bits
                elif c == EXITCHARCTER: 
                    elif c in 'bB':                         # B -> change baudrate
                    elif c in 'eE':                         # E -> change to even parity
                    elif c in 'mM':                         # M -> change to mark parity
                    elif c in 'nN':                         # N -> change to no parity
                    elif c in 'oO':                         # O -> change to odd parity
                    #~ elif c in 'pP':                         # P -> change port XXX reader thread would exit
                    elif c in 'rR':                         # R -> change hardware flow control
                    elif c in 'sS':                         # S -> change to space parity
                    elif c in '\x08hH?':                    # CTRL+H, h, H, ? -> Show help
                    elif c in 'xX':                         # X -> change software flow control
                elif c == MENUCHARACTER: # next char will be for menu
                elif c == '\n':
                    elif c == '\x01':                       # CTRL+A -> cycle escape mode
                    elif c == '\x02':                       # CTRL+B -> toggle BREAK condition
                    elif c == '\x04':                       # CTRL+D -> Toggle DTR
                    elif c == '\x05':                       # CTRL+E -> toggle local echo
                    elif c == '\x09':                       # CTRL+I -> info
                    elif c == '\x0c':                       # CTRL+L -> cycle linefeed mode
                    elif c == '\x12':                       # CTRL+R -> Toggle RTS
                    elif c == '\x15':                       # CTRL+U -> upload file
                    elif data == '\n' and self.convert_outgoing == CONVERT_LF:
                        elif data == '\r':
                    elif data == '\r' and self.convert_outgoing == CONVERT_CR:
    elif options.lf:
elif os.name == 'posix':
                elif self.repr_mode == 1:
                elif self.repr_mode == 2:
                elif self.repr_mode == 3:
                        else:
                    else:
                else:
    else:
        # enter console->serial loop
                    # escape all non-printable, including newline
                    # escape everything (hexdump)
                    # escape non-printable, let pass newlines
        except:
        except AttributeError:
                            except IOError, e:
                except KeyboardInterrupt:
        except serial.SerialException:
        except serial.SerialException, e:
    except serial.SerialException, e:
            except ValueError:
                        except ValueError, e:
---       %(exchar)-8s Send the exit character to remote
    'exchar': key_description(EXITCHARCTER),
--- %(exit)-8s Exit program
    EXITCHARCTER = chr(options.exit_char)
EXITCHARCTER = '\x1d'   # GS/CTRL+]
    'exit': key_description(EXITCHARCTER),
                        filename = sys.stdin.readline().rstrip('\r\n')
                                file = open(filename, 'r')
# first choose a platform dependant way to read single characters from the console
                    for character in data:
# for the shortcut keys is used and not the value at program start
           found. when MENUCHARACTER is found, interpret the next key
    """generate a readable description for a key"""
global console
    global EXITCHARCTER, MENUCHARACTER
            # happens when the installed pyserial is older than 2.5. use the
        help = "ASCII code of special character that is used to control miniterm (menu)",
        help = "ASCII code of special character that is used to exit the application",
        help = """debug received data (escape non-printable chars)
        help = "do not send CR+LF, send CR only",
        help = "do not send CR+LF, send LF only",
        help = "enable local echo (default off)",
        help = "enable RTS/CTS flow control (default off)",
        help = "enable software flow control (default off)",
        help = "port, a number (default 0) or a device name (deprecated option)",
        help = "set baud rate, default %default",
        help = "set initial DTR line state (possible values: 0, 1)",
        help = "set initial RTS line state (possible values: 0, 1)",
        help = "set parity, one of [N, E, O, S, M], default=N",
        help = "suppress non error messages",
# help text, starts with blank line! it's a function so that the current values
        if args:
    if args:
    if ascii_code < 32:
                    if c == MENUCHARACTER or c == EXITCHARCTER: # Menu character again/exit char -> send itself
                        if data == '\n':
                    if data == '\r' and self.convert_outgoing == CONVERT_CR:
                        if filename:
                if menu_active:
if __name__ == '__main__':
                                    if not line:
        if not options.quiet:
    if not options.quiet:
        if not transmit_only:
    if options.cr:
    if options.cr and options.lf:
    if options.dtr_state is not None:
    if options.menu_char == options.exit_char:
    if options.parity not in 'NEOSM':
        if options.port is not None:
    if options.rts_state is not None:
if os.name == 'nt':
        if port is None: port = 0
                        if self.convert_outgoing > 2:
                    if self.convert_outgoing == CONVERT_CRLF and data in '\r\n':
                        if self.echo:
                    if self.echo:
                if self.repr_mode == 0:
                        if self.repr_mode > 3:
                if z == '\0' or z == '\xe0':    # functions keys
                    if z == '\r':
    import msvcrt
    import optparse
import sys, os, serial, threading
    import termios, sys, os
---       %(info)-8s Show info
    'info': key_description('\x09'),
# Input characters are sent directly (only LF -> CR/LF/CRLF translation is
---       %(itself)-8s Send the menu character itself to remote
    'itself': key_description(MENUCHARACTER),
            key_description(EXITCHARCTER),
            key_description(MENUCHARACTER),
            key_description('\x08'),
    'lfm': key_description('\x0c'),
LF_MODES = ('LF', 'CR', 'CR/LF')
                            LF_MODES[self.convert_outgoing],
---       %(lfm)s  line feed    %(repr)s  Cycle repr mode
                                    line = file.readline().rstrip('\r\n')
           locally.
        """loop and copy console->serial until EXITCHARCTER character is
        """loop and copy serial->console"""
    main()
--- %(menu)-8s Menu escape key, followed by:
                    menu_active = False
        menu_active = False
                    menu_active = True
    MENUCHARACTER = chr(options.menu_char)
MENUCHARACTER = '\x14'  # Menu: CTRL+T
    'menu': key_description(MENUCHARACTER),
--- Menu keys:
        miniterm.dtr_state = options.dtr_state
    miniterm.join()
    miniterm.join(True)
        miniterm = Miniterm(
        miniterm.rts_state = options.rts_state
            miniterm.serial.baudrate,
            miniterm.serial.bytesize,
            miniterm.serial.parity,
            miniterm.serial.portstr,
        miniterm.serial.setDTR(options.dtr_state)
        miniterm.serial.setRTS(options.rts_state)
            miniterm.serial.stopbits,
    miniterm.start()
                    msvcrt.getch()
--- n e o s m     change parity (None, Even, Odd, Space, Mark)
            new[3] = new[3] & ~termios.ICANON & ~termios.ECHO & ~termios.ISIG
            new[6][termios.VMIN] = 1
            new[6][termios.VTIME] = 0
NEWLINE_CONVERISON_MAP = ('\n', '\r', '\r\n')
            new = termios.tcgetattr(self.fd)
            # on RFC 2217 ports it can happen to no modem state notification was
    (options, args) = parser.parse_args()
            options.parity,
    options.parity = options.parity.upper()
    parser.add_option("-b", "--baud",
    parser.add_option("--cr",
    parser.add_option("-D", "--debug",
    parser.add_option("--dtr",
    parser.add_option("-e", "--echo",
    parser.add_option("--exit-char",
    parser.add_option("--lf",
    parser.add_option("--menu-char",
    parser.add_option("--parity",
    parser.add_option("-p", "--port",
    parser.add_option("-q", "--quiet",
    parser.add_option("--rts",
    parser.add_option("--rtscts",
    parser.add_option("--xonxoff",
                parser.error("baud rate must be a number, not %r" % args[0])
        parser.error('--exit-char can not be the same as --menu-char')
        parser.error("invalid parity")
            parser.error("no arguments are allowed, options only when --port is given")
        parser.error("only one of --cr or --lf can be specified")
            parser.error("too many arguments")
    parser = optparse.OptionParser(
            pass
                            pass
            pass    # Do nothing for 'nt'
            # point...
            port,
        port = args.pop(0)
    port = options.port
--- Port settings (%(menu)s followed by the following):
--- pySerial (%(version)s) - miniterm - help
            raise
    raise NotImplementedError, "Sorry no implementation for your platform (%s) available." % sys.platform
    'repr': key_description('\x01'),
            repr_mode=options.repr_mode,
REPR_MODES = ('raw', 'some control', 'all control', 'hex')
                            REPR_MODES[self.repr_mode],
# repr, useful for debug purposes)
    return """
            return c
        return 'Ctrl+%c' % (ord('@') + ascii_code)
                        return '\n'
        return repr(character)
                    return z
--- r R           disable/enable hardware flow control
            rtscts=options.rtscts,
    'rts': key_description('\x12'),
---       %(rts)s  RTS          %(echo)s  local echo
            self.alive = False
        self.alive = False
        self.alive = True
        self.break_state = False
                        self.break_state = not self.break_state
                            self.convert_outgoing = 0
                        self.convert_outgoing += 1
        self.convert_outgoing = convert_outgoing
                        self.dtr_state = not self.dtr_state
        self.dtr_state = True
                            self.dump_port_settings()
                        self.dump_port_settings()
        self.echo = echo
                        self.echo = not self.echo
            self.fd = sys.stdin.fileno()
                        self.newline = NEWLINE_CONVERISON_MAP[self.convert_outgoing]
        self.newline = NEWLINE_CONVERISON_MAP[self.convert_outgoing]
            self.old = termios.tcgetattr(self.fd)
            self.receiver_thread.join()
        self.receiver_thread.setDaemon(1)
        self.receiver_thread.start()
        self.receiver_thread = threading.Thread(target=self.reader)
                            self.repr_mode = 0
                        self.repr_mode += 1
        self.repr_mode = repr_mode
                        self.rts_state = not self.rts_state
        self.rts_state = True
            self.serial.baudrate,
                            self.serial.baudrate = backup
                            self.serial.baudrate = int(sys.stdin.readline().strip())
            self.serial.bytesize,
                        self.serial.bytesize = serial.EIGHTBITS
                        self.serial.bytesize = serial.SEVENBITS
                                    self.serial.flush()
                (self.serial.getCD() and 'active' or 'inactive'),
                (self.serial.getCTS() and 'active' or 'inactive'),
                (self.serial.getDSR() and 'active' or 'inactive'),
                (self.serial.getRI() and 'active' or 'inactive'),
            self.serial.parity,
                        self.serial.parity = serial.PARITY_EVEN
                        self.serial.parity = serial.PARITY_MARK
                        self.serial.parity = serial.PARITY_NONE
                        self.serial.parity = serial.PARITY_ODD
                        self.serial.parity = serial.PARITY_SPACE
            self.serial.portstr,
                        self.serial.rtscts = (c == 'R')
            self.serial = serial.serial_for_url(port, baudrate, parity=parity, rtscts=rtscts, xonxoff=xonxoff, timeout=1)
            self.serial = serial.Serial(port, baudrate, parity=parity, rtscts=rtscts, xonxoff=xonxoff, timeout=1)
                        self.serial.setBreak(self.break_state)
                        self.serial.setDTR(self.dtr_state)
                        self.serial.setRTS(self.rts_state)
            self.serial.stopbits,
                        self.serial.stopbits = serial.STOPBITS_ONE
                        self.serial.stopbits = serial.STOPBITS_ONE_POINT_FIVE
                        self.serial.stopbits = serial.STOPBITS_TWO
                        self.serial.write(c)                    # send character
                    self.serial.write(c)                    # send character
                                    self.serial.write(line)
                                    self.serial.write('\r\n')
                    self.serial.write(self.newline)         # send newline character(s)
                        self.serial.xonxoff = (c == 'X')
                    self.stop()
        self.transmitter_thread.join()
        self.transmitter_thread.setDaemon(1)
        self.transmitter_thread.start()
        self.transmitter_thread = threading.Thread(target=self.writer)
            # Serial class directly then.
        # start serial->console thread
        sys.exit(1)
    sys.exitfunc = cleanup_console      #terminal modes have to be restored on exit...
                        sys.stderr.flush()
                        sys.stderr.write('--- BREAK %s ---\n' % (self.break_state and 'active' or 'inactive'))
        sys.stderr.write('--- BREAK %s\n' % (self.break_state and 'active' or 'inactive'))
        sys.stderr.write("could not open port %r: %s\n" % (port, e))
            sys.stderr.write('--- CTS: %s  DSR: %s  RI: %s  CD: %s\n' % (
        sys.stderr.write('--- data escaping: %s\n' % (REPR_MODES[self.repr_mode],))
                        sys.stderr.write('--- DTR %s ---\n' % (self.dtr_state and 'active' or 'inactive'))
        sys.stderr.write('--- DTR %s\n' % (self.dtr_state and 'active' or 'inactive'))
                                sys.stderr.write('--- ERROR opening file %s: %s ---\n' % (filename, e))
                            sys.stderr.write('--- ERROR setting baudrate: %s ---\n' % (e,))
                        sys.stderr.write('--- escape data: %s ---\n' % (
            sys.stderr.write('--- forcing DTR %s\n' % (options.dtr_state and 'active' or 'inactive'))
            sys.stderr.write('--- forcing RTS %s\n' % (options.rts_state and 'active' or 'inactive'))
                        sys.stderr.write(get_help_text())
        sys.stderr.write('--- hardware flow control %s\n' % (self.serial.rtscts and 'active' or 'inactive'))
                        sys.stderr.write('--- line feed %s ---\n' % (
        sys.stderr.write('--- linefeed: %s\n' % (LF_MODES[self.convert_outgoing],))
                        sys.stderr.write('--- local echo %s ---\n' % (self.echo and 'active' or 'inactive'))
        sys.stderr.write('--- Miniterm on %s: %d,%s,%s,%s ---\n' % (
                        sys.stderr.write('\n--- Baudrate: ')
        sys.stderr.write("\n--- exit ---\n")
                                sys.stderr.write('\n--- File %s sent ---\n' % filename)
                        sys.stderr.write('\n--- File to upload: ')
        sys.stderr.write("\n--- Settings: %s  %s,%s,%s,%s\n" % (
                                    sys.stderr.write('.')   # Progress indicator.
        sys.stderr.write('--- Quit: %s  |  Menu: %s | Help: %s followed by %s ---\n' % (
                        sys.stderr.write('--- RTS %s ---\n' % (self.rts_state and 'active' or 'inactive'))
        sys.stderr.write('--- RTS %s\n' % (self.rts_state and 'active' or 'inactive'))
                                sys.stderr.write('--- Sending file %s ---\n' % filename)
        sys.stderr.write('--- software flow control %s\n' % (self.serial.xonxoff and 'active' or 'inactive'))
                        sys.stderr.write('--- unknown menu character %s --\n' % key_description(c))
                        sys.stdout.flush()
                sys.stdout.flush()
                            sys.stdout.write(c)
                        sys.stdout.write(c)
                        sys.stdout.write(c)                 # local echo is a real newline in any case
                        sys.stdout.write(data)
                            sys.stdout.write('\n')
                        sys.stdout.write('\n')
                        sys.stdout.write(repr(data)[1:-1])
                    sys.stdout.write(repr(data)[1:-1])
                        sys.stdout.write("%s " % character.encode('hex'))
            termios.tcsetattr(self.fd, termios.TCSAFLUSH, self.old)
            termios.tcsetattr(self.fd, termios.TCSANOW, new)
--- Toggles:
                            try:
                        try:
                try:
            try:
        try:
    try:
        type = 'int',
---       %(upload)-8s Upload file (prompt will be shown)
    'upload': key_description('\x15'),
        usage = "%prog [options] [port [baudrate]]",
#!/usr/bin/python
    'version': getattr(serial, 'VERSION', 'unkown'),
# Very simple serial terminal
                                    # Wait for output buffer to drain.
            while 1:
            while self.alive:
                                while True:
            # would be nice if the console reader could be interruptted at this
            xonxoff=options.xonxoff,
--- x X           disable/enable software flow control
            # yet received. ignore this error.
                z = msvcrt.getch()

 !"#$%&'()*
---------
-----------------
"%{...%}"
+--0000+x//-
 !"#$%&'()*+,-./0123456789
0 <= ci && ci < self->inadequacyNode->contributionCount
0 < conflict_list_free
0 == __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (default_reductions) && __builtin_constant_p ("most") && (__s1_len = __builtin_strlen (default_reductions), __s2_len = __builtin_strlen ("most"), (!((size_t)(const void *)((default_reductions) + 1) - (size_t)(const void *)(default_reductions) == 1) || __s1_len >= 4) && (!((size_t)(const void *)(("most") + 1) - (size_t)(const void *)("most") == 1) || __s2_len >= 4)) ? __builtin_strcmp (default_reductions, "most") : (__builtin_constant_p (default_reductions) && ((size_t)(const void *)((default_reductions) + 1) - (size_t)(const void *)(default_reductions) == 1) && (__s1_len = __builtin_strlen (default_reductions), __s1_len < 4) ? (__builtin_constant_p ("most") && ((size_t)(const void *)(("most") + 1) - (size_t)(const void *)("most") == 1) ? __builtin_strcmp (default_reductions, "most") : (__extension__ ({ __const unsigned char *__s2 = (__const unsigned char *) (__const char *) ("most"); register int __result = (((__const unsigned char *) (__const char *) (default_reductions))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((__const unsigned char *) (__const char *) (default_reductions))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((__const unsigned char *) (__const char *) (default_reductions))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((__const unsigned char *) (__const char *) (default_reductions))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p ("most") && ((size_t)(const void *)(("most") + 1) - (size_t)(const void *)("most") == 1) && (__s2_len = __builtin_strlen ("most"), __s2_len < 4) ? (__builtin_constant_p (default_reductions) && ((size_t)(const void *)((default_reductions) + 1) - (size_t)(const void *)(default_reductions) == 1) ? __builtin_strcmp (default_reductions, "most") : (__extension__ ({ __const unsigned char *__s1 = (__const unsigned char *) (__const char *) (default_reductions); register int __result = __s1[0] - ((__const unsigned char *) (__const char *) ("most"))[0]; if (__s2_len > 0 && __result == 0) { __result = (__s1[1] - ((__const unsigned char *) (__const char *) ("most"))[1]); if (__s2_len > 1 && __result == 0) { __result = (__s1[2] - ((__const unsigned char *) (__const char *) ("most"))[2]); if (__s2_len > 2 && __result == 0) __result = (__s1[3] - ((__const unsigned char *) (__const char *) ("most"))[3]); } } __result; }))) : __builtin_strcmp (default_reductions, "most")))); }) || (0 == __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (default_reductions) && __builtin_constant_p ("consistent") && (__s1_len = __builtin_strlen (default_reductions), __s2_len = __builtin_strlen ("consistent"), (!((size_t)(const void *)((default_reductions) + 1) - (size_t)(const void *)(default_reductions) == 1) || __s1_len >= 4) && (!((size_t)(const void *)(("consistent") + 1) - (size_t)(const void *)("consistent") == 1) || __s2_len >= 4)) ? __builtin_strcmp (default_reductions, "consistent") : (__builtin_constant_p (default_reductions) && ((size_t)(const void *)((default_reductions) + 1) - (size_t)(const void *)(default_reductions) == 1) && (__s1_len = __builtin_strlen (default_reductions), __s1_len < 4) ? (__builtin_constant_p ("consistent") && ((size_t)(const void *)(("consistent") + 1) - (size_t)(const void *)("consistent") == 1) ? __builtin_strcmp (default_reductions, "consistent") : (__extension__ ({ __const unsigned char *__s2 = (__const unsigned char *) (__const char *) ("consistent"); register int __result = (((__const unsigned char *) (__const char *) (default_reductions))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((__const unsigned char *) (__const char *) (default_reductions))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((__const unsigned char *) (__const char *) (default_reductions))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((__const unsigned char *) (__const char *) (default_reductions))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p ("consistent") && ((size_t)(const void *)(("consistent") + 1) - (size_t)(const void *)("consistent") == 1) && (__s2_len = __builtin_strlen ("consistent"), __s2_len < 4) ? (__builtin_constant_p (default_reductions) && ((size_t)(const void *)((default_reductions) + 1) - (size_t)(const void *)(default_reductions) == 1) ? __builtin_strcmp (default_reductions, "consistent") : (__extension__ ({ __const unsigned char *__s1 = (__const unsigned char *) (__const char *) (default_reductions); register int __result = __s1[0] - ((__const unsigned char *) (__const char *) ("consistent"))[0]; if (__s2_len > 0 && __result == 0) { __result = (__s1[1] - ((__const unsigned char *) (__const char *) ("consistent"))[1]); if (__s2_len > 1 && __result == 0) { __result = (__s1[2] - ((__const unsigned char *) (__const char *) ("consistent"))[2]); if (__s2_len > 2 && __result == 0) __result = (__s1[3] - ((__const unsigned char *) (__const char *) ("consistent"))[3]); } } __result; }))) : __builtin_strcmp (default_reductions, "consistent")))); }) && default_reduction_only) || (reds->num == 1 && reds->rules[0]->number == 0)
%.0f-%.0f%%	%8u (%5.1f%%)
0 <= i && i < self->contributionCount
12++'Z-090]`_
1>MNOX0?6E6KLWLHY678IJYIV
 !"#$%&'()*2459=>@CDBA6+++0V
  %2d: .
%3d (%2d, %2d, %2d, %2u-%2u)   %2d ->
552N[,SVFGYK
%5d  %5d   %5d  %s
6S2145x4
%7.2f          
%7.2f (%2.0f%%) sys
%7.2f (%2.0f%%) usr
%7.2f (%2.0f%%) wall
:;<<==============================>>>>>>>>>??>A@B@@CDDDEEFFGGHHIIJJJJKKKKKLLMMNNNPOQQQRRRRRRSSTTUUUVWWXYYZ[[
abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789
accepted value: `%s'
accepting
--accepting default rule ("%s")
--accepting rule at line %ld ("%s")
Accumulated runs = %u
</actions>
<actions>
all             - all of the above
all        - all of the above
  `all'             all the warnings
  `all'          include all the above information
 always.
 Always Err
always follow edges:
always_follows:
ambiguous argument %s for %s
ambiguous reference: %s
a `;' might be needed at the end of action code
an identifier expected
Annotation %d (manifesting state %d):
AnnotationList.c
AnnotationList__compute_conflicted_tokens
AnnotationList__compute_from_inadequacies
AnnotationList__computePredecessorAnnotations
AnnotationList__debug
AnnotationList__insertInto ( annotation_node, &annotation_lists[s->number], s->nitems)
AnnotationList__isContributionAlways
annotation_lists
api.pure
api.push_pull
 as lookahead, rule number %d
__assert_fail
 assoc="%s"
at_directive_perform
</automaton>
<automaton>
automaton  - construction of the automaton
Average number of annotations per state: %f
b4_case(%d, [b4_syncline(%d, 
]b4_lhs_value([%s])[
]b4_rhs_location(%d, %d)[
]b4_rhs_value(%d, %d, [%s])[
]b4_syncline(%d, [[
bad buffer in code__scan_bytes()
bad buffer in gram__scan_bytes()
bad buffer in skel__scan_bytes()
Bad stats file size.
@basename
  -b, --file-prefix=PREFIX   specify a PREFIX for output files
bindtextdomain
bison (GNU Bison) %s
BISON_PKGDATADIR
bison-runtime
BISON_USE_PUSH_FOR_PULL
</bison-xml-report>
<bison-xml-report version="%s" bug-report="%s" url="%s">
bitset.dat
Bitset statistics:
bitsets    - use of bitsets
!bitset_test (shift_tokens, conflicted_token) || symbols[conflicted_token]->prec
boundary_set_from_string
braceless
# buckets:         %lu
# buckets used:    %lu (%.2f%%)
bug-bison@gnu.org
, cannot be accessed from mid-rule action at $%d
cannot close file
cannot create pipe
cannot open file `%s'
canonical-lr
canonical LR(1) support is experimental.
  case %d: yy0->%s = %s (*yy0, *yy1); break;
  case %d: *yy0 = %s (*yy0, *yy1); break;
check_and_convert_grammar
Cleanup: discarding lookahead
Cleanup: popping
clearerr_unlocked
Closure: %s
code_lex
column number overflow
<command line>
@complain
@complain_at
computing the sets
    Conflict between rule %d and token %s resolved as an error
    Conflict between rule %d and token %s resolved as reduce
    Conflict between rule %d and token %s resolved as shift
conflicting outputs to file %s
conflicting_rules
conflict_list_heads
conflict_row
conflicts
conflicts: %d reduce/reduce
conflicts: %d shift/reduce
conflicts: %d shift/reduce, %d reduce/reduce
conflicts-rr    - R/R conflicts
  `conflicts-rr'    R/R conflicts (enabled by default)
conflicts-sr    - S/R conflicts
  `conflicts-sr'    S/R conflicts (enabled by default)
consistent
Constructing syntax error message
content.opt
Contributes shift of token %d.
Contributes token %d
Copyright (C) %d Free Software Foundation, Inc.
Could not open stats file for writing.
Could not read stats file.
Could not write stats file.
count log histogram
c-skel.m4
c++-skel.m4
__ctype_b_loc
__ctype_get_mb_cur_max
__cxa_atexit
   $%d = 
%*d	%8u (%5.1f%%)
dcgettext
dcngettext
D$<+D$Du0
  -D, --define=NAME[=VALUE]        similar to `%define NAME "VALUE"'
D$@+D$Hu&
  %d -> %d [style=%s
"%debug"
debug_flag
$default
"%default-prec"
<default value>
"%define"
"%defines"
      --defines[=FILE]       also produce a header file
defines_flag
%%define variable `%s' redefined
Deleting
density histogram
"%destructor"
%destructor
destructors
/dev/null
D:F:L:S:T::VW::b:deg::hklno:p:r:tvx::y
digraph %s
dir_prefix
  %d [label=%s]
D$lgar.f
  -d                         likewise but cannot specify FILE (for POSIX Yacc)
%d nonterminals useless in grammar
%d nonterminal useless in grammar
D$P+D$Tu
"%dprec"
%d rules useless in grammar
%d rule useless in grammar
, %d, [[%s]]
duplicated symbol name for %s ignored
<empty/>
empty character literal
empty rule for typed nonterminal, and no action
--(end of buffer or a NUL)
"end of file"
Entering append_states, state = %d
Entering get_state, symbol = %d (%s)
Entering new_itemsets, state = %d
Entering state %d
# entries:         %lu
__environ
--EOF (start condition %d)
epilogue
"epilogue"
epilogue.opt
__errno_location
Error: discarding
error (nonassociative)
Error: popping
</errors>
<errors>
<errors/>
<error symbol="%s">nonassociative</error>
  `error'           treat warnings as errors
"%error-verbose"
error_verbose_flag
error           - warnings are errors
Execution times (seconds)
Exiting get_state => %d
"%expect"
expected %d reduce/reduce conflict
expected %d reduce/reduce conflicts
expected %d shift/reduce conflict
expected %d shift/reduce conflicts
"%expect-rr"
%%expect-rr applies only to GLR parsers
explicit type given in untyped grammar
extra characters in character literal
extra operand `%s'
@fatal_at
fatal error
fatal error - scanner input buffer overflow
fatal flex scanner internal error--end of buffer missed
fatal flex scanner internal error--no action found
FDERIVES
feof_unlocked (in)
fflush_unlocked
  -F, --force-define=NAME[=VALUE]  override `%define NAME "VALUE"'
file_name_all_but_ext
<filename>%s</filename>
"%file-prefix"
file-prefix
!final_state
final_state_number
fixed-output-files
FK2G03>CDE&@B'+cb
flex scanner jammed
follow_kernel_items:
force-define
$$ for the midrule at $%d of `%s' has no declared type
fputs_unlocked
fread_unlocked
future versions of Bison will not add the `;'
fwrite_unlocked
Generate a deterministic LR or generalized LR (GLR) parser employing
// Generated by %s.
generic_symlist
generic_symlist_item
getopt_long
  -g, --graph[=FILE]         also output a graph of the automaton
GLIBC_2.0
GLIBC_2.1
GLIBC_2.1.3
GLIBC_2.15
GLIBC_2.2
GLIBC_2.3
GLIBC_2.3.4
GLIBC_2.4
glr_flag
"%glr-parser"
__gmon_start__
GNU Bison 2.5
</grammar>
<grammar>
grammar    - reading, reducing the grammar
growing table and check from: %d to %d
  -h, --help                 display this help and exit
, hiding %c
// Home page: <%s>.
http://www.gnu.org/software/bison/
i == 0 || reds->rules[i-1] < reds->rules[i]
id_colon
"[identifier]"
"identifier:"
"identifier"
IELR(1) Phase 1
IELR(1) Phase 2
IELR(1) Phase 3
IELR(1) Phase 4
ielr_compute_lookaheads
ielr_compute_state
ielr       - IELR conversion
ielr_item_has_lookahead
ielr_split_states
Inadequacy annotations for state %d:
InadequacyList.c
InadequacyList__getContributionToken
InadequacyList__new_conflict
"%initial-action"
initial_action
i < node->state->nitems
input in flex scanner failed
i == nritems
"integer"
integer out of range: %s
internal_follow_edges:
i < ntokens
?invalid argument %s for %s
invalid character after \-escape: %s
invalid character in bracketed name: %s
invalid character: %s
invalid directive: %s
invalid identifier: %s
invalid @ in skeleton: %s
invalid language `%s'
invalid null character
invalid number after \-escape: %s
invalid reference: %s
invalid $ value: $%d
invalid value for %%define Boolean variable `%s'
invalid value for %%define variable `%s': `%s'
I/O error
_IO_stdin_used
iswcntrl
iswprint
item_i < s->nitems
itemno < 2147483647
itemno == nritems
item_number_as_rule_number (rules_ruleno->rhs[0]) == ruleno
<item rule-number="%d" point="%d">
<item rule-number="%d" point="%d"/>
, items: 
</itemset>
<itemset>
<itemset/>
  `itemset'      complete the core item sets with their closure
itemsets
*iter->cur.ptr == '\0'
iter->cur.wc == 0
java-skel.m4
j < shifts->num
j < table_size
  -k, --token-table                include a table of token names
+L$09|$,
 label=%s
LAC: checking lookahead %s:
LAC: initial context discarded due to error recovery
LAC: initial context discarded due to shift
LAC: initial context established for %s
LALR(1), IELR(1), or canonical LR(1) parser tables.  IELR(1) and
lalr_update_state_numbers
language
"%language"
l->content_type == SYMLIST_SYMBOL
 (%%left %s)
%%left %s
"%lex-param"
lex_param
lhs != accept->number
<lhs>%s</lhs>
libc.so.6
__libc_start_main
/lib/ld-linux.so.2
line number overflow
  -L, --language=LANGUAGE          specify the output programming language
  -l, --no-lines                   don't generate `#line' directives
location.c
locations
"%locations"
      --locations                  enable location support
locations_flag
look-ahead
  `lookahead'    explicitly associate lookahead tokens to items
lookaheads
</lookaheads>
<lookaheads>
Lookahead tokens: BEGIN
Lookahead tokens: END
low <= high
lr.default-reductions
lr.keep_unreachable_states
lr.keep-unreachable-states
%*lu-%lu	%8u (%5.1f%%)
m4_define([b4_actions], 
m4_define([b4_mergers], 
m4_define([b4_%s],
m4_define([b4_symbol_
m4_define([b4_tokens], 
m4_init()
m4         - m4 traces
Mandatory arguments to long options are mandatory for short options too.
map_goto
max bucket length: %lu
max_left_semantic_context
Max number of annotations per state: %d
Max number of contributions per annotation: %d
mbsinit (&iter->state)
mbuiter.h
mbuiter_multi_next
memory exhausted
"%merge"
merge_function != ((void *)0) && merger_find == merger
  `midrule-values'  unset or unused midrule values
midrule-values  - unset or unused midrule values
misleading reference: %s
missing identifier in parameter declaration
missing operand after `%s'
missing `%s' at end of file
missing `%s' at end of line
multiple language declarations are invalid
multiple %s declarations
multiple skeleton declarations are invalid
muscle_find
muscle_location_decode
muscles    - m4 definitions passed to the skeleton
muscle_string_decode
muscle-tab.c
named_ref.opt
"%name-prefix"
name-prefix
n_bits = %lu, set = {
nbits = %zu, set = {
Next token is
ngotos == goto_map[nonterminal]
ngotos != ((goto_number) -1)
  `no-CATEGORY'     turn off warnings in CATEGORY
*node_count != 0
"%no-default-prec"
node != ((void *)0)
No expected tokens.
"%no-lines"
no-lines
"%nonassoc"
%nonassoc
 (%%nonassoc %s)
%%nonassoc %s
nondeterministic_flag
"%nondeterministic-parser"
  `none'         disable the report
none       - no traces
none            - no warnings
  `none'            turn off all the warnings
</nonterminals>
<nonterminals>
Nonterminals useless in grammar
Nonterminals, with rules where they appear
<nonterminal symbol-number="%d" name="%s" usefulness="%s"/>
nonterminal useless in grammar: %s
no rules in the input grammar
not a uniqstr: %s
Now at end of input.
nstates < 2147483647
nsyms <= 2147483647 && nsyms == ntokens + nvars
nsyms == nvars + ntokens
"%nterm"
nterm %s (
nterms_number
ntokens = %d, nvars = %d, nsyms = %d, nrules = %d, nritems = %d
ntokens <= i && i < nsyms + nuseless_nonterminals
NULLABLE
nullable.c
nullable_compute
number != -9991
Number of LR(0)/LALR(1) states: %d
Num (Prec, Assoc, Useful, Ritem Range) Lhs -> Rhs (Ritem range) [Num]
_obstack_begin
obstack_free
_obstack_newchunk
$$ of `%s' has no declared type
old_to_new[to_state[i]] != nstates_old
   on %d (%s) -> rule %d
 on left:
only one %s allowed per rule
 on right:
  -o, --output=FILE          leave output to FILE
Operation modes:
other           - all other warnings
  `other'           all other warnings (enabled by default)
out of dynamic memory in code__create_buffer()
out of dynamic memory in code_ensure_buffer_stack()
out of dynamic memory in code__scan_buffer()
out of dynamic memory in code__scan_bytes()
out of dynamic memory in gram__create_buffer()
out of dynamic memory in gram_ensure_buffer_stack()
out of dynamic memory in gram__scan_buffer()
out of dynamic memory in gram__scan_bytes()
out of dynamic memory in skel__create_buffer()
out of dynamic memory in skel_ensure_buffer_stack()
out of dynamic memory in skel__scan_buffer()
out of dynamic memory in skel__scan_bytes()
out of dynamic memory in yy_get_next_buffer()
"%output"
output.c
output-file
outputing graph
outputing parser
outputing report
outputing xml
output_skeleton
__overflow
P$9T$Xs$
packgram
pack_vector
pact_ninf
parse      - grammar parser traces
"%parse-param"
parse_param
parser action tables
parser_file_name
percent_code(
percent_code()
percent_code_user_qualifiers
percent_define(
percent_define(api.pure)
percent_define_bison_variables(
percent_define_how(
percent_define_invalid_boolean(
percent_define_loc(
percent_define_syncline(
percent_define_user_variables
 percent_prec="%s"
pkgdatadir
  -p, --name-prefix=PREFIX         prepend PREFIX to the external symbols
posix_spawnattr_destroy
posix_spawnattr_init
posix_spawnattr_setflags
posix_spawnattr_setsigmask
posix_spawn_file_actions_addclose
posix_spawn_file_actions_adddup2
posix_spawn_file_actions_addopen
posix_spawn_file_actions_destroy
posix_spawn_file_actions_init
posix_spawnp
POSIX Yacc forbids dashes in symbol names: %s
possibly meant: %c
post_prologue
 prec="%d"
precedence_declaration
precedence_declarator
predecessor_item != (*predecessor)->nitems
prepare_rules
pre_prologue
previous declaration
previous declaration for %s
previous definition
print-datadir
      --print-datadir        output directory containing skeletons and XSLT
"%printer"
%printer
printers
print-localedir
      --print-localedir      output directory containing locale-dependent data
print_reductions
Processing state %d (reached by %s)
prologue_declaration
prologue_declarations
"%pure-parser"
^R.4:<LHI?AlW;=JSTWV
reader.c
Reading a token: 
record_merge_function_type
redeclaration for default tagged %%destructor
redeclaration for default tagged %%printer
redeclaration for default tagless %%destructor
redeclaration for default tagless %%printer
redefining user token number of %s
reduce.c
Reduced Grammar
reduced %s defines %d terminals, %d nonterminals, and %d productions.
reduce_nonterminal_useless_in_grammar
reduce_token_unused_in_grammar
reduce using rule %d (%s)
Reducing stack by rule %d (line %lu):
reducing the grammar
</reductions>
<reductions>
<reductions/>
<reduction symbol="%s" rule="accept" enabled="%s"/>
<reduction symbol="%s" rule="%d" enabled="%s"/>
refers to: %c%s at %s
refusing to overwrite the input file %s
relation_transpose: input
relation_transpose: output
--report
// Report bugs to <%s>.
Report bugs to <%s>.
report-file
      --report-file=FILE     write report to FILE
"%require"
require bison %s, but have %s
        <resolution rule="%d" symbol="%s" type="error">
        <resolution rule="%d" symbol="%s" type="reduce">
        <resolution rule="%d" symbol="%s" type="shift">
resource   - memory consumption (where available)
result type clash on merge function `%s': <%s> != <%s>
result->value == result->storage
"%right"
 (%%right %s)
%%right %s
ritem_sees_lookahead_set:
  -r, --report=THINGS        also produce details on the automaton
RTC: Firsts Input
RTC: Firsts Output
  (rule %d)
rule given for %s, which is a token
rulei != ((bitset_bindex) -1)
rule is too long
ruleno < 2147483647
<rule number="%d" usefulness="%s"
</rules>
<rules/>
Rules interpreted
rules_number
rules_or_grammar_declaration
Rules useless in grammar
Rules useless in parser due to conflicts
rule useless in parser due to conflicts
running m4
running: %s %s - %s %s
  - `%s'
 /* %s */
[    %s]])
%s affects only GLR parsers
save_reductions
%s BEGIN
Sbitset.c
!Sbitset__isEmpty (annotation_node->contributions[ci], s->nitems)
Sbitset__new
Sbitset__new_on_obstack
scan-code.l
scan       - grammar scanner traces
--scanner backing up
scan-skel.l
sc_context == 6 || sc_context == 5 || sc_context == 0
	%s derives
!s->errs
set_goto_map
setlocale
sets       - grammar sets: firsts, nullable etc.
	%s firsts
shell-always
shift, and go to state %d
Shifting
sigaction
sigaddset
sigemptyset
sigprocmask
s->items[self_item] > 1
s_item != s->state->nitems
size log histogram
skeleton
"%skeleton"
skeleton   - skeleton postprocessing
%s &lt; %s
%smax size exceeded%s
%s must be followed by positive number
__snprintf_chk
$%s of `%s' has no declared type
</solved-conflicts>
<solved-conflicts>
<solved-conflicts/>
  `solved'       describe shift/reduce conflicts solving
spec_defines_file
spec_file_prefix
spec_graph_file
spec_name_prefix
spec_outfile
spec_verbose_file
sp->num == 0 || !(sp->states[0] == ((void *)0))
__sprintf_chk
%srealloc failed%s
%s redeclaration for <%s>
%s redeclaration for %s
!s->reductions
 (%s < %s)
 %s { %s }
%s[[[%s]], %d]
  -S, --skeleton=FILE              specify the skeleton to use
%s subprocess
%s subprocess failed
%s subprocess got fatal signal %d
__stack_chk_fail
Stack now
Stack size increased to %lu
"%start"
Starting parse
start symbol %s does not derive any sentence
</state>
state %d
State %d 
State %d: %d lookahead tokens
  `state'        describe the states
state_errs_set
state_list_append (state = %d, symbol = %d (%s))
state_lookahead_tokens_count
state_new
state_new_isocore
<state number="%d">
state_reductions_set
states_number
state_transitions_set
!s->transitions
stray `@'
stray `$'
stray `,' treated as white space
__strdup
"string"
string_as_id
__strndup
strverscmp
%s: warnings being treated as errors
symbol_declaration
symbol_def
symbol_defs.1
symbol_from_uniqstr
symbol_list_n_type_name_get
symbol not found in production before $%d: %.*s
symbol not found in production: %.*s
symbol_pack
symbol.prec
symbols.1
symbol `%s' given more than one literal string
symbol %s is used, but is not defined as a token and has no rules
symbols.prec
symbol %s redeclared
symbol %s redefined
!symbols_sorted
<symbol>%s</symbol>
symbol `%s' used more than once as a literal string
symlist.c
symtab.c
synclines_flag
syntax error
syntax error after `%c', expecting integer, letter, `_', `[', or `$'
syntax error, unexpected %s
syntax error, unexpected %s, expecting %s
syntax error, unexpected %s, expecting %s or %s
syntax error, unexpected %s, expecting %s or %s or %s
syntax error, unexpected %s, expecting %s or %s or %s or %s
table_ninf
tables.c
tag_seen_flag
  -t, --debug                      instrument the parser for debugging
t$dkT$$,
</terminals>
<terminals>
Terminals unused in grammar
Terminals, with rules where they appear
<terminal symbol-number="%d" token-number="%d" name="%s" usefulness="%s"
The same is true for optional arguments.
the start symbol %s is a token
the start symbol %s is undefined
                             (the XML schema is experimental)
THINGS is a list of comma separated words that can include:
                                   (this is an experimental feature)
This is free software; see the source for copying conditions.  There is NO
this->number != (-1)
time in %s: %ld.%06ld (%ld%%)
time       - time consumption
t->items[t_item] != 0
"%token"
token_definitions_output
token for %%prec is not defined: %s
token %s (
tokens_number
"%token-table"
token_table
token-table
too few arguments for %s directive in skeleton
tools      - m4 invocation
too many arguments for %s directive in skeleton
too many symbols in input grammar (limit is %d)
 TOTAL                 :
total time
</transitions>
<transitions>
<transitions/>
transitions_to
<transition type="goto" symbol="%s" state="%d"/>
<transition type="shift" symbol="%s" state="%d"/>
translate
Try `%s --help' for more information.
T$T9T$Xt
type clash on default action: <%s> != <%s>
type_name
type.opt
%u bitset_allocs, %u freed (%.2f%%).
%u bitset_lists
%u bitset_resets, %u cached (%.2f%%)
%u bitset_sets, %u cached (%.2f%%)
%u bitset_tests, %u cached (%.2f%%)
unclosed %s directive in skeleton
$undefined
undefined associativity
undefined %%define variable `%s' passed to muscle_percent_define_check_values
undefined %%define variable `%s' passed to muscle_percent_define_flag_if
undefined %%define variable `%s' passed to muscle_percent_define_get_loc
undefined %%define variable `%s' passed to muscle_percent_define_get_syncline
undef_token_number
unexpected identifier in bracketed name: %s
"%union"
union_name
unset value: $$
unused-in-grammar
unused value: $%d
Usage: %s [OPTION]... FILE
useless-in-grammar
useless-in-parser
use of YYFAIL, which is deprecated and will be removed
use_push_for_pull_flag
user token number %d redeclaration for %s
user_token_number_max
/usr/bin/m4
/usr/share/bison
/usr/share/locale
]]UZ[\YX
Valid arguments are:
*++(value) == '['
*++(value) == ']'
*++value == ' '
*++value == '['
*++value == ']'
*value == '['
Value  Sprec  Sassoc  Tag
variable
Variables
"%verbose"
  -v, --verbose              same as `--report=state'
  -V, --version              output version information and exit
@warn_at
Warning categories include:
--warnings
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  Word %u:
Written by Robert Corbett and Richard Stallman.
  -W, --warnings[=CATEGORY]  report the warnings falling in CATEGORY
<?xml version="1.0"?>
  -x, --xml[=FILE]           also output an XML report of the automaton
yacc_flag
  `yacc'            incompatibilities with POSIX Yacc
yacc            - incompatibilities with POSIX Yacc
  -y, --yacc                 emulate POSIX Yacc

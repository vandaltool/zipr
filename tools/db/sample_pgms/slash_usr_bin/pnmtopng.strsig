2.37.5 (24 October 2000) +netpbm
added background color (%u, %u, %u) to palette.
-alpha and -transparent are mutually exclusive
-background
background color (%u, %u, %u) appears in image.
__bss_start
cannot allocate LIBPNG structure
cannot allocate LIBPNG structures
can only handle files up to 16-bit (use -downscale to override
 (can't happen) undefined color_type
   Compiled with %d-bit netpbm support (PPM_OVERALLMAXVAL = %d).
   Compiled with libpng %s; using libpng %s.
   Compiled with zlib %s; using zlib %s.
-compression
converting alpha mask to transparency index
%d colors found
%d-%d-%d
%d:%d:%d
dimensions for image and alpha mask do not agree
-downscale
             ... [-filter 0..4] [-compression 0..9] [-force] [pnmfile]
filter must be 0 (none), 1 (sub), 2 (up), 3 (avg) or 4 (paeth)
Finding colors for possible colormap...
__fprintf_chk
GLIBC_2.0
GLIBC_2.11
GLIBC_2.3.4
GLIBC_2.4
GLIBC_2.7
__gmon_start__
             ... [-hist] [-chroma wx wy rx ry gx gy bx by] [-phys x y unit] ...
histogram created
histogram feature not implemented.
-interlace
 (interlaced)
internal inconsistency: remapped bot_idx = %d, top_idx = %d
Invalid text line, aborting
_IO_getc
_IO_stdin_used
__isoc99_sscanf
_Jv_RegisterClasses
libc.so.6
__libc_start_main
/lib/ld-linux.so.2
libnetpbm.so.10
libpng12.so.0
libz.so.1
__longjmp_chk
Making all occurences of color (%u, %u, %u) transparent.
More than %d colors found -- too many for a colormapped PNG
no room in palette for background color; using closest match (%u, %u, %u) instead
No transparent color
out of memory
out of memory allocating alpha/palette entries
out of memory allocating hash table
out of memory allocating PNG row buffer
Out of memory building hash table
overflow2
overflow_add
palette index would be larger than the indexed value, so not doing colormap
pgm_readpgm
pm_allocrow
pm_bitstomaxval
pm_closer
pm_closew
pm_error
pm_freerow
pm_keymatch
pm_maxvaltobits
pm_message
pm_openr
pm_openr_seekable
pm_usage
png_convert_from_struct_tm
png_create_info_struct
png_create_write_struct
png_destroy_write_struct
png_get_error_ptr
png_init_io
png_libpng_ver
PNG palette has %u entries, %u of them non-opaque
png_set_compression_level
png_set_filter
png_set_interlace_handling
png_set_packing
png_write_end
png_write_info
png_write_row
pnm_init
pnm_promoteformatrow
pnm_readpnminit
pnm_readpnmrow
pnmtopng:  EXTREMELY fatal error: jmpbuf unrecoverable; terminating.
pnmtopng:  fatal libpng error: %s
pnmtopng version %s.
ppm_addtocolorhash
ppm_alloccolorhash
ppm_colorhisttocolorhash
ppm_computecolorhist2
ppm_freecolorhash
ppm_freecolorhist
ppm_lookupcolor
ppm_parsecolor
reading a PBM file (maxval=%d)
reading a PGM file (maxval=%d)
reading a PPM file (maxval=%d)
Requested transparent color (%u, %u, %u).
setjmp returns error condition (1)
setjmp returns error condition (2)
specified transparent color not present in palette; ignoring -transparent
__stack_chk_fail
             ... [-text file] [-ztxt file] [-time [yy]yy-mm-dd hh:mm:ss] ...
too many color/transparency pairs, writing a non-mapped file
+transparency
-transparent
             ... [-transparent color] [-background color] [-gamma value] ...
Transparent color {gray, red, green, blue} = {%d, %d, %d, %d}
T$|t+kL$|
Using only %d rightmost bits of input samples.  The rest are just copies of those.
-verbose
[-verbose] [-downscale] [-interlace] [-alpha file] ...
writing a%s %d-bit %s%s file%s
Writing bKGD chunk with background color  {gray, red, green, blue} = {%d, %d, %d, %d}
Writing %d-bit color indexes
Writing %d bits per component per pixel
Writing sBIT chunk with sbitval = %d
xeltopixel
zlib compression must be between 0 (none) and 9 (max)
zlibVersion

            ;;
            *=*)
            *)
           ;;
          ;;
        "") : ;;
        *)
      ;;
      *)
###############################################################################
    ${1+"$@"}
      $3
      $4
          "") abort "config file $cnfFileShort not found"
      abort "config file \`$cnfFileShort' not found"
      abort "dvipdfm output directory \`$1' not found"
      abort "dvips output directory \`$1' not found"
              abort "--enable needs two parameters mapType mapFile";;
# abort(errmsg)
      abort "invalid mapType $1"
          abort "invalid value $val for option $opt"
      abort "pdftex output directory \`$1' not found"
      *) abort "$progname: unknown option \`$1'. Try $progname --help for help";;
      abort "Unknown item \"$item\". Choose one of LW35, dvipsPreferOutline, dvipsDownloadBase35, pdftexDownloadBase14 or dvipdfmDownloadBase14"
      abort "unsupported option $opt"
  # about map here:
#      add a few quotes for $cnfFile with whitespace
#      add dvipsDownloadBase35 / pdftexDownloadBase14 options
#      added --listavailablemaps
#      added --syncwithtrees
#      add --enable Map=... / --enable MixedMap=...
#      add function symlink_or_copy needed by tl-portable.
#      add "--setoption option=value" syntax
#      add support for dvipdfm
#      add umask 022, so generated files are always world-readable
#      add version string
    ADOBE|ADOBEkb)
#   all map files is send to stdout.
  allOutput="$outputFiles
	% A log of the updmap run that has created this file is available here:
#   also watch out for possibly hidden conflicts
  # Always use the "migration checking version". This might become
  # a map can only have one type, so we carefully disable everything
#   a message to stderr and copy the file instead.
Among other things, these font map files are used to determine which
#    and for pdftex.map and dvipdfm.map according to pdftexDownloadBase14.
	%   and run updmap to recreate this file.
    and we have found that some files exist in the new path as well as
#   apply kpsewhich with format 'map'
#   apply kpsewhich with format 'web2c files'
#   are unavailabe in the texmf trees
#      argument list with some broken shells
#   Assign output directories which are not yet assigned. Always use
#      avoid multiple variable assignments in one statement
  awk '$1 == $3 && $2 == "default" {$2=""; $3=""} {print}' > $tmp8
       | awk '{print $2}' \
  badLocation)
        # bad: map file does not exist at all
        # bad: map file exists in the wrong location only
#!/bin/sh
      "") break;;
#     Build/texk/tetex/ChangeLog for further changes.
By default, the TeX filename database is also rebuilt (with mktexlsr).
#   by mode
#   call mktexdir script, disable all features (to prevent sticky directories)
    can read this document by executing the command
    case $1 in
  case $1 in
          case $2 in
          case $2 in 
      case "$ci" in
    case "$cmd" in
  case "$cmd" in
        case "$cnfFile" in
  case "$cnfFile" in
  case "$item" in
  case $mode in
  case "$opt" in
    case $unchanged in
      case "$val" in
      cat ${1+"$@"}
      cat ${1+"$@"} >&2
      cat ${1+"$@"} | tee -a "$log" >&2
  cat "$cnfFile" | sed -n 's/^'"$1"'[	 =][	 =]*//p' | sed q
  cat <<eof
    cat >> "$file" <<-eof
    cat > "$file" <<-eof
catMaps()
  catMapsFailed=$tmpdir/catMapsFailed
  catMaps '^Map' > $tmp2 || cleanup 1
  catMaps '^MixedMap' > $tmp1 || cleanup 1
# catMaps(regex)
#   cat to stderr is $verbose is true
  cd "$dvipdfmoutputdir" || exit 1
  cd "$dvipsoutputdir" || exit 1
    && { cd $orig_pwd && rm -rf "$tmpdir"; }
  cd "$pdftexoutputdir" || exit 1
  cfgmaint=
          cfgmaint=1
  cfgparam=
          cfgparam=1; cnfFile=$2; shift;;
          cfgparam=1; cnfFile=`echo "$1" | sed 's/--cnffile=//'`;;
cfgval()
# cfgval(variable)
    changed for this release and the map file \`$map' has
  # check if the map file exists and in that case echo the line
  chicken_mode=false
          chicken_mode=true;;
      ci=`"$TEXMFMAIN/texconfig/tcfmgr" --tmp $tmpdir --cmd ci --id $id || retval=$?`
# cleanup()
cleanup()
cleanup 0
  cleanup 1
#      cleanup now has an argument for the return code
#   clean up the temp area and exit with proper exit status
#      cli options added: showoptions, setoption, enable, disable, nomkmap
          cmd=disable
          cmd=disable; disableMapFile=$2; shift
          cmd=edit;;
          cmd=enable
          cmd=listavailablemaps;;
          cmd=listmaps;;
          cmd=setoption
          cmd=showoptions; showoptionsItem=$2; shift;;
          cmd=showoptions; showoptionsItem=`echo "$1" | sed 's/--showoptions=//'`;;
          cmd=syncwithtrees;;
      cmp "$cnfFile" $tmp5 >/dev/null 2>&1 || unchanged=false
  cmp "$file" "$file2" >/dev/null 2>&1 && return 0
  cmp "$tmpdir/mapCmp-1" "$tmpdir/mapCmp-2" >/dev/null 2>&1
      --cnffile=*)
      --cnffile)
  cnfFile=
           cnfFile=$ci
  --cnffile FILE            read FILE for the updmap configuration
    "") cnfFile=`locateWeb2c $cnfFileShort`
  cnfFileShort=updmap.cfg
#      commenty may start with any of *#;%
#   compare two map files like cmp; but less strict, so changes regarding
	  config file: \`$cnfFile'
configReplace()
  configReplace "$cnfFile" "^#![ 	]*$1[ 	]*$2" "$1 $2"
  configReplace "$cnfFile" "^$opt[ 	]" "$opt $val"
    configReplace "$cnfFile" "^$type[ 	]*$1" "#! $type $1"
# configReplace(file, pattern, line)
  # consigurable, but for now, we always want to check.
    content of the used map file. Additionally, consider removing the
      --copy)
    $copy_cmd "$1" "$2"
  copy_cmd="cp"
  --copy                    cp generic files rather than using symlinks
  copy=false
          copy=true;;
      co=`"$TEXMFMAIN/texconfig/tcfmgr" --tmp $tmpdir --cmd co --file $cnfFileShort || retval=$?`
      cp "$cnfFile" $tmp5
      date > "$log"
	debianEditWarnAndShow;;
  # defaults
determined by updmap.cfg (the one returned by running "kpsewhich
    dftdvips=$dvips35
    dftdvips=$ps2pk35
  dir=$vartexmf/web2c
      --disable=*)
      --disable)
      disable)
                             disabled in the config file
disableMap()
  disableMap "$2"
        disableMap "$disableMapFile";;
  --disable MAPFILE         disable MAPFILE, whether Map or MixedMap
          disableMapFile=`echo "$1" | sed 's/--disable=//'`
# disableMap (map)
#   disables map in config file (any type)
#   display help message and exit
#   Do M
  done > $tmp1
  done < $tmp4
#      don't call a function before processOptions; we may loose our
	%   Don't change this file directly. Edit texmf/web2c/$cnfFileShort
  do test $# -gt 0 && shift; done
	  download standard fonts (dvipdfm): \`$dvipdfmDownloadBase14'
	  download standard fonts (dvips): \`$dvipsDownloadBase35'
	  download standard fonts (pdftex): \`$pdftexDownloadBase14'
      --dry-run|-n)
  # dvipdfm
  dvipdfm35=`locateMap dvipdfm35.map` || cleanup 1
  dvipdfmDownloadBase14=`cfgval dvipdfmDownloadBase14`
#   "dvipdfm"-like syntax. It is a very ugly hack.
      --dvipdfmoutputdir=*)
      --dvipdfmoutputdir)
  --dvipdfmoutputdir DIR    specify output directory (dvipdfm syntax)
$dvipdfmoutputdir/dvipdfm_dl14.map
$dvipdfmoutputdir/dvipdfm.map"
         "$dvipdfmoutputdir"/dvipdfm.map | verboseCat
$dvipdfmoutputdir/dvipdfm_ndl14.map
	  dvipdfm output directory: \`$dvipdfmoutputdir'
          dvipdfmoutputdirparam=1; dvipdfmoutputdir=$2
          dvipdfmoutputdirparam=1; dvipdfmoutputdir=$2; shift;;
          dvipdfmoutputdirparam=1; dvipdfmoutputdir=`echo "$1" | sed 's/--dvipdfmoutputdir=//'`;;
          dvipdfmoutputdirparam=1; dvipdfmoutputdir=$outputdir
    dvipdfmoutputdir=$vartexmf/fonts/map/dvipdfm/updmap
  # dvips
# dvips2dvipdfm()
dvips2dvipdfm()
  dvips35=`locateMap dvips35.map` || cleanup 1
  dvipsDownloadBase35=`cfgval dvipsDownloadBase35`
      --dvipsoutputdir=*)
      --dvipsoutputdir)
$dvipsoutputdir/builtin35.map
  --dvipsoutputdir DIR      specify output directory (dvips syntax)
	  dvips output directory: \`$dvipsoutputdir'
          dvipsoutputdirparam=1; dvipsoutputdir=$2
          dvipsoutputdirparam=1; dvipsoutputdir=$2; shift;;
          dvipsoutputdirparam=1; dvipsoutputdir=`echo "$1" | sed 's/--dvipsoutputdir=//'`;;
          dvipsoutputdirparam=1; dvipsoutputdir=$outputdir
  dvipsoutputdir=; pdftexoutputdir=; dvipdfmoutputdir=
$dvipsoutputdir/ps2pk.map"
$dvipsoutputdir/psfonts_pk.map
$dvipsoutputdir/psfonts_t1.map
    dvipsoutputdir=$vartexmf/fonts/map/dvips/updmap
  dvipsPreferOutline=`cfgval dvipsPreferOutline`
    dvipsPreferOutline|dvipsDownloadBase35|pdftexDownloadBase14|dvipdfmDownloadBase14)
                             dvipsPreferOutline LW35 dvipsDownloadBase35
    dvipsPreferOutline|pdftexDownloadBase14|dvipdfmDownloadBase14|dvipsDownloadBase35)
    echo
  echo ${1+"$@"} >&2
    echo "Creating symbolic link failed, the file is copied instead." 1>&2 &&
      echo "$file"
    echo "$line" >> "$file"
    echo "$progname: chicken mode, skipping all output generation, goodbye."
          echo "$progname version $version."; (exit 0); exit 0;;
      echo "true false"
      echo "URWkb URW ADOBE ADOBEkb"
      -e '/^ *$/d' \
      -e '/^[*#;%]/d' \
    ed "$file" >/dev/null 2>&1 <<-eof
      edit)
      --edit|-e)
  --edit                    edit $cnfFileShort file
  egrep "$1" "$cnfFile" \
  egrep '^(cm|eu|la|lc|line|msam|xy)' $tmp8 \
  egrep '^(#! *)?(Mixed)?Map' "$cnfFile"
  egrep -v '^(cm|eu|la|lc|line|msam|xy)' $tmp8
    Either put this file into the right place or remove the
    else
      else
            else
    else visit the web page
      --enable)
      enable)
enableMap()
        enableMap "$enableMapType" "$enableMapFile";;
  --enable Map=MAPFILE      add "Map MAPFILE" to updmap.cfg
              enableMapType=$2; enableMapFile=$3; shift; shift;;
# enableMap (type, map)
              enableMapType=Map; enableMapFile=`echo "$2" | sed 's/Map=//'`; shift;;
  --enable MAPTYPE MAPFILE  add "MAPTYPE MAPFILE" to updmap.cfg,
              enableMapType=MixedMap; enableMapFile=`echo "$2" | sed 's/MixedMap=//'`; shift;;
  --enable MixedMap=MAPFILE add "MixedMap MAPFILE" to updmap.cfg
#   enables an entry in the config file for map with a given type.
!!! ERROR! The map file \`$2' has not been found at all.
!!! ERROR: The right location for map files has been
      -e 's@ $@@' \
      -e 's@.*%@@' |
      -e 's@\(.*[" ]\([.0-9-][.0-9-]*\) *ExtendFont.*\)@\1 -e \2@' \
      -e 's@\(.*[" ]\([.0-9-][.0-9-]*\) *SlantFont.*\)@\1 -s \2@' \
      -e '/%[^ ]* [^ ]*$/s@\( \([^ ]*\).*\)$@\1 \2@' \
      -e 's@^\(\([^ ]*\).*\)@\1\2@' \
      -e 's@" \([^"]*\) "@"\1"@g' \
    esac
      esac
          esac
        esac;;
    -e 's/\([^A-Za-z]\)uagd8a.pfb/\1a010015l.pfb/' \
    -e 's/\([^A-Za-z]\)uagd8a.pfb/\1agd_____.pfb/' \
    -e 's/\([^A-Za-z]\)uagd8a.pfb/\1pagd8a.pfb/' \
    -e 's/\([^A-Za-z]\)uagdo8a.pfb/\1a010035l.pfb/' \
    -e 's/\([^A-Za-z]\)uagdo8a.pfb/\1agdo____.pfb/' \
    -e 's/\([^A-Za-z]\)uagdo8a.pfb/\1pagdo8a.pfb/' \
    -e 's/\([^A-Za-z]\)uagk8a.pfb/\1a010013l.pfb/' \
    -e 's/\([^A-Za-z]\)uagk8a.pfb/\1agw_____.pfb/' \
    -e 's/\([^A-Za-z]\)uagk8a.pfb/\1pagk8a.pfb/' \
    -e 's/\([^A-Za-z]\)uagko8a.pfb/\1a010033l.pfb/' \
    -e 's/\([^A-Za-z]\)uagko8a.pfb/\1agwo____.pfb/' \
    -e 's/\([^A-Za-z]\)uagko8a.pfb/\1pagko8a.pfb/' \
    -e 's/\([^A-Za-z]\)ubkd8a.pfb/\1b018015l.pfb/' \
    -e 's/\([^A-Za-z]\)ubkd8a.pfb/\1bkd_____.pfb/' \
    -e 's/\([^A-Za-z]\)ubkd8a.pfb/\1pbkd8a.pfb/' \
    -e 's/\([^A-Za-z]\)ubkdi8a.pfb/\1b018035l.pfb/' \
    -e 's/\([^A-Za-z]\)ubkdi8a.pfb/\1bkdi____.pfb/' \
    -e 's/\([^A-Za-z]\)ubkdi8a.pfb/\1pbkdi8a.pfb/' \
    -e 's/\([^A-Za-z]\)ubkl8a.pfb/\1b018012l.pfb/' \
    -e 's/\([^A-Za-z]\)ubkl8a.pfb/\1bkl_____.pfb/' \
    -e 's/\([^A-Za-z]\)ubkl8a.pfb/\1pbkl8a.pfb/' \
    -e 's/\([^A-Za-z]\)ubkli8a.pfb/\1b018032l.pfb/' \
    -e 's/\([^A-Za-z]\)ubkli8a.pfb/\1bkli____.pfb/' \
    -e 's/\([^A-Za-z]\)ubkli8a.pfb/\1pbkli8a.pfb/' \
    -e 's/\([^A-Za-z]\)ucrb8a.pfb/\1cob_____.pfb/' \
    -e 's/\([^A-Za-z]\)ucrb8a.pfb/\1n022004l.pfb/' \
    -e 's/\([^A-Za-z]\)ucrb8a.pfb/\1pcrb8a.pfb/' \
    -e 's/\([^A-Za-z]\)ucrbo8a.pfb/\1cobo____.pfb/' \
    -e 's/\([^A-Za-z]\)ucrbo8a.pfb/\1n022024l.pfb/' \
    -e 's/\([^A-Za-z]\)ucrbo8a.pfb/\1pcrbo8a.pfb/' \
    -e 's/\([^A-Za-z]\)ucrr8a.pfb/\1com_____.pfb/' \
    -e 's/\([^A-Za-z]\)ucrr8a.pfb/\1n022003l.pfb/' \
    -e 's/\([^A-Za-z]\)ucrr8a.pfb/\1pcrr8a.pfb/' \
    -e 's/\([^A-Za-z]\)ucrro8a.pfb/\1coo_____.pfb/' \
    -e 's/\([^A-Za-z]\)ucrro8a.pfb/\1n022023l.pfb/' \
    -e 's/\([^A-Za-z]\)ucrro8a.pfb/\1pcrro8a.pfb/' \
    -e 's/\([^A-Za-z]\)uhvb8ac.pfb/\1hvnb____.pfb/' \
    -e 's/\([^A-Za-z]\)uhvb8ac.pfb/\1n019044l.pfb/' \
    -e 's/\([^A-Za-z]\)uhvb8ac.pfb/\1phvb8an.pfb/' \
    -e 's/\([^A-Za-z]\)uhvb8a.pfb/\1hvb_____.pfb/' \
    -e 's/\([^A-Za-z]\)uhvb8a.pfb/\1n019004l.pfb/' \
    -e 's/\([^A-Za-z]\)uhvb8a.pfb/\1phvb8a.pfb/' \
    -e 's/\([^A-Za-z]\)uhvbo8ac.pfb/\1hvnbo___.pfb/' \
    -e 's/\([^A-Za-z]\)uhvbo8ac.pfb/\1n019064l.pfb/' \
    -e 's/\([^A-Za-z]\)uhvbo8ac.pfb/\1phvbo8an.pfb/' \
    -e 's/\([^A-Za-z]\)uhvbo8a.pfb/\1hvbo____.pfb/' \
    -e 's/\([^A-Za-z]\)uhvbo8a.pfb/\1n019024l.pfb/' \
    -e 's/\([^A-Za-z]\)uhvbo8a.pfb/\1phvbo8a.pfb/' \
    -e 's/\([^A-Za-z]\)uhvr8ac.pfb/\1hvn_____.pfb/' \
    -e 's/\([^A-Za-z]\)uhvr8ac.pfb/\1n019043l.pfb/' \
    -e 's/\([^A-Za-z]\)uhvr8ac.pfb/\1phvr8an.pfb/' \
    -e 's/\([^A-Za-z]\)uhvr8a.pfb/\1hv______.pfb/' \
    -e 's/\([^A-Za-z]\)uhvr8a.pfb/\1n019003l.pfb/' \
    -e 's/\([^A-Za-z]\)uhvr8a.pfb/\1phvr8a.pfb/' \
    -e 's/\([^A-Za-z]\)uhvro8ac.pfb/\1hvno____.pfb/' \
    -e 's/\([^A-Za-z]\)uhvro8ac.pfb/\1n019063l.pfb/' \
    -e 's/\([^A-Za-z]\)uhvro8ac.pfb/\1phvro8an.pfb/' \
    -e 's/\([^A-Za-z]\)uhvro8a.pfb/\1hvo_____.pfb/' \
    -e 's/\([^A-Za-z]\)uhvro8a.pfb/\1n019023l.pfb/' \
    -e 's/\([^A-Za-z]\)uhvro8a.pfb/\1phvro8a.pfb/' \
    -e 's/\([^A-Za-z]\)uncb8a.pfb/\1c059016l.pfb/' \
    -e 's/\([^A-Za-z]\)uncb8a.pfb/\1ncb_____.pfb/' \
    -e 's/\([^A-Za-z]\)uncb8a.pfb/\1pncb8a.pfb/' \
    -e 's/\([^A-Za-z]\)uncbi8a.pfb/\1c059036l.pfb/' \
    -e 's/\([^A-Za-z]\)uncbi8a.pfb/\1ncbi____.pfb/' \
    -e 's/\([^A-Za-z]\)uncbi8a.pfb/\1pncbi8a.pfb/' \
    -e 's/\([^A-Za-z]\)uncr8a.pfb/\1c059013l.pfb/' \
    -e 's/\([^A-Za-z]\)uncr8a.pfb/\1ncr_____.pfb/' \
    -e 's/\([^A-Za-z]\)uncr8a.pfb/\1pncr8a.pfb/' \
    -e 's/\([^A-Za-z]\)uncri8a.pfb/\1c059033l.pfb/' \
    -e 's/\([^A-Za-z]\)uncri8a.pfb/\1nci_____.pfb/' \
    -e 's/\([^A-Za-z]\)uncri8a.pfb/\1pncri8a.pfb/' \
    -e 's/\([^A-Za-z]\)uplb8a.pfb/\1p052004l.pfb/' \
    -e 's/\([^A-Za-z]\)uplb8a.pfb/\1pob_____.pfb/' \
    -e 's/\([^A-Za-z]\)uplb8a.pfb/\1pplb8a.pfb/' \
    -e 's/\([^A-Za-z]\)uplbi8a.pfb/\1p052024l.pfb/' \
    -e 's/\([^A-Za-z]\)uplbi8a.pfb/\1pobi____.pfb/' \
    -e 's/\([^A-Za-z]\)uplbi8a.pfb/\1pplbi8a.pfb/' \
    -e 's/\([^A-Za-z]\)uplr8a.pfb/\1p052003l.pfb/' \
    -e 's/\([^A-Za-z]\)uplr8a.pfb/\1por_____.pfb/' \
    -e 's/\([^A-Za-z]\)uplr8a.pfb/\1pplr8a.pfb/' \
    -e 's/\([^A-Za-z]\)uplri8a.pfb/\1p052023l.pfb/' \
    -e 's/\([^A-Za-z]\)uplri8a.pfb/\1poi_____.pfb/' \
    -e 's/\([^A-Za-z]\)uplri8a.pfb/\1pplri8a.pfb/' \
    -e 's/\([^A-Za-z]\)usyr.pfb/\1psyr.pfb/' \
    -e 's/\([^A-Za-z]\)usyr.pfb/\1s050000l.pfb/' \
    -e 's/\([^A-Za-z]\)usyr.pfb/\1sy______.pfb/' \
    -e 's/\([^A-Za-z]\)utmb8a.pfb/\1n021004l.pfb/' \
    -e 's/\([^A-Za-z]\)utmb8a.pfb/\1ptmb8a.pfb/' \
    -e 's/\([^A-Za-z]\)utmb8a.pfb/\1tib_____.pfb/' \
    -e 's/\([^A-Za-z]\)utmbi8a.pfb/\1n021024l.pfb/' \
    -e 's/\([^A-Za-z]\)utmbi8a.pfb/\1ptmbi8a.pfb/' \
    -e 's/\([^A-Za-z]\)utmbi8a.pfb/\1tibi____.pfb/' \
    -e 's/\([^A-Za-z]\)utmr8a.pfb/\1n021003l.pfb/' \
    -e 's/\([^A-Za-z]\)utmr8a.pfb/\1ptmr8a.pfb/' \
    -e 's/\([^A-Za-z]\)utmr8a.pfb/\1tir_____.pfb/' \
    -e 's/\([^A-Za-z]\)utmri8a.pfb/\1n021023l.pfb/' \
    -e 's/\([^A-Za-z]\)utmri8a.pfb/\1ptmri8a.pfb/' \
    -e 's/\([^A-Za-z]\)utmri8a.pfb/\1tii_____.pfb/' \
    -e 's/\([^A-Za-z]\)uzcmi8a.pfb/\1pzcmi8a.pfb/' \
    -e 's/\([^A-Za-z]\)uzcmi8a.pfb/\1z003034l.pfb/' \
    -e 's/\([^A-Za-z]\)uzcmi8a.pfb/\1zcmi____.pfb/' \
    -e 's/\([^A-Za-z]\)uzdr.pfb/\1d050000l.pfb/' \
    -e 's/\([^A-Za-z]\)uzdr.pfb/\1pzdr.pfb/' \
    -e 's/\([^A-Za-z]\)uzdr.pfb/\1zd______.pfb/' \
    -e 's/ CenturySchL-BoldItal / NewCenturySchlbk-BoldItalic /' \
    -e 's/ CenturySchL-Bold / NewCenturySchlbk-Bold /' \
    -e 's/ CenturySchL-Ital / NewCenturySchlbk-Italic /' \
    -e 's/ CenturySchL-Roma / NewCenturySchlbk-Roman /' \
      -e '/%[^ ]*$/s@$@ default@' \
    -e 's/ Dingbats / ZapfDingbats /' \
      -e 's@\(.*<\[* *\([^ ]*\)\.enc\(.*\)\)@\1 \2@' \
      -e 's@ *" *@ " @g' \
      -e 's@[ 	][ 	]*@ @g' \
    -e 's/ NimbusMonL-Bold / Courier-Bold /' \
    -e 's/ NimbusMonL-BoldObli / Courier-BoldOblique /' \
    -e 's/ NimbusMonL-Regu / Courier /' \
    -e 's/ NimbusMonL-ReguObli / Courier-Oblique /' \
    -e 's/ NimbusRomNo9L-MediItal / Times-BoldItalic /' \
    -e 's/ NimbusRomNo9L-Medi / Times-Bold /' \
    -e 's/ NimbusRomNo9L-ReguItal / Times-Italic /' \
    -e 's/ NimbusRomNo9L-Regu / Times-Roman /' \
    -e 's/ NimbusSanL-BoldCond / Helvetica-Narrow-Bold /' \
    -e 's/ NimbusSanL-BoldCondItal / Helvetica-Narrow-BoldOblique /' \
    -e 's/ NimbusSanL-Bold / Helvetica-Bold /' \
    -e 's/ NimbusSanL-BoldItal / Helvetica-BoldOblique /' \
    -e 's/ NimbusSanL-ReguCond / Helvetica-Narrow /' \
    -e 's/ NimbusSanL-ReguCondItal / Helvetica-Narrow-Oblique /' \
    -e 's/ NimbusSanL-Regu / Helvetica /' \
    -e 's/ NimbusSanL-ReguItal / Helvetica-Oblique /' \
      -e 's@\(.*<<* *\([^ ]*\)\.pf[ab].*\)@\1 \2@' \
    -e 's/ StandardSymL / Symbol /' \
    -e 's/ URWBookmanL-DemiBold / Bookman-Demi /' \
    -e 's/ URWBookmanL-DemiBoldItal / Bookman-DemiItalic /' \
    -e 's/ URWBookmanL-Ligh / Bookman-Light /' \
    -e 's/ URWBookmanL-LighItal / Bookman-LightItalic /' \
    -e 's/ URWChanceryL-MediItal / ZapfChancery-MediumItalic /' \
    -e 's/ URWGothicL-Book / AvantGarde-Book /' \
    -e 's/ URWGothicL-BookObli / AvantGarde-BookOblique /' \
    -e 's/ URWGothicL-Demi / AvantGarde-Demi /' \
    -e 's/ URWGothicL-DemiObli / AvantGarde-DemiOblique /' \
    -e 's/ URWPalladioL-BoldItal / Palatino-BoldItalic /' \
    -e 's/ URWPalladioL-Bold / Palatino-Bold /' \
    -e 's/ URWPalladioL-Ital / Palatino-Italic /' \
    -e 's/ URWPalladioL-Roma / Palatino-Roman /' \
#   execution starts here
    exists in obsolete location
    exit 0
  (exit 0); exit
  (exit 0); exit 0
  (exit $rc); exit $rc
Explanation of the map types: the (only) difference between Map and
export PATH
  # extract the name of the map file (-> $m)
      false; return 1
    false; return 1
      fi
            fi;;
  file=$1; file2=$2
    # file1 = file2, we don't want to complain about file2, so:
  file=$1; pat=$2; line=$3
    file2=`kpsewhich --format='dvips config' "$map"` || true
# fileADOBE()
fileADOBE()
# fileADOBEkb()
fileADOBEkb()
    file. However, a map file with different content has been found in
    file=`kpsewhich --format=map "$map"`
    file=`locateMap "$map"` || { touch $catMapsFailed; break; }
	% $file: maintained by the script updmap.
  # files should be world-readable
# fileURW()
fileURW()
      fileURW ${1+"$@"}
#   filter config file by regex for map lines and extract the map filenames.
#   find config file if none specified on cmd line.
#      fix condensed <-> narrow mapping
#      fix fmex[789] for dvipdfm (no -r option)
#      fixing trap for MAC OS/X compatibility
#      fix typo: buildin -> builtin
#      fix unportable egrep / sed
fonts should be used as bitmaps and which as outlines, and to determine
fonts that are available as both Type 1 and Metafont.
# for Debian, this is superseded by a function defined in debianize-updmap
  for d in "$dvipsoutputdir" "$pdftexoutputdir" "$dvipdfmoutputdir"; do
  for file in $allOutput; do
  for i in `egrep '^(Mixed)?Map' "$cnfFile" | sed 's@.* @@'`; do
  for line in `egrep '^(#! *)?(Mixed)?Map' "$cnfFile"`; do
  for map
    For more information about the changed search paths, see
  for o in $allOutput; do
#    for psfonts.map according to dvipsPreferOutline variable,
  # For reasons of speed only. Avoid normalizeLines if files are 100%
For step-by-step instructions on making new fonts known to TeX, see
  for type in $mapType; do
    found the file
#   Fr Apr  8 19:15:05 CEST 2005
#   Fri Jan  2 22:41:11 CET 2004, te:
#   Fri Mar 19 15:22:55 CET 2004, te
#   Fri May 17 22:38:37 CEST 2002:
#   Fr Jul 22 07:22:38 CEST 2005
#   Fr Okt 29 21:05:53 CEST 2004
    from the old location and search the above output"
       | grep . > $tmp4
    | grep -v PaintType | grep . > $tmp3
    | grep -v PaintType | grep . > $tmp6
    | grep -v PaintType | grep . > $tmp7
# hack around a bug in zsh:
          help;;
# help()
    help)        help; (exit 0); exit;;
      --help|-help|-h)
  --help                    show this message
#      honor $TMPDIR, $TEMP and $TMP, not just $TMP
http://tug.org/fonts/fontinstall.html.
      http://tug.org/texlive/mapenc.html
      id=$1; cnfFile=$3; orig=$4
    if $chicken_mode; then
  if $chicken_mode; then
#   if --copy is not set, try to create a symlink.  If this fails, write 
  if $copy; then
  if grep "$pat" "$file" >/dev/null; then
  IFS=$OLDIFS
  if test -d "$dir" && test -w "$dir"; then
  if test -f $catMapsFailed; then
      if test -f "$file2"; then
    if test -f "$file"; then
  if test -f $mapWarnCalled; then
  if test -n "$cfgmaint"; then
  if test -n "$cfgparam"; then
  if test -n "$dvipdfmoutputdirparam"; then
  if test -n "$dvipdoutputdirparam"; then
    if test -n "$log"; then
  if test -n "$pdftexoutputdirparam"; then
  if test -w "$log"; then
  if test "x$dvipdfmDownloadBase14" = xtrue; then
  if test "x$dvipsDownloadBase35" = xtrue; then
  if test "x$dvipsPreferOutline" = xtrue; then
  if test "x$pdftexDownloadBase14" = xtrue; then
    if test -z "$cfgparam"; then
    if test -z "$cnfFile" || test ! -f "$cnfFile"; then
    if test -z "$dvipdfmoutputdir" || test ! -d "$dvipdfmoutputdir"; then
  if test -z "$dvipdfmoutputdir"; then
    if test -z "$dvipdoutputdir" || test ! -d "$dvipdoutputdir"; then
  if test -z "$dvipsoutputdir"; then
    if test -z "$pdftexoutputdir" || test ! -d "$pdftexoutputdir"; then
  if test -z "$pdftexoutputdir"; then
  if :; then
  if $verbose; then
#      implementaion adopted for teTeX-3.0 (tcfmgr)
#      improved warnings / error messages
  # initialize global variables
    instead.
    in the obsolete path.
    in the right location and we are using this
  item=$1
  # keep a copy of config file, so that we can see if the file was modified
    kpsewhich --format=map "$i" >/dev/null || echo "$i"
    kpsewhich --format=map "$m" >/dev/null && echo "$line"
  kpsewhich --format='web2c files' ${1+"$@"}
#   line will be added at the end of the file if pattern does not match.
    $link_cmd "$1" "$2" ||
  link_cmd="ln -s"
#   list all maps mentioned in the config file
      --listavailablemaps)
# listAvailableMaps()
listAvailableMaps()
    listavailablemaps) listAvailableMaps; (exit 0); exit;;
  --listavailablemaps       same as --listmaps, but without
# listMaps()
listMaps()
      --listmaps|-l)
  --listmaps                list all active and inactive maps
    listmaps) listMaps; (exit 0); exit;;
#   list maps mentioned in the config file if they are available
#      listmaps option added by Gerben Wierda
locateMap()
# locateMap (file ...)
locateMapMigrate()
# locateMapMigrate (file ...)
    locateMapMigrate "$@" || retval=$?
locateWeb2c()
# locateWeb2c (file ...)
    location
      $location
    location=$3
    > "$log"
      $log
      log=
    log=
	%   $log
  log="$dir/$progname.log"
#   look for map file; assist user with possibly files in wrong locations;
    # look up using the new search path
    # look up using the old search path
  # loop over each possible line in the config file (-> $line)
  ls -l "$dvipsoutputdir"/psfonts.map \
  ls -l $outputFiles | verboseCat
    LW35)
# main()
main ${1+"$@"}
#      make the script robust against whitespace in filenames
  manualResolve)
            Map=*)
  map=$1
  #           map=$1 <"$cnfFile" | sort | uniq`
    map=$2
mapCmp()
        mapCmp "$file" "$file2" \
# mapCmp(file, file2)
            Map|MixedMap)
    Map|MixedMap)
  #mapType=`awk '($1 == "MixedMap" || $1 == "Map") && $2 == map { print $1 }' \
  mapType=`egrep "^(MixedMap|Map)[ 	]*$map( |	|$)" "$cnfFile" | awk '{print $1}' | sort | uniq`
# mapWarn()
mapWarn()
        mapWarn badLocation "$map" "$file2"
  mapWarnCalled=$tmpdir/mapWarnCalled
          || mapWarn manualResolve "$map" "$file" "$file2"
        mapWarn notFound "$map"
          && mapWarn obsoleteCopy "$map" "$file2" \
    m=`echo "$line" | sed 's@[ 	]*$@@; s@.*[ 	]@@'`
    # might be missing in the map file; Empty lines are filtered out later,
#   Mi Nov  3 16:33:22 CET 2004
#   Mi Okt 20 19:17:19 CEST 2004
#   Mi Okt  6 16:37:49 CEST 2004
            MixedMap=*)
MixedMap is that MixedMap entries are not added to psfonts_pk.map.  The
  mkdir "$tmpdir" || abort "could not create directory \`$tmpdir'"
              mkmapEnabled=false
          mkmapEnabled=false;;
  $mkmapEnabled || return
  mkmapEnabled=true
  mkMaps
# mkMaps()
mkMaps()
mktexdir()
# mktexdir(args)
  mktexdir "$dir" >/dev/null 2>&1
  mktexdir "$dvipsoutputdir" "$pdftexoutputdir" "$dvipdfmoutputdir" >/dev/null 2>&1
    m="$m for warnings.
  mode=`cfgval LW35`
#   Mon Jan 27 06:55:28 CET 2003
#   Mon Jan 27 22:38:44 CET 2003
#   Mon Mar 24 13:40:55 CET 2003
#   Mon Sep  2 19:18:57 CEST 2002
#   Mon Sep 22 19:18:57 CEST 2002
  MT_FEATURES=none "$TEXMFMAIN/web2c/mktexdir" "$@" >&2
  -n, --dry-run             only show the configuration, no output
  needsCleanup=false
  $needsCleanup && return
  $needsCleanup && test -n "$tmpdir" && test -d "$tmpdir" \
  needsCleanup=true
  newline='
#   no CR's (as in skaknew).
      --nohash)
  --nohash                  do not run texhash
      --nomkmap)
  --nomkmap                 do not recreate map files
# normalizeLines()
normalizeLines()
    | normalizeLines >> "$dvipsoutputdir/builtin35.map"
    | normalizeLines >> "$dvipsoutputdir/download35.map"
    | normalizeLines >> "$dvipsoutputdir/ps2pk.map"
    | normalizeLines >> "$dvipsoutputdir/psfonts_pk.map"
    | normalizeLines >> "$dvipsoutputdir/psfonts_t1.map"
  normalizeLines <"$file2" >"$tmpdir/mapCmp-2"
  normalizeLines <"$file" >"$tmpdir/mapCmp-1"
    not been found in the right location, but in the obsolete
  notFound)
  notfound=false
  $notfound || texhashEnabled=false
!!! NOTICE:
  # now enable with the right type:
#      now even more verbose; now reporting non-existing map files
#   no whitespace at end of line, one space before and after ",
#      now removing map files before rewriting them; fixes permission problems
  obsoleteCopy)
    obsolete file.
  OLDIFS=$IFS
  OLDIFS=$IFS; IFS=$newline
      # ones: complain!
  opt=$1
#   or by adding a new line to the config file).
  orig_pwd=`pwd`
      --outputdir=*)
      --outputdir)
  --outputdir DIR           specify output directory (for all files)
          outputdir=`echo "$1" | sed 's/--outputdir=//'`
  outputdirparam=
  outputFiles="$dvipsoutputdir/download35.map
$outputLinks"
  outputLinks="$dvipsoutputdir/psfonts.map
    # output the file; also output a newline, because the final newline
#      output "xxx yyy" instead of " xxx yyy " (less blanks)
  # pdftex
  pdftex35=`locateMap pdftex35.map` || cleanup 1
  pdftexDownloadBase14=`cfgval pdftexDownloadBase14`
                             pdftexDownloadBase14 dvipdfmDownloadBase14
      --pdftexoutputdir=*)
      --pdftexoutputdir)
  --pdftexoutputdir DIR     specify output directory (pdftex syntax)
#      pdftexoutputdir, dvipdfmoutputdir
	  pdftex output directory: \`$pdftexoutputdir'
          pdftexoutputdirparam=1; pdftexoutputdir=$2
          pdftexoutputdirparam=1; pdftexoutputdir=$2; shift;;
          pdftexoutputdirparam=1; pdftexoutputdir=`echo "$1" | sed 's/--pdftexoutputdir=//'`;;
          pdftexoutputdirparam=1; pdftexoutputdir=$outputdir
$pdftexoutputdir/pdftex_dl14.map
         "$pdftexoutputdir"/pdftex.map \
$pdftexoutputdir/pdftex.map
$pdftexoutputdir/pdftex_ndl14.map
    pdftexoutputdir=$vartexmf/fonts/map/pdftex/updmap
    Please, consider removing this file.
    Please, see which version you want to use and eventually update the
#   Post-te retirement, now maintained in TeX Live; see
	  prefer outlines: \`$dvipsPreferOutline'
#   print `errmsg' to stderr and exit with error code 1
#   print `msg' to stderr
#   print `msg' to stderr is $verbose is true
#   process cmd line options
# processOptions()
processOptions()
  processOptions ${1+"$@"}
  progname=updmap
# program history:
  ps2pk35=`locateMap ps2pk35.map` || cleanup 1
# psADOBE()
psADOBE()
      psADOBE ${1+"$@"} | file$mode
purpose is to help users with printers that render Type 1 outline fonts
      --quiet|-q)
  --quiet                   reduce verbosity
r 10 19:31:39 CET 2005
r 27 18:52:06 CEST 2005
#   reads from stdin, writes to stdout. It transforms "dvips"-like syntax into
#   read variable ($1) from config file, first match wins
    reference from the configuration files - see
#   remove comments, whitespace is exactly one space, no empty lines,
  # remove PaintType due to Sebastian's request
#      remove pdftex related hacks; pdftex no longer needs them!
Report bugs to <tex-k@tug.org>.
  return 0
    return $retval
#   return value here.
retval=0
#      rewritten from teTeX-1.0 version; Completely new designed.
  rm -f $catMapsFailed
  rm -f dvipdfm.map
    rm -f "$file"
    rm -f "$log"
  rm -f pdftex.map
  rm -f psfonts.map
  && { RUNNING_BSH=true; export RUNNING_BSH; exec /bin/bsh $0 ${1+"$@"}; }
  && { RUNNING_KSH=true; export RUNNING_KSH; exec /bin/ksh $0 ${1+"$@"}; }
# Run with --help for usage.
#   Sa Dez 25 12:44:23 CET 2004
#   Sa Jan 15 18:13:46 CET 2005
#   Sat Jan 18 10:10:26 CET 2003
  sed -e 's@$@ %@' \
  sed -f $tmp2 "$cnfFile" > $tmp3 && cat $tmp3 > "$cnfFile"
    | sed 's@#.*@@' \
    sed 's@/@\\/@g; s@^@/^Map[ 	]*@; s@$@$/s/^/#! /@' <$tmp1
    sed 's@/@\\/@g; s@^@/^MixedMap[ 	]*@; s@$@$/s/^/#! /@' <$tmp1
    | sed 's@$@ -r@; s@\(fmex[789]\) -r$@\1@'
# (see below)
      --setoption)
      setoption)
setOption()
              setoptionOpt=$2; setoptionVal=$3; shift; shift
              setoptionOpt=`echo $2 | sed 's@=.*@@'`
# setOption (option, value)
  --setoption OPTION=VALUE  see above, just different syntax
  --setoption OPTION VALUE  set option, where OPTION is one of:
        setOption "$setoptionOpt" "$setoptionVal";;
              setoptionVal=`echo $2 | sed 's@[^=]*=@@'`
#   sets option to value in the config file (replacing the existing setting
#   set symlink (or copy)
#   set up a temp directory and a trap to remove it
  setupCfgFile
# setupCfgFile()
setupCfgFile()
  setupDestDir
# setupDestDir()
setupDestDir()
  setupLog
setupLog()
# setupLog(cfgFile)
  setupSymlinks
# setupSymlinks()
setupSymlinks()
  setupTmpDir
# setupTmpDir()
setupTmpDir()
      set x $co; shift
          shift
              shift
      --showoptions=*)
      --showoptions)
showOptions()
#   show Options for an item
# showOptions(item)
  --showoptions ITEM        show alternatives for options
    showoptions) showOptions "$showoptionsItem"; (exit 0); exit;;
    # so it does not really hurt do do this here.
#   So M
#   So Okt 17 19:07:17 CEST 2004
       | sort \
   | sort | uniq
# source Debian-specific changes, superseding the last three functions
#      store map files to fonts/map, add options for dvipsoutputdir,
    subdirectory of fonts/map in one of your texmf trees.
#   Sun Aug  1 11:42:14 CEST 2004, te
#   Sun Mar 23 18:58:00 CET 2003
#   Sun May 25 21:05:32 CEST 2008 (Reinhard Kotucha)
#   Sun Oct 27 11:33:04 CET 2002
#   Sun Sep  1 15:02:28 CEST 2002
#      support user with new map file locations
# symlink_or_copy()
symlink_or_copy()
    symlink_or_copy dvipdfm_dl14.map dvipdfm.map
    symlink_or_copy dvipdfm_ndl14.map dvipdfm.map
    symlink_or_copy pdftex_dl14.map pdftex.map
    symlink_or_copy pdftex_ndl14.map pdftex.map
    symlink_or_copy psfonts_pk.map psfonts.map
    symlink_or_copy psfonts_t1.map psfonts.map
      --syncwithtrees)
      syncwithtrees)
        syncWithTrees;;
# syncWithTrees()
syncWithTrees()
  --syncwithtrees           entries with unavailable map files will be
    test -d "$d" || abort "output directory \`$d' does not exist"
test -f /bin/bsh && test -z "$RUNNING_BSH" \
test -f /bin/ksh && test -z "$RUNNING_KSH" \
    test -f "$o" || notfound=true
              test $# -ge 3 || { abort "--enable needs two parameters: mapType mapFile"; }
              test $# -ge 3 || { abort "--setoption needs two parameters: option value"; }
    test -n "$file" && { cat "$file"; echo; }
    test -n "$log" && cat ${1+"$@"} >> "$log"
  test -n "$log" && echo ${1+"$@"} >> "$log"
    test -n "$log" && m="$m or the transcript file
test -n "${ZSH_VERSION+set}" && alias -g '${1+"$@"}'='"$@"'
      test $retval = 0 || cleanup 1
    test -w "$d" || abort "output directory \`$d' is not writable"
    test "x$file" = "x$file2" && file2=
  test -z "$dvipdfmDownloadBase14" && dvipdfmDownloadBase14=false
  test -z "$dvipsDownloadBase35" && dvipsDownloadBase35=false
  test -z "$dvipsPreferOutline" && dvipsPreferOutline=true
  test -z "$mode" && mode=URWkb
  test -z "$pdftexDownloadBase14" && pdftexDownloadBase14=false
      texdoc TETEXDOC
          texhashEnabled=false;;
	  texhash enabled: \`$texhashEnabled'
  texhashEnabled=true
  $texhashEnabled && { $verbose && texhash || texhash >/dev/null 2>&1; }
  : ${TEXMFMAIN=`kpsewhich -var-value=TEXMFMAIN`}
#   The first line in file that matches pattern gets replaced by line.
#   the main task of this script: create the output files
    the obsolete location
  # The old version of the code; not used at the moment.
    the release notes section in the teTeX manual. You probably
  # the same.
#   These are then looked up (by kpsewhich in locateMap) and the content of
#   the TEXMFVAR for this.
# the version string
    This is not an error per se, but please consider removing duplicates
# Thomas Esser. Public domain.
#   Thu Jan  2 23:14:34 CET 2003
#   Thu May 13 22:04:23 CEST 2004, te
  tmp1=$tmpdir/a
  } > $tmp2
  tmp2=$tmpdir/b
  <$tmp3 normalizeLines >> "$pdftexoutputdir/pdftex_ndl14.map"
  tmp3=$tmpdir/c
  tmp4=$tmpdir/d
  tmp5=$tmpdir/e
  <$tmp6 normalizeLines | dvips2dvipdfm | normalizeLines >> "$dvipdfmoutputdir/dvipdfm_ndl14.map"
  tmp6=$tmpdir/f
  <$tmp7 normalizeLines | dvips2dvipdfm | normalizeLines >> "$dvipdfmoutputdir/dvipdfm_dl14.map"
  <$tmp7 normalizeLines >> "$pdftexoutputdir/pdftex_dl14.map"
  tmp7=$tmpdir/g
  tmp8=$tmpdir/h
  tmpdir=${TMPDIR-${TEMP-${TMP-/tmp}}}/$progname.$$
    To fix this, please move this file into an appropriate
To see the precise locations of the various files that will be read and
    touch $mapWarnCalled
#      transcript added; even better warnings / error messages
#   transform filenames from URWkb (berry names) to ADOBE (vendor names)
#   transform filenames from URWkb (berry names) to URW (vendor names)
#   transform filenames from URW to ADOBE (both berry names)
#   transform fontname and filenames according to transformation specified
#   transform fontnames from URW to Adobe
transLW35()
# transLW35(args ...)
  { transLW35 "$dftdvips"; cat $tmp1 $tmp2; } \
  { transLW35 "$dftdvips"; cat $tmp2; } \
  { transLW35 "$dvipdfm35"; cat $tmp1 $tmp2; } \
  { transLW35 "$dvips35"; } \
  { transLW35 "$pdftex35"; cat $tmp1 $tmp2; } \
  { transLW35 "$ps2pk35"; } \
  { transLW35 "$ps2pk35"; cat $tmp1 $tmp2; } \
  trap 'cleanup 1' 1 2 3 7 13 15
   | tr -d '\r' \
        true|false)
      true) if $mkmapEnabled; then
    true; return 0
  true; return 0
#   try to set up a log file in $TEXMFVAR/web2c
#   Tue May 21 05:05:34 CEST 2002:
#   Tue May 21 05:27:37 CEST 2002
  umask 022
  && { UNAMES=`uname -s`; test "x$UNAMES" = xAIX; } 2>/dev/null \
  && { UNAMES=`uname -s`; test "x$UNAMES" = xULTRIX; } 2>/dev/null \
                             unavailable map files
        *) unchanged=false
    unchanged=true
       | uniq \
unset RUNNING_BSH
unset RUNNING_KSH
#   update the config file: uncomment all lines which refer to map files that
Update the default font map files used by pdftex, dvips, and dvipdfm, as
    update-updmap(1).
updmap.cfg").
	updmap is creating new map files using the following configuration:
# updmap: utility to maintain map files for outline fonts.
    URW)
    ""|URWkb)
        URWkb|URW|ADOBE|ADOBEkb)
Usage: updmap [OPTION]...  [COMMAND]...
#      use $tmp8 in dvips2dvipdfm()
. /usr/share/tex-common/debianize-updmap
  val=$2
Valid commands:
Valid options:
  vartexmf=`kpsewhich -var-value=TEXMFVAR`
# verboseCat()
verboseCat() {
  verboseCat <<-eof
  $verbose && echo ${1+"$@"} >&2
          verbose=false;;
  verboseMsg
verboseMsg() {
# verboseMsg(msg)
  verboseMsg "$progname: All output generated."
      verboseMsg "$progname: config file is \`$cnfFile'"
           verboseMsg "$progname: configuration file updated: \`$cnfFile'";;
              verboseMsg "$progname: configuration (updmap.cfg) unchanged."
              verboseMsg "$progname: configuration (updmap.cfg) unchanged. Map files will not be recreated."
  verboseMsg "$progname: Done."
  verboseMsg "$progname: Files generated:"
  verboseMsg "$progname: Generating output for dvipdfm..."
  verboseMsg "$progname: Generating output for dvips..."
  verboseMsg "$progname: Generating output for pdftex..."
  verboseMsg "$progname: Generating output for ps2pk..."
      verboseMsg "$progname: initial config file is \`$orig'"
  verboseMsg "$progname: Map file links or copies:"
    verboseMsg "$progname: no permissions for writing $dir/$progname.log', so no transcript"
  verboseMsg "$progname: scanning for LW35 support files"
  verboseMsg "$progname: Scanning for Map entries:"
  verboseMsg "$progname: Scanning for MixedMap entries:"
      verboseMsg "$progname: This is $progname, version $version"
    verboseMsg "$progname: This is $progname, version $version"
      verboseMsg "$progname: using map file \`$file'"
      verboseMsg "$progname: using transcript file \`$log'"
  verbose=true
      --version)
version='$Id: updmap 14402 2009-07-23 17:09:15Z karl $'
    warn "
!!! WARNING: Identical copy of used file for \`$2'
!!! WARNING: While searching for the right map file for \`$2', we have
    warn "$m"
      warn "map file \`$map' not found."
# warn(msg)
  warn "$progname: $1."
#   Wed Aug 20 18:51:47 CEST 2003
#   Wed May 22 20:00:13 CEST 2002
      # we have found the file where we should. If we have additional
    # Well, the search paths should not overlap. If they do, and if
                              where MAPTYPE is either Map or MixedMap
which fonts are included in the output.
  while read map; do
#   whitespaces, comments etc. are tolerated. Important is only the
    With this release, the search paths for map files have been changed
worse than mode-tuned Type 1 bitmap fonts.  So MixedMap is used for
#      write hint about log file into output files
#      write output in normalized format
written, run updmap -n.

		@ARGV = @_;
			cancel();
		cancel();
	$cancelled++;
		$cancel_sent_signal++;
			checkclose(1);
			checkclose(2);
			checkclose($fd);
	checkclose($newfd);
		checkclose($null);
			checkdup2(fileno(APT_LOG), 1);
			checkdup2(fileno(APT_LOG), 2);
			checkdup2(fileno(COMMAND_READ), 0);
	checkdup2(fileno(DEBCONF_COMMAND_WRITE), 6);
	checkdup2(fileno(DEBCONF_REPLY_READ), 5);
	checkdup2(fileno(STATUS_WRITE), 4);
			checkdup2($null, $fd);
	chomp $ret;
			$close = 0;
		close APT_LOG;
			close COMMAND_READ;
	close COMMAND_READ;
		close COMMAND_WRITE;
		close DEBCONF_COMMAND_READ;
	close DEBCONF_COMMAND_WRITE;
	close DEBCONF_REPLY_READ;
		close DEBCONF_REPLY_WRITE;
		close STATUS_READ;
	close STATUS_WRITE;
	COMMAND_WRITE->autoflush(1);
			'critical', 'debconf-apt-progress/media-change');
DEBCONF_APT_PROGRESS_DB_OVERRIDE="$DEBCONF_DB_OVERRIDE"
DEBCONF_APT_PROGRESS_DB_REPLACE="$DEBCONF_DB_REPLACE"
		'debconf-apt-progress/info', 'DESCRIPTION', $description);
			'debconf-apt-progress/media-change', 'MESSAGE',
	Debconf::Client::ConfModule::get("debconf/priority");
		Debconf::Client::ConfModule::go();
		Debconf::Client::ConfModule::progress(
	Debconf::Client::ConfModule::progress('STOP') if $progress;
	Debconf::Client::ConfModule::stop() unless $had_frontend;
		Debconf::Client::ConfModule::subst(
	Debconf::Client::ConfModule::subst(
						$debconf_command_buf, 4096,
					    $debconf_command_buf !~ /\n$/) {
						$debconf_command_buf .= "\n";
					$debconf_command_eof = 1;
				($debconf_command_line, $debconf_command_buf) =
DEBCONF_DB_OVERRIDE='Pipe{infd:none outfd:none}'
DEBCONF_DB_REPLACE=configdb
	DEBCONF_REPLY_WRITE->autoflush(1);
	defined $fd or die "$0: can't open $_[0]: $!\n";
	defined(my $pid = fork) or die "$0: can't fork: $!\n";
delete $ENV{DEBCONF_APT_PROGRESS_NO_FRONTEND}; # avoid inheritance
	delete $ENV{DEBCONF_DB_OVERRIDE};
	delete $ENV{DEBCONF_DB_REPLACE};
		delete $ENV{DEBCONF_PIPE}; # just in case ...
		delete $ENV{DEBCONF_REDIR};
		delete $ENV{DEBCONF_SYSTEMRC};
		delete $ENV{DEBIAN_HAS_FRONTEND};
			$description);
	die "$0: cannot use --from or --to with --config or --stop\n";
		die "$0: can't close fd $fd: $!\n";
		die "$0: --from requires --to\n";
	die "$0: must use only one of --config, --start, or --stop\n";
					die "$0: read DEBCONF_COMMAND_READ " .
					die "$0: read STATUS_READ failed: $!";
			die "$0: select failed: $!";
		die "$0: --to requires --from\n";
		die "can't write to DEBCONF_REPLY_WRITE: $!";
	die "--no-progress cannot be used with --start, --from, --to, or --stop\n";
			'dlwaypoint=i' => \$dlwaypoint,
} else {
	} else {
		} else {
		else {
} elsif (defined $from) {
	} elsif (defined $to and not defined $from) {
	} elsif ($logstderr) {
				elsif ($r == 0) {
} elsif ($start) {
elsif ($status == 30) {
	elsif ($status eq 'media-change') {
	elsif ($status eq 'pmstatus') {
} elsif ($stop) {
		$ENV{APT_LISTCHANGES_FRONTEND} = 'none';
			$ENV{DEBCONF_APT_PROGRESS_DB_OVERRIDE} =
			$ENV{DEBCONF_APT_PROGRESS_DB_REPLACE} =
		$ENV{DEBCONF_APT_PROGRESS_NO_FRONTEND} = 1;
				$ENV{DEBCONF_DB_OVERRIDE};
	$ENV{DEBCONF_DB_OVERRIDE} = $ENV{DEBCONF_APT_PROGRESS_DB_OVERRIDE};
		$ENV{DEBCONF_DB_OVERRIDE} = 'Pipe{infd:none outfd:none}';
			$ENV{DEBCONF_DB_OVERRIDE} = 'Pipe{infd:none outfd:none}';
				$ENV{DEBCONF_DB_REPLACE};
		$ENV{DEBCONF_DB_REPLACE} = 'configdb';
			$ENV{DEBCONF_DB_REPLACE} = 'configdb';
	$ENV{DEBCONF_DB_REPLACE} = $ENV{DEBCONF_APT_PROGRESS_DB_REPLACE};
		$ENV{DEBCONF_READFD} = 5;
		$ENV{DEBCONF_WRITEFD} = 6;
		$ENV{DEBIAN_FRONTEND} = 'passthrough';
		$ENV{DEBIAN_PRIORITY} = $priority;
		exec @_;
	exit 3;
	exit 30;
	exit $status;
export DEBCONF_APT_PROGRESS_DB_REPLACE DEBCONF_APT_PROGRESS_DB_OVERRIDE
export DEBCONF_DB_REPLACE DEBCONF_DB_OVERRIDE
		$^F = 6; # avoid close-on-exec
					    "failed: $!";
	fcntl($fh, F_SETFD, $flags & ~FD_CLOEXEC);
	fcntl($fh, F_SETFL, $flags | O_NONBLOCK);
	for my $fd (@_) {
	$from = 0 unless defined $from;
			'from=i'       => \$from,
$had_frontend = 1 unless $ENV{DEBCONF_APT_PROGRESS_NO_FRONTEND};
				handle_debconf_command $debconf_command_line;
				handle_status $from, $to, $status_line;
	if (! $cancelled) {
if ($cancelled) {
		if ($cancel_sent_signal == 1) {
	if ($close) {
if ($config) {
if (($config or $stop) and (defined $from or defined $to)) {
					if ($debconf_command_buf ne '' and
	if (defined $from and not defined $to) {
	if (defined $logfile) {
	if (defined $pid) {
	if (! $ENV{DEBIAN_HAS_FRONTEND}) {
if (envnonempty('DEBCONF_APT_PROGRESS_DB_OVERRIDE')) {
if (envnonempty('DEBCONF_APT_PROGRESS_DB_REPLACE')) {
		if (envnonempty('DEBCONF_DB_OVERRIDE')) {
		if (envnonempty('DEBCONF_DB_REPLACE')) {
		if (fileno(APT_LOG) != 1) {
		if (fileno(APT_LOG) != 2) {
		if (fileno(COMMAND_READ) != 0) {
		if ($had_frontend) {
if ($mutex > 1) {
				if (not defined $r) {
		if ($null == $fd) {
	if (!$pid) {
	if ($progress) {
if (! $progress && ($start || $from || $to || $stop)) {
		if ($ret[0] eq '30') {
	if ($ret[0] eq '30') {
		if ($sel < 0) {
	if ($status & 127) {
					if ($status_buf ne '' and
	if ($status eq 'dlstatus') {
		if (vec($rout, fileno(DEBCONF_COMMAND_READ), 1) == 1) {
		if (vec($rout, fileno(STATUS_READ), 1) == 1) {
	import Debconf::Client::ConfModule;
		'INFO', 'debconf-apt-progress/info');
			'INFO', 'debconf-apt-progress/preparing');
			kill INT => $pid;
			kill KILL => $pid;
					last;
				last if $debconf_command_buf =~ /\n/;
					last if $! == &POSIX::EAGAIN or
				last if $status_buf =~ /\n/;
		$len = 100 - $dlwaypoint;
		$len = $dlwaypoint;
						length $debconf_command_buf);
						length $status_buf);
	local *APT_LOG;
	local (*COMMAND_READ, *COMMAND_WRITE);
	local (*DEBCONF_COMMAND_READ, *DEBCONF_COMMAND_WRITE);
	local (*DEBCONF_REPLY_READ, *DEBCONF_REPLY_WRITE);
	local (*STATUS_READ, *STATUS_WRITE);
			'logfile=s'    => \$logfile,
			'logstderr'    => \$logstderr,
		$min = 0;
		$min = $dlwaypoint;
++$mutex if $config;
++$mutex if $start;
++$mutex if $stop;
my $cancelled=0;
my $cancel_sent_signal=0;
	my $close = 1;
	my $command = shift;
my ($config, $start, $from, $to, $stop);
	my $debconf_command_buf = '';
	my $debconf_command_eof = 0;
				my $debconf_command_line;
my $dlwaypoint=15;
	my $fd = $_[0];
	my $fd = POSIX::open($file, &POSIX::O_RDONLY);
	my $fh = shift;
	my $file = $_[0];
	my $flags = fcntl($fh, F_GETFD, 0);
	my $flags = fcntl($fh, F_GETFL, 0);
	my $from = shift;
	my ($from, $to) = @_;
	my ($from, $to, $line) = @_;
my $had_frontend;
	my $line = shift;
my ($logfile, $logstderr);
	my ($min, $len);
my $mutex = 0;
	my $name = shift;
	my $null = checkopen('/dev/null');
	my ($oldfd, $newfd) = @_;
my $pid;
	my $priority = Debconf::Client::ConfModule::get('debconf/priority');
my $progress=1;
my $result = GetOptions('config'       => \$config,
		my @ret = Debconf::Client::ConfModule::input(
		my @ret=Debconf::Client::ConfModule::progress(
	my @ret=Debconf::Client::ConfModule::progress(
		my @ret=Debconf::Client::ConfModule::progress('SET', $percent);
		my @ret=Debconf::Client::ConfModule::progress('SET', $to);
	my $ret = <STDIN>;
		my $rin = '';
		my $rout;
				my $r = sysread(DEBCONF_COMMAND_READ,
				my $r = sysread(STATUS_READ, $status_buf, 4096,
my @saved_argv = @ARGV;
		my $sel = select($rout = $rin, undef, undef, undef);
	my $status = $?;
my $status = 0;
	my $status_buf = '';
	my $status_eof = 0;
				my $status_line;
	my ($status, $pkg, $percent, $description) = split ':', $line, 4;
	my $to = shift;
					next if $! == &POSIX::EINTR;
			next if $! == &POSIX::EINTR;
	nocloexec(\*APT_LOG);
	nocloexec(\*COMMAND_READ);
	nocloexec(\*DEBCONF_COMMAND_WRITE);
	nocloexec(\*DEBCONF_REPLY_READ);
	nocloexec(\*STATUS_WRITE);
	nonblock(\*DEBCONF_COMMAND_READ);
	nonblock(\*STATUS_READ);
		'-o', 'APT::Keep-Fds::=5',
		'-o', 'APT::Keep-Fds::=6',
		'-o', 'APT::Status-Fd=4',
		open APT_LOG, '>', '/dev/null'
		open APT_LOG, '>>', $logfile
		open APT_LOG, '>&STDERR'
	open DEBCONF_COMMAND_WRITE, '>&=6'
	open DEBCONF_REPLY_READ, '<&=5'
	open STATUS_WRITE, '>&=4'
		or die "$0: can't create command pipe: $!";
		or die "$0: can't create debconf command pipe: $!";
		or die "$0: can't create debconf reply pipe: $!";
		or die "$0: can't create status pipe: $!";
		or die "$0: can't dup fd $oldfd to $newfd: $!\n";
			or die "$0: can't duplicate stderr: $!";
			or die "$0: can't open /dev/null: $!";
			or die "$0: can't open $logfile: $!";
		or die "$0: can't reopen DEBCONF_COMMAND_WRITE as fd 6: $!";
		or die "$0: can't reopen DEBCONF_REPLY_READ as fd 5: $!";
		or die "$0: can't reopen STATUS_WRITE as fd 4: $!";
	$percent = ($percent * $len / 100 + $min);
	$percent = ($percent * ($to - $from) / 100 + $from);
	$percent =~ s/\..*//;
	$pid = passthrough $command,
	pipe COMMAND_READ, COMMAND_WRITE
	pipe DEBCONF_COMMAND_READ, DEBCONF_COMMAND_WRITE
	pipe DEBCONF_REPLY_READ, DEBCONF_REPLY_WRITE
	pipe STATUS_READ, STATUS_WRITE
	POSIX::dup2($oldfd, $newfd)
						$! == &POSIX::EWOULDBLOCK;
		print COMMAND_WRITE "\n" || die "can't talk to command fd: $!";
	print DEBCONF_REPLY_WRITE "$ret\n" ||
	print <<'EOF';
	print "$line\n" || die "can't write to stdout: $!";
			'progress!'    => \$progress,
	reservefds(4, 5, 6);
		$ret[0] == 0 or die "Can't display media change request!\n";
		return;
		return 127;
			return 30;
	return (exists $ENV{$name} and $ENV{$name} ne '');
	return $fd;
		return if $! == &POSIX::EBADF;
	return $pid;
	return ($status >> 8);
					split /\n/, $debconf_command_buf, 2;
					split /\n/, $status_buf, 2;
	start_bar(0, 100);
	start_bar($from, $to);
start_debconf(@saved_argv) unless $config;
			'START', $from, $to, 'debconf-apt-progress/title');
			'start'        => \$start,
					    $status_buf !~ /\n$/) {
						$status_buf .= "\n";
					$status_eof = 1;
				($status_line, $status_buf) =
		$status = run_progress(0, 100, @ARGV);
	$status = run_progress($from, $to, @ARGV);
		stop_bar();
	stop_bar();
			'stop'         => \$stop,
sub cancel () {
sub checkclose ($) {
sub checkdup2 ($$) {
sub checkopen (@) {
sub envnonempty ($) {
sub handle_debconf_command ($) {
sub handle_status ($$$) {
sub nocloexec (*) {
sub nonblock (*) {
sub passthrough (@) {
sub reservefds (@) {
sub run_progress ($$@) {
sub start_bar ($$) {
sub start_debconf (@) {
sub stop_bar () {
# This file was preprocessed, do not edit!
	$to = 100 unless defined $to;
			'to=i'         => \$to,
	undef $pid;
			unless $debconf_command_eof;
	unless (POSIX::close($fd)) {
unless ($start) {
use Debconf::Client::ConfModule ();
use Fcntl;
use Getopt::Long;
	use IO::Handle;
use POSIX;
use strict;
#!/usr/bin/perl -w
		vec($rin, fileno(DEBCONF_COMMAND_READ), 1) = 1
		vec($rin, fileno(STATUS_READ), 1) = 1;
	waitpid $pid, 0;
			while (1) {
			while ($debconf_command_buf =~ /\n/) {
	while (not $status_eof) {
			while ($status_buf =~ /\n/) {

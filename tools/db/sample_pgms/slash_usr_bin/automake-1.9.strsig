                {
                }
            {
            }
        {
        }
      #	  |
     });
  @<<<<<<<<<<<<<<<<   @<<<<<<<<<<<<<<<<   @<<<<<<<<<<<<<<<<   @<<<<<<<<<<<<<<<<
# -----------
# -------------
# ----------------
# -----------------
# ------------------
# -------------------
# --------------------
# ---------------------
# -----------------------
# ------------------------
# -------------------------
# --------------------------
# ----------------------------
# -----------------------------
# ------------------------------
# -------------------------------
# --------------------------------
# ---------------------------------
# ------------------------------------
# --------------------------------------
# ---------------------------------------
# ----------------------------------------
# -----------------------------------------
# ------------------------------------------
# ----------------------------------------------
# ------------------------------------------------
# --------------------------------------------------
# ---------------------------------------------------
# -----------------------------------------------------
# -----------------------------------------------------------
# -------------------------------------------------------------
# --------------------------------------------------------------
# ----------------------------------------------------------------
# ------------------------------------------------------------------
# ---------------------------------------------------------------------------
# -----------------------------------------------------------------------------
## ----------- ##
## ------------------------ ##
## -------------------------------- ##
## --------------------------------- ##
## ---------------------------------- ##
## ---------------------------------------- ##
## ------------------------------------------ ##
################################################################
	      );
	      {
	      }
		       : '')
		      {
		      }
			       ? ''
			     : ''),
			    {
			    }
			. '$@'
				  . ' '
				  );
# 02110-1301, USA.
  # |  1) If a package doesn't have a directory po/ at top level, it
      #   (1) if during a VPATH build the .info file was found to be
                # (1) uniqueness, and (2) continuity between
# 2003, 2004, 2005  Free Software Foundation, Inc.
	    # 2048 bytes (most notably, some sed implementation are
	    # 2200+ subdir objects was reported to have a 9MB
      #   (2) having two copies of .info files, one in the source tree
  # |  2) It is useful to warn for the absence of intl/ if AM_GNU_GETTEXT
		     # $? = 63 is used to indicate version mismatch to missing.
		 # $? = 63 is used to indicate version mismatch to missing.
      #   a
     'a|add-missing' 	=> \$add_missing,
  -a, --add-missing      add missing standard files to package
# a @BASENAME and the $EXTENSION.
# A better approach would be to write an Autoconf test
      # A blatant hack: we rewrite each _PROGRAMS primary to include
# about).
      #       absent or out-of-date (in the source tree or in the
		AC_CANONICAL_BUILD => 0,
		AC_CANONICAL_HOST => 0,
      # AC_CANONICAL_HOST, AC_CANONICAL_SYSTEM, and AC_CANONICAL_TARGET
		AC_CANONICAL_TARGET => 0,
  accept_extensions (@{$lang->extensions});
    accept_extensions (split (' ', $value));
      # Accept one of these three licenses; default to COPYING.
# AC_CONFIG_AUX_DIR.)
		AC_CONFIG_AUX_DIR => 1,
# AC_CONFIG_AUX_DIR in configure.ac.
		AC_CONFIG_FILES => 1,
# AC_CONFIG_FILES allow specifications such as Makefile:top.in:mid.in:bot.in
	      $ac_config_files_location{$dest} = $where;
      $ac_config_files_location{$local} = $where;
#   AC_CONFIG_FILES($OUTPUT:$INPUT[0]:$INPUTS[1]:...)
		AC_CONFIG_HEADERS => 1,
		AC_CONFIG_LINKS => 1,
	  $ac_gettext_location = $where;
		AC_INIT => 0,
		AC_LIBSOURCE => 1,
		     "aclocal.m4\nwith aclocal and run automake again.\n",
	       "`ACLOCAL_M4_SOURCES' is obsolete.\n"
		 "aclocal.m4 with aclocal and run automake again.\n",
      # A configure variable is always legitimate.
# AC_OUTPUT commands.
	  # AC_OUTPUT(subdir/foo foo) will fail to put foo.in into
		AC_SUBST => 1,
	  # AC_SUBST(5), then too bad.
		|| $actions{$_}
		      $actions{$_} = $actions;
	  $actions{"$_-am"} .=
	      # actions from the targets in %dependencies are usually generated
		      $actions{$_} .= "\n$actions" if $actions;
	      # actually found the file, then do nothing.
  # Actually output gathered targets.
	  # actual names don't matter much.  We only number starting
			  @actual_other_files);
	# actual suffixes, and not $(SUFFIXES).  Some versions of make
#   actual target of object to build
# Actual version we've seen.
	# Add a dependency for the generated header file, and arrange
      # Add more sections as needed.
  # A directory can contain two kinds of info files: some built in the
			 || $adir eq 'check');
		   $adirtxt = "built for `$adir'"
	    # A first time we output the compile rule with `$U'
		#   # A = foo \
		    $aggregate = $derived;
# A helper for read_main_am_file which initializes configure variables
	   # A library cannot be installed in different directory
	# A list of flag variables used in 'compile'.
    @all = ();
  #  all:
   'all'          => 1,
      #       all files in the build tree.
      # all, or install targets.  We used to warn if EXTRA_FOO was
  # allow `JAVA', as it is customarily used to mean the Java
  # allow parallel builds to work correctly.  FIXME: for now, no
  # allows users to do random weird things to the distribution
# All .P files.
# all possible values, and return $(am__VAR_DIST).
				  ? 'all-recursive' : 'all-am') . "\n\n";
    $all_target = '';
	# all the files in a directory are of that language, then we
  # All the required targets are phony.
      # `all', to ensure all the primary targets are built.  Then it
# along with this program; if not, write to the Free Software
      # Alphabetical ordering please.
# Also distribute $INPUTs which are not build by another AC_CONFIG_FILES.
# Also, generate _DEPENDENCIES variable if appropriate.
		  . "also included in `$versions{$vtexi}'")
            # also return a list whose first value is such a constant
	# always at the start of the list, unsorted.  This is done
		# Always use the $(srcdir) prefix in DIST_COMMON,
		# Always use the $(top_srcdir) prefix in DIST_COMMON,
		AM_AUTOMAKE_VERSION => 1,
		AM_CONDITIONAL => 2,
  $am_config_aux_dir =
# $AM_CONFIG_AUX_DIR is prefixed with $(top_srcdir), so it can be used
  $am_config_aux_dir =~ s,/*$,,;
			 'AMDEP'   => $AMDEP,
			  '$(am__ELFILES:.el=.elc)');
		AM_ENABLE_MULTILIB => 0,
    ($am_file = $file) =~ s/\.in$//;
        $_ = $am_file->getline;
    $am_file_name = '';
  $am_file_name = basename ($makefile_am);
		AM_GNU_GETTEXT => 0,
	       . "AM_GNU_GETTEXT([external]) is used")
	       "AM_GNU_GETTEXT used but `intl' not in SUBDIRS")
	       "AM_GNU_GETTEXT used but `po' not in SUBDIRS")
		AM_INIT_AUTOMAKE => 0,
		     . "AM_INIT_AUTOMAKE...", partial => 1);
     am__installdirs => variable_value ('am__installdirs') || '');
    &am_install_var ('-candist', 'scripts', 'SCRIPTS',
    &am_install_var ('-noextra', '-candist', 'data', 'DATA',
			  '$(am__leading_dot)dirstamp');
		AM_MAINTAINER_MODE => 0,
# &am_primary_prefixes ($PRIMARY, $CAN_DIST, @PREFIXES)
		AM_PROG_CC_C_O => 0,
    $am_relative_dir = '';
  $am_relative_dir = dirname ($makefile_am);
      #     an account of the differences between these
  # a natural way, but still lets us program lazily -- we don't have
			  # an auxiliary file and we are not processing
	    # and another time we simply remove `$U'.
# and bugs.
	    # and can't diagnose duplicates (see the comment in
	   # and handled specially below.
      #       and one (newer) in the build tree is not a problem
# and optionally actions.
			  "... and should also be $adirtxt$adircond.$onlyone");
	# ... and so is LDFLAGS.
	      . "and that aclocal.m4 was recently regenerated "
# and their outputs.
# and variables from header-vars.am.
            # and whose second value is a new source extension which
# and yaccxx could both derive from a common yacc class which would
		     "an\nold Automake version.  You should recreate " .
	    # A Note about normal ansi2knr processing first.  On
	  # A not explicitly valid directory is allowed if Xdir is defined.
        'ansi'    => "\$",
		   'ansi' => 1,
			      . '| $(ANSI2KNR) > $@'
	ansi2knr.1 ansi2knr.c compile config.guess config.rpath config.sub
			  'ansi2knr.c', 'ansi2knr.1');
					 'ANSI2KNR-DIR' => $ansi2knr_dir);
	    $ansi2knr_dir = dirname ($ansi2knr_filename);
	    # ansi2knr needs to be built before subdirs, so unshift it.
# ansi2knr.  Values are either the empty string, or the directory in
# any later version.
  #  * any of the output dependencies is younger than the output
	# Any tag to pass to libtool while compiling.
  # anything else because the GNU Coding Standards require us to
    # anything else, by sticking it right after the default: target.
    # anything else creeps in, then use it.
	# Any warning setting now local to this Makefile.am.
	      # A page like `foo.1c' goes into man1dir.
      # appear in both directories.
      # Append actual contents of where_PRIMARY variable to
# &append_exeext ($MACRO)
      append_exeext ($one_name)
       # Append $(EXEEXT) unless the user did it already, or it's a
  # applies to info files only (dvi and pdf files always have an
      # appropriate condition.  This is meaningful if the nature of
# appropriate.  NOTE we put rules in the trailer section.  We want
					    '_AR');
      $archive_defined ||=
	      # are not in %dependencies the ELSE branch will output
  # are only created when they are used.  We used to scan $FILENAME
	       # are pure non-sence.  Diagnosting this doesn't seems very
# Arguments are:
  @ARGV = @ARGV_backup;
	      # a rule for all $targets (i.e. the targets which are both
# A rule has three parts: a list of targets, a list of dependencies,
# (as are `.//foo' and `foo').
# As a side effect, it looks for misspellings.  It is an error to have
	    # as been input.
	       # as context when $var != $subvar.
  # as it recursively expands `$(dist_pkgdata_DATA)' etc.
# Assembler.
      # Assume . if install-sh doesn't exist yet.
	   # Assume we have a file of some sort, and output it into the
	# A subroutine to compute a list of possible extensions of
	     . "at least one archive format must be enabled")
      # at least one argument, and $(mkinstalldirs) used to work
  # At least one of the archive formats must be enabled.
      #   at make time; they should therefore not lie in the source
	      # at once, only some of them being in %dependencies.  The
	  # a $(top_builddir), it helps BSD Make to match them with
  # At the toplevel directory, we might need config.guess, config.sub.
	  # At the top-level (`.') we also distribute files whose
      # Autoconf can also define variables like INSTALL_DATA, so
	'autodep' => "\$",
		   'autodep' => '',
		   'autodep' => 'CXX',
		   'autodep' => 'GCJ',
		   'autodep' => 'OBJC',
    Automake::ChannelDefs::usage;
    Automake::Condition::conditional_negate ($cond_stack[$#cond_stack]);
# automake - create Makefile.in from Makefile.am
      # Automake files should not be stored in here, but in %MAKE_LIST.
automake (GNU $PACKAGE) $VERSION
      # Automake is allowed to define variables that look like primaries
		      . "`AUTOMAKE_OPTIONS'");
	    #   AUTOMAKE_OPTIONS = ansi2knr
  # AUTOMAKE_OPTIONS can contains -W flags to disable or enable
    Automake::Options::reset;
	    Automake::Rule::define ($1, $amfile, RULE_USER, $cond, $where);
	    Automake::Rule::define ($_, 'internal',
	  Automake::Rule::define ($name, 'internal', RULE_AUTOMAKE,
		    Automake::Rule::define ($targets, $file,
    Automake::Rule::reset;
      # automake to grow to 150Mb -- this should not happen with
  Automake::Variable::define ('DIST_COMMON', VAR_AUTOMAKE, '+', TRUE, "@_",
		  Automake::Variable::define ($last_var_name, VAR_MAKEFILE,
		Automake::Variable::define ($last_var_name, VAR_MAKEFILE,
	    Automake::Variable::define ($var,
  Automake::Variable::define ($var, $owner, '', TRUE, subst $var,
        Automake::Variable::define ($var, VAR_AUTOMAKE, '', $cond, "@value",
Automake::Variable::hook ('SUFFIXES', \&var_SUFFIXES_trigger);
    Automake::Variable::reset;
	    # automake was changed to output explicit rules even for
	  $automake_will_process_aux_dir = 1;
  $automake_will_process_aux_dir = 1 if ! is_make_dir ($auxdirdist);
		   "automatically discovered file `$file' should not" .
	    # automatically generated by some tools, and flatten the
	      . "automatically\nfrom `$configure_ac'");
      # automatic versioning capability.
# auxiliary information can be recorded for a later cleanup pass.
  # `aux' is probably the most important of the following forbidden name,
      # available.
# available).
# a variable ending in a "reserved" suffix whose prefix is unknown, e.g.
      # A "version.texi" file is actually any file whose name matches
  # Avoid unsightly '/.'s.
# &backname ($REL-DIR)
	# Back out any warning setting.
# $BACKPATH
      # Back to the point, it should be clear that in order to support
		 . "backward compatibility.)");
	# backward compatibility we first look at libfoo_la.c
		#         bar \
      #   |  bar*info set.  That's a lot more verbose that the current
      #   |     bar_texi_DEPENDENCIES = foo.texi
			     BASE      => '$*',
      $base = $directory . '/' . $base
# Basename and relative dir of the input file.
			   . basename ($depfile)} = 1;
	    # basename part of the object file (extensions Po, TPo,
			     BASE      => $obj,
				     BASE      => $obj_,
				       BASE        => $strip_subdir,
  # bash, not COMMAND.COM which doesn't quote arguments properly.
		#         baz
      #   be a waste of space to distribute them.  It's not clear
      #   because a distributed file should never depend on a
	    # Because foo$U.o must be built from either foo_.c or
      #       because `make dist' always pick files in the build tree
	# because make will choose rules depending on the ordering of
      # because people write things like
	      # because we don't know where the library will end up.
    # because we might add to @files in the loop.
# be defined conditionally.  The second argument is the Condition
	# be empty.
# been checked for.  This allows us not to report the same error more
  # been installed before distributing them.
		   " be explicitly mentioned")
	# before any ordinary `all' targets are run.  We can't do this
  # before it is packaged up.
    # before .SUFFIXES.  So we make sure that .SUFFIXES appears before
	    # be preprocessed for only one set of options if it were
  # be subst'd by `\', which certainly would not be appreciated by
	    #   bin_PROGRAMS = foo
# "bin_PROGRAMS".  However, unusual prefixes are allowed if a variable
# bin_PROGRAMS.  Make sure these programs have $(EXEEXT) appended.
		     'bin', 'sbin', 'libexec', 'pkgdata',
				  'bin', 'sbin', 'libexec', 'pkglib',
  '^(?:bin|sbin|libexec|sysconf|localstate|lib|pkglib|.*exec.*)' . "\$";
	    $blank = 1;
	      $bn =~ s/^(lib|)(.*?)(?:\.[^.]*)?$/$1$2.la/;
	  $bn =~ s/^(?:lib)?(.*?)(?:\.[^.]*)?$/lib$1.a/;
	      $bn =~ s/^(?:lib)?(.*?)(?:\.[^.]*)?$/lib$1.la/;
    # Boilerplate.
# $BOOLEAN
  # Bruno Haible:
  buffer_messages ('warning');
  # Build a regex matching user-cleaned files.
      #     build of a package containing Texinfo files using these
		 'BUILD'    => ($seen_canonical >= AC_CANONICAL_BUILD),
      #     build tree can be annoying during development because
      # build tree, even when distributed.  The idea was that
      #       build tree), Make would rebuild it in the build tree.
      # build tree, not in the source tree (non-distributed .texi
      # built in the source tree again.  Because we still plan to
  # Built sources are automatically removed by maintainer-clean.
			     ? (" \$(BUILT_SOURCES)\n"
		       ? "\$(BUILT_SOURCES)\n\t\$(MAKE) \$(AM_MAKEFLAGS) "
	    # but at least this time we can document it.  However since
	   # -- but bad things (e.g. -lX11) are routinely substituted.
	   . "but `EXTRA_$primary' not defined")
# But if the directory part is different, then $(top_srcdir) is
      # but it's more efficient to avoid the call anyway.)
  # but just remember that some logic deeper in Automake will not
		      # (but see also FIXME: #2 above.)
			 . "but shouldn't");
		 "but the definition used by this AM_INIT_AUTOMAKE\n" .
      #   |  But there is still too much room for meaningless specs:
      # but which aren't.  E.g. INSTALL_sh_DATA.
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# by a closing quote.  Letting perl-mode think the quote is not closed
	    # by a `rm -f *_.c' rule.)
# by a single source file.
  # by Automake, we won't distribute the aux files anyway.  Assume
	# by changing the order of dependencies to the "all" because
  # by config.status, and generate rules for them.
  # by default so it isn't actually very important.
      # by --force-missing.
	    # bytes (an arbitrary limit), assume it has been
# by two different paths.
	      # by $var->requires_variables.
		 'BZIP2'       => !! option 'dist-bzip2',
# Called to ask whether source files have been seen . If HEADERS is 1,
# Called to indicate that an extension was used.
# Call finish function for each language that was used.
	# Call the finisher.
		      # can, copy if we must.  Note: delete the file
	  $can_dist = 1;
# Canonicalize a name, and check to make sure the non-canonical name
      # Canonicalize names and check for misspellings.
# Canonicalize the input parameter
	      $canonical_location = $where;
	  $canonical_location = $where;
#   canonical (transformed) name of target to build
  # can require auxiliary scripts and we should wait until they have
  # case.
  # Catch and fix a common error.
  # Catch some obsolete variables.
      #   % cat Makefile
  #  % cat Makefile
  #  % cat obj/Makefile
    # CCLD = $(CC).
    # CCLINK = $(CCLD) blah blah...
     'c|copy' 	        => \$copy_missing,
  -c, --copy             with -a, copy missing files (default is symlink)
			. 'cd $(top_builddir) && '
    @check = ();
			 @check)
	      $check = $1;
	  $check_aux = 1;
  check_cygnus;
  check_directories_in_var $dsubdirs
  check_directories_in_var $subdirs;
# check_directories_in_var ($VARIABLE)
	  check_directory ($config_aux_dir, $where);
# check_directory ($NAME, $WHERE)
       check_directory ($val, $var->rdef ($cond)->location);
  # Check first, because we might modify some state.
    # Check for automatic de-ANSI-fication.
  check_gnits_standards;
  check_gnu_standards;
	      # Check here to make sure variables defined in
	      &check_libobjs_sources ($xlib, $xlib . '_LIBADD');
	      &check_libobjs_sources ($xname, 'LDADD');
	      &check_libobjs_sources ($xname, $xname . '_LDADD');
  # check must be done for every run, even those where we are only
    @check_tests = ();
		     @check_tests)
  # check that.  But if the file is in a subdir without a Makefile,
      # Check that the library fits the standard naming convention.
# Check to make sure a source defined in LIBOBJS is not explicitly
# &check_trailing_slash ($WHERE, $LINE)
  check_typos;
	    check_variable_expansions ($_, $where);
# Check whether we use `configure.ac' or `configure.in'.
      chomp;
				  $c, INTERNAL);
		 'CK-NEWS'      => !! option 'check-news',
				       'CK-OPTS' => $check_options_p);
			 '-c'      => $lang->compile_flag || '',
    ('clean',
	     CLEAN, [],
    %clean_files = ();
	    $clean_files{$base . '_.c'} = MOSTLY_CLEAN
  $clean_files{'$(BUILT_SOURCES)'} = MAINTAINER_CLEAN
  $clean_files{'$(CLEANFILES)'} = CLEAN
  $clean_files{$dirstamp} = DIST_CLEAN;
  $clean_files{'$(DISTCLEANFILES)'} = DIST_CLEAN
	$clean_files{$header} = MAINTAINER_CLEAN;
# @CLEAN_FILES - list of byproducts (indexes etc.)
  $clean_files{'$(MAINTAINERCLEANFILES)'} = MAINTAINER_CLEAN
  $clean_files{'$(MOSTLYCLEANFILES)'} = MOSTLY_CLEAN
    $clean_files{$output} = MAINTAINER_CLEAN;
     CLEAN_RMS            => join ('', sort @{$rms{&CLEAN}}),
	  $clean_suffixes{$2} = 1;
	  $clean_suffixes{"$2s"} = 1;
	  $clean_suffixes{"$3s"} = 1;
  # Clean the files listed in user variables if they exist.
						    $cli_where); },
	      $cn_sans_dir = basename ($config_h_path);
	      $cn_sans_dir = $config_h_path;
  $colon_infile = '' if $colon_infile eq ":$makefile.in";
		 "comes from Automake $args[1].  You should recreate\n" .
  # Comes last, because all the above procedures may have
		$comment = '';
		$comment .= $com;
 	    $comment = "$_\n";
		 && $_ =~ /$COMMENT_PATTERN/smo)
 	    $comment = $spacing = '';
	    $comment = $spacing = '';
	    $comment .= $spacing . $_;
		  $comment = $spacing = '';
		$comment = $spacing = '';
		$comment .= $spacing . $_;
# ($COMMENT, $VARIABLES, $RULES)
  #    @common_files since the last run).
# Commonly found files we look for and automatically include in
# Commonly used files we auto-include, but only sometimes.  This list
     # compatibility.  Use -Werror and -Wno-error today.
        'compile'  => "\$",
# compile a lex file.
# compile a yacc file.
		   'compile' => '$(CCAS) $(AM_CCASFLAGS) $(CCASFLAGS)',
		   'compile' => '$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)',
    %compile_clean_files = ();
		$compile_clean_files{$object} = MOSTLY_CLEAN;
		    $compile_clean_files{$xobj} = MOSTLY_CLEAN;
		   'compile' => '$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)',
	# compiled.
		   'compile' => '$(F77) $(AM_FFLAGS) $(FFLAGS)',
		   'compile' => '$(F77) $(AM_FFLAGS) $(FFLAGS) $(AM_RFLAGS) $(RFLAGS)',
		   'compile' => '$(F77) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FFLAGS) $(FFLAGS)',
		   'compile' => '$(FC) $(AM_FCFLAGS) $(FCFLAGS)',
		   'compile' => '$(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS)',
        'compile_flag' => "\$",
		   'compile_flag' => '-c',
		   'compile' => '$(GCJ) $(AM_GCJFLAGS) $(GCJFLAGS)',
			     COMPILE   => '$(' . $lang->compiler . ')',
		   'compile' => '$(LEX) $(LFLAGS) $(AM_LFLAGS)',
		!= (COMPILE_LIBTOOL | COMPILE_ORDINARY))
			? COMPILE_LIBTOOL : COMPILE_ORDINARY);
		   'compile' => '$(OBJC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_OBJCFLAGS) $(OBJCFLAGS)',
			     COMPILE   => $obj_compile,
				     COMPILE   => $obj_compile,
        'compiler'  => "\$",
		   'compiler' => 'CCASCOMPILE',
		   'compiler' => 'COMPILE',
		   'compiler' => 'CXXCOMPILE',
		   'compiler' => 'F77COMPILE',
		   'compiler' => 'FCCOMPILE',
		   'compiler' => 'GCJCOMPILE',
		   'compiler' => 'LEXCOMPILE',
		   'compiler' => 'OBJCCOMPILE',
		   'compiler' => 'PPF77COMPILE',
		   'compiler' => 'PPFCCOMPILE',
		   'compiler' => 'RCOMPILE',
		   'compiler' => 'YACCCOMPILE',
		   'compile' => '$(YACC) $(YFLAGS) $(AM_YFLAGS)',
# Complete list of Makefile.am's that exist.
  # Complete %transform with global options and make it a Perl $command.
		# `..' component doesn't make sense.
		 'COMPRESS'    => !! option 'dist-tarZ',
# Compute a list of dependencies appropriate for the rebuild
  # Compute a list of "rm"s to run for each target.
	    # Compute a possible derived extension.
	    # Compute the set of directories to remove in distclean-depend.
  $cond = Automake::Condition::conditional_negate ($cond)
	    $cond = cond_stack_else ($1, $2, $file);
	    $cond = cond_stack_else ($1, $2, $where);
	    $cond = cond_stack_endif ($1, $2, $file);
	    $cond = cond_stack_endif ($1, $2, $where);
	    $cond = cond_stack_if ($1, $2, $file);
	    $cond = cond_stack_if ($1, $2, $where);
  $cond = "${cond}_TRUE"
# conditional), and return its Automake::Rule instance.
      # conditionally defined (or else adjust the condition below).
                    # conditional shortnames.
      $cond = make_conditional_string ($negate, $cond);
		      $condparagraph =~ s/^/$undefined_cond->subst_string/gme;
    @cond_stack = ();
  $cond_stack[$#cond_stack] =
# cond_stack_else ($NEGATE, $COND, $WHERE)
# cond_stack_endif ($NEGATE, $COND, $WHERE)
# cond_stack_if ($NEGATE, $COND, $WHERE)
			      . "$condstr\telse :; fi\n");
			      . "$condstr\t\@if test ! -f \$@; then \\\n"
			      . "$condstr\t  \$(MAKE) $output; \\\n"
			      . "$condstr\t  rm -f $output; \\\n"
					    $cond, $where);
	      $conf_dir = "$am_config_aux_dir/";
	      $conf_dir = '$(srcdir)/';
	  $config_aux_dir = $args[1];
	      $config_aux_dir = $dir;
# $CONFIG_AUX_DIR is the `raw' directory, valid only in the source-tree.
  # $config_aux_dir or the top-level Makefile.
      && $config_aux_dir_set_in_configure_ac)
	  $config_aux_dir_set_in_configure_ac = 1;
      $config_aux_dir = '.' unless $config_aux_dir;
					 CONFIG    => "@config",
			 'config.guess', 'config.sub')
			   CONFIG_H         => $cn_sans_dir,
			   CONFIG_H_DEPS    => "@ins",
	      "`CONFIG_HEADER' is an anachronism; now determined "
			   CONFIG_HIN       => $ins[0],
      # $CONFIG_H_PATH: config.h from top level.
			   CONFIG_H_PATH    => $config_h_path,
     'CONFIG-MAKEFILE'     => ($relative_dir eq '.') ? '$@' : '$(subdir)/$@',
    ('configure',
     configure.ac configure.in stamp-vti);
	      # configure.ac do not imply that EXTRA_PRIMARY
$configure_ac = require_configure_ac;
	  $configure_cond{$args[1]} = $where;
			  @configuredeps);
			  @configure_deps, @aclocal_m4_deps,
      $configure_deps_greatest_timestamp = $mtime
	      $configure_deps_greatest_timestamp = $mtime
  $configure_deps_greatest_timestamp = mtime $configure_ac;
      && $configure_deps_greatest_timestamp < $timestamp
  $configure_dist_common = variable_value ('DIST_COMMON') || '';
# configure.in
  @configure_input_files = sort keys %make_list;
	    # configure is supposed to replace, such as `@SET-MAKE@',
# configure's dependencies).
# ./configure. (See the Autoconf documentation for for
        # Configure substitutions in _SOURCES variables are errors.
	  $configure_vars{$args[1]} = $where
			      '', $configure_vars{$var}, $pretty);
	'config_vars' => '@',
		   'config_vars' => ['CC'],
		   'config_vars' => ['CCAS', 'CCASFLAGS'],
		   'config_vars' => ['CXX'],
		   'config_vars' => ['F77'],
		   'config_vars' => ['FC'],
		   'config_vars' => ['GCJ'],
		   'config_vars' => ['LEX'],
		   'config_vars' => ['OBJC'],
		   'config_vars' => ['YACC'],
  # confusing if Automake does `exit 0'.)
      # Consequently, starting with Automake 1.8, .info files are
## Constants.  ##
        # Content of the compiling variable.
        # Content of the linker variable ($(CC)).
        # Content of the linking variable.
# $CONTENTS
	COPYING.LESSER ChangeLog INSTALL NEWS README THANKS TODO
Copyright 2005 Free Software Foundation, Inc.
# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# Copyright on generated Makefile.ins.
  # could easily be changed to look in info_TEXINFOS.  But this is
  # could produce error diagnostics, and in this condition it is
    # count all the sources
	$count -= count_files_for_language ('header');
			           => (count_files_for_language ($lang->name) > 1));
	$count += $val;
			cp cps
## cperl-brace-offset: 0
## cperl-continued-brace-offset: 0
## cperl-continued-statement-offset: 2
## cperl-extra-newline-before-brace: t
## cperl-indent-level: 2
## cperl-label-offset: -2
## cperl-merge-trailing-else: nil
			      . '$(CPP) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) '
# $(CPPFLAGS)' as additional flags to the Fortran 77 compiler, since
# created dirstamp code.  Keys are directories, values are stamp files.
			      # create the _.c file
      # Creating a new category of index.
					 CTAGSDIRS => "@ctag_deps");
	     . "current conditional: $cond_stack[$#cond_stack]")
	  # currently doing `.', then we add the link to CONFIG_CLEAN_FILES
      # currently doing `.', then we create a rule to rebuild the
	# currently examining.  If the file is compiled with
      --cygnus           assume program is part of Cygnus-style tree
                                ? 'cygnus' : $strictness_name,
     'cygnus' 	        => sub { set_global_option ('cygnus', $cli_where); },
	  $dangling_sym = 1;
		     'data', 'sysconf', 'sharedstate', 'localstate',
# Deal with all and all-am.
    %de_ansi_files = ();
	    $de_ansi_files{$1} = ''
      $de_ansi_files{$base} = '';
      $de_ansi_files{$base} = (($directory eq '.' || $directory eq '')
  # Decide whether we must update the output file or not.
# declare it as phony, complete its definition (in case it is
# Decode the Autoconf syntax for config files (files, headers, links
	  $default_dist = 1;
		     || (! $default_dist && $nodir_name =~ /^dist_/));
			       ('DEFAULT_INCLUDES' => $default_includes,
		$default_includes .= ' -I' . dirname ($hdr);
	$default_includes = ' -I. -I$(srcdir)';
	    $default_source = $old_default_source;
	    $default_source = '$(srcdir)/' . $default_source;
				   $default_source, %transform);
	# (defaults to [])
	# (defaults to a subroutine which returns ('.$(OBJEXT)', '.lo'))
# Define a compiler variable.  We also handle defining the `LT'
# Define a new user variable VAR to VALUE, but only if not already defined.
# Define an _OBJECTS variable for a _SOURCES variable (or subvariable)
	define_compiler_variable ($lang)
# define_compiler_variable ($LANG)
	&define_compiler_variable ($languages{'c'})
      &define_configure_variable ($var);
# defined).
  # Define DIST_SUBDIRS.  This must always be done, regardless of the
      # defined, just use it.
	    || defined $lang->compile)
  # defined or overridden variables.
      # defined uselessly, but this was annoying.
  define_files_variable ("DVIS", @infobase, 'dvi', INTERNAL);
  define_files_variable ("HTMLS", @infobase, 'html', INTERNAL);
  define_files_variable ("PDFS", @infobase, 'pdf', INTERNAL);
  define_files_variable ("PSS", @infobase, 'ps', INTERNAL);
# define_files_variable ($VAR, \@BASENAME, $EXTENSION, $WHERE)
      # Define gathered targets in undefined conditions.
      # Define it.
	define_linker_variable ($lang)
# define_linker_variable ($LANG)
	define_linker_variable ($languages{'c'});
# Define linker variables.
      # Define $NAME in all condition where it is not already defined,
	    define_objects_from_sources ($varname,
# define_objects_from_sources ($VAR, $OBJVAR, $NODEFINE, $ONE_FILE,
	  define_pretty_variable
  define_pretty_variable ('am__aclocal_m4_deps', TRUE, INTERNAL,
  define_pretty_variable ('am__configure_deps', TRUE, INTERNAL,
  define_pretty_variable ('am__dirstamp', TRUE, INTERNAL,
  define_pretty_variable ('am__ELCFILES', TRUE, INTERNAL,
  define_pretty_variable ('am__ELFILES', TRUE, INTERNAL,
  define_pretty_variable ('CONFIG_CLEAN_FILES', TRUE, INTERNAL,
  define_pretty_variable ('DIST_COMMON', TRUE, INTERNAL, @dist_common);
      define_pretty_variable ('DIST_SOURCES', TRUE, INTERNAL, @dist_sources);
	  define_pretty_variable ('DIST_SUBDIRS', TRUE, INTERNAL,
  define_pretty_variable ('ELCFILES', TRUE, INTERNAL, '$(LISP:.el=.elc)');
	define_pretty_variable ($one_file . '_OBJECTS', TRUE, $where, @keys);
	define_pretty_variable ($one_file . '_OBJECTS', TRUE, $where, @result);
      define_pretty_variable ($primary, TRUE, INTERNAL, @used);
	      define_pretty_variable ($rpathvar, $rcond, INTERNAL, $val);
  define_pretty_variable ('SOURCES', TRUE, INTERNAL, @sources);
  define_pretty_variable ('SUBDIRS', TRUE, INTERNAL, '')
# &define_pretty_variable ($VAR, $COND, $WHERE, @VALUE)
      define_pretty_variable ($varname, TRUE, $where, @files);
    define_pretty_variable ($var, TRUE, $where, $value);
    &define_standard_variables;
# define_standard_variables ()
# Define the $VAR which content is the list of file names composed of
      &define_variable ("ACLOCAL_M4", '$(top_srcdir)/aclocal.m4', INTERNAL);
	    &define_variable ('am__depfiles_maybe', 'depfiles', INTERNAL);
	&define_variable ('am__depfiles_maybe', '', INTERNAL);
  define_variable ('am__TEXINFO_TEX_DIR', $texinfodir, INTERNAL);
  &define_variable ('AR', 'ar', INTERNAL);
  &define_variable ('ARFLAGS', 'cru', INTERNAL);
  define_variable ("CONFIG_HEADER", "@config_h", INTERNAL)
	    &define_variable ('depcomp',
	&define_variable ('depcomp', '', INTERNAL);
  &define_variable ('elisp_comp', "$am_config_aux_dir/elisp-comp", INTERNAL);
    &define_variable ($lang->lder, $lang->ld, INTERNAL);
    &define_variable ($lang->linker,
    &define_variable ("LT$var",
      define_variable ('mkinstalldirs',
      define_variable ('mkinstalldirs', '$(install_sh) -d', INTERNAL);
	&define_variable ($one_file . "_SOURCES", $default_source, $where);
  &define_variable ('py_compile', "$am_config_aux_dir/py-compile", INTERNAL);
  define_variable ('subdir', $relative_dir, INTERNAL);
  define_variable ("TEXINFOS", variable_value ('info_TEXINFOS'), INTERNAL);
      define_variable ('TEXINFO_TEX', "$texinfodir/texinfo.tex", INTERNAL);
  define_variable ($var,
    &define_variable ($var, $value, INTERNAL);
# define_variable ($VAR, $VALUE, $WHERE)
	  &define_variable ($xlib . '_AR', '$(AR) $(ARFLAGS)', $where);
	  &define_variable ($xlib . "_LIBADD", '', $where);
	  &define_variable ($xname . '_LDADD', '$(LDADD)', $where);
  &define_variable ('YLWRAP', "$am_config_aux_dir/ylwrap", INTERNAL);
	  delete $clean_suffixes{"$2s"};
	delete @suffixes{@user_suffixes};
	    $depbase = ''
	    $depbase .= '/'
			     DEPBASE   => $depbase,
				     DEPBASE   => $depbase_,
	    $depbase .= '$(DEPDIR)/' . basename ($obj);
	    # DEPBASE holds the name of this directory, plus the
		    $depbase =~ s/\$U//g;
	depcomp elisp-comp install-sh libversion.in mdate-sh missing
					     DEPDIRS => "@depdirs");
      depend ("$_-am", "$_-local")
		  &depend ($_, @deps);
	  # dependencies.
# @DEPENDENCIES
			   '_DEPENDENCIES')
					     '_DEPENDENCIES');
					    '_DEPENDENCIES');
# DEPENDENCIES - known dependencies
  #  * dependencies which are also configure dependencies
      # Dependency `../a' was found in `sub/../a', but this make
        # dependency code).
      # dependency list.
Dependency tracking:
	    # dependency tracking has evolved it is possible that
	   # dependency variable.  Autoconf substitutions are not output;
# dependent upon.
# dependent upon.  Otherwise, just return the empty string.
    &depend ('.PHONY', 'all-am', 'all');
  depend '.PHONY', 'check', 'check-am';
	&depend ('.PHONY', 'ctags-recursive');
  depend ('.PHONY', keys %required_targets);
      depend ('.PHONY', $name);
	&depend ('.PHONY', 'tags-recursive');
    %dep_files = ();
  $dep_files{'$(DEPDIR)/alloca.P' . $myobjext} = 1;
	  $dep_files{'$(DEPDIR)/' . $rewrite} = 1;
            $dep_files{dirname ($depfile) . '/$(DEPDIR)/'
            $depfile =~ s/\$\(OBJEXT\)$/o/;
            $depfile =~ s/\.([^.]*)$/.P$1/;
				  DEPS             => "@deps",
                # .deps directory is created.
			     'DERIVED-EXT' => $der_ext,
	    # derived from is not.
#   $DERIVED is the name of resulting executable or library
		$derived_source = 1;
				 ($derived_source ? $this_obj_ext : '.o'));
# derive_suffix ($EXT, $OBJ)
		      . "destination.") : "";
				  DEST_INFO_PREFIX => $dipfx,
				  DEST_PREFIX      => $dpfx,
				  DEST_SUFFIX      => $dsfx,
# DEST - the destination Info file
  # details.)  Therefore we use a specific rule in this case.  This
      # Determine program to use for link.
	# determine the context in which a source file will be
	       . "did you mean `$suggestion'?")
  # different in each case.  However we cannot output two different
	    # dir (because these files might be auto-generated.  But
	$dir = $curs;
# Directories installed during 'install-exec' phase.
	    # directories with different cpp options: foo_.c would
			       : "$directory/");
# directory and return the file that $FILE should be made
      # directory and the header's directory doesn't have a
      # directory does not even exist.)
	  # directory does not have a Makefile.
    %directory_map = ();
  $directory_map{$cdir} = $dirstamp;
  $directory_map{$directory} = $dirstamp;
      $directory_map{$directory} = $stamp;
  # Directory must be removed by `make distclean'.
		($directory ne '' && ! option 'subdir-objects'))
      #   directory.  One plan was to support this using
# directory, then the directory part is simply replaced by $(srcdir).
# Directory to search for configure-required files.  This
      # directory, try hard to not prefix "./" because it breaks the
  # directory, we would have discovered it already, so we don't
# Directory where output files go.  Actually, output files are
		     . dirname (variable_value ('TEXINFO_TEX')));
# ($DIRSTAMP, @CLEAN_FILES)
				       DIRSTAMP => $dirstamp,
				       DIRSTAMP => $dirstamp);
				       DIRSTAMP   => $dirstamp);
				  DIRSTAMP         => $dirstamp,
					  DIRSTAMP => $dirstamp);
		   $dirtxt = "built for `$dir'"
				       DIR         => $X,
	  $discard_rule = 0;
		      $discard_rule = 1;
      #   |     dist_bar_info_SOURCES = bar.texi
	     DIST_CLEAN, [],
      #   DISTCLEANFILES = texinfo texinfo-* info*.info*
     DISTCLEAN_RMS        => join ('', sort @{$rms{&DIST_CLEAN}}),
	  # DIST_COMMON.
  # %dist_common if we think we need to.  If the file appears in our
  @dist_common = uniq (sort for_dist_common (@dist_common));
      #   distdir: ../a
      # distdir.am hack against VPATH rewriting works only when no
    %dist_dirs = ();
      $dist_dirs{$_} = 1
	  $dist_dirs{$_} = 1
	      $dist_dirs{dirname ($_)} = 1;
	      $dist_dirs{$fd} = 1;
				       DIST      => $dist_p,
		      'dist_EXTRA_', 'nodist_EXTRA_')
			'dist_EXTRA_', 'nodist_EXTRA_')
# DISTFILES.
      #   dist-info:
      #      dist_info_TEXINFO = foo.texi
	  $dist_p = (($default_dist && $nodir_name !~ /^nodist_/)
      #   |     dist_PS = bar.ps something-written-by-hand.ps
  # Distribute and define mkinstalldirs only if it is already present
		# Distribute any included file.
	    # Distribute derived sources unless the source they are
      #   distributes the tool used to build these files; it would
	# Distribute the generated file, unless its .y source was
      #   distribute the .info files.  For instance the Texinfo package
				'DISTRMS' => join ("\n", @dist_rms)));
					 DIST_SOURCE => ($prefix !~ /^nodist_/),
    @dist_sources = ();
	    ('DIST_SUBDIRS', TRUE, INTERNAL,
    @dist_targets = ();
 				       DISTVAR   => $distvar,
      $distvar = shadow_unconditionally ($one_name, $where)
	# Ditto ctags.
                    $dname = $var->variable_value;
# Do any extra checking for GNITS standards.
# Do any extra checking for GNU standards.
  do_check_merge_target;
# &do_check_merge_target ()
# Do configure.ac scan only once.
# Does much of the actual work for handle_source_transform.
	      # doesn't -- and in fact configure could decide
		       "doesn't make sense to define `TAGS_DEPENDENCIES'"
      # doing.
	  ++$done;
      #   |  done in the rest of Automake.  Maybe there is too much
	$done{$lang} = 1;
      #   # Do not create info files for distribution.
	# do not like variable substitutions on the .SUFFIXES line.
  # Do not output the ANSI2KNR configure variable -- we AC_SUBST
      # Do not process sources that contain shell variables.
	# do not require the C compiler or any code to call it.
      # don't add it again.
	# Don't look at MAINTAINER_MODE_TRUE here.  That shouldn't be
	# don't need the C compiler code.  However if we run into
# Don't randomly overwrite it; examine other uses of keys first.
      # Don't use `elsif' here because a file might meaningfully
				 # *don't* want $(OBJEXT) to appear here.
	  $do_require = 0;
  # Do some error checking.  Note that this file is not required
# do this check.
	    # Do we have per-executable flags for this executable?
	drop_channel_setup;
  $dsfx ||= "";
	dup_channel_setup;
   'dvi'	  => 1,
   'dvi-am'          => 1,
	      # dynamically between two different locations.
# Each %ATTRIBUTE is of the form ATTRIBUTE => VALUE.
	    # Each _.c file must depend on ansi2knr; otherwise it
		# Each item on this list is a reference to a list consisting
# Each key in this hash is the name of a directory holding a
# Each `lang_X_rewrite($DIRECTORY, $BASE, $EXT)' function follows a
  # each Texinfo source.
      #   echo a
      #	          echo ../a
  #          echo Hello
  #  echo Hello
  #          echo World
  #  echo World
		# (e.g. for `foo_CFLAGS', it is `foo'), the name of the
    # e.g. in Automake itself.
	    # either hardcoded, or a shell variable (`$depbase') that
    else
      else
       else
        else
          else
            else
	   else
	    else
	      else
		  else
			      . '; else echo ' . $ansfile . '; fi` '
	    else # $prev_state == IN_VAR_DEF
  '^else(?:\s+(!?)\s*([A-Za-z][A-Za-z0-9_]*))?\s*(?:#.*)?' . "\$";
      elsif ($args[0] !~ /^-/)
      elsif ($args[0] eq '-candist')
      elsif ($args[0] eq '-defaultdist')
 	elsif (/$ASSIGNMENT_PATTERN/mso)
	elsif (/$ASSIGNMENT_PATTERN/o)
 	elsif (/$COMMENT_PATTERN/mso)
	elsif (/$COMMENT_PATTERN/o)
      elsif (/$COMMENT_PATTERN/smo)
	elsif ($compile_clean_files{$item} == DIST_CLEAN)
  elsif ($config_aux_dir_set_in_configure_ac)
      elsif (/^\@def(code)?index (\w+)/)
	  elsif (defined $args[1])
	      elsif (! defined $configure_vars{$one_name})
	  elsif (! defined $valid{$X} &&
	  elsif (! defined $valid{$X} && exists $standard_prefix{$X})
      elsif (dir_has_case_matching_file ($dir, $file))
	elsif (/$ELSE_PATTERN/o)
	elsif (/$ENDIF_PATTERN/o)
        elsif ($extension eq $nonansi_obj)
        elsif (/$IF_PATTERN/o)
	elsif (/$IF_PATTERN/o)
        elsif (/$INCLUDE_PATTERN/o)
      elsif (/^\@include\s+(vers[^.]*\.texi)\s*$/)
      elsif ($iter ne 'alloca.c')
	    elsif ($lang->ansi)
      elsif ($macro eq 'AC_CANONICAL_HOST')
      elsif ($macro eq 'AC_CANONICAL_TARGET')
      elsif ($macro eq 'AC_CONFIG_AUX_DIR')
      elsif ($macro eq 'AC_CONFIG_FILES')
      elsif ($macro eq 'AC_CONFIG_HEADERS')
      elsif ($macro eq 'AC_CONFIG_LINKS')
      elsif ($macro eq 'AC_INIT')
      elsif ($macro eq 'AC_LIBSOURCE')
      elsif ($macro eq 'AC_SUBST')
      elsif ($macro eq 'AM_AUTOMAKE_VERSION')
      elsif ($macro eq 'AM_CONDITIONAL')
      elsif ($macro eq 'AM_ENABLE_MULTILIB')
      elsif ($macro eq 'AM_GNU_GETTEXT')
      elsif ($macro eq 'AM_INIT_AUTOMAKE')
      elsif ($macro eq 'AM_MAINTAINER_MODE')
      elsif ($macro eq 'AM_PROG_CC_C_O')
      elsif ($macro eq '_LT_AC_TAGCONFIG')
      elsif ($macro eq 'LT_SUPPORTED_TAG')
      elsif ($macro eq 'm4_include'
    elsif ($name eq 'lex' || $name eq 'lexxx')
  elsif (option 'cygnus')
      elsif ($prefix eq '')
	    elsif ($prev_state == IN_COMMENT)
    elsif (reject_var ('TAGS_DEPENDENCIES',
  elsif ($relative_dir eq '.' && ! &is_make_dir ($dir))
	  elsif ($relative_dir ne '.')
 	elsif (/$RULE_PATTERN/mso)
	elsif (/$RULE_PATTERN/o)
	elsif ($saw_bk)
      elsif ($subdirs->has_conditional_contents)
      elsif (/^\@syn(code)?index (\w+) (\w+)/)
		      elsif (system ('cp', "$libdir/$file", $fullfile))
       elsif ($val !~ /^\@.*\@$/)
       elsif ($val =~ /^\@(LT)?ALLOCA\@$/)
       elsif ($val =~ /^\@(LT)?LIBOBJS\@$/)
	  elsif (var ('LDADD'))
	elsif (/$WHITE_PATTERN/o)
		     'EMACS', 'lispdir');
# Emit rules to create $DIRECTORY if needed, and return
# Empty return means just use `LINK'.
#   - enables/disables ?$TOKEN? and ?!$TOKEN?,
# encodes the rules for deciding when to do so.
  '^endif(?:\s+(!?)\s*([A-Za-z][A-Za-z0-9_]*))?\s*(?:#.*)?' . "\$";
	    # enough to deserve an explanation.
	      # Ensure all extended prefixes are actually used.
# Ensure $NAME is a directory, and that it uses sane name.
  $ENV{'SHELL'} = '/bin/bash' if exists $ENV{'DJGPP'};
    # Erase $OUTPUT on `make maintainer-clean' (by GNU standards).
      err_ac "AM_GNU_GETTEXT used but SUBDIRS not defined";
  err_ac "`AM_MAINTAINER_MODE' required when --cygnus specified"
# err_ac ($MESSAGE, [%OPTIONS])
      err_ac ("no proper invocation of AM_INIT_AUTOMAKE was found.\nYou "
      err_am ("C objects in subdir but `AM_PROG_CC_C_O' "
      err_am "C source file `$base.c' would be deleted by ansi2knr rules";
      err_am "`$filename' missing \@setfilename";
		    err_am "`$full' should not contain a `..' component";
  err_am "`install.sh' is an anachronism; use `install-sh' instead"
# err_am ($MESSAGE, [%OPTIONS])
	    err_am "object `$comp_obj' created both with libtool and without";
	err_am "object `$object' created by `$full' and `$object_map{$object}'"
	  err_am "texinfo file `$texi' has unrecognized extension";
	  err_am ("`$vtexi', included in `$texi', "
	error "`$am_file.am' does not exist";
	      error ("$filename:$.",
		   error ($liblocations{$val}{$acond},
	  error "no Automake input file found for `$arg'";
      error (option 'no-dist-gzip',
# Error reporting functions.
	      error ($seen_init_automake,
	      error ($seen_init_automake, "... AM_INIT_AUTOMAKE called here");
	  error ($where,
		  error ($where,
	      error ($where, "AC_CONFIG_AUX_DIR must be called before "
	    error $where, "blank line following trailing backslash"
	error $where, "blank line following trailing backslash:\n$_"
	    error $where, "`#' comment at start of rule is unportable"
	    error $where, "comment following trailing backslash"
	error $where, "comment following trailing backslash:\n$_"
  error $where, "$cond does not appear in AM_CONDITIONAL"
    error ($where, @cond_stack ?
    error ($where, (@cond_stack ? "unterminated conditionals: @cond_stack"
      error ($where, "else reminder ($negate$cond) incompatible with "
      error $where, "else without if";
      error ($where, "endif reminder ($negate$cond) incompatible with "
      error $where, "endif without if";
		   error ($where, $msg, partial => 1);
			  error ($where, 'Please make a full run of automake'
  error $where, "required directory $relative_dir/$dir does not exist"
    error ($where, "trailing backslash on last line")
		   error ($where, "`$val' should be $dirtxt$dircond ...",
 	    error $where, "variable `$var' with trailing backslash"
	  $errspec = 1;
	err_var "${curs}_JAVA", "multiple _JAVA primaries in use"
	  err_var ($prefix . $one_file . '_SOURCES',
  err_var ($require_extra,
	      err_var ($var,
	  err_var ($var,
	       err_var ($var, "linker flags such as `$val' belong in "
		# escaped newlines in comments.
      # especially in cases like AC_OUTPUT(foo/out:bar/in), where
# etc.).
eval 'case $# in 0) exec /usr/bin/perl -S "$0";; *) exec /usr/bin/perl -S "$0" "$@";; esac'
  eval $command;
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
      # even without arguments (e.g. $(mkinstalldirs) $(conditional_dir)).
	# Every Makefile must define some sort of TAGS rule.
				       EXEC      => $exec_p,
      # EXEEXT.
				       EXEEXT   => '$(EXEEXT)');
	 && exists $suffix_rules->{$source_ext}
	 && exists $suffix_rules->{$source_ext}{$obj})
    exit 0;
  exit 0;
  # `exit 0' after processing these options, and we can't guarantee this
		     exit_code => 63);
		 exit_code => 63)
	      exit $exit_code
exit $exit_code;
	    # Explicitly clean the _.c files if they are in a
  # extension).
        $extension = &derive_suffix ($extension, $nonansi_obj);
  $extension_map{$_} = $lang->name foreach @{$lang->extensions};
  # extension.  Otherwise we would output a single suffix inference
        'extensions' => '@',
		   'extensions' => ['.c'],
		   'extensions' => ['.c++', '.cc', '.cpp', '.cxx', '.C']);
    %extension_seen = ();
	++$extension_seen{$ext};
	$extension_seen{$ext} = 1;
		   'extensions' => ['.F']);
		   'extensions' => ['.f90', '.f95']);
		   'extensions' => ['.F90','.F95']);
		   'extensions' => ['.f', '.for']);
		   'extensions' => ['.h', '.H', '.hxx', '.h++', '.hh',
		   'extensions' => ['.java', '.class', '.zip', '.jar']);
		   'extensions' => ['.l'],
		   'extensions' => ['.l++', '.ll', '.lxx', '.lpp'],
		   'extensions' => ['.m']);
		   'extensions' => ['.r']);
		   'extensions' => ['.s', '.S'],
		   'extensions' => ['.y'],
		   'extensions' => ['.y++', '.yy', '.yxx', '.ypp'],
    $extension = '$U' . $extension
#   extra arguments to pass to file_contents when producing rules
      # "EXTRA" shouldn't be used when generating clean targets,
	  ? ('FALSE', 'FALSE') : ('AMDEP', "am__fastdep$fpfx");
			 'FASTDEP' => $FASTDEP,
      # Fatal error.  Just return, so we can continue with next file.
  fatal "no input file found among supplied arguments"
    fatal ("no `Makefile.am' found for any configure output$msg");
	  fatal ("unrecognized option `$arg'\n"
  $fc_file->close;
  $_ = $fc_file->getline;
  # feature is not available.)
     'f|force-missing'  => \$force_missing,
  -f, --force-missing    force update of standard files
	  $file = $1;
# &file_contents ($BASENAME, $WHERE, [%TRANSFORM])
      file_contents_internal (1, "$libdir/am/$basename.am", $where,
      &file_contents_internal (1, "$libdir/am/compile.am",
    file_contents_internal (1, "$libdir/am/header-vars.am",
		  = file_contents_internal ($is_am, $file, $where, %transform);
# &file_contents_internal ($IS_AM, $FILE, $WHERE, [%TRANSFORM])
	    file_contents ('remake-hdr',
	      file_contents ($rule_file,
		      file_contents ($rule_file,
		# file_contents.   The four values are the derived flag prefix
			     # file -- e.g. via yacc.
						  $file, $fullfile))
	  # file.  If we do that, then something like
		# file in the build tree during `make distdir' to satisfy
      # file in the subdir.
# file is to be dealt with, LANG_IGNORE otherwise.
	  $file = $lfile;
				   FILENAME_FILTER => $filename_filter);
# file names.  This is used to ensure that each object is created
      # files.
      # files are less of a problem, because we do not output build
				  FILES => "@distclean_config")
			   FILES            => "@files",
# Files found by scanning configure.ac for LIBOBJS.
# file should be in a subdir if the source file is, LANG_PROCESS if
# Files included by $configure_ac.
  # files is processed last.  This is important because each directory
  # Files to distributed.  Don't use ->value_as_list_recursive
	  @files = ($unxformed . '.c');
	  @files = $var->value_as_list_recursive;
  # files.  We don't scan or otherwise deal with these input files,
		      # file that doesn't exist.
#   $FILE the source file to transform
			     %file_transform);
				     %file_transform);
  # Fill indexes.
  # Find all the sections in use.  We do this by first looking for
# Find all variable prefixes that are used for install directories.  A
# Find the aux dir.  This should match the algorithm used by
        '_finish' => "\$",
		   '_finish' => \&lang_c_finish);
		   '_finish' => \&lang_lex_finish,
		   '_finish' => \&lang_yacc_finish,
		   '_finish' => sub { });
      #       first.
		      # first, in case it is a dangling symlink.
		 'FIRST'        => ! $transformed_files{$file},
	      # FIXME: 1. We are not robust to people defining several targets
	      # FIXME: 2. The logic here is not able to output a
	      # FIXME: 3. We are not robust to people defining a subset
		   # FIXME also FFLAGS.
                # FIXME: check that $DIRECTORY is somewhere in the
# FIXME: Complete, and remove falsely required targets.
# FIXME: do more ordering of files here.
  # FIXME: Gross!
      # FIXME: include line number in error.
  # FIXME: I think this is an obsolete future feature name.
        # FIXME: no line number available.
   # FIXME: Not required, temporary hacks.
	  # FIXME: report line number.
      # FIXME: Right now we must handle .PHONY as an exception,
	       # FIXME: should display a stack of nested variables
    # FIXME: shouldn't use $_ in this loop; it is too big.
                    # FIXME: should use the same Condition as
# FIXME: This is a hack. a better switch should be found.
      # FIXME: This should be fixed to work with conditions.  That
# FIXME: this should be rewritten to be cleaner.  It should be broken
	    # FIXME: we could potentially do more processing here,
      # FIXME: We should disallow conditional definitions of AUTOMAKE_OPTIONS.
      # FIXME: We should make sure that these variables are not
  # FIXME: Why not be as liberal as we are with -local hooks?
				      "`$flag' is a user variable, "
        'flags' => "@",
	    # flags are used) we cannot compile the file with an
		   'flags' => ['CCASFLAGS'],
		   'flags' => ['CFLAGS', 'CPPFLAGS'],
		   'flags' => ['CXXFLAGS', 'CPPFLAGS'],
		   'flags' => ['FCFLAGS'],
		   'flags' => ['FCFLAGS', 'CPPFLAGS'],
		   'flags' => ['FFLAGS'],
		   'flags' => ['FFLAGS', 'CPPFLAGS'],
		   'flags' => ['GCJFLAGS'],
		   'flags' => ['LFLAGS'],
	# Flags listed in `->flags' are user variables (per GNU Standards),
		   'flags' => ['OBJCFLAGS', 'CPPFLAGS'],
		   'flags' => ['RFLAGS', 'FFLAGS'],
		   'flags' => ['YFLAGS'],
        # Flag to require compilation without linking (-c).
        # Flag to specify the output file (-o).
	       ! $flagvar)
	       $flagvar = 1;
# $FLATTENED
# &flatten ($STRING)
# Flatten the $STRING and return the result.
Flavors:
	    # Flush all comments seen so far.
      flush_messages;
  flush_messages;
  @f = map { s|[^A-Za-z_0-9*\[\]\-]|\\$&|g; s|\*|[^/]*|g; $_; } @f;
			fn fns
		|| -f $old_default_source))
	      # `foo:' after `foo bar:'.
	    #   foo_.c: foo.c; ansi2knr ...
	    #   foo: foo$U.o; link ...
  #    foo.info: foo.texi
	    #   foo_.o: foo_.c; compile ...
	    #   foo.o: sub/foo.c; compile ...
	    #   foo_SOURCES = foo.c
	    #   foo_SOURCES = sub/foo.c
	    #   foo$U.o: foo$U.c; compile ...
      # for backward compatibility with package such as Texinfo,
  # for build-dir builds.  (It should not be a problem to invert this
  #  * $force_generation is set.
      # `--force-missing' only has an effect if `--add-missing' is
# for directories with equivalent names (e.g., `foo/bar' and `./foo//bar').
# &for_dist_common ($A, $B)
      foreach ($extra_dist->value_as_list_recursive (skip_ac_subst => 1))
	  foreach (@inputs)
  foreach ('install-exec', 'install-data', 'uninstall')
  foreach (keys %dependencies)
    foreach (make_paragraphs ($file, %transform))
  foreach my $arg (@ARGV)
 	foreach my $base (sort keys %de_ansi_files)
      foreach my $c ('DEJATOOL', 'RUNTEST', 'RUNTESTFLAGS')
  foreach my $cfile (@common_files)
	foreach my $cond (Automake::Rule::define (${header}, 'internal',
      foreach my $cond (@undefined_conds)
    foreach my $curs (@prefix)
      foreach my $dest (&{$lang->output_extensions} ($suffix))
	foreach my $ext (@{$lang->extensions})
    foreach my $ext (sort keys %extension_seen)
      foreach my $file (@files)
  foreach my $file (@files)
foreach my $file (@input_files)
  foreach my $file (keys %clean_files)
    foreach my $file (keys %libsources)
	foreach my $file (@{$lang_specific_files{$lang->name}})
  foreach my $file (@rest)
      foreach my $file (split (' ' , $configure_dist_common))
	foreach my $flag (@dont_override)
	    foreach my $flag (@{$lang->flags})
	    foreach my $hdr (split (' ', $var->variable_value))
	    foreach my $in (@ins)
    foreach my $item (sort keys %compile_clean_files)
  foreach my $item (sort keys %libtool_clean_directories)
	foreach my $iter (@configure_input_files)
	    foreach my $iter (@deplist)
  foreach my $iter (keys %libsources)
	foreach my $iter (@other_input_files)
    foreach my $iter (sort ((@common_files, @common_sometimes)))
  foreach my $key (@prefix)
  foreach my $lfile (@other_input_files)
      foreach my $locvals ($one_var->value_as_list_recursive (location => 1))
    foreach my $l (qw(GCJLINK CXXLINK F77LINK FCLINK OBJCLINK))
  foreach my $pair (@liblist)
  foreach my $pair (@proglist)
  foreach my $pfx ('', 'dist_', 'nodist_')
    foreach my $prefix ('', 'EXTRA_', 'dist_', 'nodist_',
  foreach my $prefix ('', 'EXTRA_', 'dist_', 'nodist_',
      foreach my $primary ('_SOURCES', '_LIBADD', '_LDADD', '_LDFLAGS',
      foreach my $rcond ($instconds{$onelib}->conds)
      foreach my $section ('0'..'9', 'n', 'l')
  foreach my $section (sort keys %sections)
  foreach my $single (@inputs)
    foreach my $spec (@config_headers)
  foreach my $spec (@config_headers)
	foreach my $spec (@config_headers)
  foreach my $spec (@config_links)
	  foreach my $spec (split (' ', $args[1]))
  foreach my $suffix (@{$lang->extensions})
  foreach my $texi
  foreach my $utarg ('uninstall-data-local', 'uninstall-data-hook',
    foreach my $val (values %extension_seen)
  foreach my $var ('PRE_INSTALL', 'POST_INSTALL', 'NORMAL_INSTALL')
  foreach my $var (sort keys %configure_vars)
  foreach my $var (variables)
  foreach my $X (@prefix)
      foreach my $xt (@suffixes)
    foreach $name (@names)
      foreach (qw /COPYING COPYING.LIB COPYING.LESSER/)
    foreach (@r)
  foreach (rvar ('DIST_COMMON')->value_as_list_recursive (skip_ac_subst => 1))
  foreach (sort target_cmp keys %dependencies)
  foreach (split ' ', $config_files)
    foreach (split (/\//, $file))
	  foreach (split (' ' , $targets))
# For each ($TOKEN, $VAL) in %PAIRS produce a replacement expression
	  foreach ($var->value_as_list_recursive)
				       FOREIGN, 'mdate-sh');
      --foreign          set strictness to foreign
     'foreign'          => sub { set_strictness ('foreign'); },
# For instance `src/foo' => `../..'.
		# For Java, the way we're handling it right now, a
	       # for Libtool libraries or programs.  (Actually we are a bit
  # For links we should clean destinations and distribute sources.
# for `make' Version 3.76 Beta' (specifically, from info file
    format USAGE_FORMAT =
  # form is required.  Otherwise we can't properly do our job.
      for my $cond ($var->conditions->conds)
		for my $cond ($var->conditions->conds)
      for my $c ($rule->not_always_defined_in_cond (TRUE)->conds)
      for my $dir (qw (. .. ../..))
	    for my $flag (@{$lang->flags})
  for my $i (@inputs)
  for my $opt ('no-installman', 'no-installinfo')
  for my $pair (@result)
		  for my $undefined_cond (@undefined_conds)
	for (my $x = 0; $x < $cols; $x++)
    for (my $y = 0; $y < $rows; $y++)
	  # For now, acconfig.h can only appear in the top srcdir.
	    # For now we have to output all definitions of user rules
		       "for `$primary'");
	# for that file to be included in the distribution.
  # for their use, but that is not enough: they could be used in
# Fortran
# Fortran 77
# Fortran 77 compilers know how to do preprocessing.  The Autoconf
## Forward subroutine declarations.  ##
	  # forzen files.  Consequently it's possible that we see all
	# Found a `-d' that applies to the compilation of this file.
	    # Found a macro definition.
	    # Found a rule.
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
	  $found_it = 1;
		     "found,\nprobably because aclocal.m4 is missing...\n" .
            # Found the language, so see what it says.
	@four = ("", "", "", "");
  $four[0],           $four[1],           $four[2],           $four[3]
	    $four[$x] = $lcomm[$idx];
			 'FPFX'    => $fpfx,
		  # Free-lance dependency.  Output the rule for all the
# from Makefile.am into $output_trailer, or define variables as
	      # from the content of %actions, but if some targets in $targets
# From the Perl manual.
		    $full_ansi =~ s/$KNOWN_EXTENSIONS_PATTERN$/\$U$&/;
		     $full_cond->true ? "" : " in condition $hcond";
      $fullfile = '$(srcdir)/' . $fullfile
# Functions to handle files of each language.
            # further.
# Generate a Makefile.in given the name of the corresponding Makefile and
      # Generate CONFIG_HEADER define.
    # Generate copyright header for generated Makefile.in.
	  # generate _DEPENDENCIES when appropriate.
# Generated from automake.in; do not edit by hand.
	    # Generate each `include' individually.  Irix 6 make will
	generate_makefile ($am_file . '.am', $file);
Generate Makefile.in for configure from Makefile.am.
# generate_makefile ($MAKEFILE_AM, $MAKEFILE_IN)
# Generate `make install' rules.
            # generates another source file which we must then process
      # Generate support for conditional object inclusion in
	# Generate the appropriate rules for this extension.
# generation.
      $generic = 0;
			     GENERIC   => 0,
				     GENERIC   => 0,
  $generic = 0 unless $insrc;
      $generic = 1;
			     GENERIC   => 1,
				  GENERIC          => $generic,
				  GENERIC_INFO     => $generic_info,
      # generic rules.
    # genuine source files.
	# Get information on $LANG.
# get_object_extension ($EXTENSION)
    $get_object_extension_was_run = 0;
    $get_object_extension_was_run = 1;
  Getopt::Long::config ("bundling", "pass_through");
  Getopt::Long::GetOptions %cli_options
  Getopt::Long::GetOptions %cli_options_1st_pass
      # get run twice during "make all".
      # Get the installation directory of each library.
  # Get the prefixes which are valid and actually used.
# Given a hash table of linker names, pick the name that has the most
# gives unlimited permission to copy and/or distribute it,
      --gnits            set strictness to gnits
		   "Gnits standards");
     'gnits' 		=> sub { set_strictness ('gnits'); },
	      # GNITS_VERSION_PATTERN for details.
# GNU General Public License for more details.
      --gnu              set strictness to gnu
     'gnu' 		=> sub { set_strictness ('gnu'); },
	    # go into `./$(DEPDIR)/'.  We can hard-code this value.
	    # go into the appropriate sub-directories, e.g.,
# Greatest timestamp of configure's dependencies.
# Greatest timestamp of the output's dependencies (excluding
	    && ! grep ($_ eq 'intl', @subdirs));
	grep { option "dist-$_" } ('shar', 'zip', 'tarZ', 'bzip2');
		 'GZIP'        =>  ! option 'no-dist-gzip',
# Handle all 'clean' targets.
  handle_all ($makefile);
	   handle_ALLOCA ($subvar, $cond, $1);
# Handle all Texinfo source.
# Handle all Texinfo source; helper for handle_texinfo.
# Handle any man pages.
# Handle AUTOMAKE_OPTIONS variable.  Return 1 on error, 0 otherwise.
# Handle C headers.
# Handle check merge target specially.
  handle_clean ($makefile);
# handle_clean ($MAKEFILE)
  handle_compile;
# handle_compile ()
  handle_configure ($makefile_am, $makefile_in, $makefile, @inputs);
# &handle_configure ($MAKEFILE_AM, $MAKEFILE_IN, $MAKEFILE, @INPUTS)
# Handle C programs.
  handle_data;
# Handle DATA variables.
  handle_dist;
# handle_dist
    $handle_dist_run = 0;
  $handle_dist_run = 1;
# Handle 'dist' target.
  handle_emacs_lisp;
# Handle Emacs Lisp.
# Handle everything related to gathered targets.
  handle_factored_dependencies;
# &handle_factored_dependencies ()
  handle_footer;
# Handle footer elements.
  handle_gettext;
  handle_headers;
	# Handle inclusion of other files.
  handle_install;
  handle_java;
# Handle Java.
  handle_languages;
# handle_lib_objects ($XNAME, $VAR)
	   handle_LIBOBJS ($subvar, $cond, $1);
  handle_libraries;
# handle_libraries ()
# Handle libraries.
  # handle_libtool.)
  handle_libtool;
# handle_libtool ()
# Handle libtool rules.
      # Handle $local:$input syntax.
  # Handle location of texinfo.tex.
  handle_ltlibraries;
# handle_ltlibraries ()
  handle_man_pages;
  handle_minor_options;
  handle_multilib;
# Handle multilib support.
  handle_programs;
# handle_programs ()
  handle_python;
# Handle Python
  # Handle recursion.  We have to honor BUILT_SOURCES like for `all:'.
# Handle remaking and configure stuff.
  handle_scripts;
# Handle scripts.
# Handle shared libraries.
	    # &handle_single_transform) is `sub/foo$U.c'.
	  handle_single_transform ($one_file . '_SOURCES',
# handle_single_transform.  These functions exist so that
# handle_single_transform ($VAR, $TOPPARENT, $DERIVED, $OBJ, $FILE, %TRANSFORM)
# Handle some of the minor options.
# Handle SOURCE->OBJECT transform for one program or library.
# handle_source_transform ($CANON_TARGET, $TARGET, $OBJEXT, $WHERE, %TRANSFORM)
      &handle_source_transform ($xlib, $onelib, $obj, $where,
# Handle subdirectories.
  handle_subdirs;
# &handle_subdirs ()
  handle_tags;
# Handle TAGS.
  handle_tests;
      &handle_tests_dejagnu;
# &handle_tests_dejagnu ()
# Handle TESTS variable and other checks.
  handle_texinfo;
# handle_texinfo ()
# handle_texinfo_helper ($info_texinfos)
# Handle `where_HOW' variable magic.  Does all lookups, generates
# handling on a per-language basis.
        # Handling rules.
## Handling Texinfo files.  ##
        # Handling the conditionals.
## Handling the conditional stack.  ##
## Handling the variables.  ##
	      # Hardcode the tags supported by Libtool 1.5.
	    # hardly maintainable.  So if a line is longer that 1000
  # has a precise meaning for AC_CONFIG_FILES and so on.
# Hash table of AM_CONDITIONAL variables seen in configure.
# Hash table of discovered configure substitutions.  Keys are names,
			  # hasn't been asked to create the Makefile.in
      # have a single variable ($INSRC) that controls whether
# have `..' components.
		    $have_per_exec_flags = 1;
	    # have two cases to consider: either subdir-objects
      $hdr_index += 1;
	  # Header defined and in this directory.
    # Header files are simply ignored.
# Headers.
# headers can be included.
  #  Hello
    # --help always returns 0 per GNU standards.
      --help               print this help, then exit
     'help'    => \&usage,
      # here.
      #   |  here bar.texi is dist_ in line 2, and nodist_ in 4.
	  # Honor only the first @setfilename.  (It's possible to have
      # Hooks are installed on the -am targets.
		 'HOST'     => ($seen_canonical >= AC_CANONICAL_HOST),
      # However it turned out the be a bad idea for several reasons:
				    '.hpp', '.inc'],
	    # HP-UX make, and OSF1 make successfully.
	      $i = basename $i;
	  # I don't know why, but I have to use a tmp $flat_deps.
	    $idx += $y;
# (i.e. AC_PROG_FPP) for a Fortran 77 preprocessor, because not all
        if (/^\@.*\@$/)
 	if (/^$/)
	      if /\\$/;
	      if (!/\\$/)
	    if (!/\\$/)
	  if /\\$/;
	  if /\\#/;
    if 0;
	      if (/\.([0-9a-z])([a-z]*)$/)
	  if (0 == keys %libtool_tags)
	    if ($3 ne '' && substr ($3, -1) eq "\\")
# If aclocal.m4 creation is automated, return the list of its dependencies.
		  if ($actions{$_})
	      if ($add_missing)
		     if ($adir eq 'EXTRA' || $adir eq 'noinst'
        if $a eq $b;
        if $a eq '.PHONY';
        if $a eq 'README';
# If a file name appears as a key in this hash, then it has already
# if an input file has a directory part the same as the current
  # If an `obj/' directory exists, BSD make will enter it before
			      # If ansi2knr fails then we shouldn't
	if ($ansi2knr_filename eq 'ansi2knr')
      #       If an up-to-date source-tree of the .info file existed,
  # If a primary includes a configure substitution, then the EXTRA_
      # If a required file is above the source tree, it is important
      if ($arg =~ /^-./)
      if ($args[0] eq '-noextra')
	    if $args[1] =~ /^\w+$/;
      if ($#args < $traced{$macro})
	# If a rule exists to build this source with a $(srcdir)
      # If a vers*.texi file is needed, emit the rule.
        if $b eq '.PHONY';
        if $b eq 'README';
      if ($bn !~ /^lib.*\.a$/)
      if ($bn !~ /$libname_rx$/)
	    # If both source and object files are in a subdirectory
	  if (! $bs || ! grep (/$rewrite/, $bs->value_as_list_recursive))
      if ($can_dist)
	if @check;
      if ($check_aux && dir_has_case_matching_file ($config_aux_dir, $cfile))
    if @check_tests;
	    if ($comment ne '')
	if ($compile_clean_files{$item} == MOSTLY_CLEAN)
	      if $cond != FALSE;
	    if ($cond != FALSE)
		    if $cond != FALSE;
		  if $cond != FALSE;
  	    if (! $cond->false && ! ($is_rule && $discard_rule))
  # If $COND is given, check against it.
  if (! @cond_stack)
	if $cond_stack[$#cond_stack] ne $cond;
  if (! $config_aux_dir_set_in_configure_ac)
	  if ($config_aux_dir_set_in_configure_ac)
    if @config_h;
	      if ($config_h_dir eq '.')
    if ! $configure_cond{$cond} && $cond !~ /^TRUE|FALSE$/;
    if count_files_for_language ('lex') > 1;
    if count_files_for_language ('yacc') > 1;
	  if $curs eq 'EXTRA';
	      if ($dangling_sym && $add_missing)
	  if (defined $1 && -f 'README-alpha')
	  if (defined $args[2])
  if (defined $cond)
	      if (defined $dependencies{$_} && $cond != FALSE)
	  if defined $dir;
    if (! defined $extension_seen{$ext})
	        if defined $extension_seen{$ext};
	if (defined $lang)
		  if ! defined $lang->compile;
	    if defined $libsources{$file};
	if (defined $object_compilation_map{$comp_obj}
        if (! defined $object_map{$object})
	  if (defined $object_map{$object}
  if (defined $output_directory)
  if (defined $self->_finish)
    if (defined $self->_target_hook)
	    if (defined $source_extension)
	    if defined $versions{$vtexi};
	    if $def->owner != VAR_AUTOMAKE;
		if $depbase eq '.';
	if ($derived_source)
	  if ($di eq $relative_dir)
    if ($directory ne '.')
		     if $dir eq 'EXTRA' || $dir eq 'noinst' || $dir eq 'check';
    if $dir eq 'obj';
  if ($dir eq $relative_dir)
      if (dir_has_case_matching_file ($relative_dir, $cfile)
	if $dir =~ m,^\.\.(?:$|/),;
	      if dirname ($base) ne '.';
      if (dirname ($ins[0]) eq $auxdirdist)
	  if dirname ($out) eq $relative_dir;
      if (dirname ($single) eq $relative_dir)
    if @distclean_config;
	  if ($dist ne '' && ! $can_dist)
	if ($dist_p && $one_var->has_conditional_contents);
  # If DIST_SUBDIRS is defined, make sure SUBDIRS is, so that
		    if $do_require;
  if (! -d ($output_directory . '/' . $am_relative_dir))
  if (-d 'po')
    if $dsubdirs;
  if (-e 'aclocal.m4')
	  if (-e $args[1])
  if (-e $out_file)
	if ($_ eq '..')
    if $errspec && ! @input_files;
      if (exists $ac_config_files_location{$i})
  if (exists $directory_map{$cdir})
	   if (exists $instconds{$val})
  if ($exit_code != 0)
        if ($extension_map{$extension} &&
  if ($extra_dist)
	  if (-f $_)
	  if (-f 'acconfig.h')
	if -f 'acconfig.h';
  if (-f 'aclocal.m4')
	  if (-f 'aclocal.m4')
    if (! -f ($am_file . '.am'))
    if -f $config_aux_dir . '/install.sh';
	  if (-f $config_h_path . '.bot')
	  if (-f $config_h_path . '.top')
	  if (($fd eq $relative_dir)
	  if (-f "$dir/install-sh")
      if ($fd ne $relative_dir)
	  if ($fd ne $relative_dir)
	if -f $file . '.am';
      if ($file !~ /\$/)
	if ($file =~ /^(.*)\.[cly]$/ && -f "$relative_dir/$file")
      if (($file =~ /^(.*)\.in$/) && -f "$1.am")
      # If file is a variable, make sure when don't call `rm -f' without args.
# If $FILE lies in a subdirectory, emit a rule to create this
	if ($file =~ /^\s*\$(\(.*\)|\{.*\})\s*$/);
      # If files should be distributed, do so.
    if (($flagvar && $flagvar->variable_value =~ /$DASH_D_PATTERN/o)
		  if (-f ("$libdir/$file"))
      if -f 'Makefile.am';
  if (-f $mkidpath)
  if (! $force_generation
	      # If --force-missing was specified, and we have
	  if (! $found_it)
      if ($found_it && (! $add_missing || ! $force_missing))
		      if (! $found_it && ! $automake_will_process_aux_dir)
		if $found_it && $force_missing;
	if ! grep ($_ eq 'po', @subdirs);
    if grep (/^\Q$dir\E$/i, qw/aux lpt1 lpt2 lpt3 com1 com2 com3 com4 con prn/);
    if $handle_dist_run;
	  if (&handle_lib_objects ($xlib, $xlib . '_LIBADD'))
  if (handle_options)
            if ($have_per_exec_flags)
    if (!$headers)
# If I `cd $REL-DIR', then to come back, I should `cd $BACKPATH'.
	if (/$IGNORE_PATTERN/o)
      if ($infobase eq $texi)
  if ($info_texinfos)
      if ($input)
  if (! @input_files)
if (! @input_files)
	  if ($instdirs{$onelib}{$rcond} eq 'EXTRA'
      if (! &is_make_dir ($config_aux_dir))
      if ($iter =~ /\.[cly]$/)
      if ($iter =~ /\.h$/)
	    if ($iter =~ /Makefile\.in$/)
    if ! keys %libsources;
	    if ($lang->ansi && $obj =~ /\$U/)
		if ($lang->ansi && option 'ansi2knr')
	      if $lang->autodep ne 'no';
	  if ($lang->compile);
        if ($lang && $lang->autodep ne 'no')
      if $lang->libtool_tag && exists $libtool_tags{$lang->libtool_tag};
	    if ($lang->libtool_tag && exists $libtool_tags{$lang->libtool_tag})
	  if ($lang->link);
                    if $lang->name eq 'c';
                if ($lang->name eq 'java' && $object =~ /(\/|^)\.\.\//)
      if (($ldvar && grep (/-module/, $ldvar->value_as_list_recursive))
      if ($lfile =~ /^([^:]*):(.*)$/)
      if (-l $fullfile && ! -f $fullfile)
          if ($libname_rx eq '\.la')
    if $$line =~ s/\\\s+\n$/\\\n/;
      if ($link !~ /\$/)
    if ($linker eq '')
    if (@local_headers)
      if ($macro eq 'AC_CANONICAL_BUILD')
    if (! $make_dirs_set)
		  if (! maybe_push_required_file (dirname ($fullfile),
	       if ($msg)
		if $mtime > $configure_deps_greatest_timestamp;
	if $mtime > $configure_deps_greatest_timestamp;
      if $mtime > $output_deps_greatest_timestamp;
    if ($name eq 'yacc' || $name eq 'yaccxx')
  # if needed.)
    if ($needlinker)
      if $need_link || suffix_rules_count > 1;
    if ($needs_c)
      if ($need_texi_file > 1)
  if ($need_texi_file && ! option 'no-texinfo.tex')
    if $negate;
  # If neither the auxdir/Makefile nor the ./Makefile are generated
      if ($_ ne '.PHONY')
      if ($nodir_name eq 'check')
	      if ($nodir_name eq 'EXTRA')
	if $nodir_name eq 'EXTRA';
      if ($nodir_name =~ /^nobase_/)
		if ($objdir ne $srcdir)
            if ($object =~ /\//)
		if ($object =~ /\.lo$/)
	if ($old_default_source ne $default_source
      if option 'ansi2knr';
    if (option 'ansi2knr')
  if (option 'ansi2knr' && $base =~ /_$/)
    if (option 'ansi2knr' && keys %de_ansi_files)
  if (option 'cygnus')
  if (option 'dejagnu')
    if (! option 'no-dependencies')
	if (((! option 'no-dependencies') && $lang->autodep ne 'no')
  if (! option 'no-dist')
  if (! option 'no-installinfo')
    if (! option 'nostdinc')
	if option $opt;
  if (option 'readme-alpha')
  if (option 'subdir-objects')
  if (! $outfile)
	  if ($outfile =~ /\.([^.]+)$/ && $1 ne 'info')
	      if (! $output_flag
	  if ($package_version !~ /^$GNITS_VERSION_PATTERN$/)
            if ($path =~ s/^\$\(top_srcdir\)\///)
	    if $pfx eq 'dist_';
		if $pfx eq 'dist_';
  if (@prefix)
	    if ($prev_state == IN_RULE_DEF)
	if $primary eq 'PROGRAMS';
		if (process_global_option_list ($where,
      if (process_option_list ($var->rdef (TRUE)->location,
	      # If $rcond is true there is only one condition and
	  if ($rcond->true)
      if ($relative_dir eq '.')
    if $relative_dir eq '.';
  if ($relative_dir eq '.'
  if ($relative_dir eq '.')
	  if ($relative_dir eq '.')
      if ($relative_dir eq $config_h_dir
	  if ($relative_dir eq $config_h_dir)
		  if $relative_dir eq dirname ($in);
      if ($relative_dir eq dirname ($out))
	      if ($relative_dir eq '.' && ! &is_make_dir ($fd))
	  if ($relative_dir eq '.' && ! &is_make_dir ($fd))
            if ($renamed ||
		if ($renamed)
    if ($require_extra && ! var ('EXTRA_' . $primary));
    if ($rest)
            # If resulting object is in subdir, we need to make
            # If rewrite said it was ok, put the object into a
            if ($r == LANG_SUBDIR && $directory ne '')
  if ($rule)
      if (/$RULE_PATTERN/smo)
	if (rule '$(srcdir)/' . $default_source
      if "@saved_cond_stack" ne "@cond_stack";
      if $saw_bk;
	      if $saw_bk;
	      if $saw_bk && $comment eq '';
	if (&saw_sources_p (0) && keys %dep_files)
    if (&saw_sources_p (1)
                if scalar @dep_list > 0;
    if (scalar @keys == 0)
		  if (scalar @undefined_conds == 0)
      if (scalar (variables) > 0);
  if ($sdir eq '.' && dirname ($dest) eq '.')
      if (! $seen_automake_version)
	if $seen_canonical;
	  if ($seen_canonical <= AC_CANONICAL_BUILD)
	  if ($seen_canonical <= AC_CANONICAL_HOST)
	if (! $seen_gettext_external
	if ($seen_gettext_external && grep ($_ eq 'intl', @subdirs));
  if (! $seen_init_automake)
	  if ($seen_init_automake)
      if ($seen_libobjs)
      if ($seen_libobjs || $seen_global_libobjs)
    if !$seen_maint_mode;
  if ($seen_multilib && $relative_dir eq '.')
      if (/^\@setfilename +(\S+)/)
  if (set_seen ('ACLOCAL_M4_SOURCES'))
		if (set_seen ("${derived}_$flag"))
		  if set_seen ($val);
  # if SHELL is used, ./configure's SHELL is always better than
		  if $source !~ /\$U/;
      # If so, with install-exec? (or install-data?).
  if ($strictness == GNITS)
	  if ($strictness >= $mystrict)
      # If subdir prefix should be preserved, do so.
  if (! $subdirs)
  if ($subdirs)
      # If SUBDIRS is conditionally defined, then set DIST_SUBDIRS
    if (@suffixes || $suffixes)
		if !$suppress && rule $file;
		      if ($symlink_exists && ! $copy_missing)
			  if (! symlink ("$libdir/$file", $fullfile))
			      . '`if test -f $(srcdir)/' . $ansfile
      # * If .texi files are not distributed, then .info files should
  # If the aux dir is set, and it does not have a Makefile.am, then
		# If the config header source is in this directory,
	# If the files are built in the build directory, then we want
    # If the files are built in the build directory, then we want to
      #     - if the files is kept under CVS, you really want it
      # If the header is in the current directory we want to build
		# If the line doesn't start with a `#', add it.
	    # If the object file has been renamed (because per-target
  #    if the project has been populated with a file listed in
    # If the project is entirely C++ or entirely Fortran 77 (i.e., 1
  # If there is more than one distinct yacc (resp lex) source file
      # If there is nothing about this guy, skip it.
  # If the resulting file lie into a subdirectory,
      # If the resulting library lies into a subdirectory,
      # If the resulting program lies into a subdirectory,
        # If the source file is in a subdirectory then the `.o' is put
	    # If the source is in a subdirectory and the object is in
	# If the source to a program consists entirely of code from a
  # If the target `dist-hook' exists, make sure it is run.  This
      # If the Texinfo source is in a subdirectory, create the
# If the VAR wasn't defined conditionally, return $(VAR).
		      # if they belong to this rule.
	    if $topparent ne $var->name;
	  if $transform{'DIST_SOURCE'};
	      if $_ =~ /^\t\s*\#/;
    if @used && $primary ne 'JAVA' && $primary ne 'PYTHON';
  if (@used && $primary ne 'JAVA' && $primary ne 'PYTHON')
      if user_phony_rule "all-local";
    if user_phony_rule 'check-local';
    if user_phony_rule 'dist-hook';
      if (user_phony_rule "$_-hook")
	if user_phony_rule "$_-local";
      # If user specified file_TEXINFOS, then use that as explicit
      if ($v)
       if ($val =~ /^-/)
      if ($val)
	   if ($val !~ /^-[lL]/ &&
	  if ($value =~ /^\@.*\@$/)
                if ($var)
      if ($var)
  if ($var)
	    if ($var)
	if ($var)
      if var ('BUILT_SOURCES');
    if var ('BUILT_SOURCES');
      if (var ($canonical . "_TEXINFOS"))
    if var ('CLEANFILES');
    if (! vardef ($var, $cond))
    if var ('DISTCLEANFILES');
      if (var ('DIST_SUBDIRS'))
    if var 'DIST_SUBDIRS' && ! var 'SUBDIRS';
  if ($var eq 'ANSI2KNR' || $var eq 'AMDEPBACKSLASH')
  if ($var->has_conditional_contents)
    if var ('INCLUDES');
	  if (var ('LDADD'))
  if (var ('lib_LTLIBRARIES') && var ('bin_PROGRAMS'))
      if var ('LIBTOOL');
	      if var ('LIBTOOL');
    if var ('MAINTAINERCLEANFILES');
    if var ('MOSTLYCLEANFILES');
      if ($varname =~ /^(nobase_)?(dist_|nodist_)?(.*)_$primary$/)
	  if ($varname =~ /^(.*)$primary$/)
		    if ($var->rdef ($cond)->owner == VAR_MAKEFILE)
    if (var ('SUBDIRS'))
  if (var ('TESTS'))
  if (var ('TEXINFO_TEX'))
	  if (var ($varname))
      if (! var ($xlib . '_AR'))
      if (var ($xlib . '_LIBADD'))
	  if (var ($xlib . '_LIBADD'))
      if (var ($xlib . '_LINK'))
      if (var ($xname . "_LDADD"))
	  if (var ($xname . '_LDADD'))
      if (var ($xname . '_LINK'))
	    if $VERSION ne $args[1];
      # If 'version.texi' is referenced by input file, then include
      if ($vtexi)
      # If we are a comments, eat as much comments as you can.
      # If we are a rule, eat as long as we start with a tab.
      # If we are doing the topmost directory, and the file is in a
	      # If we couldn' install the file, but it is a target in
	    # if we detect this case.
  # If we have a configure header, require it.
		# If we have a libtool object then we also must remove
                # If we're generating dependencies, we also want
		# If we renamed the object then we want to use the
  # if we treat other options first.  (Handling other options first
	  # If we've already looked for it, we're done.  You might
    # If we want to use `LINK' we must make sure it is defined.
  if ($xname ne $name)
      # ignore all configure variables (at least those which are not
                                ? ' --ignore-deps' : '',
  # Ignore `##' lines.
  -i, --ignore-deps      disable dependency tracking code
     'i|ignore-deps' 	=> sub { set_global_option ('no-dependencies',
      #     implementations.)
      # implementation simplified it as `a'.  (Note that the sub/
  # important.
  # IMPORTANT: If you add a macro here, you should also add this macro
	       # important: the developer will quickly get complaints from
  # in a given directory, then the `ylwrap' program is required to
  # in a sub-directory; the "specific" rules are needed in the other
	    # in case the same file (`foo.c') is compiled from other
	# Include auto-dep code.  Don't include it if DEP_FILES would
      --include-deps     enable dependency tracking code
     'include-deps' 	=> sub { unset_global_option ('no-dependencies'); },
  # included files.  We can't scan included files because we don't
	   "`INCLUDES' is the old name for `AM_CPPFLAGS' (or `*_CPPFLAGS')")
    @include_stack = ();
  # Include user-defined local form of target.
  # In --cygnus mode, check doesn't depend on all.
	      # in %dependencies and $targets will have two rules).
	    # In fact, this is what we assume.
	    # inference rule: we need an explicit rule.
    $in_file_name = '';
  $in_file_name = basename ($makefile_in);
   'info'	  => 1,
   'info-am'         => 1,
  $infobase =~ s/\.te?xi(nfo)?$//;
      $infobase =~ s/\.(txi|texinfo|texi)$//;
      # $(INFO_DEPS), not 'info', because otherwise recursive makes
      #   info_TEXINFOS = texinfo.txi info-stnd.texi info.texi
      ($info_texinfos->value_as_list_recursive (inner_expand => 1))
			" in handle_languages, but compiler not defined")
# in handle_source_transform) because it isn't always appropriate to
# Initialize our list of languages that are internally supported.
  initialize_per_input;
# &initialize_per_input ()
# in Makefiles.
      # in order not to distribute .info files.
	   # in overlapping conditions.
# $input
	  $input = $file;
      @input_files = @configure_input_files;
  @input_files = @new_input_files;
	  @inputs = $file . '.in';
	  @inputs = split (':', $2);
	  # in `.'s Makefile.in.
				  INSRC		   => $insrc,
# INSRC - wether DEST should be built in the source tree
	  @ins = rewrite_inputs_into_dependencies ($config_h_path, @ins);
    ('install',
   'install'      => 1,
    # Install `all' hooks.
   'installcheck-am' => 1,
# install code, and possibly generates code to define the primary
   'install-data' => 1,
   'install-data-am' => 1,
			     ? ' installdirs-local' : ''),
     'installdirs-local' => (user_phony_rule 'installdirs-local'
   'install-exec' => 1,
   'install-exec-am' => 1,
   'install-info' => 1,
	       "`install-info-local' target defined but "
		 'INSTALL-INFO' =>  ! option 'no-installinfo',
				       INSTALL   => $install_p,
   'install-man' => 1,
		 'INSTALL-MAN'  =>  ! option 'no-installman',
  # Install the -hook hooks.
  # Install the -local hooks.
		      # Install the missing file.  Symlink if we
		 $instconds{$val}->ambiguous_p ($val, $full_cond);
	   $instconds{$val} = $instconds{$val}->merge ($full_cond);
	       $instconds{$val} = new Automake::DisjConditions;
	      || $instdirs{$onelib}{$rcond} eq 'check')
	      || $instdirs{$onelib}{$rcond} eq 'noinst'
	   $instdirs{$val}{$full_cond} = $dir;
	    # Instead we output
		      INTERNAL)
		      INTERNAL);
			      INTERNAL);
						  INTERNAL))
			      '', INTERNAL, VAR_PRETTY);
  # interpreter.  This is but one of several Java hacks.  Similarly,
	    # in the current directory, and dependencies always
	    # In the former case the rule can be used to build
	    # In the latter case the rule is used to build objects
      # In the next release we'll remove this entirely.
  # in the package, for backward compatibility (some people may still
      # (In the past one project used so many conditional subdirectories
      # in the same condition, because we can only specify one
      #     in the source-tree (when they are distributed, that is).
	  # In the top-level Makefile we do not use $(top_builddir), because
      # In this case we already have the directory information, so
            # In this case we just accept the rewrite.
      # intl/ is not required when AM_GNU_GETTEXT is called with
	       "`intl' should not be in SUBDIRS when "
      # intl/ should not be used with AM_GNU_GETTEXT([external])
			  # into DIST_COMMON, probably because this is
      # In top level (or only) directory.
        # into the current directory, unless the subdir-objects option
	  # introduced in Libtool 1.6.
		       "invalid variable `$varname': `dist' is forbidden");
                # invocations.  However, this will result in a
	  ($i) = prepend_srcdir ($i);
      # is a bit ugly but it easier than spreading out the logic,
# is a list holding the values to use for the variable.  The value is
					    $is_am ? RULE_AUTOMAKE : RULE_USER,
					$is_am ? VAR_AUTOMAKE : VAR_MAKEFILE,
# is defined ($TYPE eq '') or appended ($TYPE eq '+').
        # is in effect.
# is never used.  Returns canonical name.  Arguments are name and a
		# is not portable.  BSD make doesn't honor
			  # isn't important.
	    $is_rule = 0;
	  $is_rule = 1;
    # is still wrong if these makes can run parallel jobs.  But it is
    # Is the c linker needed?
  # is the real output file, and all remaining elements are input
      # Is this to be installed?
# is used for the --help output only.
	    # is used, or it is not.
  # |     is used without 'external'. It is also useful to warn for the
				  . $iter
  #    it includes).
  # it in protos.m4, but later redefine it elsewhere.  This is
	      # it is appropriate (i.e., when $file is not already an output).
      #     - it is confusing that `make distclean' does not erase
	      # it is defined for) because it only knows the first paragraph.
  # It is ok if the user sets this particular variable.
	      $i = '$(top_builddir)/' . $i;
	    # it really means `foo_.c' or `sub/foo.c'.
# It returns undef otherwise.
	      # It's an EXTRA_ library, so we can't specify -rpath,
	    # It's harder with subdir sources. On
	       . "It should be safe to simply remove it.");
  # it turns up other systems need the same thing.  After all,
# it under the terms of the GNU General Public License as published by
#     it will be generated and returned).
				      'java', 'JAVA',
				      'java', 'noinst', 'check');
# Java via gcj.
		   join (' ', map { "$_.$extension" } @$basename),
			   . join (' ', @user_suffixes, sort keys %suffixes)
	  # Just check for alphanumeric in AC_SUBST.  If you do
# just not support legacy yacc!)
      # Just run the local check rules.
	    # Keep any backslash from the previous line.
      #   * Keeping a fresher copy of distributed files in the
	  # Keep track of the greatest timestamp.
  # Keep track of the youngest configure dependency.
    # Keep track of the youngest output dependency.
	# Keep track of which prefixes we saw.
# Keys in this hash are the basenames of files which must depend on
# Keys in this hash table are directories where we expect to build a
# Keys in this hash table are files to delete.  The associated
# Keys in this hash table are object files or other files in
	@keys = map { '$(' . $_ . $one_file . '_OBJECTS)' } @keys;
		   (keys %traced));
# know about the strange ylwrap requirement.  (Or better yet we could
# knowledge in order to eliminate the conflict.  Add more linkers as
  # know the include path.  Therefore we always erase these files, no
			ky kys
	$lang->finish;
            ($lang = $languages{$extension_map{$extension}}))
		       . $lang->link),
		  && $lang->name eq 'c'
    %lang_specific_files = ();
# LANG_SUBDIR means that the resulting object file should be in a
	    $lang->target_hook ($aggregate, $object, $full, %transform);
	# language.
# language, etc.  A finish function is only called if a source file of
	# language function.
    %language_scratch = ();
  $language_scratch{'lex-done'} = 1;
  $language_scratch{'lex-yacc-done'} = 1;
  $language_scratch{'yacc-done'} = 1;
  $languages{$lang->name} = $lang;
	$lang{uc ($lang->name)} = 1;
      # largely cleaned up so that .info files get always build in the
    $last = '';
	      last;
	    last;
	  last;
		    last;
		  last;
	    last if $y + 1 == $rows && $x == $rest;
	$last = $iter;
	    $last_var_name = $1;
	    $last_var_type = $2;
					      $last_var_type, $cond,
					    $last_var_type, $cond,
	      $last_var_value .= ' '
	      $last_var_value .= $_;
	    $last_var_value = $3;
		$last_var_value = $3 . "\n";
					      $last_var_value, $comment,
					    $last_var_value, $comment,
					      $last_where, VAR_ASIS)
					    $last_where, $var_look)
	    $last_where = $where->clone;
	       # laxest here since this code also applies to non-libtool
        'ld' => "\$",
		   'ld' => '$(CC)',
		   'ld' => '$(CXX)',
        'lder' => "\$",
		   'lder' => 'CCLD',
		   'lder' => 'CXXLD',
		   'lder' => 'F77LD',
		   'lder' => 'FCLD',
		   'lder' => 'GCJLD',
		   'lder' => 'OBJCLD',
		   'ld' => '$(F77)',
		   'ld' => '$(FC)',
		   'ld' => '$(GCJ)',
		   'ld' => '$(OBJC)',
	  || ($ldvar2 && grep (/-module/, $ldvar2->value_as_list_recursive)))
# leading tabs here then we need to make the reader smarter, because
# leads to all sort of misindentations.  On the other hand, defining
					   - length ($this_obj_ext));
	    # Let the language do some special magic if required.
# Lex (C & C++).
      --libdir=DIR       directory storing library files
     'libdir:s' 	=> \$libdir,
	   $liblocations{$val}{$full_cond} = $where;
	  $libname_rx = '\.la';
				 'lib', 'pkglib', 'noinst', 'check');
      # libraries.
	       # libraries or programs, for which -dlopen and -dlopreopen
Library files:
				       LIBRARY  => $onelib,
      # .libs is for Unix, _libs for DOS.
  %libsources = ();
	  $libsources{$args[1]} = $here;
    %libtool_clean_directories = ('.' => 1);
		    $libtool_clean_directories{$directory} = 1;
      $libtool_clean_directories{$dirname} = 1;
# libtool compilation (the COMPILE_* constants).
# Libtool files.
     @libtool_files, @libtool_sometimes);
	      "\$(LIBTOOL) $libtool_tag--mode=compile $obj_compile";
		      "\$(LIBTOOL) $libtool_tag--mode=compile $value",
			"\$(LIBTOOL) $libtool_tag--mode=link " : '')
# libtool object.  We use this information to decide what directories
  # Libtool requires some files, but only at top level.
  # (Libtool scripts such ltconfig as ltmain.sh are checked for in
	'libtool_tag' => "\$",
		   'libtool_tag' => 'CC',
		   'libtool_tag' => 'CXX',
		   'libtool_tag' => 'F77',
		   'libtool_tag' => 'FC',
		   'libtool_tag' => 'GCJ',
          $libtool_tags{$args[1]} = 1;
	      %libtool_tags = (CC => 1, CXX => 1, GCJ => 1, F77 => 1);
    $libtool_tag = '--tag=' . $lang->libtool_tag . ' '
		$libtool_tag = '--tag=' . $lang->libtool_tag . ' '
		 'LIBTOOL'      => !! var ('LIBTOOL'),
	      $license = $_;
# Like define_variable, but define a variable to be the configure
# Like define_variable, but the value is a list, and the variable may
      #     like GNU Make on point (1) above.  These implementations
	      # like README, AUTHORS, or THANKS to be generated.
	    # limited to 4000 bytes, and sed is used by config.status
	  # line).
  # line number.
        'link' => "\$",
		   'link' => '$(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@',
		   'link' => '$(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@',
            $linker = '';
        'linker' => "\$",
# $LINKER
		   'linker' => 'CXXLINK',
		   'linker' => 'F77LINK',
		   'linker' => 'FCLINK',
		   'linker' => 'GCJLINK',
#    $LINKER is a boolean, true if a linker is needed to deal with the objects
            $linker = $lang->linker;
		   'linker' => 'LINK',
		   'linker' => 'OBJCLINK',,
	$linker ||= &resolve_linker (%linkers_used);
    %linkers_used = ();
	%linkers_used = ();
        $linkers_used{$linker} = 1;
# %linkers_used will be updated with any linkers needed
		   'link' => '$(F77LD) $(AM_FFLAGS) $(FFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@',
		   'link' => '$(FCLD) $(AM_FCFLAGS) $(FCFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@',
		   'link' => '$(GCJLD) $(AM_GCJFLAGS) $(GCJFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@',
 		   'link' => '$(OBJCLD) $(AM_OBJCFLAGS) $(OBJCFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@',
				 'lisp', 'noinst');
	# listed in a nodist_ variable.  (&handle_source_transform
	# List of configure variables which must be defined.
# List of dependencies for the obvious targets.
# List of files in AC_CONFIG_FILES/AC_OUTPUT without Makefile.am's,
# List of Makefile.am's to process, and their corresponding outputs.
# list of suffixes to check for.
# List of targets we must always output.
# List of the DIST_COMMON files we discovered while reading
# Lists of tags supported by Libtool.
# Load a $MAKEFILE, apply the %TRANSFORM, and return it as a list of
	# Load the language dependent Makefile chunks.
  local $_;
	      $local = $file;
		  $local = $link;
			localstate man man1 man2 man3 man4 man5 man6
				   'LOCAL-TEXIS' => !!$info_texinfos);
		  $local = undef;
## Local Variables:
# locate_am (@POSSIBLE_SOURCES)
  locate_aux_dir ();
# Location of that macro.
#   location of the source variable
	    $loc->pop_context;
  # Look at potential Makefile.am's.
	  # Look at potential Makefile.am's.
  # Look for common files that should be included in distribution.
  # Look for some files we need.  Always check for these.  This
  # looking at a subdir Makefile.  We must set relative_dir for
# Looks in configuration path, as specified by AC_CONFIG_AUX_DIR.
  # Looks stupid?
      #   % ls
  $lt ||= '';
		_LT_AC_TAGCONFIG => 0,
	  # _LT_AC_TAGCONFIG is an old macro present in Libtool 1.5.
			     LTCOMPILE => '$(LT' . $lang->compiler . ')',
			     LTCOMPILE => $obj_ltcompile,
				     LTCOMPILE => $obj_ltcompile,
# ltconfig appears here for compatibility with old versions of libtool.
				       LTLIBRARY  => $onelib,
			     LTOBJ     => '$@',
			     LTOBJ     => "$obj.lo",
				     LTOBJ     => "$obj_.lo",
				   LTRMS => join ("\n", @libtool_rms));
		LT_SUPPORTED_TAG => 1,
		m4_include => 1,
	  # m4_include's performed during Autoconf's startup.
		m4_sinclude => 1,
# macro AC_PROG_FPP should test the Fortran 77 compiler first for
# macro_define() call because SUFFIXES definitions impact
	     || $macro eq 'm4_sinclude'
	     || $macro eq 'sinclude')
# Macro is an Automake magic macro which primary is PROGRAMS, e.g.
    ($macro, $macro, 'am__EXEEXT', 0, INTERNAL,
    $macro = rvar ($macro) unless ref $macro;
# macros or rules which are already known.
# macros or rules which are already known. $IS_AM iff the caller is
  # Macros to trace, with their minimal number of arguments.
	     MAINTAINER_CLEAN, []);
     MAINTAINER_CLEAN_RMS => join ('', sort @{$rms{&MAINTAINER_CLEAN}}),
		 'MAINTAINER-MODE'
      #   % make
  # Make.
 	# Make all _.c files depend on their corresponding .c files.
 	# Make all _.o (and _.lo) files depend on ansi2knr.
			. '$(MAKE) $(AM_MAKEFLAGS) '
			  . " && \$(MAKE) \$(AM_MAKEFLAGS) ctags); \\\n"
			  . " && \$(MAKE) \$(AM_MAKEFLAGS) tags); \\\n"
# `(make)Catalogue of Rules').
# make_conditional_string ($NEGATE, $COND)
	    $make_dirs{dirname ($iter)} = 1;
		$make_dirs{dirname ($iter)} = 1;
	$make_dirs_set = 1;
      #   Makefile a
     'MAKEFILE-AM'         => $rel_makefile_am,
     'MAKEFILE-AM-SOURCES' => "$makefile$colon_infile",
     MAKEFILE             => basename $makefile,
     'MAKEFILE-DEPS'       => "@rewritten",
							    $makefile_in);
     'MAKEFILE-IN-DEPS'    => "@include_stack",
     'MAKEFILE-IN'         => $rel_makefile_in,
  # ("Makefile.in").  These have no directory components.
# Makefile.in.  These variables are local to `is_make_dir'.
     MAKEFILE              => $rel_makefile,
	    # Makefile), so we now rely on inference rules again.
      # Makefile, then we also want to build the header.
  #  % make      # GNU make
      #     Make implementations.
  #             $(MAKEINFO) ...
      $makeinfoflags = "-I $sdir -I \$(srcdir)/$sdir";
      $makeinfoflags = '-I $(srcdir)';
				  MAKEINFOFLAGS    => $makeinfoflags,
	    # make it appear to be at the right place in the list.
	  $make_list{$input} = join (':', ($local, @rest));
# &make_paragraphs ($MAKEFILE, [%TRANSFORM])
      #     Make", paragraph "VPATH", item "target lookup", for
# makes indentation work better in Emacs.
      # Make sure documentation is made and installed first.  Use
		# Make sure object is removed by `make mostlyclean'.
	# Make sure SUFFIXES has unique elements.  Sort them to ensure
      # Make sure the dist directory for each input file is created.
	  # Make sure the dist directory for each input file is created.
	# Make sure the line is \n-terminated.
      # make sure this directory will exist.
  # make sure this directory will exist.
	    # Make sure this new source file is handled next.  That will
      # Make sure we at look at this.
      # Make sure we do not overwrite an existing license.
      # Make sure we look at these.
  # Make the result unique.  This lets the user use conditionals in
      #       make would not rebuild it in the build tree.
			man7 man8 man9 oldinclude pkgdatadir
				 MANS => "@mans");
			  map { $_->[1] } @elfiles);
    map { $_ => 1 } (qw(aux log toc tmp
    map { $_ => 1 } (qw(bin data exec include info lib libexec lisp
	  map { "$infobase.$_" } (sort keys %clean_suffixes));
     map { $_ => sub {} } (keys %cli_options)
		   map { "--trace=$_" . ':\$f:\$l::\$n::\${::}%' }
# Match `-d' as a command-line argument in a string.
  # matter whether they are used or not.
     maybe_BUILT_SOURCES => (set_seen ('BUILT_SOURCES')
	  maybe_push_required_file ($dir, $file, $fullfile);
# &maybe_push_required_file ($DIR, $FILE, $FULLFILE)
  # maybe_push_required_file to work.
	    # Maybe we'll run across the same issue as in the past,
      #   |  Maybe we should take some inspiration from what's already
					    'mdate-sh');
					  MDDIR    => $conf_dir,
# mentioned.  This is a separate function (as opposed to being inlined
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	    # Merely delete comments beginning with two hashes.
      # Merging an index into an another.
		      $message = "installing `$fullfile'";
# Messages about about configure.ac.
# Messages about about the current Makefile.am.
	    # might be related.  In late 2003 people complained about
	    # might be used in a parallel build before it is built.
# Might modify $LINE.
      mkdir ($output_directory . '/' . $am_relative_dir, 0755);
	mkinstalldirs py-compile texinfo.tex ylwrap),
	  # more occurrences later if the manual shows examples of how
	    # more restructuring than is appropriate right now.
			 'MORE-THAN-ONE'
# Most important AC_CANONICAL_* macro seen so far.
     MOSTLYCLEAN_RMS      => join ('', sort @{$rms{&MOSTLY_CLEAN}}),
				'MOSTLYRMS' => join ("\n", @mostly_rms),
# msg_ac ($CHANNEL, $MESSAGE, [%OPTIONS])
  msg_ac ('error', @_);
# msg_am ($CHANNEL, $MESSAGE, [%OPTIONS])
  msg_am ('error', @_);
  msg $channel, "${am_file}.am", $msg, %opts;
  msg $channel, $configure_ac, $msg, %opts;
			msg_cond_var ('gnu', $cond, $flag,
	  msg ('error', $ac_config_files_location{$file},
	      msg ('error-gnits', $package_version_location,
      msg ('error-gnu', option $opt,
	  msg ('error-gnu/warn', $where,
    $msg = "\nDid you forget AC_CONFIG_FILES([Makefile]) in $configure_ac?"
	    msg ('obsolete', $loc,
      msg 'obsolete', "`--output-dir' is deprecated\n";
  msg ('portability', $where,
	      msg ($suppress ? 'note' : 'error', $where, "$message$trailer");
	  msg ('syntax', $where, "not enough arguments for $macro");
  msg "syntax", $where, "whitespace following trailing backslash"
      msg_var ('obsolete', 'ACLOCAL_M4_SOURCES',
  msg_var ('obsolete', 'INCLUDES',
      msg_var ('syntax', $subdirs,
	  msg_var ('syntax', $var, "variable `$varname' is defined but no"
# Much of the actual processing is handled in
	      # multi-paragraph rule several time (e.g. for each condition
    # multiple paragraphs.
	      # must be defined.
      # must build the local check rules.
  # Must do this after reading .am file.
      # Must skip empty string for Perl 4.
my %ac_config_files_location = ();
  my @ac_deps = ();
my $ac_gettext_location;
      my $aclocal = new Automake::XFile "< aclocal.m4";
  my @actual_other_files = ();
my $add_missing = 0;
		   my $adircond = $acond->true ? "" : " in condition $hacond";
		   my $adir = $instdirs{$val}{$acond};
		   my $adirtxt = "installed in `$adir'";
	my $aggregate = 'AM';
my @all;
my $all_target;
my $am_config_aux_dir = '';
	my ($AMDEP, $FASTDEP) =
    my ($amfile) = @_;
my $am_file = 'BUG';
my $am_file_name;
    my $am_file = new Automake::XFile ("< $amfile");
    my ($amfile, $where) = @_;
my $am_relative_dir;
	    my $ansfile = $de_ansi_files{$base} . $base . '.c';
	my $ansi2knr_dir = '';
	my ($ansi2knr_filename, $ansi2knr_where) = @{option 'ansi2knr'};
      my $archive_defined = option 'no-dist-gzip' ? 0 : 1;
  my (@args) = @_;
  my @ARGV_backup = @ARGV;
my $ASSIGNMENT_PATTERN = '^ *([^ \t=:+]*)\s*([:+]?)=\s*(.*)' . "\$";
my $automake_will_process_aux_dir = 0;
  my $auxdirdist = is_make_dir ($config_aux_dir) ? $config_aux_dir : '.';
        my $base = $2;
	  my ($base, $dist, $X) = ($1 || '', $2 || '', $3 || '');
    my ($basename, $where, %transform) = @_;
    my $blank = 0;
      my $bn = basename ($onelib);
	  my $bs = var ('BUILT_SOURCES');
  my $can_dist = 0;
      my $canonical = canonicalize ($infobase);
my $canonical_location;
  my $cdir = File::Spec->canonpath ($directory);
  my ($channel, $msg, %opts) = @_;
my @check;
      my $check = 0;
  my $check_aux = 0;
      my $check_options_p = $install_p && !! option 'std-options';
my @check_tests;
my %clean_files;
  my %clean_suffixes =
  my %cli_options =
  my %cli_options_1st_pass =
  my $cli_where = new Automake::Location;
	  my ($cn_sans_dir, $stamp_dir);
  my $colon_infile = ':' . join (':', @inputs);
    my $cols = 4;
  my $command =
    my $comment = '';
my $COMMENT_PATTERN = '^#';
  my ($comments, undef, $rules) =
    my ($comments, $variables, $rules) =
my @common_files =
my @common_sometimes =
my %compile_clean_files;
	(my $comp_obj = $object) =~ s/\.lo$/.\$(OBJEXT)/;
	my $comp_val = (($object =~ /\.lo$/)
    my ($coms, $vars, $rules) =
		my ($com, $vars, $rules)
    my ($cond, $macro, $mystrict, @files) = @_;
    my $cond = new Automake::Condition (@cond_stack);
	      my $cond = new Automake::Condition @cond_stack;
	    my $cond = new Automake::Condition @cond_stack;
		      my $condparagraph = $paragraph;
my @cond_stack;
	    my $condstr = $cond->subst_string;
	  my $condstr = $cond->subst_string;
	  my $conf_dir;
	my @config;
my $config_aux_dir = '';
my $config_aux_dir_set_in_configure_ac = 0;
  my @config_h;
      my $config_h_dir = dirname ($config_h_path);
my @config_headers = ();
      my ($config_h_path, @ins) = split_config_file_spec ($spec);
my @config_links = ();
my $configure_ac;
my %configure_cond = ();
my @configure_deps = ();
  my @configuredeps = ('$(am__aclocal_m4_deps)', '$(CONFIGURE_DEPENDENCIES)');
my $configure_deps_greatest_timestamp = 0;
my $configure_dist_common = '';
my @configure_input_files = ();
my %configure_vars = ();
  my $content = $_;
my $copy_missing = 0;
    my $count = 0;
    my @ctag_deps = ();
  my $c = var 'CLEANFILES';
  my $cygnus = option 'cygnus';
      my $dangling_sym = 0;
my $DASH_D_PATTERN = "(^|\\s)-d(\\s|\$)";
my %de_ansi_files;
  my $default_dist = 0;
    my $default_includes = '';
	(my $default_source = $unxformed) =~ s,(\.[^./\\]*)?$,.c,;
      my $def = $var->def (TRUE);
	  my $def = $v->def (TRUE);
	    my $depbase =
		    (my $depbase_ = $depbase) =~ s/\$U/_/g;
	    my $depbase = dirname ($obj);
	    my @depdirs = uniq (map { dirname ($_) } @deplist);
            my $depfile = $object;
my %dep_files;
            my @dep_list = ();
	    my @deplist = sort keys %dep_files;
	  my @deps = split (' ', $flat_deps);
	    my $der_ext = (&{$lang->output_extensions} ($ext))[0];
	my $derived_source = 0;
	    my ($derived, $source, $obj, $myext, %file_transform) = @$file;
	      my ($dest, @src) = split (':', $spec);
	      my ($dest, $src) = split (':', $spec);
	  my $di = dirname $i;
  my $dipfx = ($insrc ? '$(srcdir)/' : '') . $dpfx;
    my ($dir) = @_;
    my $dir;
		   my $dircond =
        my $directory = $1 || '';
    my ($directory, $base, $ext) = @_;
  my ($directory, $base, $ext) = @_;
    my $directory = dirname ($file);
my %directory_map;
  my $directory = shift;
  my ($dir, $file, $fullfile) = @_;
      my $dir = ($item eq '.') ? '' : "$item/";
      (my $dir = $key) =~ s/^nobase_//;
      my $dirname = dirname $onelib;
  my $dirstamp = "$cdir/\$(am__dirstamp)";
      my ($dirstamp, @cfiles) =
  my $dirstamp = require_build_directory_maybe ($dest);
      my $dirstamp = require_build_directory_maybe ($one_file);
      my $dirstamp = require_build_directory_maybe ($onelib);
		   my $dirtxt = "installed in `$dir'";
  my ($dir, $where) = @_;
    my $discard_rule = 0;	# 1 if the current rule should not be output.
  my @distclean_config;
  my @dist_common = split (' ', rvar ('DIST_COMMON')->variable_value);
my %dist_dirs;
      my $dist_p = 0;
my @dist_sources;
my @dist_targets;
      my $distvar = "\$($one_name)";
                my $dname = $derived;
    my %done;
  my $done = 0;
	my @dont_override = @{$lang->flags};
  my $do_require = 1;
  my ($dpfx, $dsfx) = ($dest =~ /^(.*?)(\.[^.]*)?$/);
  my $dsubdirs = var ('DIST_SUBDIRS');
  my $d = var 'DISTCLEANFILES';
  my @elfiles = &am_install_var ('-candist', 'lisp', 'LISP',
my $ELSE_PATTERN =
my $ENDIF_PATTERN =
  my $errspec = 0;
my $EXEC_DIR_PATTERN =
      my $exec_p = ($nodir_name =~ /$EXEC_DIR_PATTERN/o);
    my ($ext) = @_;
    my ($extension) = @_;
        my $extension = $3;
my %extension_map = ();
my %extension_seen;
  my $extra_dist = var ('EXTRA_DIST');
  my @f = ();
  my $fc_file = new Automake::XFile "< $file";
      my $fd = dirname ($file);
	  my $fd = dirname ($file);
	  my $fd = dirname ($link);
      my $file;
    my ($file) = @_;
  my ($file, @inputs) = @_;
		my $file = ($is_am ? "$libdir/am/" : '') . $1;
  my ($filename) = @_;
  my $filename_filter = $flm ? '.' x $flm->[1] : '';
  my ($file, $primary, @prefix) = @args;
      my @files;
	  my @files;
    my @files = ($_file);
    my $file = shift;
      my @files = uniq ($var->value_as_list_recursive);
  my ($file, %transform) = @_;
    my $flag = $aggregate . "_YFLAGS";
  my $flagvar = 0;
    my $flagvar = var $flag;
	  my $flat_deps = &flatten ($dependencies);
  my $flm = option ('filename-length-max');
my $force_generation = 1;
my $force_missing = 0;
      my $found_it = 0;
    my @four;
	my $fpfx = ($pfx eq '') ? 'CC' : $pfx;
        my $full = $_;
		my $full_ansi = $full;
      my $fullfile = "$dir/$file";
my $gen_copyright = "\
  my $generic;
  my $generic_info = ($generic && $dsfx) ? 1 : 0;
my $get_object_extension_was_run;
  my $gm_file = new Automake::XFile "> $out_file";
my $GNITS_VERSION_PATTERN = '\d+\.\d+([a-z]|\.\d+)?(-[A-Za-z0-9]+)?';
		   my $hacond = $acond->human;
my $handle_dist_run;
	    my $have_per_exec_flags = 0;
	   my $hcond = $full_cond->human;
  my $hdr_index = 0;
	my $header = $output_base . '.h';
    my ($headers) = @_;
      my ($here, @args) = split (/::/);
	    my $idx = (($x > $rest)
my $IF_PATTERN = '^if\s+(!?)\s*([A-Za-z][A-Za-z0-9_]*)\s*(?:#.*)?' . "\$";
my $IGNORE_PATTERN = '^\s*##([^#\n].*)?\n';
my $INCLUDE_PATTERN = ('^include\s+'
my @include_stack;
my $in_file_name;
  my $infobase = basename ($filename);
  my (@infobase, @info_deps_list, @texi_deps);
      my $infobase = $texi;
  my ($info_texinfos) = @_;
  my $info_texinfos = var ('info_TEXINFOS');
      my $in = pop @input_files;
  my $input;
my @input_files = ();
      my $input = locate_am @rest;
      my @inputs;
  my (@inputs) = @_;
      my $insrc = ($out_file =~ $user_cleaned_files) ? 0 : 1;
      my @ins = split (/:/, $output_files{$in});
      my $install_p = $nodir_name ne 'noinst' && $nodir_name ne 'check';
  my %instconds = ();
  my %instdirs = ();
    my ($is_am, $file, $where, %transform) = @_;
    my $is_rule = 0;		# 1 if we are processing a rule.
    my @keys = sort keys %used_pfx;
        my $lang;
    my ($lang) = @_;
	my $lang = $languages{$extension_map{$ext}};
	my $lang = $languages{$name};
	my %lang = map { uc ($_) => 0 } keys %languages;
  my $lang = new Language (%option);
my %lang_specific_files;
my %languages = ();
my %language_scratch;
    my ($last, @lcomm);
    my $last_var_name = '';
    my $last_var_type = '';
    my $last_var_value = '';
    my $last_where;
      my $ldvar2 = var ('LDFLAGS');
      my $ldvar = var ("${xlib}_LDFLAGS") || var ('AM_LDFLAGS');
  my @liblist = &am_install_var ('libs', 'LIBRARIES',
  my @liblist = &am_install_var ('ltlib', 'LTLIBRARIES',
  my %liblocations = ();	# Location (in Makefile.am) of each library.
      my $libname_rx = '^lib.*\.la';
my %libsources = ();
my %libtool_clean_directories;
my @libtool_files = qw(ltmain.sh config.guess config.sub);
  my @libtool_rms;
my @libtool_sometimes = qw(ltconfig ltcf-c.sh ltcf-cxx.sh ltcf-gcj.sh);
    my $libtool_tag = '';
	    my $libtool_tag = '';
my %libtool_tags = ();
      my $license;
      my $line = $aclocal->getline;
  my @lines = split (/(?<!\\)\n/, $content);
    my ($linker) = '';
      my $linker = &handle_source_transform ($xlib, $onelib, $obj, $where,
      my $linker = &handle_source_transform ($xname, $one_file, $obj, $where,
        my ($linker, $object);
    my (%linkers) = @_;
my %linkers_used;
      my ($link, $file) = split /:/, $spec;
      my $local = basename ($file);
	  my $local = basename ($link);
    my @local_headers = ();
      my ($local, @rest) = split (/:/);
      my ($local, @rest) = split (/:/, $arg);
      my ($loc, $val) = @$pair;
	  my ($loc, $value) = @$locvals;
	    my $loc = $where->clone;
  my @l = sort keys %result;
  my ($macro) = @_;
      my $macro = $args[0];
my %make_dirs = ();
my $make_dirs_set = 0;
    my ($makefile) = @_;
  my ($makefile) = @_;
  my ($makefile_am, $makefile_in) = @_;
  my ($makefile_am, $makefile_in, $makefile, @inputs) = @_;
  my ($makefile, @inputs) = split (/:/, $output_files{$makefile_in});
  my $makeinfoflags;
my %make_list;
  my @mans = sort keys %vlist;
	      my $message = "required file `$fullfile' not found";
  my $mkidpath = "$config_aux_dir/mkinstalldirs";
    my (@mostly_rms, @dist_rms);
    my $msg = '';
	       my ($msg, $acond) =
      my $mtime = mtime 'aclocal.m4';
    my $mtime = mtime $amfile;
	      my $mtime = mtime $args[1];
  my $myobjext = ($1 ? 'l' : '') . 'o';
  my $myobjext = ($lt ? 'l' : '') . 'o';
    my ($name) = @_;
  my ($name) = @_;
    my @names;
  my ($name, @suffixes) = @_;
my $need_link;
    my $needlinker;
  my $needlinker = "";
    my $needs_c = 0;
  my $need_texi_file = 0;
  my ($negate, $cond) = @_;
  my ($negate, $cond, $where) = @_;
    (my $newext = $ext) =~ tr/l/c/;
    (my $newext = $ext) =~ tr/y/c/;
  my @new_input_files = ();
  my @newinputs;
	my $new_saw_bk = check_trailing_slash ($where, $_);
      my $nodir_name = $X;
    my $nonansi_obj = $obj;
	    my $obj_compile = $lang->compile;
	    my $objdir = dirname ($obj);
my %object_compilation_map;
my %object_map;
 	my @objects;
      my $obj = get_object_extension '.lo';
      my $obj = get_object_extension '.$(OBJEXT)';
	    my $obj_ltcompile =
		    (my $obj_ = $obj) =~ s/\$U/_/g;
                my $obj_sans_ext = substr ($object, 0,
  my $old_cond;
	my $old_default_source = "$one_file.c";
  my ($one_file, $unxformed) = @_;
    my ($one_file, $unxformed, $obj, $where, %transform) = @_;
      my $one_name = $X . '_' . $primary;
      (my $one_primary = $primary) =~ s/S$//;
      my $one_var = var $one_name;
		   my $onlyone = ($dir ne $adir) ?
  my (%option) = @_;
my @other_input_files = ();
      my $outdir = dirname ($texi) . '/';
  my ($out_file) = $output_directory . '/' . $makefile_in;
  my ($outfile, $vfile);
      my ($out_file, $vtexi, @clean_files) =
        my ($out, @ins) = split_config_file_spec ($spec);
      my ($out, @ins) = split_config_file_spec ($spec);
	    my ($out, @ins) = split_config_file_spec ($spec);
  my $output =
my $output_all;
	(my $output_base = $output) =~ s/$KNOWN_EXTENSIONS_PATTERN$//;
my $output_deps_greatest_timestamp;
my $output_directory;
my %output_files = ();
	    my $output_flag = $lang->output_flag || '';
	    my $output_flag = $lang->output_flag || '-o';
my $output_header;
  my ($output, @inputs) = split (/:/, $spec);
my $output_rules;
my $output_trailer;
my $output_vars;
  my $owner = VAR_CONFIGURE;
my $package_version = '';
my $package_version_location;
  my (%pairs) = @_;
      my $paragraph = "$_";
	  my $paragraph = $_;
	  my $parent_msg = '';
            my $path = $1;
my $PATH_PATTERN = '(\w|[+/.-])+';
  my $perllibdir = $ENV{'perllibdir'} || '/usr/share/automake-1.9';
	my $pfx = $lang->autodep;
  my $prefix = $1 || 'AM_';
    my @prefix = am_primary_prefixes ('JAVA', 1,
  my @prefix = am_primary_prefixes ('LIBRARIES', 0, 'lib', 'pkglib',
  my @prefix = am_primary_prefixes ('LTLIBRARIES', 0, 'lib', 'pkglib',
  my $pretty = VAR_ASIS;
    my $prev_state = IN_RULE_DEF;
  my ($primary, $can_dist, @prefixes) = @_;
  my @proglist = &am_install_var ('progs', 'PROGRAMS',
  my @pyfiles = &am_install_var ('-defaultdist', 'python', 'PYTHON',
    my $r = 0;
    my @r = &am_install_var ('-defaultdist', 'header', 'HEADERS', 'include',
  my $regen_aclocal = 0;
  my ($regen_aclocal_m4, @aclocal_m4_deps) = scan_aclocal_m4;
	  my ($relationship, $actions) = ($1, $2 || '');
my $relative_dir;
  my ($rel_makefile_am, $rel_makefile_in) = prepend_srcdir ($makefile_am,
  my $rel_makefile = basename $makefile;
        my $renamed = 0;
my %required_file_not_found = ();
my %required_targets =
  my $require_extra;
    my @res;
  my @res = ();
  my @res;
  my (@rest) = @_;
    my $rest = @lcomm % $cols;
    my @result = ();
  my @result = ();
  my $result = '';
  my %result = ();
	my (@result) =
    my $result_rules = '';
    my $result_vars = '';
	  my $rewrite = $iter;
      my @rewritten_inputs = rewrite_inputs_into_dependencies ($file, @inputs);
  my %rewritten = map { '$(distdir)/' . "$_" => 1 } keys %dist_dirs;
  my @rewritten = rewrite_inputs_into_dependencies ($makefile, @inputs);
  my $r = LANG_PROCESS;
    my $r = &lang_sub_obj;
      my $rm = "rm -f $file";
  my %rms = (MOSTLY_CLEAN, [],
    my $rows = int(@lcomm / $cols);
      my $rpath = "\$($rpathvar)";
      my $rpathvar = "am_${xlib}_rpath";
            my ($r, $source_extension)
	my $rule_file = $lang->rule_file || 'depend2';
my $RULE_PATTERN =
  my $rule = rule $name;
    my @saved_cond_stack = @cond_stack;
  my $saved_dollar_slash = $/;
  my $saved_output_vars = $output_vars;
    my $saw_bk = 0;
  my $sdir = dirname $source;
  my (%sections, %vlist);
my $seen_automake_version = 0;
my $seen_canonical = 0;
my $seen_cc_c_o = 0;
	my %seen_files = ();
my $seen_gettext = 0;
my $seen_gettext_external = 0;
  my $seen_global_libobjs =
my $seen_init_automake = 0;
      my $seen_libobjs = 0;
  my $seen_libobjs = 0;
my $seen_maint_mode;
my $seen_multilib = 0;
    my ($self) = @_;
  my ($self) = @_;
    my ($self, $aggregate, $output, $input) = @_;
    my ($self, $aggregate, $output, $input, %transform) = @_;
  my ($source, $dest, $insrc, @deps) = @_;
  my ($source_ext, $obj) = @_;
    my @sourcelist = &am_install_var ('-candist',
my @sources;
		(my $source_ = $source) =~ s/\$U/_/g;
      my $soutdir = '$(srcdir)/' . $outdir;
    my $spacing = '';
  my ($spec) = @_;
		my @specifics = ($full_ansi, $obj_sans_ext,
  my ($spfx, $ssfx) = ($source =~ /^(.*?)(\.[^.]*)?$/);
	    my $srcdir = dirname ($source);
      my $stamp = $directory_map{$cdir};
	  my $stamp = "${stamp_dir}stamp-h${hdr_index}";
my %standard_prefix =
		       $mystrict, @files);
# $MYSTRICT is the strictness level at which this file becomes required.
    my ($string) = @_;
      my $strip_subdir = 1;
      my @subdirs = $subdirs->value_as_list_recursive;
  my $subdirs = var 'SUBDIRS';
  my $subdirs = var ('SUBDIRS');
            my $subr = \&{'lang_' . $lang->name . '_rewrite'};
       my ($subvar, $val, $cond, $full_cond) = @_;
    my @suffixes = Automake::Rule::suffixes;
	my %suffixes = map { $_ => 1 } @suffixes;
    my $suffixes = var 'SUFFIXES';
	  my $suggestion = dirname ($onelib) . "/$bn";
	      my $suppress = 0;
my $symlink_exists = (eval 'symlink ("", "");', $@ eq '');
    my @tag_deps = ();
my $TARGET_PATTERN='[$a-zA-Z_.@%][-.a-zA-Z0-9_(){}/$+@%]*';
	  my ($targets, $dependencies) = ($1, $2);
  my $texiclean = "";
  my @texi_cleans;
  my $texi = new Automake::XFile "< $filename";
  my $texinfodir;
    my ($text) = @_;
            my $this_obj_ext;
  my $timestamp = mtime $out_file;
      my $tmpcond = $one_var->conditions->one_cond;
  my $topsrcdir = backname ($relative_dir);
  my %traced = (
  my $tracefh = new Automake::XFile ("$traces $filename |");
  my $traces = ($ENV{AUTOCONF} || 'autoconf') . " ";
	      my $trailer = '';
  my %transform;
my %transformed_files;
	my %transform = ('EXT'     => $ext,
       my @trans = handle_single_transform ($subvar, $topparent,
          my $type = 'library';
    my ($type, $value) = @_;
		  my @undefined_conds =
      my @undefined_conds = (TRUE,);
      my @uniq_deps = uniq (sort @{$dependencies{$_}});
  my @used = ();
    my %used_pfx = ();
  my $user_cleaned_files = '^(?:' . join ('|', @f) . ')$';
	my @user_suffixes = ($suffixes
	  my $val;
		my $val = "${derived}_$flag";
  my %valid = map { $_ => 0 } @prefixes;
  my ($var) = @_;
  my ($var, $basename, $extension, $where) = @_;
  my ($var, $cond, $lt) = @_;
    my ($var, $cond, $where, @value) = @_;
    my $var_look = VAR_ASIS;
      my $varname = $pfx . 'man_MANS';
	  my $varname = $pfx . 'man' . $section . '_MANS';
      my $varname = $prefix . $one_file . '_SOURCES';
	my $varname = $prefix . $one_file . "_SOURCES";
      my $varname = $var->name;
  my ($varname, $where) = @_;
  my ($var, $objvar, $nodefine, $one_file,
      my $var = rvar ($key . '_LTLIBRARIES');
      my $var = rvar ($prefix[0] . '_LIBRARIES');
      my $var = rvar ($prefix[0] . '_LTLIBRARIES');
    my ($var, $topparent, $derived, $obj, $_file, %transform) = @_;
	    my ($var, $type, $val) = ($1, $2, $3);
       my ($var, $val, $cond, $full_cond) = @_;
	   my ($var, $val, $cond, $full_cond) = @_;
    my ($var, $value) = ($lang->compiler, $lang->compile);
    my ($var, $value) = ($lang->lder, $lang->ld);
    my ($var, $value, $where) = @_;
  my $var = var ('AUTOMAKE_OPTIONS');
	my $var = var 'CONFIG_HEADER';
		my $var = var ($derived . '_SHORTNAME');
	    my $var = var $flag;
      my $var = var ($varname);
  my $var = var ($varname);
  my $var = var $varname;
	my $var = var $varname;
  my %versions;
	  my $vti = ($done ? $done : 'vti');
      my $v = var $var;
      my $when = $clean_files{$file};
      my $where = $ac_config_files_location{$link};
  my ($where, $config_files) = @_;
  my ($where, $line) = @_;
  my ($where, $mystrict, $dir, @files) = @_;
    my ($where, $mystrict, @files) = @_;
      my $where = new Automake::Location $here;
      my ($where, $one_file) = @$pair;
      my ($where, $onelib) = @$pair;
      my $where = $one_var->rdef ($tmpcond)->location->clone;
	   my $where = $var->rdef ($cond)->location;
my $WHITE_PATTERN = '^\s*' . "\$";
      my $xlib = &check_canonical_spelling ($onelib, '_LIBADD', '_LDFLAGS',
      my $xlib = &check_canonical_spelling ($onelib, '_LIBADD', '_SOURCES',
      my $xlink;
  my $xname = &canonicalize ($name);
      my $xname = &check_canonical_spelling ($one_file, '_LDADD', '_LDFLAGS',
  my ($xname, $varname) = @_;
		    (my $xobj = $object) =~ s,lo$,\$(OBJEXT),;
	my $xpfx = ($prefix eq '') ? 'am_' : $prefix;
      my $x = $utarg;
    my $YFLAGSvar = var 'YFLAGS';
	$_ .= "\n";
		    . "\n");
			   . "\n");
			. "\n");
				  . "\n");
        'name' => "\$",
		# name.
        'Name' => "\$",
		   'Name' => 'Assembler',
		   'Name' => 'C',
		   'Name' => 'C++',
       "name `$dir' is reserved on W32 and DOS platforms")
		   'Name' => 'Fortran',
		   'Name' => 'Fortran 77',
		   'Name' => 'Header',
		   'Name' => 'Java',
		   'Name' => 'Lex',
		   'Name' => 'Lex (C++)',
		   'Name' => 'Objective C',
  # Name of input file ("Makefile.am") and output file
#   name of _LDADD/_LIBADD-type variable to examine
	# Name of the compiling variable (COMPILE).
# Name of the configure.ac file.
        # Name of the linker variable (LD).
        # Name of the linking variable (LINK).
		   'Name' => 'Preprocessed Fortran',
		   'Name' => 'Preprocessed Fortran 77',
		   'Name' => 'Ratfor',
	@names = ('lex', 'lexxx');
	@names = ($name);
# Names used in AC_CONFIG_HEADER call.
# Names used in AC_CONFIG_LINKS call.
	@names = ('yacc', 'yaccxx');
                # name that is too long for losing systems, in
                # name to ensure it is unique.  We also require
		   'Name' => 'Yacc',
		   'Name' => 'Yacc (C++)',
       "naming a subdirectory `obj' causes troubles with BSD make")
		# N-ary `.=' fails.
				       NDIR        => $nodir_name,
      # need config.guess and config.sub.
	    # needed.
# need it.
    $need_link = 0;
	$need_link = 1;
	$needlinker |=
       $needlinker = "true" if @trans;
    $needs_c = 1
	$needs_c ||= ! $lang->pure;
      $need_texi_file = 1;
      $need_texi_file = 2; # so that we require_conf_file later
	    # need the be computed on-the-fly.
			  # Never fail here if a subdir fails; it
     new Automake::Location,
			       new Automake::Location,
			     new Automake::Location,
			    new Automake::Location);
			   new Automake::Location,
				       new Automake::Location,
				     new Automake::Location,
				   new Automake::Location,
				  new Automake::Location,
				 new Automake::Location,
					     new Automake::Location,
					  new Automake::Location,
					 new Automake::Location,
					new Automake::Location,
	  # `new-line tab" not preceded by backslash (continuation
	    $new_saw_bk = $saw_bk;
	    # new source extension (as above).  This would require
      next
            next;
	      next
	      next;
	    next;
	  next;
      next if $def && $def->owner != VAR_MAKEFILE;
	next if defined $done{$lang};
	      next if defined $required_file_not_found{$fullfile};
	    next if defined $seen_files{$obj};
      next if $_ eq "\\" || $_ eq '';
	next if $_ eq '.' || $_ eq '';
      next if exists $configure_vars{$varname};
        next if ! /^(?:(.*)\/)?([^\/]*)($KNOWN_EXTENSIONS_PATTERN)$/;
          next if $macro ne 'm4_include' && ! -f $args[1];
	  next if $outfile;
            next if $r == LANG_IGNORE;
      next unless $_->[1] =~ /\..*$/;
      next unless $check;
	next unless $extension_map{$ext};
      next unless $file;
      next unless s,/+[^/]+$,,;
	  next unless s,/+[^/]+$,,;
	next unless $var;
        # Nice name of the language (C, Fortran 77...).
		     ("\nLibtool libraries can be built for only one "
			. "\n\n");
#   $NODEFINE is a boolean: if true, $OBJVAR will not be defined (but
	  $nodir_name =~ s/^(dist|nodist)_//;
	  $nodir_name =~ s/^nobase_//;
      #   |     nodist_bar_ps_SOURCES = bar.texi
      #      nodist_foo_TEXINFO = included.texi
	     "no-dist-gzip specified but no dist-* specified, "
      #   |     nodist_INFO = bar.info
      #   nodist_info_TEXINFOS or something similar.  (Doing this
  # no-dist setting: target like `distclean' or `maintainer-clean' use it.
            # No error message here.  Used to have one, but it was
      --no-force           only update Makefile.in's that are out of date
     'no-force' 	=> sub { $force_generation = 0; },
				 'noinst');
	       . "`no-installinfo' option not in use")
		     'noinst', 'check');
			     'noinst', 'check');
				    'noinst', 'check');
				  'noinst', 'check');
				 'noinst', 'lib', 'pkglib', 'check');
    $nonansi_obj =~ s/\$U//g;
      #   non-distributed file.)
      # non-distributed .info files, and non-distributed .texi
      # non-distributed .info files, we need to build them in the
      # * Non-distributed .texi files is important in some packages
      # No need to update.
					     NONLIBTOOL => 0, LIBTOOL => 1);
		 'NONLIBTOOL'   => 1,
					     NONLIBTOOL => 1, LIBTOOL => 0);
				NONLIBTOOL => 1, LIBTOOL => 0);
		   # No output.
    # No point in continuing if _OBJECTS is defined.
		     "no proper implementation of AM_INIT_AUTOMAKE was " .
	    # Normally we try to output variable definitions in the
	  # Normal usage.
      #   not allow:
      #   not be distributed.  Akim Demaille suggested that eventually
      #   not be distributed either.  There are also cases where one
    # Note: AIX 4.1 /bin/make will fail if any suffix rule appears
            # Note: computed subr call.  The language rewrite function
	    # Note that at this point $source (as computed by
  # Note that it might be possible that aclocal.m4 doesn't exist but
	   # Note that LIBOBJS and ALLOCA are exceptions to this rule,
# Note that the calls to these functions are computed, so don't bother
  # Note that %transform goes last, so it overrides global options.
      # Note that we check DIST_SUBDIRS first on purpose, so that
    # NOTE we no longer automatically clean SCRIPTS, because it is
		   # Nothing to do.
	      # Nothing to do.  Any error message has been output
	      . "not in `$configure_ac'",
	       . "not `install-local'");
	    # not properly include several files resulting from a
# Now do all the work on each file.
            # Now extract linker and other info.
  # Now for each section, generate an install and uninstall rule.
	# Now include code for each specially handled object with this
  # Now look for other files in this directory which must be remade
  # Now *really* process the options.  This time we know
  # Now that configure substitutions are allowed in where_HOW
  # Now that we've processed DIST_COMMON, disallow further attempts
			. "\n\t"
	      . "\nthat aclocal.m4 is present in the top-level directory,\n"
	  /^(.*?)(?:(?<!\\)\n(\t.*))?$/s;
			     OBJ       => '$@',
		$obj_compile =~ s/\(AM_$flag\)/\($val\)/
            $object = "$base$extension";
	    $object = $base . $this_obj_ext;
    %object_compilation_map = ();
	    && ($object_compilation_map{$comp_obj}
	    && $object_compilation_map{$comp_obj} != 0
	    && $object_compilation_map{$comp_obj} != $comp_val)
	$object_compilation_map{$comp_obj} |= $comp_val;
                $object = $directory . '/' . $object;
                $object = $dname . '-' . $object;
    # object extension.
#   object extension (i.e. either `.o' or `$o'.
                # object.  In this case we rewrite the object's
# Objective C.
    %object_map = ();
            $object_map{$object} = $full;
	      && $object_map{$object} ne $full);
# @OBJECTS
					    '_OBJECTS', '_DEPENDENCIES',
	    # objects in sub-directories too.  Dependencies should
#   $OBJ is the object extension (e.g., `$U.lo')
#   $OBJ is the object extension (i.e. either `.o' or `.lo').
			     OBJOBJ    => '$@',
			     OBJ       => "$obj$myext",
				     OBJ       => "$obj_$myext",
			     OBJOBJ    => "$obj.obj",
				     OBJOBJ    => "$obj_.obj",
#                              $OBJ, $PARENT, $TOPPARENT, $WHERE, %TRANSFORM)
		    $obj_sans_ext .= '$U';
		    $obj =~ s/\$U//g;
      $obj, $topparent, $where, %transform) = @_;
#   $OBJVAR is the name of the _OBJECTS variable if known (otherwise
	  # Obviously we don't want to distribute Autoconf's files
	      # of a previously defined "multiple-target" rule.  E.g.
      # off for .info files that appear to be cleaned; this is
		# of four values followed by additional transform flags for
      #     of Make would always rebuild .info files in the build
      # of ., .., or ../.. that contains install-sh.
# of the same name (with "dir" appended) exists.  For instance, if the
			     'oldinclude', 'pkginclude',
    # one_file is canonical name.  unxformed is given name.  obj is
#   $ONE_FILE is the canonical (transformed) name of object to build
				   $one_file, $obj,
			  $one_file . '_OBJECTS should not be defined');
					    $one_file, $obj, $val,
					 $one_file, $obj, $varname, $where,
      $one_file =~ s/\$\(EXEEXT\)$//;
				   $one_file . '_SOURCES',
	       "`$onelib' is not a standard library name\n"
	       "`$onelib' is not a standard libtool $type name\n"
			 "`$one_name' contains configure substitution, "
				       ONE_PRIMARY => $one_primary,
# on $KNOWN_EXTENSIONS_PATTERN which is used used when parsing
	       # Only get this error once.
	      # Only install missing files according to our desired
# Only recognize leading spaces, not leading tabs.  If we recognize
	    # Only require ansi2knr files if they should appear in
	  # Only require the file if it is not a built source.
	    # Only see the error once.
				 # Only use $this_obj_ext in the derived
	    # on the value of $U (`' or `_').
     'o|output-dir:s'	=> \$output_directory,
			     -o        => $output_flag,
				     -o        => $output_flag,
Operation modes:
  $option{'ansi'} = 0
  $option{'autodep'} = 'no'
  $option{'flags'} = []
  $option{'linker'} = ''
	  (option 'no-dependencies' || $lang->autodep eq 'no')
	   "option `$opt' disallowed by GNU standards")
  $option{'output_extensions'} = sub { return ( '.$(OBJEXT)', '.lo' ) }
		  && option 'subdir-objects');
	      option ('subdir-objects') ? '$$depbase' : '$(DEPDIR)/$*';
# (or AC_OUTPUT).
		   # or anything else required.  They can also set AS.
    or exit 1;
	or fatal "cannot remove $out_file: $!\n";
  # or &handle_programs.
  # originally, but there were so many requests that I finally
# Originally written by David Mackenzie <djm@gnu.ai.mit.edu>.
      # or in the build tree.  Actually this variable is switched
	or next;
	    # or some part of a rule cut by an if/endif.
      #   other binaries built in the package itself, maybe using
  #  * other dependencies, specific to the Makefile.am being processed
    # other files.
		  . "\@other_input_files = (@other_input_files)")
  # Other systems aren't expected to use $SHELL when Automake
  # other than to mark them as dependencies.  See
	# Otherwise it will be `AM'.  This is used by the target hook
# otherwise it will think rules like `foo=bar; \' are errors.
	# Otherwise, it would be possible for a top-level "make TAGS"
		# otherwise OSF make will implicitly copy the included
# Otherwise we create a am__VAR_DIST variable which contains
	    # our old problem no longer exists.
      $outdir = "" if $outdir eq './';
      $outdir = $soutdir if $insrc;
	  $outfile = $1;
# $OUTFILE     - name of the info file produced by $FILENAME.
      $out_file =  $outdir . $out_file;
# ($OUTFILE, $VFILE, @CLEAN_FILES)
    $output_all = '';
    # Output `all'.
	$output_all .= ("all: @local_headers"
	$output_all .= "all: " . (var ('SUBDIRS')
    # Output `all-am'.
		# Output an additional rule if _.c and .c are not in
    $output_deps_greatest_timestamp = 0;
    $output_deps_greatest_timestamp = $mtime
      && $output_deps_greatest_timestamp < $timestamp
      $output_directory = '.';
      && $output eq contents ($out_file))
	'output_extensions' => "\$",
		   'output_extensions' => sub { (my $ext = $_[0]) =~ tr/l/c/;
		   'output_extensions' => sub { (my $ext = $_[0]) =~ tr/y/c/;
		   'output_extensions' => sub { return () },
	  $output_files{$input} = join (':', ($local, @rest));
      %output_files = %make_list;
        'output_flag' => "\$",
	    $output_flag = '-o'
		   'output_flag' => '-o',
    $output_header = '';
	$output_header .= (".SUFFIXES: "
    $output_header .= ".SUFFIXES:\n";
# ($OUTPUT, @INPUTS)
  # $OUTPUT is encoded.  If it contains a ":" then the first element
	      # Output only if not in FALSE.
		     "output `$outfile' has unrecognized extension");
    $output_rules = '';
	    $output_rules .=
	  $output_rules .=
		    $output_rules .=
	  $output_rules .= $actions{$_} if defined $actions{$_};
 	    $output_rules .= ($base . "_.c: $ansfile \$(ANSI2KNR)\n\t"
  $output_rules .= ("check: "
      $output_rules .= "check-am: all-am\n";
    $output_rules .= "$coms$rules";
	    $output_rules .= ("$condstr${header}: $output\n"
	  $output_rules .= $c->subst_string . "$name:\n";
	$output_rules .= "ctags: CTAGS\nCTAGS:\n\n";
	$output_rules .= ("ctags-recursive:\n"
  $output_rules .= ("$dirstamp:\n"
  $output_rules .= &file_contents
  $output_rules .= file_contents
	$output_rules .= &file_contents ('ansi2knr',
      $output_rules .= &file_contents ('check', new Automake::Location);
  $output_rules .= file_contents ('clean-hdr',
    $output_rules .= file_contents ('dejagnu', new Automake::Location);
	    $output_rules .= &file_contents ('depend',
  $output_rules .= &file_contents ('distdir',
      $output_rules .= &file_contents ($file, $where,
	$output_rules .= file_contents ('lang-compile',
      $output_rules .= &file_contents ('library',
  $output_rules .= &file_contents ('libtool',
      $output_rules .= &file_contents ('ltlibrary',
      $output_rules .= &file_contents ('mans',
      $output_rules .= &file_contents ('multilib', new Automake::Location);
      $output_rules .= &file_contents ('program',
  $output_rules .= &file_contents ('subdirs', new Automake::Location);
	$output_rules .= &file_contents ('tags',
  $output_rules .= file_contents ('texibuild',
  $output_rules .=  file_contents ('texinfos',
	  $output_rules .= file_contents ('texi-vers',
      $output_rules .= "install-binPROGRAMS: install-libLTLIBRARIES\n\n";
      $output_rules .= ($local . ': '
    $output_rules .= &makefile_wrap (@_);
	    $output_rules .= "\n";
	  $output_rules .= "\n";
		$output_rules .= (subst ('AMDEP_TRUE')
	$output_rules .= ("tags-recursive:\n"
	$output_rules .= "tags: TAGS\nTAGS:\n\n";
  # Output's dependencies are split in two sets:
# output_texinfo_build_rules ($SOURCE, $DEST, $INSRC, @DEPENDENCIES)
	output_texinfo_build_rules ($texi, $out_file, $insrc, @texi_deps);
  # Output the libtool compilation rules.
  # output the same rule twice); while the later need to be output for
            $output_trailer .= $_;
    $output_trailer = '';
	      $output_trailer .= $_;
	    $output_trailer .= $_;
    $output_trailer .= $comment;
	    $output_trailer .= $comment . $spacing;
	      $output_trailer .= $cond->subst_string;
	    $output_trailer .= $cond->subst_string;
    $output_trailer .= file_contents ('footer', new Automake::Location);
    $output_vars = '';
		$output_vars .= $comment;
  $output_vars .= $comments . $rules;
  $output_vars .= file_contents ('mans-vars',
    $output_vars .= $gen_copyright;
    $output_vars = ("# $in_file_name generated by automake "
      $output_vars .= "\n";
    "$output_vars$output_all$output_header$output_rules$output_trailer";
  $output_vars .= output_variables;
    $output_vars .= '# ' . subst ('configure_input') . "\n";
    $output_vars .= $vars;
                # override.
  # Override SHELL.  This is required on DJGPP so that system() uses
      $owner = VAR_AUTOMAKE;
package Automake;
package Language;
	      $package_version = $args[2];
	      $package_version_location = $where;
      $paragraph = '';
	      $paragraph .= "\n$_";
# paragraphs.
# @PARAGRAPHS
	  $parent_msg = "\nand is referred to from `$topparent'"
		   . $parent_msg . ";\nconfigure " .
parse_arguments;
# Parse command line.
# Parse the WARNINGS environment variable.
parse_WARNINGS;
			  partial => 1);
# PARTICULAR PURPOSE.
# passing `$(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS)
		       . '|([^/\$]' . $PATH_PATTERN . '))\s*(#.*)?' . "\$");
		$path = $relative_dir . "/" . $path if $relative_dir ne '.';
                $path =~ s/\$\(srcdir\)\///;
   'pdf'	  => 1,
   'pdf-am'          => 1,
	# People linking Java code to Fortran code deserve pain.
		# per-executable flag name.  But if this is simply a
      # performed.  Otherwise problems occur with Make implementations
  # Perform some sanity checks to help users get the right setup.
	    # perhaps treating the new extension as though it were a
# -*- perl -*-
## perl-brace-imaginary-offset: 0
## perl-brace-offset: 0
## perl-continued-brace-offset: 0
## perl-continued-statement-offset: 2
## perl-indent-level: 2
## perl-label-offset: -2
# perl-mode thinks of $' as the ${'} variable (instead of a $ followed
# Perl reimplementation by Tom Tromey <tromey@redhat.com>.
	# per-object flags, then it will be the name of the object.
			 'PFX'     => $pfx,
			pg pgs)); # grep 'new.*index' texinfo.tex
      #    .PHONY: myphonytarget
		     'pkgdata', 'lisp', 'noinst', 'check');
# pkg* directories from Automake.  Stored in a hash for fast member check.
			pkgincludedir pkglibdir sbin sharedstate
	    # Plo, TPlo will be added later as appropriate).  It is
  #  % pmake     # BSD make
  pop @cond_stack;
	    pop @res;
		   . " (possible typo)")
# precedence.  This is lame, but something has to have global
	  # prefered interface is LT_SUPPORTED_TAG, but it was
# @PREFIX
  @prefix = am_primary_prefixes ($primary, $can_dist, @prefix);
# Prefix $EXTENSION with $U if ansi2knr is in use.
					 $prefix =~ /EXTRA_/,
	# prefix here as we need it later.
			. "`${prefix}LDFLAGS");
	# prefix, use that prefix in our variables too.  This is for
# prefix `zar' qualifies iff:
  # Prepend $(distdir) to each directory given.
# prepended.
# &prepend_srcdir (@INPUTS)
# Prepend $(srcdir) or $(top_srcdir) to all @INPUTS.  The idea is that
# Preprocessed Fortran
# Preprocessed Fortran 77
# preprocessing capabilities, and then fall back on cpp (if cpp were
  # |     presence of intl/ if AM_GNU_GETTEXT([external]) is used. Both
  # Preserve dist_common for later.
  # pretty hacky.  We also don't output AMDEPBACKSLASH: it might
# pretty printed in the output file.
    &pretty_print_rule ("all-am:", "\t\t", @all);
      pretty_print_rule ('check-am:', "\t\t", @check);
	  &pretty_print_rule ("$condstr$_:", "$condstr\t", @uniq_deps);
 	&pretty_print_rule ('', '', @objects, ':', '$(ANSI2KNR)');
            &pretty_print_rule ($object . ':', "\t", @dep_list)
      pretty_print_rule ("\t\$(MAKE) \$(AM_MAKEFLAGS)", "\t  ",
  pretty_print_rule ("\t\$(MAKE) \$(AM_MAKEFLAGS)", "\t  ",
# Pretty-print something and append to output_rules.
      $pretty = VAR_SILENT;
	    $prev_state = IN_COMMENT;
	    $prev_state = IN_RULE_DEF;
	    $prev_state = IN_VAR_DEF;
				       PRIMARY     => $primary,
  print <<EOF;
  print $gm_file $output;
    print "\nFiles which are automatically distributed, if found:\n";
    print "\nReport bugs to <bug-automake\@gnu.org>.\n";
    print "Usage: $0 [OPTION] ... [Makefile]...
# Print usage information.
# Print version information
  # probably better, in case noinst_TEXINFOS is ever supported.
	# probably corner cases here that do not work properly.
      # Process buffered warnings.
  # Process buffered warnings.
# processing is done.  Each should handle defining rules for the
  prog_error "append_exeext ($macro)"
  prog_error 'empty @inputs'
	    prog_error ("found " . $lang->name .
  prog_error "handle_lib_objects: unexpected variable name `$varname'"
  prog_error "handle_lib_objects: `$varname' undefined"
      prog_error 'invalid entry in %clean_files'
	  prog_error 'invalid entry in %compile_clean_files';
		prog_error ($lang->name . " flags defined without compiler")
	    prog_error ($lang->name . " has automatic dependency tracking")
      prog_error ("$lfile in \@other_input_files\n"
    prog_error (macros_dump () . "variable defined before read_main_am_file")
		prog_error "`$obj' contains \$U, but `$source' doesn't."
  prog_error "push_dist_common run after handle_dist"
      prog_error ("unrequested trace `$macro'")
	  prog_error "$var not defined in condition TRUE"
				       PROGRAM  => $one_file,
		   . " program or\nlibrary has `$check' as canonic name"
                # project
   'ps'		  => 1,
   'ps-am'           => 1,
	'pure'   => "\$",
		   'pure' => 1,
	# `pure' is `1' or `'.  A `pure' language is one where, if
	# `pure' language, for instance C++ for Fortran 77, then we
      push (@ac_deps, '$(ACLOCAL_M4_SOURCES)');
      push (@actual_other_files, $local);
	  push @actual_other_files, $local if $local;
# Push a list of files onto dist_common.
    push (@all, "all-local")
      push (@all, 'all-multi');
	push (@all, basename ($out))
    push (@all, 'class' . $dir . '.stamp');
  push @all, '$(ELCFILES)';
    # Push all libobjs files onto de_ansi_files.  We actually only
  push (@all, '$(MANS)')
  push (@all, '$(' . $primary . ')')
	  push (@check, '$(' . $one_name . ')');
    push (@check_tests, 'check-DEJAGNU');
  push @check_tests, 'check-local'
      push (@check_tests, 'check-TESTS');
  push (@cond_stack, make_conditional_string ($negate, $cond));
		push @config, basename ($in)
	  push @config_h, basename ($out);
	      push @config_headers, $spec;
	  push @config_h, "\$(top_builddir)/$out";
	      push @config_links, $spec;
  push @configuredeps, '$(ACLOCAL_M4)' if -f 'aclocal.m4';
	  push @configure_deps, '$(top_srcdir)/' . $args[1]
	push (@ctag_deps, 'ctags-recursive');
		push (@dep_list,
                push (@dep_list, require_build_directory ($directory));
	  push @distclean_config, $cn_sans_dir, $stamp;
      &push_dist_common ('acconfig.h')
	  push_dist_common ('$(' . $canonical . '_TEXINFOS)');
	  &push_dist_common ($cfile);
	  &push_dist_common ("$config_aux_dir/$cfile")
      push_dist_common ($file);
	  push_dist_common ($file)
	  push_dist_common (@files);
      push_dist_common ($fullfile);
	&push_dist_common ($header)
	  push_dist_common ($i);
	    &push_dist_common ($object)
	      push_dist_common ('README-alpha');
		push_dist_common ("\$\(srcdir\)/$path");
		push_dist_common ("\$\(top_srcdir\)/$path");
	      &push_dist_common ($varname)
	  &push_dist_common ($varname)
	    push (@dist_rms, "\t-rm -f $item");
	push (@dist_sources, $default_source);
 	push @dist_sources, shadow_unconditionally ($varname, $where)
  push (@dist_targets, 'dist-hook')
  push (@dist_targets, 'dist-info');
	push @dont_override, 'LDFLAGS' if $lang->link;
  push @f, $c->value_as_list_recursive (inner_expand => 1) if $c;
  push @f, $d->value_as_list_recursive (inner_expand => 1) if $d;
	      push (@files, "$cn_sans_dir.bot");
	      push (@files, "$cn_sans_dir.top");
	      push (@files, '$(top_srcdir)/acconfig.h');
    # push files which exist in the current directory, and which are
  # Push here because PRIMARY might be configure time determined.
                push (@include_stack, "\$\(srcdir\)/$path");
                push (@include_stack, "\$\(top_srcdir\)/$path");
      push @infobase, $infobase;
      push (@info_deps_list, $out_file);
	  push @input_files, $input;
  push @inputs, "$output.in"
                push (@{$lang_specific_files{$lang->name}},
	push (@lcomm, $iter) unless $iter eq $last;
      push (@libtool_rms, "\t-rm -rf ${dir}.libs ${dir}_libs");
	push @local_headers, basename ($out)
    push @local_headers, '$(BUILT_SOURCES)'
	    push (@mostly_rms, "\t-rm -f $item");
	  push @new_input_files, $in;
	  push (@newinputs, '$(srcdir)/' . basename ($single));
	  push (@newinputs, '$(top_srcdir)/' . $single);
 	    push (@objects, $base . '_.lo')
 	    push (@objects, $base . '_.$(OBJEXT)');
	  push (@other_input_files, $_);
	    push (@res, '..');
      push @res, $i;
      push @res, $paragraph;
	      push (@result, $locvals);
        push (@result, $object);
      push @{$rms{$when}}, "\t-$rm\n";
	push (@sources, $default_source);
	push @sources, "\$($varname)";
	push (@tag_deps, 'tags-recursive');
      push (@texi_cleans, @cfiles);
      push (@texi_cleans, @clean_files);
	  push (@texi_deps, '$(' . $canonical . '_TEXINFOS)');
      push (@texi_deps, "$soutdir$vtexi") if $vtexi;
	  push (@used, '$(' . $one_name . ')');
	    # put in the subdirectory.
    # Put this at the beginning for the sake of non-GNU makes.  This
  # `PYTHON' is customarily used to mean the Python interpreter.
    (qw(ABOUT-GNU ABOUT-NLS AUTHORS BACKLOG COPYING COPYING.DOC COPYING.LIB
  qw(aclocal.m4 acconfig.h config.h.top config.h.bot configure
		    qw/INSTALL NEWS README AUTHORS ChangeLog/);
	   # rarely is a new dependency substituted into e.g. foo_LDADD
# Ratfor.
    &read_am_file ($amfile, new Automake::Location);
# &read_am_file ($AMFILE, $WHERE)
            &read_am_file ($path, $where);
# reading an Automake file (as opposed to the user's Makefile.am).
  # reading `Makefile'.  Hence the `Makefile' in the current directory
# Read main am file.
  read_main_am_file ($makefile_am);
# Read Makefile.am and set up %contents.  Simultaneously copy lines
    # Read user file, which might override some of our values.
	  # rebuilt, but shouldn't generate itself.
     # Recognize all other options (and their arguments) but do nothing.
# Record each file processed by make_paragraphs.
			      # Recover from removal of $header
# Recursively check all items in variables $VARIABLE as directories
  # recursive rules are enabled.
      # redefined in Makefile.am).
      #     (Refer to the Autoconf Manual, section "Limitation of
      # refrained from defining its own .PHONY target as it does
      $regen_aclocal = $line =~ 'generated automatically by aclocal';
     'REGEN-ACLOCAL-M4'    => $regen_aclocal_m4);
# ($REGEN, @DEPENDENCIES)
# regexes as double-quoted strings is far less readable.  So usually
# $REGEXP
#  $REGEX = '^regex_value' . "\$";
# Register a single language.
# register_language (%ATTRIBUTE)
register_language ('name' => 'asm',
register_language ('name' => 'c',
register_language ('name' => 'cxx',
register_language ('name' => 'f77',
register_language ('name' => 'fc',
register_language ('name' => 'header',
register_language ('name' => 'java',
register_language ('name' => 'lex',
register_language ('name' => 'lexxx',
register_language ('name' => 'objc',
register_language ('name' => 'ppf77',
register_language ('name' => 'ppfc',
register_language ('name' => 'ratfor',
register_language ('name' => 'yacc',
register_language ('name' => 'yaccxx',
	  register_suffix_rule (INTERNAL, $suffix, $dest);
  # Reinitialize libsources here.  This isn't really necessary,
# (Re)-Initialize per-Makefile.am variables.
  # Reject bad hooks.
  reject_rule ('install-info-local',
  reject_rule ('install-local',
    reject_rule ('.SUFFIXES',
      reject_rule ($utarg, "use `$x', not `$utarg'");
	  reject_var ($c, "`$c' defined but `dejagnu' not in "
  reject_var ('CONFIG_HEADER',
  reject_var 'html_TEXINFOS', "HTML generation not yet supported";
  reject_var 'MANS', "`MANS' is an anachronism; use `man_MANS'";
	  reject_var ("$name$xt", "use `$xname$xt', not `$name$xt'");
  reject_var $primary, "`$primary' is an anachronism"
  reject_var 'TEXINFOS', "`TEXINFOS' is an anachronism; use `info_TEXINFOS'";
	  reject_var $var, "`$var' should not be defined"
      reject_var ("${xlib}_LDADD",
      reject_var ($xlib . '_LDADD',
      reject_var ($xname . '_LIBADD',
  reject_var 'YACCFLAGS', "`YACCFLAGS' obsolete; use `YFLAGS' instead";
	  $relationship =~ /^([^:]+\S+) *: *(.*)$/som;
    $relative_dir = '';
  $relative_dir = '.';
	  $relative_dir = '.';
  $relative_dir = dirname ($makefile);
	  || ($relative_dir eq '.' && ! &is_make_dir ($config_h_dir)))
	      || ($relative_dir eq '.' && ! &is_make_dir ($fd)))
			. ($relative_dir eq '.' ? '' : '$(subdir)/')
# relative to this directory.
	  # Relax name checking for libtool modules.
# release is an alpha release.  We also allow a suffix which can be
  # relented.
      # Remember to cleanup .libs/ in this directory.
		      # Remember to discard next paragraphs
		    # Remove any libtool object in this directory.
	  # Remove the escaped new lines.
    # remove them with `make clean'.  If they are in srcdir they
                $renamed = 1;
  # Reorder @input_files so that the Makefile that distributes aux
	    # replaced by `_' and the source directory removed,
#   - replaces %?$TOKEN% with TRUE or FALSE.
#   - replaces %$TOKEN% with $VAL,
# &require_build_directory ($DIRECTORY)
		      require_build_directory ($directory . '/$(DEPDIR)'))
# &require_build_directory_maybe ($FILE)
                require_conf_file ("$am_file.am", FOREIGN, 'compile')
      require_conf_file ("$am_file.am", FOREIGN, 'compile');
	    require_conf_file ("$am_file.am", FOREIGN, 'depcomp');
      require_conf_file ($canonical_location, FOREIGN,
  require_conf_file ($configure_ac, FOREIGN, 'install-sh', 'missing');
  require_conf_file ($configure_ac, FOREIGN, 'ylwrap');
  require_conf_file ($elfiles[0][0], FOREIGN, 'elisp-comp');
      require_conf_file ($mkidpath, FOREIGN, 'mkinstalldirs');
  require_conf_file ($pyfiles[0][0], FOREIGN, 'py-compile');
    require_conf_file (rvar ($macro)->rdef ($cond)->location,
# &require_conf_file ($WHERE, $MYSTRICT, @FILES)
# &require_conf_file_with_macro ($COND, $MACRO, $MYSTRICT, @FILES)
	      require_conf_file_with_macro (TRUE, 'info_TEXINFOS', FOREIGN,
	  require_conf_file_with_macro (TRUE, 'info_TEXINFOS', FOREIGN,
  require_conf_file_with_macro (TRUE, 'LIBTOOL', FOREIGN, @libtool_files)
# required.
	       "required file `$i' not found")
	      $required_file_not_found{$fullfile} = 1;
		|| $required_targets{$_});
	   "`$require_extra' contains configure substitution,\n"
		  $require_extra = $one_name
  require_file ($ac_gettext_location, GNU, 'ABOUT-NLS');
      require_file ("$am_file.am", GNITS, 'THANKS');
      require_file ("$am_file.am", GNU,
      require_file ("$am_file.am", GNU, 'COPYING')
	    require_file ($ansi2knr_where, FOREIGN,
    require_file_internal ($where, $mystrict, $config_aux_dir, @files);
# &require_file_internal ($WHERE, $MYSTRICT, $DIRECTORY, @FILES)
    require_file_internal ($where, $mystrict, $relative_dir, @files);
    require_file ($macro->rdef ($cond)->location, $mystrict, @files);
# &require_file ($WHERE, $MYSTRICT, @FILES)
# &require_file_with_macro ($COND, $MACRO, $MYSTRICT, @FILES)
  require_file_with_macro ($cond, $var, FOREIGN, 'alloca.c');
	      require_file_with_macro ($cond, $var, FOREIGN, $iter);
	  require_file_with_macro ($cond, $var, FOREIGN, $iter);
	      require_file_with_macro (TRUE, 'info_TEXINFOS',
	  require_file_with_macro (TRUE, 'info_TEXINFOS', FOREIGN,
		# require it.
      #   requires some sanity checks.  For instance Automake should
	require_variables ("$am_file.am", $lang->Name . " source seen",
	require_variables ($ansi2knr_where, "option `ansi2knr' is used",
  require_variables ($elfiles[0][0], "Emacs Lisp sources seen", TRUE,
  require_variables ($pyfiles[0][0], "Python sources seen", TRUE, 'PYTHON');
  # Reset all the Makefile.am related variables.
		      reset_dir_cache ($dir);
    reset_local_duplicates ();
	$rest = $cols;
      @rest = ("$local.in",) unless @rest;
      # resulting info in this subdirectory.  If it is in the current
# Result is a list of the names of objects
# Result is a pair ($LINKER, $OBJVAR):
		$result_rules .= $rules;
		      $result_rules .= "$spacing$comment$condparagraph\n";
		$result_rules .= "$spacing$comment$_\n";
      # @result, skipping @substitutions@.
	  $result .= "s/\Q%?$token%\E/FALSE/gm;";
	  $result .= "s/\Q?!$token?\E//gm;s/^.*\Q?$token?\E.*\\n//gm;";
	  $result .= "s/\Q?$token?\E//gm;s/^.*\Q?!$token?\E.*\\n//gm;";
      $result .= "s/\Q%$token%\E/\Q$val\E/gm;";
	  $result .= "s/\Q%?$token%\E/TRUE/gm;";
      $result{$val} = $loc;
		$result_vars .= $vars;
  return
    return
       return ();
      return;
  return $_;
	      return;
	   return ();
		   return;
	return '';
    return 0
  return 0;
  return 0 if $$line =~ /$IGNORE_PATTERN/o;
      return 1;
    return 1
    return -1
	  return 1;
# Return 1 iff $LINE ends with a slash.
    return $a cmp $b;
# Return a configure-style substitution using the indicated text.
# Return a $(variable) that contains all possible values
    return ($comment, $result_vars, $result_rules);
    return "$comments$variables$rules";
  return $cond;
# Return contents of a file from $libdir/am, automatically skipping
    return $count > 0;
    return defined $make_dirs{$dir};
  return $directory_map{$directory} if exists $directory_map{$directory};
  return $dirstamp;
  return ($dirstamp, "$dpfx.dvi", "$dpfx.pdf", "$dpfx.ps", "$dpfx.html");
						return ($ext,) },
    return $extension;
      return FALSE;
# Return false if rule $NAME does not exist.  Otherwise,
  return if defined $language_scratch{'lex-done'};
  return if defined $language_scratch{'lex-yacc-done'};
  return if defined $language_scratch{'yacc-done'};
  return if ! @elfiles;
  return if ! @liblist;
  return if option 'no-dist';
  return if ! @proglist;
  return if ! @pyfiles;
    return if reject_var ($one_file . '_OBJECTS',
  return if ! $seen_gettext || $relative_dir ne '.';
    return if ! @sourcelist;
  return $input;
    return join ('/', @res) || '.';
    return LANG_IGNORE;
    return LANG_PROCESS;
    return LANG_SUBDIR;
    return &lang_sub_obj;
	return $l if defined $linkers{$l};
  return $$line =~ /\\$/;
    return 'LINK';
    return $linker;
  return makefile_wrap ("", "\t  ", @texi_cleans);
  return map { [$result{$_}->clone, $_] } @l;
  return $needlinker;
  return new Automake::Condition (@cond_stack);
  return @newinputs;
  # Return only those which are actually defined.
    return option 'subdir-objects' ? LANG_SUBDIR : LANG_PROCESS;
  return ($outfile, $vfile,
  return ($output, @inputs);
    return $r
    return $r;
  return ($regen_aclocal, @ac_deps);
	return require_build_directory ($directory);
  return @res;
    return @result;
  return $result;
# Return result is name of linker variable that must be used.
    return ($r, $newext);
  return $rule;
# Returns 1 if LIBOBJS seen, 0 otherwise.
  return $seen_libobjs;
# Returns list of [$location, $value] pairs, where
  return sort grep { var ($_ . '_' . $primary) } keys %valid;
  return $source_ext;
      return $stamp;
    return $string;
    return '@' . $text . '@';
# Return the number of files seen for a given language.  Knows about
       return @trans;
      return TRUE;
  return unless $cygnus;
  return unless %sections;
  return unless var ('LIBTOOL');
       return $val;
	   return $val;
  return "\$($varname)"
  return $xname;
# Rewrite a single assembly file.
# Rewrite a single C source file.
# Rewrite a single C++ source file.
# Rewrite a single Fortran 77 file.
# Rewrite a single Fortran file.
# Rewrite a single header file.
# Rewrite a single Java file.
# Rewrite a single lex file.
# Rewrite a single lex++ file.
# Rewrite a single Objective C file.
# Rewrite a single preprocessed Fortran 77 file.
# Rewrite a single preprocessed Fortran file.
# Rewrite a single ratfor file.
# Rewrite a single yacc file.
# Rewrite a single yacc++ file.
	    # Rewrite each occurrence of `AM_$flag' in the compile
	      rewrite_inputs_into_dependencies ($link, $file);
# rewrite_inputs_into_dependencies ($OUTPUT, @INPUTS)
	  $rewrite = "^" . quotemeta ($iter) . "\$";
	  $rewrite =~ s/\.c$/.P$myobjext/;
			. "@rewritten_inputs\n"
	    $r += $extension_seen{$ext}
    # right enough.
      $r = LANG_SUBDIR;
			      . " || rm -f \$\@\n");
      $rm ="test -z \"$file\" || $rm"
	$rows++;
		       ?  ($rows * $rest + ($rows - 1) * ($x - $rest))
		       : ($rows * $x));
      # `-rpath' option.
				       RPATH      => $rpath,
	      $rpath = $val;
						  RULE_AUTOMAKE, TRUE,
				    RULE_AUTOMAKE, TRUE, INTERNAL);
	  || rule $cfile)
	    # rule_define). So we go on and ignore the return value.
	'rule_file' => "\$",
		   'rule_file' => 'lex',
		   'rule_file' => 'yacc',
	    # rule into `${derived}_$flag' if it exists.
# rule of
	    && (rule $old_default_source
#     rules
      # rules for them).  In Automake 1.7 .info build rules have been
	    || rule '${srcdir}/' . $default_source)
		|| rule '$(srcdir)/' . $old_default_source
		|| rule '${srcdir}/' . $old_default_source
  # rule, with separate dependencies, as in
		     "run automake again.\n");
  # runs, but it should be safe to drop the `if DJGPP' guard if
  rvar ('RECURSIVE_TARGETS')->rdef (TRUE)->{'pretty'} = VAR_SORTED; # Gross!
	rvar ($var)->rdef ($cond)->set_seen;
      s,^(:?\./+)*,,;
  s/^ //;
  s/ $//;
		s/^#?/#/;
# Same but wrt Makefile.in.
	    # same format they were input.  However, POSIX compliant
      s/-am$// or next;
        # Sanity checks.
  $/ = $saved_dollar_slash;
	$saw_bk = check_trailing_slash ($where, $_);
	$saw_bk = $new_saw_bk;
      &saw_extension ($&);
	  &saw_extension ($&);
  &saw_extension ('c');
	  &saw_extension ('.c');
            &saw_extension ($extension);
# &scan_aclocal_m4
	  scan_autoconf_config_files ($where, $args[1]);
# &scan_autoconf_config_files ($WHERE, $CONFIG-FILES)
# &scan_autoconf_files ()
scan_autoconf_files;
  # &scan_autoconf_files for details.
  scan_autoconf_traces ($configure_ac);
# &scan_autoconf_traces ($FILENAME)
  # Scan EXTRA_DIST to see if we need to distribute anything from a
# Scan it (and possibly `aclocal.m4') for interesting things.
# &scan_texinfo_file ($FILENAME)
	scan_texinfo_file ("$relative_dir/$texi")
		s/^/$cond->subst_string/gme;
# searching for their precise names in the source.
      # search occurs.
		  $sections{$1} = 1;
				       SECTION => $section);
	      $sections{$section} = 1;
  # sections used in man_MANS.
		# `sed's.
			      . "| sed 's/^# \\([0-9]\\)/#line \\1/' "
# See if any _SOURCES variable were misspelled.
  # See if --version or --help is used.  We want to process these before
# See if we want to push this file onto dist_common.  This function
	    # seems safest.
	  $seen_automake_version = 1;
	      $seen_canonical = AC_CANONICAL_BUILD;
	      $seen_canonical = AC_CANONICAL_HOST;
	  $seen_canonical = AC_CANONICAL_TARGET;
	  $seen_cc_c_o = $where;
	    $seen_files{$obj} = 1;
	  $seen_gettext_external = grep ($_ eq 'external', @args);
	  $seen_gettext = $where;
	  $seen_init_automake = $where;
	      $seen_libobjs = 1;
	   $seen_libobjs = 1;
	      $seen_libobjs = &handle_lib_objects ($xname, 'LDADD');
	  $seen_libobjs = &handle_lib_objects ($xname, $xname . '_LDADD');
		 => $seen_maint_mode ? subst ('MAINTAINER_MODE_TRUE') : '',
	  $seen_maint_mode = $where;
	  $seen_multilib = $where;
    # See the comment above for $HEADER.
      &{$self->_finish} ();
	&{$self->_target_hook} (@_);
	  # Separate relationship from optional actions: the first
	  # Separate targets from dependencies: the first colon.
  # Set a variable for the dirstamp basename.
  # Set input and output files if not specified by user.
	    # Set location of depcomp.
  # set of generic rules.  Because in-source builds are more usual, we
      set_option ('check-news', INTERNAL);
  set_option ('no-dependencies', $cygnus);
  set_option ('no-dist', $cygnus);
  set_option ('no-installinfo', $cygnus);
      set_option ('readme-alpha', INTERNAL);
      set_option ('std-options', INTERNAL);
  set_seen 'AM_LDFLAGS';
  set_seen 'CONFIG_STATUS_DEPENDENCIES';
  set_seen 'CONFIGURE_DEPENDENCIES';
	set_seen 'TAGS_DEPENDENCIES';
      set_seen ($xlib . '_DEPENDENCIES');
      set_seen ($xlib . '_LDFLAGS');
      set_seen ($xname . '_DEPENDENCIES');
      set_seen ($xname . '_LDFLAGS');
  set_strictness ('foreign');
  set_strictness ('gnu');
  # Set the defaults.
# Set to 1 if this run will create the Makefile.in that distribute
# Set up for Cygnus mode.
### Setup "GNU" style for perl-mode and cperl-mode.
# Set up the compile suite.
# Several keys can share the same stamp files if they are equivalent
# shadow_unconditionally ($varname, $where)
		 'SHAR'        => !! option 'dist-shar',
			      "\$(SHELL) $am_config_aux_dir/depcomp",
		       "\$(SHELL) $am_config_aux_dir/mkinstalldirs", INTERNAL);
			. '$(SHELL) ./config.status '
  $_ = shift;
      shift (@args);
	$_ = shift @files;
            # should be applied.  This means this particular language
  # should be auto-generated.  This case probably isn't very
	# should be removed by maintainer-clean.  So that's what we
    # should be removed by maintainer-clean.  So that's what we do.
    # shouldn't be touched.  However, we can't determine this
            # should return one of the LANG_* constants.  It could
	      . "should verify that $configure_ac invokes AM_INIT_AUTOMAKE,"
    "s/$IGNORE_PATTERN//gm;"
                    # silly overkill -- nobody should have
# simple formula: Return value is LANG_SUBDIR if the resulting object
      # simplification is done, i.e., for dependencies which are in
  # since it's tempting to use it as an AC_CONFIG_AUX_DIR.
  # since we currently assume there is only one configure.ac.  But
		sinclude => 1,
      # Singular form of $PRIMARY.
      #   |  situation, but it is # not new, hence the user has less
         skip_ac_subst => 1);
     skip_ac_subst => 1);
      # Skip and diagnose malformed calls.
	  # Skip configure substitutions.
      # Skip destinations that contain shell variables.
	       # Skip -dlopen and -dlpreopen; these are explicitly allowed
	   # Skip -lfoo and -Ldir silently; these are explicitly allowed.
          # Skip missing `sinclude'd files.
            # Skip this entry if we were asked not to process it.
	$_ =~ s/\@MAINT\@//g
    . 's/\n{3,}/\n\n/g';
  s/\\\n//somg;
				 . " so $fullfile gets distributed.");
	    # Some C compilers don't support -c -o.  Use it only if really
	  # Some modified versions of Autoconf don't use
  # Some of the following extensions are always created, no matter
      # Some people do AC_CONFIG_LINKS($computed).  We only handle
# Some regular expressions.  One reason to put them here is that it
                # some situations.  So we provide _SHORTNAME to
# something that involves real language objects.  For instance yacc
	# something unusual then we do generate the C code.  There are
	    # soon after the merge of the user-dep-gen-branch so it
  # Sort sections so output is deterministic.
      # so that it is always OK to depend on $NAME.
						       ? '$<' : $source),
			     SOURCE    => '$<',
		    $source_ = basename ($source_);
				 # source case because in the other case we
	 && $source_ext ne $obj
      $source_ext = $suffix_rules->{$source_ext}{$obj}[0];
		# source file, the base name of the output file, and
				  SOURCE           => ($generic
				  SOURCE_INFO      => ($generic_info
				  SOURCE_REAL      => $source,
    @sources = ();
					     '_SOURCES', '_OBJECTS',
					    '_SOURCES', '_OBJECTS',
			     SOURCE    => $source,
				     SOURCE    => $source_,
				  SOURCE_SUFFIX    => $ssfx,
		    $source =~ s/\$U//g;
# Sources which go in the distribution.
# SOURCE - the source Texinfo file
  # source tree, and some built in the build tree.  The rules are
      # source tree.  This was an obstacle to the support of
	  # so we skip absolute filenames here.
	    $spacing = '';
 	    $spacing = "\n";
	    $spacing = "\n";
	    $spacing = "\n" unless $blank;
# Special-case ALLOCA and LIBOBJS substitutions in _LDADD or _LIBADD variables.
# special cases we care about.  FIXME: this is hideous.  We need
		      [@specifics, %transform]);
      # specified.
						split (' ', $args[1])));
  # Split `a.texi' into `a' and `.texi'.
  # Split at unescaped new lines.
# &split_config_file_spec ($SPEC)
        # Split file name into base and extension.
		       . '|(\$\(srcdir\)/' . $PATH_PATTERN . ')'
  $ssfx ||= "";
  s/\s+/ /g;
      s/\$\(srcdir\)/./;
	      $stamp_dir = '';
		  $stamp_dir = '';
		  $stamp_dir = $config_h_dir . '/';
			   STAMP            => "$stamp");
					  STAMPVTI => "${soutdir}stamp-$vti",
# Standard directories from the GNU Coding Standards, and additional
	  # Standard directories must be explicitly allowed.
  # "standard" sections, and then looking for any additional
  # Start off as gnu.
    # statically, and the GNU rules say that yacc/lex output files
	# statically, and the GNU rules say that yacc/lex output files
	    # Stick a single white line before the incoming macro or rule.
 	    # Stick comments before the incoming macro or rule.
	    # Stick comments before the incoming macro or rule.
	    # Stick comments before the incoming macro or rule.  Make
 	    # Stick empty line before the incoming macro or rule.
      s/\$\(top_srcdir\)/$topsrcdir/;
     STRICTNESS            => global_option 'cygnus'
	      # strictness level.
# $STRING
# string to define the variable unconditionally.  The third argument
    $string =~ tr/A-Za-z0-9_\@/_/c;
      # Strip any $(EXEEXT) suffix the user might have added, or this
      # Strip any leading `./'.
	  $strip_subdir = 0;
struct (# Short name of the language (c, f77...).
# Study $CONFIG-FILES which is the first argument to AC_CONFIG_FILES
     sub {
    (sub
sub am_install_var
sub am_primary_prefixes ($$@)
sub append_exeext ($)
sub backname ($)
sub canonicalize
sub check_canonical_spelling
sub check_cygnus
sub check_directories_in_var ($)
sub check_directory ($$)
sub check_gnits_standards
sub check_gnu_standards
sub check_libobjs_sources
sub check_trailing_slash ($\$)
sub check_typos ()
sub cond_stack_else ($$$)
sub cond_stack_endif ($$$)
sub cond_stack_if ($$$)
sub count_files_for_language
sub define_compiler_variable ($)
sub define_configure_variable ($)
sub define_files_variable ($\@$$)
sub define_files_variable ($\@$$);
sub define_linker_variable ($)
sub define_objects_from_sources ($$$$$$$%)
sub define_pretty_variable ($$$@)
sub define_standard_variables
sub define_variable ($$$)
	    # `sub/$(DEPDIR)/'.  The value of this directory
sub derive_suffix ($$)
            # subdir.
		# subdir build then we still want to use the AM_ flag
		# (subdircond2.test and subdircond3.test will fail.)
      # subdirectories, not in enclosing directories.  Hence, in
# subdirectories which need to be removed.  This only holds files
	    # subdirectory. (In the current directory they get erased
	    # subdirectory objects too.  Later, on 1999-11-22,
  # subdir.  If so, add it to the list.  I didn't want to do this
# subdir if the source file is.  In this case the file name cannot
	    # subdir-objects is set, otherwise you have to know
	    # subdir-objects.  Nobody remembers why, but this occured
	    # subdir-objects option was added on 1999-04-11 it was
			     SUBDIROBJ => !! option 'subdir-objects');
				  '$(SUBDIRS)');
		 'SUBDIRS'      => !! var ('SUBDIRS'),
      # subdir which does not have a Makefile, then we distribute it
sub do_check_merge_target ()
sub err_ac ($;%)
sub err_am ($;%)
sub file_contents ($$%)
sub file_contents_internal ($$$%)
sub file_contents_internal ($$$%);
sub finish ($)
sub flatten
	    # sub/foo.c we can't be as concise as in the first example.
sub for_dist_common
sub generate_makefile ($$)
sub get_object_extension ($)
sub handle_all ($)
sub handle_ALLOCA ($$$)
sub handle_clean ($)
sub handle_compile ()
sub handle_configure ($$$@)
sub handle_data
sub handle_dist ()
sub handle_emacs_lisp
sub handle_factored_dependencies
sub handle_footer
sub handle_gettext
sub handle_headers
sub handle_install ()
sub handle_java
sub handle_languages
sub handle_lib_objects
sub handle_LIBOBJS ($$$)
sub handle_libraries
sub handle_libtool
sub handle_ltlibraries
sub handle_man_pages
sub handle_minor_options
sub handle_multilib
sub handle_options
sub handle_programs
sub handle_python
sub handle_scripts
sub handle_single_transform ($$$$$%)
sub handle_source_transform ($$$$%)
sub handle_subdirs ()
sub handle_tags
sub handle_tests
sub handle_tests_dejagnu
sub handle_texinfo ()
sub handle_texinfo_helper ($)
sub initialize_per_input ()
sub is_make_dir
sub lang_asm_rewrite
sub lang_c_finish
sub lang_c_rewrite
sub lang_cxx_rewrite
sub lang_f77_rewrite
sub lang_fc_rewrite
sub lang_header_rewrite
sub lang_java_rewrite
sub lang_lex_finish
sub lang_lex_rewrite
sub lang_lex_target_hook
sub lang_lexxx_rewrite
sub lang_objc_rewrite
sub lang_ppf77_rewrite
sub lang_ppfc_rewrite
sub lang_ratfor_rewrite
sub lang_sub_obj
sub lang_yacc_finish
sub lang_yacc_rewrite
sub lang_yacc_target_hook
sub lang_yaccxx_rewrite
sub locate_am (@)
sub locate_aux_dir ()
sub make_conditional_string ($$)
sub make_paragraphs ($%)
sub maybe_push_required_file
sub msg_ac ($$;%)
sub msg_am ($$;%)
sub output_texinfo_build_rules ($$$@)
sub parse_arguments ()
sub prepend_srcdir (@)
sub pretty_print_rule
sub push_dist_common
		= &$subr ($directory, $base, $extension);
sub read_am_file ($$)
sub read_main_am_file
sub register_language (%)
sub register_language (%);
sub require_build_directory ($)
sub require_build_directory_maybe ($)
sub require_conf_file ($$@)
sub require_conf_file_with_macro ($$$@)
sub require_file ($$@)
sub require_file_internal ($$$@)
sub require_file_with_macro ($$$@)
sub resolve_linker
sub rewrite_inputs_into_dependencies ($@)
# Subroutine for &handle_dist: sort files to dist.
# Subroutine for &handle_factored_dependencies to let `.PHONY' be last.
sub saw_extension
sub saw_sources_p
sub scan_aclocal_m4 ()
sub scan_autoconf_config_files ($$)
sub scan_autoconf_files ()
sub scan_autoconf_traces ($)
sub scan_texinfo_file ($)
# subsequent arguments are possible installation locations.
sub shadow_unconditionally ($$)
sub split_config_file_spec ($)
				  . subst ('am__include')
				  . subst ('am__quote')
       # @substitution@.
# substitution by the same name.
		   "substitutions are not allowed in _SOURCES variables");
# subst ($TEXT)
  # Substutions for distdit.am
sub subst ($)
sub target_cmp
sub target_hook ($$$$%)
sub transform (%)
sub usage ()
sub user_phony_rule ($)
sub var_SUFFIXES_trigger ($$)
sub version ()
sub yacc_lex_finish_helper
  #    (such as the Makefile.am itself, or any Makefile fragment
	# suffixes, and this lets the user have some control.  Push
			     ? $suffixes->value_as_list_recursive : ());
	    # suffix rule.
  # suffix rules and are appropriate when $source and $dest do not lie
    # suffix rule was learned), don't bother with the C stuff.  But if
	  $suggestion =~ s|^\./||g;
# suitable for file_contents which:
	    # Support for deansified files in subdirectories is ugly
      # support non-distributed .info files at some point, we
			      $suppress = 0;
			  $suppress = 0;
		      $suppress = 1;
	    # sure a blank line precedes the first block of comments.
    # sure it is the same on exit.  This lets us conditionally include
            # sure the subdir exists at build time.
  # Swallow the file and apply the COMMAND.
      #   |  syntactic sugar here, and you want
			sysconf));
	    # systems are not required to support lines longer than
			. "\t"
	|| @tag_deps)
					 TAGSDIRS  => "@tag_deps",
# &target_cmp ($A, $B)
	'_target_hook' => "\$");
		   '_target_hook' => \&lang_lex_target_hook);
		   '_target_hook' => \&lang_yacc_target_hook);
  "^($TARGET_PATTERN(?:(?:\\\\\n|\\s)+$TARGET_PATTERN)*) *:([^=].*|)\$";
		 'TARGET'   => ($seen_canonical >= AC_CANONICAL_TARGET),
		  # targets instead of one by one.
   # targets will run them anyway...
		    . "\t\@: > $dirstamp\n");
			  . "\tdone\n");
  #    .texi:
      $texiclean = handle_texinfo_helper ($info_texinfos);
# $TEXICLEANS
				   TEXICLEAN     => $texiclean,
      @texi_deps = ();
      $texinfodir = $am_config_aux_dir;
      $texinfodir = '$(srcdir)';
      $texinfodir = ('$(srcdir)/'
      $texinfodir = '$(top_srcdir)/../texinfo';
				   'texinfo.tex');
					'texinfo.tex');
					  TEXI     => $texi,
# than once.
		# that are generated will be truncated by broken
	# that breaks when using parallel makes.  Instead we handle
      # that calling has_conditional_contents on SUBDIRS caused
			  # that distribute the aux dir files.
  # that --help and --version are not present.
      # that rewrite and simplify rules whose dependencies are found in a
  # that won't always be the case.
# the appropriate type has been seen.
      # The check target must depend on the local equivalent of
                # the `compile' program to deal with compilers
  #  * the contents of the output is different (this can happen
	    # the current directory, we also need an explicit rule.
      # the current implementation of has_conditional_contents,
      # the current .info file must be built in the source tree
# The current support for preprocessing Fortran 77 just involves
      # The default auxiliary directory is the first
	# The default is 'depend2'.
	# The default source for libfoo.la is libfoo.c, but for
		 "the default source for `$unxformed' has been changed "
		# the dependency.
      # the DEST:SRC form.
      # the distribution should depend upon the configure options
		# the extension for the object file.
      # the `external' option.
	  # The file might be absent, but if it can be built it's ok.
      # the file's directory does not have a Makefile, and we are
# the files in config_aux_dir.
# the file that any target requiring this directory should be made
	# The file to use when generating rules for this language.
    # The following flags are used to track rules spanning across
	      # The following will distribute $file as a side-effect when
  # The former are output only once (this is not really apparent here,
# the Free Software Foundation; either version 2, or (at your option)
      #   * The GNU Coding Standards require these files to be built
      # the header here.  Otherwise, if we're at the topmost
  # | The idea is:
# the input am file.
  # The JAVA variable is used as the name of the Java interpreter.
# The keys are the files created by these macros.
# The lang_X_finish functions are called after all source file
	    # The latter case deserves a historical note.  When the
      # the latter case we use a full path to make sure no VPATH
	       # the linker.)
	  # the link's directory does not have a Makefile, and we are
	      # the Makefile, don't print anything.  This allows files
  # The Makefile.in that distribute the aux files is the one in
  # them to disable the error in require_file_internal.
# the name of the file output by config.status.
# The name of the Makefile currently being processed.
			      . '; then echo $(srcdir)/' . $ansfile
	    # then the inference will work.
	# Then we glom them all together.  So we can't use the null
		# the ordinary .o.
	# the output remains consistent.  However, $(SUFFIXES) is
	# the product given the input extensions.
  # The PYTHON variable is used as the name of the Python interpreter.
  # There are a few install-related variables that you should not define.
# there associated location (the place here their parent variables were
      # there is no Makefile in bar/.
	      # there is no point defining an helper variable.
  # The remaining definitions are only required when a dist target is used.
	# The rest of the loop is done once per language.
	# the sake of BSD Make.
		# the same directory.  (_.c is always in $objdir.)
# These are used when keeping track of whether an object can be built
# the second argument is the primary variable (e.g. HEADERS), and all
# These constants are returned by lang_*_rewrite functions.
  #    These do not change between each Makefile.am
      #   these files are not distributed they are always rebuilt
  # These files get removed by "make distclean".
     # These long options (--Werror and --Wno-error) for backward
  # These must be run after all the sources are scanned.  They
# These two variables are used when generating each Makefile.in.
	    # the size of the generated Makefile.ins (libgcj, with
                    # the _SOURCES variable.  But this is really
			  # the top level Makefile.  Furthermore Automake
     # The transform code to run on each filename.
      # The user defined TEXINFO_TEX so assume he knows what he is
  # the user know what (s)he does, and pretend we will distribute
	      # The user probably knows, but generally speaking automake
    # the user set them with `+=' in Makefile.am.
  # the user's SHELL (which may be something like tcsh).
      # The variable containing all file to distribute.
# The work here needs to be performed as a side-effect of the
# They hold the Makefile.in until it is ready to be printed.
  # |     they should both be disabled if no po/ directory is found at
	# they should not be overridden in the Makefile...
	# they shouldn't be touched.  However, we can't determine this
	# things explicitly.
	    # This can be confusing: it can be used as-is when
	    # this directory.
	  # This does a bit too much work.  But we need it to
# This function is used to find a path from a user-specified suffix $EXT
# This functions returns the first *.in file for which a *.am exists.
	    # (this happens when the subdir-objects option is used),
# This hash maps object file names onto an integer value representing
# This hash maps object file names onto their corresponding source
# This holds a list of directories which we must create at `dist'
	# This holds the `aggregate context' of the file we are
# This holds the set of included files.
# This is a helper for both lex and yacc.
# This is a lex helper which is called whenever we have decided to
# This is a list of all targets to run during "make dist".
	# This is a subroutine which is called whenever we finally
# This is a yacc helper which is called whenever we have decided to
# This is called by Automake::Variable::define() when SUFFIXES
	    # this is fairly compact, and will call ansi2knr depending
This is free software; see the source for copying conditions.  There is NO
# this is how GNU Make does it; see the `GNU Make Manual, Edition 0.51
# This is just a convenience function that can be used to determine
	    # This is not used by depend2.am.
	    # This isn't an error; it is probably a continued rule.
	    # This isn't an error; it is probably some tokens which
            # This is probably the result of a direct suffix rule.
# This is random scratch space for the language finish functions.
# This is set when `handle_dist' has finished.  Once this happens,
# This is the conditional stack, updated on if/else/endif, and
# This is the name of the redirect `all' target to use.
	  # This is the ":" syntax of AC_OUTPUT.
# This is to provide a little extra flexibility in those cases which
	  # This is ugly, but it is our historical practice.
	    # This is why we'll now transform $rule_file twice
# This keeps track of the directories for which we've already
# This keeps track of which extensions we've seen (that we care
      # This kind of VPATH rewriting seems hard to cancel.  The
# This Makefile.in is free software; the Free Software Foundation
# This maps extensions onto language names.
# This maps languages names onto objects.
	      # This means we have an alpha release.  See
  # This must come after most other rules.
  # This next isn't strictly needed now -- the places that look here
		$this_obj_ext = $nonansi_obj;
		$this_obj_ext = $obj;
		$this_obj_ext = $source_extension;
  # This one can be overridden by users.
# This pattern recognizes a Gnits version id and sets $1 if the
# This program is distributed in the hope that it will be useful,
# This program is free software; you can redistribute it and/or modify
	# This records whether we've seen a derived source file (e.g.
    # This supports the strange variable tricks we are about to play.
	  # This will also distribute all inputs.
# This will pass through anything not of the prescribed form.
	    # thought that inferences rules would work for
# time.  This is used in some strange scenarios involving weird
			  . "\tlist=\'\$(SUBDIRS)\'; for subdir in \$\$list; do \\\n"
				. "\t\$(MAKE) \$(AM_MAKEFLAGS)")
	     . "\t" . '$(MAKE) $(AM_MAKEFLAGS) ' . "$_-hook\n");
		    . "\t\@\$(mkdir_p) $directory\n"
  # (tmp is only created if an @macro is used and a certain e-TeX
	    ("\t\@\$(NORMAL_INSTALL)\n"
      # to all possible directories, and use it.  If DIST_SUBDIRS is
      # to append dependencies.  This would not work if Automake
  # =========  to Automake-preselection in autoconf/lib/autom4te.in.
      #       to be updated in the source tree
		 . "to `$default_source'.\n(Using `$old_default_source' for "
# to delete.
	# to fail because some subdirectory failed.
      #   |  to learn.
                # to make sure that the appropriate subdir of the
# to $OBJ or to some other suffix we recognize internally, e.g. `cc'.
      #   tools or information found on the build host.  Because
	   "too many conditionals closed in include file")
		    : "too many conditionals closed in include file"))
			. '$(top_builddir)/config.status '
		 'TOPDIR'       => backname ($relative_dir),
	# topdir is where ansi2knr should be.
		 'TOPDIR_P'     => $relative_dir eq '.',
  # |     top level.
#   $TOPPARENT is the name of the _SOURCES variable which is being processed
#   $TOPPARENT is the _SOURCES variable being processed.
      # to prefix it with `$(srcdir)' so that no VPATH search is
    '$(top_srcdir)' . ($config_aux_dir eq '.' ? "" : "/$config_aux_dir");
			  '$(top_srcdir)/' . $configure_ac);
		       . '((\$\(top_srcdir\)/' . $PATH_PATTERN . ')'
	# to remove them with `make clean'.  If they are in srcdir
	    # to rewrite Makefile.in into Makefile).  Moreover nobody
  # to set it.
	  # to use @setfilename...)
  # to worry about handling a particular object more than once.
			tp tps
  $tracefh->close;
  $traces .= join (' ',
			      $trailer = "; error while making link: $!";
			  $trailer = "\n    error while copying";
# trailing `/'.
		 %transform)
			      %transform);
			     %transform,
				     %transform,
				   %transform,
					    %transform);
					 %transform);
     # Transformation function, run on each filename.
#   %TRANSFORM contains extras arguments to pass to file_contents
    . transform ('CYGNUS'      => !! option 'cygnus',
  $transform{'DISTCHECK-HOOK'} = !! rule 'distcheck-hook';
  $transform{'DISTDIRS'} = join (' ', sort keys %rewritten);
  $transform{'DIST-TARGETS'} = join (' ', @dist_targets);
    %transformed_files = ();
  $transformed_files{$file} = 1;
#   transformed name of object being built, or empty string if no object
#   %TRANSFORM extra arguments to pass to file_contents when producing
  $transform{'GETTEXT'} = $seen_gettext && !$seen_gettext_external;
					%transform, %lang);
        # Transform .o or $o file into .P file (for automatic
# &transform (%PAIRS)
  transform_variable_recursively
      #     tree.  Consequently, it was impossible to perform a VPATH
      #     tree, even if such files were up to date in the source
      #   * Tru64, OpenBSD, and FreeBSD (not NetBSD) Make do not behave
							      TRUE)))
			   TRUE, "ANSI2KNR", "U");
# TRUE if missing standard files should be installed.
# True if we need `LINK' defined.  This is a hack.
# TRUE if we should always generate Makefile.in.
# TRUE if we should always update files that we know about.
# TRUE if we should copy missing files; otherwise symlink if possible.
# TRUE if we've seen AC_ENABLE_MULTILIB.
# TRUE if we've seen AM_AUTOMAKE_VERSION.
# TRUE if we've seen AM_PROG_CC_C_O
			   TRUE, @{$lang->config_vars});
		 . "Try `$0 --help' for more information.");
      # Try to find new or unused indexes.
			  . "\t  test \"\$\$subdir\" = . || (cd \$\$subdir"
    # Turn sources into objects.  We use a while loop like this
					$type, $cond, $val, $comment, $where,
              $type = 'module';
# Uncategorized errors about configure.ac.
# Uncategorized errors about the current Makefile.am.
     undef,
  undef $/;
	  @undefined_conds =
# under consideration.
# under which the value should be defined; this should be the empty
   'uninstall'    => 1,
   'uninstall-am' => 1,
		     'uninstall-exec-local', 'uninstall-exec-hook')
	      uniq_scope => US_GLOBAL)
	     uniq ($subdirs->value_as_list_recursive));
	unless $archive_defined;
    unless $cond =~ /^TRUE|FALSE$/;
	    unless $def;
	  unless defined $done{$languages{'c'}};
	      unless defined $lang->compile;
    unless defined $option{'ansi'};
    unless defined $option{'autodep'};
    unless defined $option{'flags'};
    unless defined $option{'linker'};
    unless defined $option{'output_extensions'};
		unless $depbase eq '';
	unless (@{$dependencies{$_}}
	unless $directory eq '.' || $directory eq '';
    unless -d "$relative_dir/$dir";
	    unless $_ eq '.';
	unless $_ eq '.';
	    unless exists $output_files{$i} || -f $i;
	unless exists $rms{$when};
	unless exists $traced{$macro};
      unless $get_object_extension_was_run;
	    unless $here =~ m,^(?:\w:)?[\\/],;
    unless @inputs;
	    unless is_make_dir (dirname ($file));
		unless $last_var_value =~ /\s$/;
	unless $license;
    unless $macro =~ /_PROGRAMS$/;
		  unless option 'no-dependencies';
 	  unless (option ('no-dist') || $prefix =~ /^nodist_/);
    unless option 'no-installinfo';
    unless option 'no-installman';
	  unless $prefix =~ /EXTRA_/;
    unless $primary eq 'JAVA' || $primary eq 'PYTHON';
	unless $seen_cc_c_o;
	    unless $seen_maint_mode;
    unless $subdirs;
	    # (Unless the user asks 'subdir-objects'.)  This is important
	      unless ($topparent =~ /^(?:nobase_)?nodist_/);
    unless $var;
    unless $varname =~ /^(.*)(?:LIB|LD)ADD$/;
	    unless $var->rdef ($cond)->seen;
		  unlink ($fullfile);
		      unlink ($fullfile) if -f $fullfile;
      unlink ($out_file)
	    unshift (@all, '$(ANSI2KNR)');
    unshift (@all, basename ($makefile));
      unshift (@all, '$(INFO_DEPS)');
	    unshift (@files, $object);
  unshift @INC, (split ':', $perllibdir);
	  unshift (@lines, $_);
	  unshift @new_input_files, $in;
		    unshift @specifics, 'AM';
		    unshift @specifics, $derived;
	   "unterminated conditionals: @cond_stack" :
      # Until Automake 1.6.3, .info files were built in the
  # unusual gettext setups.
  # up above.
  # Upate the $suffix_rule map.
  # Update the pattern of known extensions.
# up into multiple functions.
    $~ = "USAGE_FORMAT";
# Usage is: am_install_var (OPTION..., file, HOW, where...)
				      . "use `AM_$flag' instead.");
  # Use a separator unlikely to be used, not `:', the default, which
 	# Use a sneaky little hack to make it print nicely.
use Automake::ChannelDefs;
use Automake::Channels;
use Automake::Condition qw/TRUE FALSE/;
use Automake::Config;
use Automake::Configure_ac;
use Automake::DisjConditions;
use Automake::FileUtils;
use Automake::General;
use Automake::Location;
use Automake::Options;
use Automake::Rule;
use Automake::RuleDef;
use Automake::Struct;
use Automake::VarDef;
use Automake::Variable;
use Automake::Version;
use Automake::Wrap 'makefile_wrap';
use Automake::XFile;
use Carp;
use constant AC_CANONICAL_BUILD  => 1;
use constant AC_CANONICAL_HOST   => 2;
use constant AC_CANONICAL_TARGET => 3;
use constant CLEAN            => 1;
use constant COMPILE_LIBTOOL  => 1;
use constant COMPILE_ORDINARY => 2;
use constant DIST_CLEAN       => 2;
    use constant IN_COMMENT => 2;
    use constant IN_RULE_DEF => 1;
use constant INTERNAL => new Automake::Location;
    use constant IN_VAR_DEF => 0;
use constant LANG_IGNORE  => 0;
use constant LANG_PROCESS => 1;
use constant LANG_SUBDIR  => 2;
use constant MAINTAINER_CLEAN => 3;
use constant MOSTLY_CLEAN     => 0;
      # used.
	# used by users.  @MAINT@ is an anachronism now.
     'USE-DEPS'            => global_option 'no-dependencies'
	$used_pfx{$xpfx} = 1
# used to build Condition objects.
# used to extend the version number with a "fork" identifier.
# Used to store a set of linkers needed to generate the sources currently
	    # used under different conditions.
use File::Basename;
use File::Spec;
    # useful to sometimes distribute scripts verbatim.  This happens
  # use generic rules in this case and fall back to "specific" rules
  use Getopt::Long;
	       "use `install-data-local' or `install-exec-local', "
      # Use $(install_sh), not $(mkdir_p) because the latter requires
  # use $(mkinstalldirs)).
			     # Use $myext and not `.o' here, in case
# Usenet-compliant shar file (in these, README must be first).
	  # User didn't define prog_LDADD override.  So do it.
      # Use require_file so that any existingscript gets updated
# user_phony_rule ($NAME)
  # user put a source used in AC_OUTPUT into a subdir.
# user rules to come after our generated stuff.
		   # Users can set AM_ASFLAGS to includes DEFS, INCLUDES,
use strict;
      # Use the location of the currently processed variable.
      # Use the location of the currently processed variable as context.
  # use variables defined by &handle_libraries, &handle_ltlibraries,
		 "use variable `SUFFIXES', not target `.SUFFIXES'");
# Use $WHERE as a location in the diagnostic, if any.
		  "use `${xlib}_LIBADD', not `${xlib}_LDADD'");
		  "use `${xname}_LDADD', not `${xname}_LIBADD'");
	      . "(using aclocal).");
	    # Using inference rules for subdir-objects has been tested
#!/usr/bin/perl -w
	      $val = '';
	       $val !~ /^-dl(?:pre)?open$/ &&
       $val .= '$(EXEEXT)' unless $val =~ /(?:\$\(EXEEXT\)$|^[@]\w+[@]$)/;
	      $valid{"$base$dist$X"} = 1;
  $valid{'EXTRA'} = 0;
	      $val = ('-rpath $(' . $instdirs{$onelib}{$rcond} . 'dir)');
# Value of `$(SOURCES)', used by tags.am.
# values are `FILE:LINE' strings which are used by error message
# $value's are the values in all where_HOW variable, and $location
# Values for AC_CANONICAL_*
# Values indicating when something should be cleaned.
# value tells when this should happen (MOSTLY_CLEAN, DIST_CLEAN, etc.)
					VAR_ASIS)
		    . (var ('BUILT_SOURCES')
	|| var ('ETAGS_ARGS')
	    # variable definition.  Otherwise, keep the variable as it
  variable_delete 'DIST_COMMON';
	    # variable expansion; generating many separate includes
## Variables filled during files scanning.  ##
  # variables, it is an error to actually define the primary.  We
## Variables related to the options.  ##
## Variables reset by &initialize_per_input.  ##
  # Variables used by distdir.am and tags.am.
# variable.  The first argument is the name of the .am file to munge,
# variable "zardir" is defined, then "zar_PROGRAMS" becomes valid.
#   $VAR is the name of the _SOURCES variable
#   $VAR is the name of the variable that the source filenames come from
    var ('LDADD') && &handle_lib_objects ('', 'LDADD');
		      ((var ('LIBTOOL') ?
		$var_look = VAR_ASIS;
	    $var_look = VAR_PRETTY if length ($last_var_value) >= 1000;
      $varname = "am__${varname}_DIST";
# $varname can take.
		   "`" . $var->name . "' includes configure substitution `$_'"
	      $varname = '$(' . $varname . ')';
	  $varname = '$(' . $varname . ')';
    ($varname, $xname . '_DEPENDENCIES', 'am__DEPENDENCIES',
    ($var, $objvar, 'am__objects', $nodefine, $where,
      $var->requires_variables ('library used', 'RANLIB');
      $var->requires_variables ('Libtool library used', 'LIBTOOL');
  $var->requires_variables ("\@${lt}ALLOCA\@ used", $lt . 'ALLOCA');
  $var->requires_variables ("\@${lt}LIBOBJS\@ used", $lt . 'LIBOBJS')
		 $var->requires_variables ("`$varname' is used", "${X}dir"))
			. (var ('SUBDIRS') ? 'all-recursive' : 'all-am')
		    . (var ('SUBDIRS') ? 'check-recursive' : 'check-am')
# var_SUFFIXES_trigger ($TYPE, $VALUE)
      $var->traverse_recursively
  $var->traverse_recursively
			       $var->value_as_list_recursive (cond_filter =>
  verb "creating $out_file";
      verb "not writing $out_file because of earlier errors";
      verb "$out_file unchanged";
    verb "reading $amfile";
  verb "reading $file";
  verb "reading $filename";
  verb "reading $traces";
# Verify that the file must exist in $DIRECTORY, or install it.
# &version ()
  # --version always returns 0 per GNU standards.
		   . $VERSION . " from $am_file_name.\n");
		 "version mismatch.  This is Automake $VERSION,\n" .
# version of the command when using libtool.
		   "version `$package_version' doesn't follow " .
      --version            print version number, then exit
	  $versions{$vtexi} = $texi;
     'version' => \&version,
      # "vers*.texi".
            # very unpopular.
	  $vfile = $1;
# $VFILE       - name of the version.texi file used (undef if none).
	      $vlist{$varname} = 1;
	  $vlist{$varname} = 1;
      # VPATH location.  Here is an example with OSF1/Tru64 Make.
      #   VPATH = sub
			vr vrs
					  VTEXI    => "$soutdir$vtexi",
					  VTI      => $vti,
     'v|verbose' 	=> sub { setup_channel 'verb', silent => 0; },
  -v, --verbose            verbosely list files processed
	  # wants.
      #   want to distribute .texi files, but do not want to
  # |     warnings apply only to the usual layout of packages, therefore
  # warnings for this file.  So hold any warning issued before
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# Was get_object_extension run?
	# We also want to make sure that built sources are built
	# We also want to notice Makefile.in's.
	  # We always define this because that is what `distclean'
    # We always include `.'.  This isn't strictly correct.
			     # we are actually building a new source
	  # we are already there, and since the targets are built without
	# We are going to define _OBJECTS variables using the prefix.
      # We are not processing a particular condition, so pick the first
  # We cannot use a suffix rule to build info files with an empty
  # We can output two kinds of rules: the "generic" rules use Make
# We can't always associate a location to a variable or a rule,
	    # we can't use $< -- some makes only define $< during a
  # we check for these files there as well.
                # We choose the name `DERIVED_OBJECT' to ensure
  # We disable these tests when po/ doesn't exist in order not to disallow
	  # We distribute files that are in this directory.
    # We do discard the output of predefined variables, handled below.
	      # We do not need the result, just the side-effect.
      # we don't call has_conditional_contents for now reason.
    # We don't need more than two consecutive new-lines.
# We don't want to emit the rule twice, and want to reuse it
		# We do this because a continued comment like
# We do this to avoid having the substitutions directly in automake.in;
	    # we generate rules similar to:
  # We handle nodist_ for uniformity.  man pages aren't distributed
			  # We have added the file but could not push it
	  # We have a file that automake should cause to be
	  # We have a file that automake should generate.
                # We have a per-executable flag in effect for this
  # we have processed AUTOMAKE_OPTIONS.
  # We have to check DIST_COMMON for extra directories in case the
	    # we have to create foo_.c in the current directory.
  # We have to update in the following situations.
# We keep track of which objects need special (per-executable)
   # Well, actually they are sort of required: the -recursive
      # We'll add $(EXEEXT) back later anyway.
  # We make sure that `all:' is the first target.
  # We might copy elements from $configure_dist_common to
	    # We might see a given object twice, for instance if it is
        # We must generate a rule for the object if it requires its own flags.
# We must scan aclocal.m4 because there might be AC_SUBSTs and such there.
	    # We _need_ `-o' for per object rules.
# We need the name of the input file, to do proper remaking rules.
	# We need to make sure config.h is built before we recurse.
	    # We need to support files in the srcdir and in the build
	  # We number the stamp-vti files.  This is doable since the
	  # We only have to do this at the topmost level though.
      # We only have to do this at the topmost level though.  This
		# We preserve the `\' because otherwise the long lines
# We put README first because it then becomes easier to make a
      # We reject libraries which are installed in several places
     'Werror'           => sub { parse_warnings 'W', 'error'; },
    # We save the conditional stack on entry, and then check to make
# we should no longer push on dist_common.
      # We skip files that aren't in this directory.  However, if
	  # We skip links that aren't in this directory.  However, if
      #   we switch to a new syntax:
	  # We use it to detect whether tags are supported.  Our
  # we want to distribute it here if we are doing `.'.  Ugly!
    # We want to predefine as many variables as possible.  This lets
  # We will keep only one location per object.
# we will write:
# when a subdir object should be used.
  # when in Cygnus mode; instead we defined TEXINFO_TEX explicitly
# when its defined by Automake.  We use INTERNAL in this case.
#     when producing explicit rules
# when the file should be removed.
# when we do that they are sometimes removed and this causes confusion
	    # When we output an inference rule like `.c.o:' we
		   $where);
				       $where,
# Where AM_GNU_GETTEXT appears.
# Where AM_INIT_AUTOMAKE is called;
# Where AM_MAINTAINER_MODE appears.
                # where `-c -o' does not work.
#   $WHERE context into which this definition is done
# Where each AC_CONFIG_FILES/AC_OUTPUT/AC_CONFIG_LINK/AC_CONFIG_HEADER appears.
	    $where->pop_context;
		$where->pop_context;
		$where->push_context ("`$file' included from here");
	    $where->push_context ("`$path' included from here");
      $where->push_context ("while processing library `$onelib'");
      $where->push_context ("while processing Libtool library `$onelib'");
      $where->push_context ("while processing `$one_name'");
      $where->push_context ("while processing program `$one_file'");
        $where->set ("$amfile:$.");
        $where->set ($file);
    $where->set ($file);
      $where->set (INTERNAL->get);
      #   where .texi files are built at make time, probably using
				    '', $where, VAR_PRETTY);
# Where version is defined.
# Whether AM_GNU_GETTEXT([external]) is used.
# Whether AM_GNU_GETTEXT has been seen in configure.ac.
  # whether indexes are used or not.  Other (like cps, fns, ... pgs)
# whether this object has been built via ordinary compilation or
# which are created by compilations.  The value in the hash indicates
  # which confuse Solaris make.  (See the Autoconf manual for
      # which do things like
      #   which syntax we should use to indicate that .info files should
# which the ANSI source file appears; the directory must have a
    while ($_)
    while ($_ = $am_file->getline)
  while (@args)
  while (defined ($_ = shift @lines))
	  while (defined ($_ = shift @lines)
	  while (defined ($_ = shift @lines) && $_ =~ /^\t/)
  while (! $extension_map{$source_ext}
  while (@input_files)
  while (my ($token, $val) = each %pairs)
    while (scalar @files > 0)
  while ($_ = $texi->getline)
  while ($_ = $tracefh->getline)
# will be computed by &locate_aux_dir and can be set using
	    # will be computed by the rule.
      # will confuse &handle_source_transform and &check_canonical_spelling.
  # |     will likely have multiple po/ directories in subpackages.
  # will not be read.
      # will require only making the entries in %dist_dirs under the
	# will set DIST_SOURCE.)
		      # Windows Perl will hang if we try to delete a
      #   |  with a bit of magic to have bar.info represent the whole
		   # With assembly we still use the C linker.
	    # with GNU make, Solaris make, Ultrix make, BSD make,
# with or without modifications, as long as this notice is preserved.
      # with other overridden targets.
		       . "without\nsources or `ETAGS_ARGS'"))
	  # with the second one, so that the common case looks nice.
     'Wno-error'        => sub { parse_warnings 'W', 'no-error'; },
	  # wonder why we don't do this before searching for the
#     work done to determine the linker will be).
# Works with non strictly increasing paths, i.e., `src/../lib' => `..'.
  #  World
	    # would really write such long lines by hand since it is
# Writing singled-quoted-$-terminated regexes is a pain because
Written by Tom Tromey <tromey\@redhat.com>.
  -W, --warnings=CATEGORY  report the warnings falling in CATEGORY
     'W|warnings:s'     => \&parse_warnings,
		       "`${X}dir' is not a legitimate directory " .
				       XLIBRARY => $xlib,
	  $xlink = $linker ? $linker : 'LINK';
	  $xlink = $xlib . '_LINK';
				       XLINK    => $xlink,
				       XLINK      => $xlink,
	  $xlink = $xname . '_LINK';
				       XLTLIBRARY => $xlib,
     ! $xname, INTERNAL,
					 $xpfx . $one_file . '_OBJECTS',
				       XPROGRAM => $xname,
      $x =~ s/(data|exec)-//;
# Yacc (C & C++).
  &yacc_lex_finish_helper
	# yacc output).
	|| ($YFLAGSvar && $YFLAGSvar->variable_value =~ /$DASH_D_PATTERN/o))
		     "your implementation of AM_INIT_AUTOMAKE comes from " .
# You should have received a copy of the GNU General Public License
				      . "you should not override it;\n"
		     "You should run aclocal to create this file, then\n" .
# * `zardir' is a variable.
# * `zar_PRIMARY' is a variable.
		 'ZIP'         => !! option 'dist-zip',

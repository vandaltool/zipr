           ;;
        -a|--auto-servernum) SERVERNUM=$(find_free_servernum); AUTONUM="yes" ;;
-a        --auto-servernum          try to get a free server number, starting at
add :$SERVERNUM $XAUTHPROTO $MCOOKIE
    # anyway.
ARGS=$(getopt --options +ae:f:hn:lp:s:w: \
AUTHFILE=
    AUTHFILE=$(tempfile -n "$XVFB_RUN_TMPDIR/Xauthority")
                                    before running COMMAND (default: $STARTWAIT)
#!/bin/sh
        break
# Build-Depends on xvfb, xbase-clients, and xfonts-base.
    case "$1" in
    cat <<EOF
clean_up() {
# Clean up files
        continue
    # Create empty file to avoid xauth warning
                                    (default: xauth command's default)
                                    (default: ./.Xauthority)
                                    (default: "$XVFBARGS")
    DEFCOLUMNS=80
DEFCOLUMNS=$(stty size 2>/dev/null | awk '{print $2}') || true
# directory to house one.
# Display a message, wrapping lines at the terminal width.
# Display an error message.
# Display a usage message.
# displaying messages to the user.  This is used only as a fallback in the event
DISPLAY=:$SERVERNUM XAUTHORITY=$AUTHFILE "$@" 2>&1
    done
    echo $i
    echo "$PROGNAME: $*" | fmt -t -w ${COLUMNS:-$DEFCOLUMNS}
        -e|--error-file) ERRORFILE="$2"; shift ;;
-e FILE   --error-file=FILE         file used to store xauth errors and Xvfb
    elif [ -n "$AUTONUM" ]; then
error () {
ERRORFILE=/dev/null
    error "internal error; getopt exited with status $GETOPT_STATUS"
        *) error "internal error; getopt permitted \"$1\" unexpectedly"
            error "problem while cleaning up temporary directory"
    error "xauth command not found"
    error "Xvfb failed to start" >&2
    esac
eval set -- "$ARGS"
    exit 0
    exit 1
    exit 2
    exit 3
            exit 5
           exit 6
    exit 6
exit $RETVAL
        -f|--auth-file) AUTHFILE="$2"; shift ;;
-f FILE   --auth-file=FILE          file used to store auth cookie
        fi
# Find a free server number by looking at .X*-lock files in /tmp.
find_free_servernum() {
GETOPT_STATUS=$?
-h        --help                    display this usage message and exit
        -h|--help) SHOWHELP="yes" ;;
# $Id: xvfb-run 2027 2004-11-16 14:54:16Z branden $
# If anyone is using this to build a Debian package, make sure the package
    if [ -e "$AUTHFILE" ]; then
if ! expr "$DEFCOLUMNS" : "[[:digit:]]\+$" >/dev/null 2>&1; then
if [ $GETOPT_STATUS -ne 0 ]; then
    if kill -0 $XVFBPID 2>/dev/null; then
    if [ -n "$*" ]; then
    if [ -n "$XVFB_RUN_TMPDIR" ]; then
        if ! rm -r "$XVFB_RUN_TMPDIR"; then
if [ "$SHOWHELP" ]; then
# If the user did not specify an X authorization file to use, set up a temporary
if ! which xauth >/dev/null; then
if [ -z "$AUTHFILE" ]; then
if [ -z "$*" ]; then
        i=$(($i + 1))
    i=$SERVERNUM
# Kill Xvfb now that the command has exited.
kill $XVFBPID
LISTENTCP="-nolisten tcp"
-l        --listen-tcp              enable TCP port listening in the X server
        -l|--listen-tcp) LISTENTCP="" ;;
    #local i
       --long auto-servernum,error-file:,auth-file:,help,server-num:,listen-tcp,xauth-protocol:,server-args:,wait: \
MCOOKIE=$(mcookie)
message () {
    message "error: $*" >&2
        message "usage error: $*"
       --name "$PROGNAME" -- "$@")
-n NUM    --server-num=NUM          server number to use (default: $SERVERNUM)
                                    "-nolisten tcp") to pass to the Xvfb server
        -n|--server-num) SERVERNUM="$2"; shift ;;
Options:
                                    output (default: $ERRORFILE)
# Parse the command line.
-p PROTO  --xauth-protocol=PROTO    X authority protocol name to use
PROGNAME=xvfb-run
        -p|--xauth-protocol) XAUTHPROTO="$2"; shift ;;
# Query the terminal to establish a default number of columns to use for
# Return the executed command's exit status.
RETVAL=$?
Run COMMAND (usually an X client) in a virtual X server environment.
    # Sadly, the "local" keyword is not POSIX.  Leave the next line commented in
-s ARGS   --server-args=ARGS        arguments (other than server number and
# script is running, and this cannot, only being calculated once.)
                                    --server-num
SERVERNUM=99
        SERVERNUM=$(find_free_servernum)
        SERVERNUM=$((SERVERNUM + 1))
    shift
        --) shift; break ;;
    sleep "$STARTWAIT"
        -s|--server-args) XVFBARGS="$2"; shift ;;
# Start the command and save its exit status.
STARTWAIT=3
# Start Xvfb.
# the COLUMNS variable is not set.  ($COLUMNS can react to SIGWINCH while the
        # The display is in use so try another one (if '-a' was specified).
    # the hope Debian Policy eventually changes to allow it in /bin/sh scripts
# This script starts an instance of Xvfb, the "fake" X server, runs a command
# tidy up after ourselves
trap clean_up EXIT
tries=10
    tries=$(( $tries - 1 ))
    usage
usage () {
    usage "need a command to run" >&2
Usage: $PROGNAME [OPTION ...] COMMAND
# value of the command becomes the return value of this script, except in cases
# vim:set ai et sts=4 sw=4 tw=80:
-w DELAY  --wait=DELAY              delay in seconds to wait for Xvfb to start
# where this script encounters an error.
while :; do
    while [ -f /tmp/.X$i-lock ]; do
while [ $tries -gt 0 ]; do
# with that server available, and kills the X server when done.  The return
        -w|--wait) STARTWAIT="$2"; shift ;;
        XAUTHORITY=$AUTHFILE xauth remove ":$SERVERNUM" >>"$ERRORFILE" 2>&1
    XAUTHORITY=$AUTHFILE xauth source - << EOF >>"$ERRORFILE" 2>&1
    XAUTHORITY=$AUTHFILE Xvfb ":$SERVERNUM" $XVFBARGS $LISTENTCP >>"$ERRORFILE" 2>&1 &
XAUTHPROTO=.
XVFBARGS="-screen 0 640x480x8"
    XVFBPID=$!
    XVFB_RUN_TMPDIR="$(mktemp -d -t $PROGNAME.XXXXXX)"

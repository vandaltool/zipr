                
                        1,
                align_type = d.mq.get('align-type', ALIGN_TYPE_NONE)
# along with this program; if not, write to the Free Software
                app.exec_()
            app = QApplication(sys.argv)
# (at your option) any later version.
# Author: Don Welch, Naga Samrat Chowdary Narla,
                                      bothPensRequired)
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# (c) Copyright 2003-2009 Hewlett-Packard Development Company, L.P.
# -*- coding: utf-8 -*-
    controls = maint.align10and11and14Controls(pattern, align_type)
                d.close()
            d.close()
            d = device.Device(device_uri, printer_name)
def aioUI1():
def aioUI2():
def bothPensRequired():
def colorAdj(line, maximum):
def enterAlignmentNumber(letter, hortvert, colors, line_count, maximum):
def enterPaperEdge(maximum):
def invalidPen():
def invalidPen2():
def type10and11and14Align(pattern, align_type):
    device_uri = mod.getDeviceUri(device_uri, printer_name,
            dlg = AlignDialog(None, device_uri)
            dlg.show()
__doc__ = "Cartridge alignment utility for HPLIP supported inkjet printers. (Note: Not all printers require the use of this utility)."
                d.open()
                elif align_type == ALIGN_TYPE_8XX:
                elif align_type == ALIGN_TYPE_AIO:
                elif align_type == ALIGN_TYPE_AUTO:
                elif align_type == ALIGN_TYPE_DESKJET_450:
                elif align_type  == ALIGN_TYPE_LBOW:
                elif align_type == ALIGN_TYPE_LEDM:
                elif align_type == ALIGN_TYPE_LEDM_MANUAL:
                elif align_type == ALIGN_TYPE_LIDIL_0_5_4:
                elif align_type == ALIGN_TYPE_LIDIL_AIO:
                elif align_type == ALIGN_TYPE_LIDIL_DJ_D1600:
                elif align_type == ALIGN_TYPE_OJ_PRO:
                elif align_type in (ALIGN_TYPE_9XX,ALIGN_TYPE_9XX_NO_EDGE_ALIGN):
                elif align_type in (ALIGN_TYPE_LIDIL_0_3_8, ALIGN_TYPE_LIDIL_0_4_3, ALIGN_TYPE_LIDIL_VIP):
                else:
            else:
        else:
    else: # GUI_MODE (qt4)
                                      enterPaperEdge, update_spinner)
            except Error:
        except Error, e:
        except ImportError:
            except KeyboardInterrupt:
except KeyboardInterrupt:
         filter={'align-type': (operator.ne, ALIGN_TYPE_NONE)})
        #finally:
        finally:
    for line in s_controls:
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
from base.g import *
from base import device, status, utils, maint, tui, module
from prnt import cups
            from PyQt4.QtGui import QApplication
            from ui4.aligndialog import AlignDialog
# GNU General Public License for more details.
                                'hp-pqdiag'])
        if 1:
                if align_type == ALIGN_TYPE_UNSUPPORTED:
    if choice == 'q':
            if d.isIdleAndNoError():
    if mode == GUI_MODE:
    if mode == INTERACTIVE_MODE:
        if not controls[line][0]:
            if not ok:
    if not ok:
        if not utils.canEnterGUIMode4():
import getopt
import operator
import os
import re
import sys
                        (INTERACTIVE_MODE, GUI_MODE), (UI_TOOLKIT_QT4,))
                                     invalidPen, colorAdj)
# it under the terms of the GNU General Public License as published by
                        (letter, maximum),
                % (line, controls[line][1]),  1, controls[line][1])
                        (line, maximum),
                log.debug("Alignment type=%d" % align_type)
                log.debug("Starting GUI loop...")
                    log.error("Alignment through HPLIP not supported for this printer. Please use the printer's front panel to perform cartrdige alignment.")
    log.error("Cannot perform alignment with 0 or 1 cartridges installed.\nPlease install both cartridges and try again.")
                log.error("Device is busy or in an error state. Please check device and try again.")
                    log.error("Invalid alignment type.")
    log.error("Invalid cartridge(s) installed. Cannot align with only the photo cartridge installed.\nPlease install other cartridges and try again.")
    log.error("Invalid cartridge(s) installed.\nPlease install valid cartridges and try again.")
            log.error("%s -u/--gui requires Qt4 GUI support. Entering interactive mode." % __mod__)
            log.error("Unable to load Qt4 support. Is it installed?")
            log.error("Unable to open device: %s" % e.msg)
    log.error("User exit")
    log.info("")
log.info("")
    log.info("1. Place the alignment page, with the printed side facing down, ")
    log.info("2. Press the Enter or Scan button on the printer.")
    log.info('3. "Alignment Complete" will be displayed when the process is finished (on some models).')
log.info('Done.')
    log.info("   in the scanner.")
    log.info(log.bold("Follow these steps to complete the alignment:"))
    log.info("\np\t\tPrint the alignment page and continue.")
    log.info("n\t\tDo Not print the alignment page (you already have one) and continue.")
    log.info("q\t\tQuit.\n")
    log.info("To perform alignment, you will need the alignment page that is automatically\nprinted after you install a print cartridge.")
                    maint.AlignType10(d, tui.load_paper_prompt, type10and11and14Align)
                    maint.AlignType11(d, tui.load_paper_prompt, type10and11and14Align, invalidPen2)
                    maint.AlignType12(d, tui.load_paper_prompt)
                    maint.AlignType13(d, tui.load_paper_prompt, tui.load_scanner_for_align_prompt)
                    maint.AlignType14(d, tui.load_paper_prompt, type10and11and14Align, invalidPen2)
                    maint.AlignType15(d, tui.load_paper_prompt, aioUI2)
                    maint.AlignType16(d, tui.load_paper_prompt, enterAlignmentNumber)
                    maint.AlignType1PML(d, tui.load_paper_prompt)
                    maint.AlignType2(d, tui.load_paper_prompt, enterAlignmentNumber,
                    maint.AlignType3(d, tui.load_paper_prompt, enterAlignmentNumber,
                    maint.AlignType6(d, aioUI1, aioUI2, tui.load_paper_prompt)
                    maint.AlignType8(d, tui.load_paper_prompt, enterAlignmentNumber)
                    maint.AlignxBow(d, align_type, tui.load_paper_prompt, enterAlignmentNumber, enterPaperEdge,
                        % maximum,
                        maximum)
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            mode = INTERACTIVE_MODE
__mod__ = 'hp-align'
    mod = module.Module(__mod__, __title__, __version__, __doc__, None,
        mod.parseStdOpts()
    mod.setUsage(module.USAGE_FLAG_DEVICE_ARGS,
    ok, choice = tui.enter_choice("Choice (p=print page*, n=do not print page, q=quit) ? ", ['p', 'n', 'q'], 'p')
    ok, value = tui.enter_range("Enter numbered arrow that is best aligned with the paper edge (1-%d): "
    ok, value = tui.enter_range("Enter the numbered box on line %s that is best color matched to the background color (1-%d): " %
            ok, value = tui.enter_range("Enter the numbered box on line %s where the inner lines best line up with the outer lines (1-%d): "
    ok, value = tui.enter_range("From the printed Alignment page, Enter the best aligned value for line %s (1-%d): " %
    opts, device_uri, printer_name, mode, ui_toolkit, lang = \
    return choice == 'y'
    return ok, value
    return values
    s_controls = controls.keys()
    s_controls.sort()
                 see_also_list=['hp-clean', 'hp-colorcal', 'hp-linefeedcal',
# Std Lib
                sys.exit(0)
            sys.exit(0)
        sys.exit(0)
                sys.exit(1)
            sys.exit(1)
# the Free Software Foundation; either version 2 of the License, or
# This program is distributed in the hope that it will be useful,
# This program is free software; you can redistribute it and/or modify
__title__ = 'Printer Cartridge Alignment Utility'
            try:
        #try:
        try:
#!/usr/bin/python
    values = []
            values.append(0)
            values.append(value)
__version__ = '5.0'
# You should have received a copy of the GNU General Public License

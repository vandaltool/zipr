# a is also passed to the C compiler.
#   Are we verbose?
	$arg = shift;
# arguments into @argv.	 This is needed because, apparently, UNIX
	(@ARGV > 0) || die "$0 : Missing argument to \"$_\"\n";
	(@ARGV > 0) || die "$0: Missing argument to \"$_\"\n";
@ARGV = @argv;
#         Backslashes at the end of comment lines confuse cpp...
    $basefile = "";
	$basefile = $_;
	$basefile = $ffile;
# Basically a system call, except that we want to be verbose if
# C compilation step.
    $cfile = "";
	$cfile = $_;
	    $cfile = ($ffile =~ /([^\/]*\.).$/)[0] . "c";
	    $cfile = "$tmpdir/fort77-$$-$seq.c";
	&check_file_read($ffile);
	    close(CFILE);
	    close(F2C);
	    close(FFILE);
		close(PFILE);
    close(TESTFILE);
	@command = ("gcc",@cppopts,@copts);
	$compile_only = $_;
# compilers acceppt options anywhere on the command line.
	$cpp++;
$cpp = 0;
$cppcmd = "/lib/cpp -traditional";
	$debug ++;
$debug = 0;
$debugcmd = "";
				 $debugcmd . " > $cfile")/256;
	    $debugcmd = ' | /usr/bin/perl -p -e \'s|^(#line.*)""|$1"'
	    die "$0: aborting compilation\n";
	die "$0: Illegal option: $_\n";
die "$0: No input files specified\n" unless @ARGV;
# Does somebody want to keep the C files around?
# Does somebody want to run the preprocessor?
    else {
    elsif (/^-[bV]./ ) {
    elsif (/^-[bV]$/ ) {
    elsif (/\.[cCisSm]$/ || /\.cc$/ || /\.cxx$/) {
	elsif ((!$compile_only) || ($compile_only eq '-c')) {
	elsif ($compile_only eq '-S') {
    elsif (/^-cpp$/) {
    elsif (/^-[cS]$/) {
    elsif (/^-D/) {
    elsif (/^-f$/) {
    elsif (/^-[fWUAm]/ || /^-[Ex]$/ || /^-pipe$/ ) {
    elsif (/^-g$/) {
    elsif (/^-I./) {
    elsif (/^-I$/) {
    elsif (/^-k$/) {
    elsif (/^-[lL]$/) {
    elsif (/^-[lL]./ || /^-nostartfiles$/ || /^-static$/ || /^-shared$/ ||
    elsif (/^-Nn[0-9]+$/) {
    elsif (/^-o(.*)/) {
    elsif (/^-o$/) {
    elsif (/^-O/) {
    elsif (/^-[Og]/ || /^-p$/ || /^-pg$/) {
    elsif (/^-Ps?/) {
    elsif (/^-v$/) {
    elsif (/^-w$/) {
    elsif (/-W[ca],/) {
    elsif (/^-Wf,/) {
    elsif (/-Wl,/) {
    elsif (/-Wp,/) {
exit if $compile_only;
exit $retcode;
	/^-ext$/ || /^-!bs$/ || /^-W[1-9][0-9]*$/ || /^-w8$/ || /^-w66$/ ||
	$extract_prototypes ++;
    $ffile = "";
	$ffile = $_;
		. $ffile . '"|\' '
# First, let's see wether somebody wants to adhere to the C standard
    # First, the f2c options.
# fort77 (compiler driver) script for f2c
# For use with gcc
# gcc only options
    if (!/^-/) {
	    if ($_) {
    if (@args == 1) {
    if ($cfile) {
	if ($compile_only && $output) {
if ($compile_only && $output && (@ARGV>1)) {
	if ($cpp || ($ffile =~ /\.F$/)) {
    if (/^-[CUuaEhRrz]$/ || /^-I[24]$/ || /^-onetrip$/ || /^-![clPR]$/ ||
	if ($debug) {
		   ($_ !~ '#ifdef P_R_O_T_O_T_Y_P_E_S\n')) {
	if ($extract_prototypes) {
    if (/\.[fF]$/ || (/\.[fF][oO][rR]$/)) {
    if ($ffile) {
	if ($ffile && !$keep_c) {
if (@gener_lfiles) {
	if ($keep_c) {
	if ($lfile) {
	if (/\.P$/) {
	if ($retcode) {
	if ($retcode && !$keep_c) {
if ($verbose) {
    if ($verbose > 1) {
# Includes and outputs...
# in Fortran.
		join(' ',@cppopts) . " | /usr/bin/f2c " .
		    join(' ',@fopts) . $debugcmd . " > $cfile";
				 join (" ",@fopts). " < ". $ffile .
	$keep_c ++;
    $lfile = "";
	    $lfile = "";
	    $lfile = ($basefile =~ /([^\/\.]*\.).*$/)[0] . "o";
# Linker only options
    local (@args) = @_;
    local ($name) = @_;
    local ($str) = @_;
    local(@tmp) = split(/,/,$str);
# Loop over all options; pull all options from @ARGV and put all
# necessary.
	$nnflag = $_;
$nnflag = '-Nn802';
	    open(CFILE, "$cfile") || die ("$0: Cannot open $cfile\n");
	    open(F2C,$pipe);
	    open (FFILE, "$ffile") || die ("$0: Cannot open $ffile: $_\n");
		open(PFILE, ">$pfile") || die ("$0: Cannot open $pfile\n");
    open (TESTFILE,"$name") || die "Cannot open $name: $!\n";
# Optimization
	$optimize ++;
# Options for both C compiler and linker
    $output = "";
	$output = $1;
	$output = shift;
# Parse options
	    $pfile = ($basefile =~ /([^\/]*\.).$/)[0] . "P";
# p for (separate) preprocessing, c for C compiler, l for linker.
	    $pipe =  "| $cppcmd " . 
		print $_;
		print F2C $_;
		    print PFILE $line;
    print STDERR "$0: fort77 Version $version\n";
	print STDERR "$0: Running \"$args[0]\"\n" if $verbose;
	print STDERR "$0: Running \"",join('" "',@args),"\"\n" if $verbose;
	    print STDERR "$0: Running \"$pipe\"" if $verbose;
	    print STDERR "$0: unlinking $cfile\n" if $verbose;
    print STDERR "$0: unlinking ",join(',',@gener_lfiles),"\n" if $verbose;
# Prototype flags for f2c
	    push(@argv, $_);
	push(@command,$cfile);
	    push(@command, '-c', '-o', $lfile);
	    push(@command,'-o',$output,$compile_only);
	    push(@command, '-S', '-o', $sfile);
	push(@copts, $_);
	push(@copts, $_, $arg);
push(@copts,'-ffast-math') if $optimize && $fast_math;
	push(@copts, &parsewx($_));
	push(@copts,"-v");
	push(@cppopts, $_);
push(@cppopts,@includes);
	push(@cppopts, &parsewx($_));
	push(@cppopts,"-v");
	push (@fopts, $_);
	push(@fopts, $_);
push(@fopts,@includes,"-I.");
push(@fopts,$nnflag);
	push(@fopts, &parsewx($_));
push(@fopts, @pfiles);
	    push (@gener_lfiles, $lfile); push(@lfiles, $lfile);
	push(@includes, $_);
	push(@includes, "-I".shift);
	push(@lfiles, $_);
    push (@lfiles, $lfile) if $lfile;
	push(@lopts, $_);
	push(@lopts, $_, $arg);
	push(@lopts,&parsewx($_));
	push(@lopts,"-v");
push (@output, "-o", $output) if $output;
	    push(@pfiles, $_);
	/^-r8$/ || /^-N[^n][0-9]+$/ || /^-trapuv$/) {
	    $retcode = $? / 256;
            $? = $retcode;  # Is this right?  Seems to work -- broonie
	$retcode = &mysystem(@command)/256;
$retcode = &mysystem("gcc", @output, @lfiles, @lopts, "-lf2c", "-lm" );
	    $retcode = &mysystem("/usr/bin/f2c ".
    return @tmp;
		s/([cC*].*)\\$/$1/;
# Separate the prototypes out from the C files.
	    $seq ++;
	    $sfile = ($basefile =~ /([^\/]*\.).$/)[0] . "s";
    shift;
	$_ = shift;
    shift(@tmp);
# Special options for the different subprocesses: f for f2c step,
sub check_file_read
sub mysystem
sub parsewx
	   /^-symbolic$/) {
	system(@args);
	system($args[0]);
# The '-f' option to f2c...
# These are common to both f2c and gcc
# This code is in the public domain; use at your own risk.
# This is for the linker, too...
$tmpdir = $ENV{'TMPDIR'} || '/tmp';
# too many -f and -W options to list them all...
	    unlink $cfile;
    unlink (@gener_lfiles);
#! /usr/bin/perl
	$verbose ++;
$version = "1.15";
    warn "$0: Warning: $compile_only and -o with mutiple files, ignoring -o\n";
while ($_ = $ARGV[0]) {
	    while ((<CFILE>) &&
	    while (<FFILE>) {
		while (($line = <CFILE>) && ($line !~ '#endif')) {

>>>>|>>>>|>>>>|>>>>|>>>>|>>>>|>>>>|
                    
' < $(>) > $(<)
 !"#$%&'()*+,-./0
%10ld %12.6f %12.6f %12.8f %10ld %10ld %s
%10s %12s %12s %12s %10s %10s %s
122334445667788999999999999999:;9<<<<==============>>?@@ABBCDCEEEFFGGGGGGHH
$(<[1]) = [ FSubDir $(<[2-]) ] ;
$(<[1])-included = TRUE ;
$(<) = $($(<)[2-]) ;
$(>) = $($(>)[2-]) ;
$(>) = $(3) ;
8:3(-.)*'+,
<9~3<<t"<>
<9~M<<t<<>f
-a      Build all targets, even if they are current.
action block too big
__ACTION_RULE__
actions Archive
actions As
actions C++
actions Cc
actions Chgrp
actions Chmod1
actions Chown
actions File
actions Fortran
actions GenFile1
actions HardLink
actions ignore CcMv
actions Install
actions Lex
actions LexMv
actions Link bind NEEDLIBS
actions MkDir1
actions piecemeal together existing Clean
actions quietly updated piecemeal together RmTemps
actions Shell
actions together Archive
actions together piecemeal Archive
actions together quietly CreLib
actions together Ranlib
actions updated together piecemeal Archive
actions Yacc1
actions YaccMv
add-pair
ALWAYS clean uninstall ;
$(AR) $(<) -+$(>)
$(AR) $(<) $(>)
$(AR) $(<) +-$(>)
AR              ?= ar -ru ;
AR            ?= ar -ru ;
AR          ?= ar ru ;
Archive $(_l) : $(_s) ;
archive name %s found
*** argument error
argument %s
argv[%d] = '%s'
AR              ?= lcclib ;
AR          ?= lib ;
AR          ?= lib /nologo ;
AR          ?= libtool -o ;
AR          ?= mwld -xml -o ;
$(AR) /out:$(<) $(>)
$(AR) /out:$(<) %_$(<:B)_% $(>)
$(AR) $(<) $(>:T)
AR          ?= tlib /C /P64 ;
AR          ?= "/usr/ccs/bin/ar ru" ;
AR           ?= wlib ;
AR          ?= wlib ;
AS          ?= as ;
$(AS) $(ASFLAGS) -I$(HDRS) -o $(<) $(>)
ASFLAGS     ?= ;
ASFLAGS on $(<) += $(ASFLAGS) $(SUBDIRASFLAGS) ;
AS          ?= masm386 ;
$(AS) /Ml /p /v /w2 $(>) $(<) ,nul,nul;
$(AWK) '
AWK         ?= awk ;
backtrace
__bases__
base = '%.*s' 
BHDRSCAN
bindings
BINDIR      ?= /boot/apps ;
BINDIR       ?= \\os2\\apps ;
BINDIR      ?= /usr/local/bin ;
BINDMODULE
BINDRULE
bind	--	%s%s: %s
.boost-build-file = ;
.boost-build-file = $(boost-build-files[1]) ;
BOOST_BUILD_PATH = $(dir:R=$(.boost-build-file:D)) $(BOOST_BUILD_PATH) ;
BOOST_BUILD_PATH.user-value = $(BOOST_BUILD_PATH) ;
BOOST_BUILD_PATH = /usr/share/boost-build ;
Boost.Jam  
|| $(BOOST_ROOT)    # A temporary measure so Jam works with Boost.Build v1.
.bootstrap-file = ;
.bootstrap-file = $(bootstrap-file[1]) ;
BORLANDC = $(BCCROOT:J=" ") ;
Borland or Microsoft directories. ;
[ $(<) != $(>:BS=$(SUFOBJ)) ] && $(MV) $(>:BS=$(SUFOBJ)) $(<)
build file: 
(builtin)
(builtin):
BUILTIN_GLOB_BACK
 (by timestamp)
 cached: 
* called with: ( 
CALLER_MODULE
can not get current directory
...can't find %d target%s...
can't insert header cache item, bailing on %s
...can't make %d target%s...
case .1 : s = 1 ; case .2 : s = 2 ; case .3 : s = 3 ;
case .4 : s = 4 ; case .5 : s = 5 ; case .6 : s = 6 ;
case .7 : s = 7 ; case .8 : s = 8 ; case .l : s = l ;
case AIX :
case AMIGA :
case .asm : As $(<) : $(>) ;
case .C :   C++ $(<) : $(>) ;
case .cc :  C++ $(<) : $(>) ;
case .c :   Cc $(<) : $(>) ;
case .cpp : C++ $(<) : $(>) ;
case CYGWIN :
case DGUX :
case .f :   Fortran $(<) : $(>) ;
case *.h :  _o += $(_i) ;
case HPUX :
case-insensitive
case INTERIX :
case IRIX :
case .l :   Cc $(<) : $(<:S=.c) ;
case MACOSX :
case MPEIX :
case MVS :
case NCR :
case NEXT :
case .n : s = n ; case .man : s = 1 ;
case * :    _o += $(_i:G=$(SOURCE_GRIST)) ;
case OPENVMS : CCFLAGS  ?= /stand=vaxc ;
case PTX :
case QNX :
case *:   : s = ;
case *:\\ : s = ;
case * : _s = [.$(<[1])] ;
case *:* : _s = $(<[1]) ;
case \\[*\\] : _s = $(<[1]) ;
case .s :   As $(<) : $(>) ;
case SCO :
case SINIX :
case SOLARIS :
case UNICOS :
case UNIXWARE :
case * :    UserObject $(<) : $(>) ;
case VMS     : LINKLIBS ?= sys$library:vaxcrtl.olb/lib ;
case .y :   Cc $(<) : $(<:S=.c) ;
cat "%s"%s
C++         ?= bcc32 ;
C++         ?= c++ ;
CC          ?= bcc32 ;
C++         ?= cc ;
C++             ?= $(CC) ;
C++           ?= $(CC) ;
C++         ?= $(CC) ;
CC          ?= cc ;
$(CC) /c $(CCFLAGS) $(OPTIM) /Fo$(<) /I$(HDRS) $(>)
$(CC) /c $(CCFLAGS) $(OPTIM) /Fo$(<) /I$(HDRS) /I$(STDHDRS) $(>)
$(CC) -c $(CCFLAGS) $(OPTIM) -I$(HDRS) $(>)
$(CC) -c $(CCFLAGS) $(OPTIM) -I$(HDRS) -o $(<) $(>)
$(CC) -c $(CCFLAGS) $(OPTIM) -I$(HDRS) -o$(<) $(>)
$(CC) $(CCFLAGS) $(OPTIM) -Fo$(<) -I$(HDRS) $(>)
$(CC) $(CCFLAGS) $(OPTIM) /Fo=$(<) /I$(HDRS) $(>)
$(C++) /c $(C++FLAGS) $(OPTIM) /Fo$(<) /I$(HDRS) /I$(STDHDRS) /Tp$(>)
$(C++) /c $(C++FLAGS) $(OPTIM) /Fo$(<) /I$(HDRS) /Tp$(>)
$(C++) -c $(C++FLAGS) $(OPTIM) -I$(HDRS) $(>)
$(C++) -c $(C++FLAGS) $(OPTIM) -I$(HDRS) -o $(<) $(>)
$(C++) -c $(C++FLAGS) $(OPTIM) -I$(HDRS) -o$(<) $(>)
CC          ?= cl /nologo ;
CCFLAGS         ?= "" ;
CCFLAGS       ?= "" ;
CCFLAGS     ?= ;
CCFLAGS     ?= "" ;
CCFLAGS     += -Ae ;
CCFLAGS     += -D__cygwin__ ;
CCFLAGS     += -D_POSIX_SOURCE ;
CCFLAGS     ?= /D \"WIN\" ;
CCFLAGS     ?= -nosyspath ;
CCFLAGS on $(<) += $(CCFLAGS) $(SUBDIRCCFLAGS) ;
CCFLAGS on [ FGristFiles $(<:S=$(SUFOBJ)) ] += $(>) ;
$(C++) $(C++FLAGS) $(OPTIM) /Fo=$(<) /I$(HDRS) $(>)
CCFLAGS     ?= -Q ; # quiet
CCFLAGS     ?= -q -y -d -v -w-par -w-ccc -w-rch -w-pro -w-aus ;
CCFLAGS     ?= -w off -nomapcr ;
CCFLAGS      ?= /zq /DOS2 /I$(WATCOM)\\h ; # zq=quiet
CCFLAGS     ?= /zq /DWIN32 /I$(WATCOM)\\h ; # zq=quiet
CC              ?= gcc ;
CC            ?= gcc ;
CC          ?= gcc ;
CC          ?= icl /nologo ;
CC              ?= lcc ;
CcMv $(<) : $(>) ;
CC          ?= mwcc ;
CC          ?= mwcppc ;
$(CC)/obj=$(<) $(CCFLAGS) $(OPTIM) $(SLASHINC) $(>)
$(CC) -o $(<) $(CCFLAGS) $(OPTIM) $(>)
$(CC) -o $(<) $(C++FLAGS) $(OPTIM) $(>)
CC           ?= wcc386 ;
CC          ?= wcc386 ;
C++         ?= cxx ;
C++FLAGS    ?= ;
CFLAGS      += -Ae ;
C++FLAGS        ?= $(CCFLAGS) ;
C++FLAGS      ?= $(CCFLAGS) ;
C++FLAGS     ?= $(CCFLAGS) ;
C++FLAGS    ?= $(CCFLAGS) ;
C++FLAGS    ?= -nosyspath ;
C++FLAGS on $(<) += $(C++FLAGS) $(SUBDIRC++FLAGS) ;
C++FLAGS on [ FGristFiles $(<:S=$(SUFOBJ)) ] += $(>) ;
C++FLAGS    ?= -Q ; # quiet
C++FLAGS    ?= -q -y -d -v -w-par -w-ccc -w-rch -w-pro -w-aus -P ;
C++FLAGS    ?= -w off -nomapcr ;
C++         ?= gcc ;
CHECK_IF_FILE
CHGRP       ?= chgrp ;
$(CHGRP) $(GROUP) $(<)
Chgrp $(tt) ;
Chmod $(<) ;
CHMOD       ?= chmod ;
$(CHMOD) $(MODE) $(<)
CHMOD       ?= set file/prot= ;
Chmod $(tt) ;
CHOWN       ?= chown ;
$(CHOWN) $(OWNER) $(<)
Chown $(tt) ;
class_module
class@order
Class %s already defined
Class %s is not defined
Clean clean : $(<) ;
Clean clean : $(<) $(_h) ;
Clean clean : $(_l) ;
Clean clean : $(_t) ;
Clean uninstall : $(t) ;
closedir
C++         ?= mwcppc ;
$(C++)/obj=$(<) $(C++FLAGS) $(OPTIM) $(SLASHINC) $(>)
   Copyright 1993-2002 Christopher Seiwald and Perforce Software, Inc.  
   Copyright 2001-2004 David Abrahams.
   Copyright 2001 David Turner.
   Copyright 2002-2008 Rene Rivera.
   Copyright 2003-2008 Vladimir Prus.
corrupted pointers
corrupted program
--count--
$(CP) $(>) $(<)
CP       = copy ;
CP          ?= copy ;
CP          ?= copy/replace ;
CP          ?= cp -f ;
CP          ?= duplicate -y ;
CRELIB      ?= ;
CRELIB      ?= true ;
__ctype_b_loc
__ctype_tolower_loc
__ctype_toupper_loc
CW  ?= "{CW}" ;
"$(CW):MacOS Support:Libraries:Runtime:Runtime PPC:MSL MPWCRuntime.lib"
"$(CW):MacOS Support:Libraries:Runtime:Runtime PPC:MSL RuntimePPC.lib"
"$(CW):MacOS Support:Universal:Libraries:StubLibraries:Interfacelib"
"$(CW):MacOS Support:Universal:Libraries:StubLibraries:Mathlib" ;
"$(CW):MSL:MSL_C:MSL_Common:Include"
"$(CW):MSL:MSL_C:MSL_MacOS:Include" ;
"$(CW):MSL:MSL_C:MSL_MacOS:Lib:PPC:MSL C.PPC.Lib" ;
"$(CW):MSL:MSL_C:MSL_MacOS:Lib:PPC:MSL C.PPC MPW.Lib" ;
"$(CW):MSL:MSL_C:MSL_MacOS:Lib:PPC:MSL C.PPC MPW(NL).Lib" ;
"$(CW):MSL:MSL_C:MSL_MacOS:Lib:PPC:MSL SIOUX.PPC.Lib"
C++          ?= wpp386 ;
C++         ?= wpp386 ;
_d = $(DOT) ;
_d = $(DOTDOT) ;
_d = $(_d:R=$(DOTDOT)) ;
^[     ]*#[    ]*define[   ]*([A-Za-z][A-Za-z0-9_]*)[  ]*[<"]([^">]*)[">].*$
delete_module
dependencies
DEPENDS $(<) : $(>) ;
Depends $(<) : $(>[1]) ;
DEPENDS all : shell files lib exe obj ;
DEPENDS all shell files lib exe obj : first ;
Depends dirs : $(<) ;
DEPENDS exe : $(_t) ;
DEPENDS files : $(<) ;
DEPENDS $(<) $(_h) : $(>) ;
Depends install : $(t) ;
DEPENDS lib : $(_l) ;
DEPENDS $(_l)($(_i:BS)) : $(_i) ;
DEPENDS $(_l) : $(_l)($(_s:BS)) ;
DEPENDS $(_l) : $(_s) ;
DEPENDS obj : $(_i:S=$(SUFOBJ)) ;
DEPENDS obj : $(_s) ;
Depends $(<) : $(s) ;
DEPENDS shell : $(<) ;
DEPENDS $(<) : $(_t) ;
DEPENDS $(_t) : $(_s) ;
Depends $(_t) : $(_s) $(>[2-]) ;
DEPENDS $(_t) : $(>:S=$(SUFLIB)) ;
Depends $(tt) : $(i) ;
difference
dir = $(dir:P) ;
directories
dir = '%.*s' 
%dK in strings
d = man$(s) ;
don't know how to make %s
DOT         ?= . ;
DOT         ?= ":" ;
DOT         ?= [] ;
DOT     ?= . ;
DOTDOT      ?= .. ;
DOTDOT      ?= "::" ;
DOTDOT      ?= [-] ;
DOTDOT  ?= .. ;
D$ t'+D$
-dx     Set the debug level to x (0-9).
--each--
ECHO -------------------------- ;
ECHO --------------------------------------------------------- ;
ECHO --------------------------------------------------------------- ;
ECHO "and in these directories from BOOST_BUILD_PATH and BOOST_ROOT: "$(search-path:J=", ")"." ;
ECHO  "    appropriate value according to this list:" ;
ECHO "As a special exception, when using the Intel C++ compiler, you need" ;
ECHO "at" $(self-based-path) ;
ECHO "Attempted search from" [ PWD ] "up to the root" ;
ECHO  "   a. You didn't set BOOST_ROOT to indicate the root of your" ;
ECHO "   'boost-build" $(dir) ";'" ;
ECHO "$(.boost-build-file) attempted to load the build system by invoking" ;
ECHO "\"$(.boost-build-file)\" was found by searching from" [ PWD ] "up to the root" ;
ECHO  "      Boost installation." ;
ECHO "BOOST_ROOT must be set, either in the environment, or " ;
ECHO  "   BORLANDC    Borland C++                  BC++ install path" ;
ECHO "but we were unable to find \"bootstrap.jam\" in the specified directory" ;
ECHO  "   b. You are trying to use stock Jam but didn't indicate which" ;
ECHO  "      compilation toolset to use. To do so, follow these simple" ;
ECHO "Compiler is Borland C++" ;
ECHO "Compiler is GCC-EMX" ;
ECHO "Compiler is GCC with Mingw" ;
ECHO "Compiler is Intel C/C++" ;
ECHO "Compiler is Microsoft Visual C++" ;
ECHO "Compiler is Microsoft Visual C++ 16 bit" ;
ECHO "Compiler is Microsoft Visual C++ .NET" ;
ECHO "Compiler is Watcom C/C++" ;
ECHO "Compiler is Win32-LCC" ;
ECHO  "  - define one of the following environment variable, with the" ;
ECHO  "  - define the JAM_TOOLSET environment variable with the *name*" ;
ECHO  "  e.g.:  set VISUALC=C:\\Visual6" ;
ECHO  "  e.g.:  set WATCOM=C:\WATCOM" ;
ECHO  "   EMX         EMX (gcc)                    EMX install path" ;
ECHO "Error: Illegal attempt to re-bootstrap the build system by invoking" ;
ECHO "However, it failed to call the \"boost-build\" rule to indicate" ;
ECHO  "      instructions:" ;
ECHO  "   INTELC      Intel C/C++                  IC++ install path" ;
ECHO  "is invalid, please use one of the following:" ;
ECHO  "Jam cannot be run because, either:" ;
ECHO  "Jam cannot be run because you didn't indicate which compilation toolset" ;
ECHO  "   LCC         Win32-LCC                    LCC-Win32 install path" ;
ECHO  "   MINGW       MinGW (gcc)                  MinGW install path" ;
ECHO "notice: found boost-build.jam at"
ECHO "notice: loading Boost.Build from"
ECHO "of the boost installation." ;
ECHO  "    of the toolset variable you want to use." ;
ECHO "of your Visual C++ installation. Aborting.." ;
ECHO "on the command-line with -sBOOST_ROOT=..., to the root" ;
ECHO "or in BOOST_BUILD_PATH (searching "$(BOOST_BUILD_PATH:J=", ")")." ;
ECHO  "         set JAM_TOOLSET=VISUALC" ;
ECHO  "         set JAM_TOOLSET=WATCOM" ;
ECHO  "The JAM_TOOLSET environment variable is defined but its value" ;
ECHO "the location of the build system." ;
ECHO "to define the VISUALC environment variable to indicate the location" ;
ECHO  "to use. To do so, follow these simple instructions:" ;
ECHO "Unable to load Boost.Build" ;
ECHO "Unable to load Boost.Build: could not find \"boost-build.jam\"" ;
ECHO "Unable to load Boost.Build: could not find build system." ;
ECHO  "   Variable    Toolset                      Description" ;
ECHO  "   VISUALAGE   IBM Visual Age C/C++         VisualAge install path" ;
ECHO  "   VISUALC16   Microsoft Visual C++ 16 bit  VC++ 16 bit install" ;
ECHO  "   VISUALC     Microsoft Visual C++         VC++ install path" ;
ECHO  "   WATCOM      Watcom C/C++                 Watcom install path" ;
elements
} else {
else if $(MAC)
else if $(MAC) && $(_h)
else if $(MINGW)
else if $(MSVC)
else if $(MSVCDir)
else if $(MSVCNT)
else if $(OS2)
else if $(OS) = BEOS
else if $(OS) = BEOS && $(METROWERKS)
else if $(s)
else if $(TOOLSET) = BORLANDC
else if $(TOOLSET) = EMX
else if $(TOOLSET) = INTELC
else if $(TOOLSET) = LCC
else if $(TOOLSET) = MINGW
else if $(TOOLSET) = VC7
else if $(TOOLSET) = VISUALC
else if $(TOOLSET) = VISUALC16
else if $(TOOLSET) = WATCOM
else if $(UNIX)
else if $(VMS)
__environ
.ENVIRON
__errno_location
error: no native rule "%s" defined in module "%s"
error reading string table
ERROR: %s has bad fate %d
EXEMODE     ?= 711 ;
EXEMODE     ?= (w:e) ;
existing
EXIT On NT, set BCCROOT, MSVCNT, MINGW or MSVC to the root of the
EXIT "Please consult the documentation at 'http://www.boost.org'." ;
EXIT  "Sorry, but the $(JAM_TOOLSET) toolset isn't supported for now" ;
exit-status
EXIT SubDir syntax error ;
EXIT Top level of source tree has not been set with $(<[1]) ;
EXIT "Unknown suffix on" $(>) "- see UserObject rule in Jamfile(5)." ;
expanded to 
explicitly specified locations
extra argument
...failed %s 
failed to write output file '%s'!
Failed to write to '%s'
...failed updating %d target%s...
FAIL_EXPECTED
fate change  %s back to stable, NOUPDATE.
fate change  %s from %s to %s (as dependant of %s)
fate change %s from %s to %s by dependency %s
fate change  %s from %s to %s (by rebuild)
fate change  %s from %s to %s%s
fate change  %s set to %s%s
fate change %s to STABLE from %s, no actions, no dependencies and do not care
FILE_DIRSCAN
File $(i:D=$(<)) : $(i) ;
file_info
FILEMODE    ?= 644 ;
FILEMODE    ?= (w:r) ;
FILE_OPEN
[ find-to-root [ PWD ] : boost-build.jam ]
?+* follows nothing
for _i in $(<)
for i in $(>)
for _i in [.$(<[2-])]
for _i in $(<[2-])
for _i in $(_d[2-])
for _i in [ FGristFiles $(<) ]
for _i in $(_h[2-])
for _i in $(_s)
for _t in $(<[2-])
for t in $(SUPPORTED_TOOLSETS)
for t in $(SUPPORTED_TOOLSETS) { ECHO "  " $(t) ; }
FORTRAN     ?= "" ;
FORTRAN     ?= f77 ;
FORTRANFLAGS ?= ;
$(FORTRAN) $(FORTRANFLAGS) -o $(<) $(>)
...found %d target%s...
__fprintf_chk
%f sec system; %f sec user
-fx     Read x instead of Jambase.
_g = $(<[1]) ;
GenFile1 $(_t) : $(_s) $(>[2-]) ;
_g = $(_g)!$(_i) ;
GLIBC_2.0
GLIBC_2.1
GLIBC_2.2
GLIBC_2.3
GLIBC_2.3.4
GLIBC_2.4
GLIBC_2.7
GLOB-RECURSIVELY
[ GLOB $(search-path) : boost-build.jam ] ;
[ GLOB $(self-based-path) : boost-build.jam ]
globs = [ GLOB $(dir) : $(patterns) ] ;
__gmon_start__
--gross--
GROUP on $(tt) = $(GROUP) ;
h = "" ;
@(#)hash.c    1.14  ()  6/20/88
HAS_NATIVE_RULE
_h = $(<:BS=.h) ;
HCACHEFILE
HCACHEMAXAGE
hcache read from file %s
hcache written to %s.   %d dependencies, %.0f%% hit rate
HDRGRIST on $(>) = $(HDRGRIST) ;
HDRGRIST on $(s) = $(HDRGRIST) ;
HdrMacro
HDRMACRO $(<) ;
hdrmacros
HDRPATTERN =
HDRRULE on $(>) = HdrRule ;
HDRRULE on $(s) = $(HDRRULE) ;
HDRS        ?= ;
HDRSCAN on $(>) = $(HDRPATTERN) ;
HDRSCAN on $(s) = $(HDRSCAN) ;
HDRSCAN out of date for %s
HDRSCAN out of date in cache for %s
HDRSEARCH on $(>) = $(HDRS) $(SUBDIRHDRS) $(h) $(STDHDRS) ;
HDRSEARCH on $(s) = $(HDRSEARCH) ;
HDRS        ?= $(MACHDRS) $(MPWHDRS) ;
HDRS on [ FGristFiles $(<:S=$(SUFOBJ)) ] += $(>) ;
HDRS on $(<) = $(SEARCH_SOURCE) $(HDRS) $(SUBDIRHDRS) ;
HDRS        += /usr/include ;
header cache out of date for %s
header found: %s
header scan %s
h = $(SEARCH_SOURCE) ;
_h = $(SEARCH_SOURCE) $(HDRS) $(SUBDIRHDRS) ;
if ! $(<)
if ! $(<[1])
if ! $($(<[1]))
if $($(<)[1]) && $($(<)[1]) = $($(>)[1])
if $(>[1]:D) && $(>[1]:D) != $(>[1]) && $(>[1]:D) != \\\\
if ! $($(<[1])-included)
if $(BCCROOT)
if ! $(.boost-build-file)
if ! $(BOOST_BUILD_PATH) && $(UNIX)
if ! $(.bootstrap-file)
if $(.bootstrap-file)
if $(CHMOD) { Chmod1 $(<) ; }
if $(CRELIB) { CreLib $(_l) : $(_s[1]) ; }
if $(<) != $(DOT) && ! $($(<)-mkdir)
if exist $(<) set _$(<:B)_=$(<)
if f$search("$(<)") .eqs. "" then lib/create $(<)
if $(GROUP) && $(CHGRP)
if $(HDRGRIST)
IFHGEDJC	:;
if $(_i:S)
if $(JAMFILE) { include $(JAMFILE) ; }
if $(JAM_TOOLSET)
if $(KEEPOBJS)
if ! $(_l:D)
if ! [ MATCH .*(bjam).* : $(ARGV[1]:BL) ]
if [ MATCH .*(bjam).* : $(ARGV[1]:BL) ]
if [ MATCH .*(--debug-configuration).* : $(ARGV) ]
if $(NOARSCAN)
if ! ( $(NOARSCAN) || $(KEEPOBJS) ) { RmTemps $(_l) : $(_s) ; }
if $(NOARUPDATE)
if $(NT)
if $(OWNER) && $(CHOWN)
if ! $(_r)
if $(RANLIB) { Ranlib $(_l) ; }
if $(_r) = $(DOT) {
if $(RELOCATE)
if $(SEARCH_SOURCE)
if ! $(SOURCE_GRIST)
if $(s) && $(s) != $(<)
if $(_t) != $(<)
if $(t) = $(JAM_TOOLSET) { TOOLSET = $(t) ; }
if ! $(TOOLSET)
if $(TOOLSET) = BORLANDC
if $(TOOLSET) = VISUALC || $(TOOLSET) = VC7 || $(TOOLSET) = INTELC
if ! $(VISUALC)
if $(VMS) && $(_h)
if $(watcom)
if $(YACC)
 ignored !!
ignore-minus-n
ignore-minus-q
imported
IMPORTED_MODULES
import error: length of source and target rule name lists don't match!
IMPORT_MODULE
"^[     ]*#[    ]*include[  ]*[<\"]([^\">]*)[\">].*$" ;
^[     ]*#[    ]*include[  ]*([A-Za-z][A-Za-z0-9_]*).*$
include $(.boost-build-file) ;
include $(.bootstrap-file) ;
include $(JAMFILE:D=$(_s):R=$($(<[1]))) ;
include $(_r) ;
Includes
INCLUDES $(<) : $(_h) ;
INCLUDES $(<) : $(s) ;
INSTALLGRIST ?= installed ;
InstallInto $(<) : $(>) ;
InstallInto $(d:R=$(<)) : $(i) ;
InstallInto $(<) : $(_t) ;
Install $(tt) : $(i) ;
INSTANCE
instance_module
internal foulup
internal urp
...interrupted
Invalid debug level '%s'.
Invalid option: -%c
Invalid pipe descriptor '%d', valid values are -p[0..3].
invalid [] range
invalid %s
invalid %s with record separator <%s>
Invalid value for the '-j' option.
Invalid value of PARALLELISM: %s
_IO_stdin_used
__isoc99_fscanf
__isoc99_sscanf
jambase.c
JAMFILE     ?= Jamfile ;
jam%lx%lx.000
JAMRULES    ?= Jamrules ;
JAM_SEMAPHORE
JAMSHELL
JAMUNAME
JAM_VERSION
JAMVERSION=3.1
_j = $(_h[1]) ;
_j = $(_j),$(_i) ;
junk on end
-jx     Run up to x shell commands concurrently.
KEEP_GOING
keyword %s
_l = $(<) ;
-:l:d:j:f:gs:t:ano:qv
-:l:d:j:p:f:gs:t:ano:qv
%ld second time limit exceeded
$(LEX) $(>)
LEX         ?= ;
LEX         ?= flex ;
LEX         ?= lex ;
LexMv $(<) : $(>) ;
Lex $(<:S=.c) : $(>) ;
_l = [ FSubDir $(_l) ] ;
libc.so.6
__libc_start_main
LIBDIR      ?= /boot/develop/libraries ;
LIBDIR      ?= /usr/local/lib ;
/lib/ld-linux.so.2
LibraryFromObjects $(<) : $(>:S=$(SUFOBJ)) ;
lib/replace $(<) $(>[1]) ,$(>[2-])
LINK            ?= $(CC) ;
LINK          ?= $(CC) ;
LINK        ?= $(CC) ;
$(LINK) -e$(<) $(LINKFLAGS) $(UNDEFS) -L$(LINKLIBS) $(NEEDLIBS) $(>)
$(LINK)/exe=$(<) $(LINKFLAGS) $(>[1]) ,$(>[2-]) ,$(NEEDLIBS)/lib ,$(LINKLIBS)
LINKFLAGS       ?= "" ;
LINKFLAGS     ?= "" ;
LINKFLAGS   ?= ;
LINKFLAGS   ?= "" ;
LINKFLAGS   ?= $(CCFLAGS) ;
LINKFLAGS   ?= -mpwtool -warn ;
LINKFLAGS   ?= -Q ; # quiet
LINKFLAGS    ?= /zq ; # zq=quiet
LINKFLAGS   ?= /zq ; # zq=quiet
LINK        ?= gcc ;
LINK            ?= lcclnk ;
$(LINK) -library -o $(<) $(>)
LINKLIBS        ?= "" ;
LINKLIBS      ?= "" ;
LINKLIBS     ?= ;
LINKLIBS    ?=
LINKLIBS    ?= ;
LINKLIBS    ?= -lbsd ;
LINKLIBS    ?= -lnet ;
LINKLIBS    ?= $(MACLIBS) $(MPWLIBS) ;
LINKLIBS    ?= $(VISUALC)\\lib\\advapi32.lib
LINKLIBS    ?= \"$(VISUALC)\\lib\\advapi32.lib\"
LINKLIBS    ?= \"$(VISUALC)\\PlatformSDK\\lib\\advapi32.lib\"
LINK        ?= link ;
$(LINK) $(LINKFLAGS) /Fe=$(<) $(UNDEFS) $(>) $(NEEDLIBS) $(LINKLIBS)
$(LINK) $(LINKFLAGS) -o $(<) $(UNDEFS) $(>) $(NEEDLIBS) $(LINKLIBS)
$(LINK) $(LINKFLAGS) /out:$(<) $(UNDEFS) $(>) $(NEEDLIBS) $(LINKLIBS)
LINK        ?= link /nologo ;
LINK        ?= mwld ;
LINK        ?= mwlinkppc ;
$(LINK) -o $(<) $(LINKFLAGS) $(>) $(NEEDLIBS) "$(LINKLIBS)"
Link $(_t) : $(_s) ;
LINK         ?= wcl386 ;
LINK        ?= wcl386 ;
list > %s <
LN          ?= ln ;
local boost-build-files =
local boost-build-relative = ../../share/boost-build ;
local bootstrap-file = [ GLOB $(BOOST_BUILD_PATH) : bootstrap.jam ] ;
local _d, _s, _i ;
local _g _i ;
local globs = [ GLOB $(dir) : $(patterns) ] ;
local _h ;
local h ;
local _i ;
local i ;
local _i _d ;
local _i _j ;
local _i _l _s ;
local _i _o ;
local i s d ;
local i t ;
localize
local _l _r ;
local OPT ;
local _r _s ;
local _s ;
local s ;
local search-path = $(BOOST_BUILD_PATH) $(BOOST_ROOT) ;
local self-based-path = [ NORMALIZE_PATH $(boost-build-relative:R=$(self)) ] ;
local self = [ SELF_PATH ] ;
local _s = [ FAppendSuffix $(>[1]) : $(SUFEXE) ] ;
local _s _i ;
local _s _t ;
local SUPPORTED_TOOLSETS = "BORLANDC" "VC7" "VISUALC" "VISUALC16" "INTELC" "WATCOM"
local SUPPORTED_TOOLSETS = "EMX" "WATCOM" ;
local t ;
local _t = [ FAppendSuffix $(<) : $(SUFEXE) ] ;
local _t = [ FAppendSuffix $(>) : $(SUFEXE) ] ;
local _t = [ FGristSourceFiles $(<) ] ;
local _t _r ;
local tt = $(i:G=$(INSTALLGRIST)) ;
located targets
LOCATE on $(<) = $(>) ;
LOCATE_SOURCE = $(ALL_LOCATE_TARGET) $(SUBDIR) ;
locate %s: %s
LOCATE_TARGET = $(ALL_LOCATE_TARGET) $(SUBDIR) ;
location
_l = $(<:S=$(SUFLIB)) ;
-lx     Limit actions to x number of seconds after which they are stopped.
MACHDRS ?=
MACINC on $(<) = \"$(_j)\" ;
MACLIBS ?=
macro header found: %s
macro header scan for %s
### macro '%s' evaluated to '%s'
macro '%s' used to define filename '%s' in '%s'
made%s	%s	%s%s
MainFromObjects $(<) : $(>:S=$(SUFOBJ)) ;
MAIN_MAKE
_makeCommon $(<) : $(>) ;
_makeCommon _l : _r ;
MakeLocate $(<) $(_h) : $(LOCATE_SOURCE) ;
MakeLocate $(_l) $(_l)($(_s:BS)) : $(LOCATE_TARGET) ;
MakeLocate $(<) : $(LOCATE_SOURCE) ;
MakeLocate $(<) : $(LOCATE_TARGET) ;
MakeLocate $(t) : $(<) ;
MakeLocate $(_t) : $(LOCATE_TARGET) ;
MAKE_MAKE0
MAKE_MAKE0SORT
MAKE_MAKE1
make	--	%s%s
MANDIR      ?= /boot/documentation/"Shell Tools"/HTML ;
MANDIR      ?= /usr/local/man ;
MANDIR      ?= /usr/local/share/man ;
 (max time)
mcr $(>[1]) $(<) $(>[2-])
memory corruption
"MINGW" "LCC" ;
missing argument
missing argument name after type name:
missing argument name before type name:
$(MKDIR) $(<)
MkDir $(>[1]) ;
MkDir1 $(<) ;
MKDIR       ?= create/dir ;
MKDIR       ?= mkdir ;
MKDIR       ?= newfolder ;
MkDir $(s) ;
$(<)-mkdir = true ;
MODE on $(<) = $(EXEMODE) ;
MODE on [ FAppendSuffix $(<) : $(SUFEXE) ] = 4711 ;
MODE on $(<) = $(FILEMODE) ;
MODE on $(>:G=installed) = $(FILEMODE) ;
MODE on $(>:G=installed) = $(SHELLMODE) ;
MODE on $(<) = $(SHELLMODE) ;
MODE on $(_t:G=installed) = $(EXEMODE) ;
module $(<)
module scope
modules_to_import
MPWLIBS ?=
MPWNLLIBS ?=
$(MV) lex.yy.c $(<)
MV          ?= move ;
MV      ?= move ;
MV          ?= mv -f ;
MV          ?= rename ;
MV          ?= rename -y ;
$(MV) $(YACCFILES).c $(<[1])
$(MV) $(YACCFILES).h $(<[2])
__name__
--name--
native rules
-n      Don't actually execute the updating actions.
NEAREST_USER_LOCATION
NEEDLIBS on $(_t) += $(>:S=$(SUFLIB)) ;
nested *?+
/^##/ { next }
NOARSCAN         = true ;
NOARSCAN     ?= true ;
NOARSCAN    ?= true ;
NOARUPDATE  ?= true ;
NOCARE $(s) ;
(no frame):
no-output
NORMALIZE_PATH
[ NORMALIZE_PATH $(.boost-build-file) ] ;
[ NORMALIZE_PATH $(.bootstrap-file:D) ] ;
no slots for child!
NOTFILE 
NOTFILE $(<) ;
NOTFILE all first shell files lib exe obj dirs clean uninstall ;
NOTFILE $(s) ;
NoUpdate
NOUPDATE 
NOUPDATE $(<) ;
NR == 1 && /^[#:]/ { next }
NR == 1 { print "$(SHELLHEADER)" }
NULL argument
NULL parameter
Object $(_i:S=$(SUFOBJ)) : $(_i) ;
Objects $(>) ;
_o += $(_i:S=$(>)) ;
...on %dth target...
*+ operand could be empty
OPTIM           ?= ;
OPTIM         ?= ;
OPTIM        ?= ;
OPTIM       ?= ;
OPTIM       ?= "" ;
OPTIM       ?= -O ;
OPTIM       ?= -O0 ;
option: -%c needs argument
OSFULL = $(OS)$(OSVER)$(OSPLAT) $(OS)$(OSPLAT) $(OS)$(OSVER) $(OS) ;
OS=LINUX
OSPLAT=X86
out of space
OWNER on $(tt) = $(OWNER) ;
-ox     Write the updating actions to file x.
PARALLELISM
parser stack overflow
path_parts
...patience...
patterns
piecemeal
_poke .ENVIRON : BOOST_BUILD_PATH : $(BOOST_BUILD_PATH) ;
PRECIOUS
{ print }
__printf_chk
/proc/self/exe
property-set
-px     x=0, pipes action stdout and stderr merged into action output.
-q      Quit quickly as soon as a target fails.
_r = $(>) ;
$(_r) = $(<[1]) ;
_r = $($(<[1])RULES) ;
$(RANLIB) $(<)
RANLIB      ?= "" ;
RANLIB      ?= ranlib ;
raw-properties
RCP         ?= rcp ;
readlink
 real  : 
REBUILDS
re error %s
regerror
regexp too big
RELOCATE    ?= true ;
...removing outdated %s
...removing %s
replacements
 resolved to '%s'
result-value
return $(<) ;
return $(_d) ;
return $(_g) ;
return $(globs) ;
return $(<:G=$(SOURCE_GRIST)) ;
return $(_l) ;
return $(_o) ;
return $(_r) ;
return $(_r:R=$(_l)) ;
return $(_s) ;
_r = [ FDirName $(_r) ] ;
_r = $(JAMRULES:R=$($(<[1]))) ;
$(RM) $(>)
$(RM) $(>[1]);* ,$(>[2-]);*
RM          ?= delete ;
RM          ?= delete -y ;
RM       = del /f ;
RM          ?= del /f ;
RM          ?= del /f/q ;
$(RM) $(<) && $(LN) $(>) $(<)
RM          ?= rm -f ;
root = '%.*s' 
$(_r) = $(_r)$(_t) ;
RSH         ?= rsh ;
rule addDirName { $(<) += [ FDirName $(>) ] ; }
rule boost-build ( dir ? )
rule Bulk
rule BULK { Bulk $(<) : $(>) ; }
rule C++
rule Chmod
rule FAppendSuffix
rule FConcat
rule FConvertToSlashes
rule FDirName
rule FGrist
rule FGristFiles
rule FGristSourceFiles
rule File
rule FILE { File $(<) : $(>) ; }
rule find-to-root ( dir : patterns + )
rule Fortran
rule FRelPath
rule FSubDir
rule GenFile
rule GenFile1
rule HardLink
rule HdrMacroFile
rule HdrRule
rule HDRRULE { HdrRule $(<) : $(>) ; }
rule InstallBin
rule INSTALLBIN { InstallBin $(BINDIR) : $(<) ; }
rule InstallFile
rule INSTALL { Install $(<) : $(>) ; }
rule InstallInto
rule InstallLib
rule INSTALLLIB { InstallLib $(LIBDIR) : $(<) ; }
rule InstallMan
rule INSTALLMAN { InstallMan $(MANDIR) : $(<) ; }
rule InstallShell
rule Lex
rule Library
rule LibraryFromObjects
rule LIBRARY { Library $(<) : $(>) ; }
rule LIBS { LinkLibraries $(<) : $(>) ; }
rule Link
rule LinkLibraries
rule LINK { Link $(<) : $(>) ; }
rule Main
rule MainFromObjects
rule MAIN { Main $(<) : $(>) ; }
rule _makeCommon
rule makeDirName { $(<) = [ FDirName $(>) ] ; }
rule makeGristedName { $(<) = [ FGristSourceFiles $(>) ] ; }
rule MakeLocate
rule makeRelPath { $(<[1]) = [ FRelPath $(<[2-]) : $(>) ] ; }
rule makeSuffixed { $(<[1]) = [ FAppendSuffix $(>) : $(<[2]) ] ; }
rule MkDir
RULENAMES
rule Object
rule ObjectCcFlags
rule ObjectC++Flags
rule ObjectHdrs
rule Objects
rule _poke ( module-name ? : variables + : value * )
rule RmTemps
* rule %s ( 
rule Setuid
rule SETUID { Setuid $(<) ; }
rule Shell
rule SHELL { Shell $(<) : $(>) ; }
rule SubDir
rule SubDirCcFlags
rule SubDirC++Flags
rule SubDirHdrs
rule SubInclude
rule %s unknown in module %s
rule Undefines
rule UNDEFINES { Undefines $(<) : $(>) ; }
rule unmakeDir
rule UserObject
rule Yacc
RUNVMS      ?= mcr ;
  %s       : 
s = $(>) ;
  %s%2d Name: %s
->%s%2d Name: %s
%s actions too long (max %d):
  %s       : Been touched, updating it
scan archive %s
scan directory %s
  %s       : Can make it
scanning '%s' for header file macro definitions
  %s       : Can not find it
_s = $(_d[1]) ;
  %s       : Depends on %s (%s)
_s = $(DOT) ;
%s:%d: %s at %s
SEARCH_FOR_TARGET
SEARCH on $(>) = $(SEARCH_SOURCE) ;
SEARCH on $(s) = $(HDRSEARCH) ;
 search %s: found explicitly located target %s
SEARCH_SOURCE = $(SUBDIR) ;
search %s: %s
SED         ?= sed ;
see definition of rule '%s' being called
select-highest-ranked
SELF_PATH
SEM: placing %s on stack
SEM: %s is busy, delaying launch of %s
SEM: %s is now free
SEM: %s now used by %s
sequence
%s error: rule "%s" unknown in module "%s"
set -e MWCincludes $(MACINC)
setrlimit
_s = [ FDirName $(<[2-]) ] ;
_s = [ FGristFiles $(>) ] ;
s = $(>:G=$(HDRGRIST)) ;
SHELLHEADER ?= "#!/bin/sh" ;
SHELLMODE   ?= 755 ;
SHELLMODE   ?= (w:er) ;
%s (internal node)
SIOUXHDRS ?= ;
SIOUXLIBS ?=
_s = $(_i:R=$(_s)) ;
...skipped %d target%s...
...skipped %s for lack of %s...
SLASH          = / ;
SLASH            = / ;
SLASH        ?= \\ ;
SLASH       ?= / ;
SLASH       ?= . ;
SLASH       ?= ":" ;
SLASH       ?= \\ ;
SLASH ?= / ;
SLASH ?= \\ ;
SLASHINC on $(<) = "/inc=(" $(_h[1]) ,$(_h[2-]) ")" ;
  %s    Loc: %s
  %s       : Missing, creating it
  %s       : Newer
    source: 
SOURCE_GRIST = [ FGrist $(<[2-]) ] ;
source_module
source_rules
  %s       : Outdated, updating it
s = $(<:P) ;
SPLIT_BY_CHARACTERS
__sprintf_chk
  %s       : Rebuild, updating it
%s %s = 
_s = $(_s)/$(_i) ;
  %s       : Stable
%s table: %d+%d+%d (%dK+%luK) items+table+hash, %f density
__stack_chk_fail
STDHDRS     ?= ;
STDHDRS     ?= /boot/develop/headers/posix ;
STDHDRS     ?= $(BORLANDC)\\include ;
STDHDRS     ?= decc$library_include ;
STDHDRS     ?= $(INTELC)\include $(VISUALC)\\include ;
STDHDRS     ?= /usr/include ;
STDHDRS     ?= $(VISUALC16)\\include ;
STDHDRS     ?= $(VISUALC)\\include ;
STDHDRS     ?= \"$(VISUALC)\\include\"
STDHDRS      ?= $(WATCOM)\\h ;
STDHDRS     ?= $(WATCOM)\\h $(WATCOM)\\h\\nt ;
STDLIBPATH  ?= $(BORLANDC)\\lib ;
  %s       : Temporary file, to be updated
__strdup
strftime
string "%s"
string too big
strip-eol
__strncat_chk
SUBDIRCCFLAGS = ;
SUBDIRCCFLAGS += $(<) ;
SUBDIRC++FLAGS = ;
SUBDIRC++FLAGS += $(<) ;
SUBDIRHDRS = ;
SUBDIRHDRS += $(<) ;
SUBDIR = $(_s:R=$($(<[1]))) ;
SUBDIR_TOKENS = $(<[2-]) ;
SUFEXE      ?= "" ;
SUFEXE      ?= .exe ;
SUFEXE  ?= .exe ;
SUFLIB         = .a ;
SUFLIB           = .a ;
SUFLIB      ?= .a ;
SUFLIB      ?= .lib ;
SUFLIB  ?= .lib ;
SUFLIB      ?= .olb ;
SUFOBJ         = .o ;
SUFOBJ           = .o ;
SUFOBJ      ?= .o ;
SUFOBJ      ?= .obj ;
SUFOBJ  ?= .obj ;
  %s       : Updating it
  %s       : Up to date temp file
switch $(<[1])
switch $(_i)
switch $(i:S)
switch $(OS)
switch $(s)
switch $(>:S)
-sx=y   Set variable x=y, overriding environment.
syntax error
    target: 
target_module
target_rules
targets-to-rebuild
Temporary
TEMPORARY 
TEMPORARY $(>) ;
_t = [ FAppendSuffix $(<) : $(SUFEXE) ] ;
t = $(>:G=$(INSTALLGRIST)) ;
$tIexpand '%.*s'
time ( %s ) : %s
time	--	%s%s: %s
timestamp
__TIMING_RULE__
together
TOOLSET = "" ;
TOOLSET  = BORLANDC ;
TOOLSET = MINGW ;
TOOLSET = VISUALC ;
TOOLSET   = VISUALC16 ;
TOOLSET  = WATCOM ;
too many ()
too many options (%d max)
TOUCHED 
trailing \
transform
$(t) = $($(t):J=" ") ; # reconstitute paths with spaces in them
<$t<<@tX
-tx     Rebuild x, even if it is up-to-date.
.typecheck
"$(UMACHDRS):Universal:Interfaces:CIncludes"
UNDEFFLAG    ?= "/u _" ;
UNDEFFLAG   ?= "-u _" ;
UNDEFFLAG   ?= "/u _" ;
UNDEFFLAG     ?= "-U" ;
UNDEFS on [ FAppendSuffix $(<) : $(SUFEXE) ] += $(UNDEFFLAG)$(>) ;
UNIX=true
unknown pid %d with errno = %d
unknown symbol %s
unmakeDir $(<) : $(>[1]:D) $(>[1]:BS) $(>[2-]) ;
unmakeDir _d : $(<) ;
unmatched ()
unmatched []
unmatched {} in action block
unmatched " in string
...updated %d target%s...
UPDATE_NOW
...updating %d target%s...
usage: %s [ options ] targets...
USER_MODULE
...using %d temp target%s...
using header cache for %s
...using %s...
variables
VARNAMES
version 4
Version %s. %s.
\"$(VISUALC16)\\lib\\mlibce.lib\"
\"$(VISUALC16)\\lib\\oldnames.lib\"
VISUALC16 = $(MSVC:J=" ") ;
\"$(VISUALC)\\lib\\gdi32.lib\"
$(VISUALC)\\lib\\kernel32.lib
\"$(VISUALC)\\lib\\kernel32.lib\" ;
\"$(VISUALC)\\lib\\user32.lib\"
VISUALC = $(MSVCDir:J=" ") ;
VISUALC = $(MSVCNT:J=" ") ;
\"$(VISUALC)\\PlatformSDK\\include\" ;
\"$(VISUALC)\\PlatformSDK\\lib\\gdi32.lib\"
\"$(VISUALC)\\PlatformSDK\\lib\\kernel32.lib\" ;
\"$(VISUALC)\\PlatformSDK\\lib\\user32.lib\"
-v      Print the version of jam and exit.
warning: rulename %s expands to empty string
warning: %s depends on itself
WATCOM   = $(watcom:J=" ") ;
while ! $(globs) && $(dir:P) != $(dir)
--x     Option is ignored.
YACC        = ;
YACC        ?= ;
Yacc1 $(<) $(_h) : $(>) ;
YACC        ?= "bison -y" ;
YACCFILES   ?= ;
YACCFILES   ?= y.tab ;
YACCFLAGS   ?= ;
YACCFLAGS   ?= -d ;
YaccMv $(<) $(_h) : $(>) ;
Yacc $(<:S=.c) : $(>) ;
YACC        ?= yacc ;
$(YACC) $(YACCFLAGS) $(>)
%Y-%m-%d %H:%M:%SZ

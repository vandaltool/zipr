                
                }
            {
         */
 !"#$%&'()
 !"#$%&'()*+,-./
					 */
								  
    {   0,
	)	,	0	(	
    {0,0,0}
01=>?@ABCKxHbad buffer in yy_scan_bytes()
%% [10.0] code to find the action number goes here
%% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here
%% [11.0] code for yylineno update goes here
        $1 $2; [[\]]
%% [12.0] debug code goes here
%% [13.0] actions go here
%% [14.0] code to do back-up for compressed tables and set up yy_cp goes here
%% [15.0] code to get the start state into yy_current_state goes here
%% [16.0] code to find the next state goes here
%% [17.0] code to find the next state, and perhaps do backing up, goes here
%% [18.0] update yylineno here
%% [19.0] update BOL and yylineno
%#   1. flex.skl is processed through GNU m4 during the
%% [2.0] code to fiddle yytext and yyleng for yymore() goes here \
		/* +2 for EOB chars. */
%#   2. The preprocessed skeleton is translated verbatim into a
%% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \
        $3 $4; [[\]]
%#   3. At runtime, the skeleton is generated and filtered (again)
%3d:  %4d, %4d
%% [4.0] data tables for the DFA and the user's section 1 definitions go here
 {%4d,%4d },
%4s = %-2d
/	50>?@?B8C
%% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \
"	'	5	:	5	
        $5 $6; [[\]]
%% [6.0] YY_RULE_SETUP definition goes here
%% [7.0] user's declarations go here
  -7, --7bit              generate 7-bit scanner
%% [8.0] yymore()-related code goes here
  -8, --8bit              generate 8-bit scanner
%% [9.0] code to set up and find next match goes here
/** A {0,0,0}-terminated list of structs, forming the map */
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
@A7<8D>;
/* Accessor methods for yylval and yylloc */
/* Accessor  methods (get/set functions) to struct members. */
/* Accessor methods to globals.
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
%#   %#  -  A comment. The current line is omitted from the generated scanner.
/* Action number for EOF rule of a given start state. */
	 * a jam in that state.
/* A lexical scanner generated by flex */
%#   All control-lines EXCEPT comment lines ("%#") will be inserted into
 *  -  All data is stored in network byte order.
%# All generate macros for the m4 stage contain the text "m4" or "M4"
/** Allocate and initialize an input buffer state.
    /* Allocate enough space for the version and name fields */
    /* Allocate space for table.
/* Allocates the stack if it does not exist.
all start conditions already have <<EOF>> rules
		 * already have been incremented past the NUL character
     * altogether.
--always-interactive
/* Amount of stuff to slurp up with each read. */
		/* Amount of text matched not including the EOB char. */
%# and affect the generation of the scanner. The possible control codes are
	 * and can realloc() it to grow it, and should free() it to
 and may be the actual source of other reported performance penalties
 * and the specifics of this scanner. 
/* An opaque pointer. */
        /* A NULL key means choose the first set of tables. */
	 * any pointer type to void*, and deal with argument conversions
 * any uses of REJECT which flex missed.
   are macros in the reentrant scanner. */
%array incompatible with -+ option
                                 array. See notes in manual. */
/** A single serialized table */
 associated rule line numbers:
	 * as though doing an assignment.
%#   %%  -  A stop-point, where code is inserted by flex.
/** A tables-reader object to maintain some state in the read. */
	 * a transition to the end-of-buffer state.  The second causes
attempt to increase array size failed
	 * away when we're done.
--backup
			 * back-up) that will match for the new input source.
bad character class
bad character class expression: %s
bad character inside {}'s
bad character: %s
bad character '%s' detected in check_char()
bad iteration values
bad line in skeleton file
bad start condition list
bad <start condition>: %s
bad state type in mark_beginning_as_normal()
bad transition character detected in sympartition()
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
  -b, --backup            write backing-up information to %s
  -B, --batch             generate batch scanner (opposite of -I)
	 * because both ANSI C and C++ allow castless assignment from
	BEGIN(new_state);
********** beginning dump of nfa with start state %d
	{ /* beginning of action switch */
  Beginning-of-line patterns used
/* begin standard C headers. */
/* begin standard C++ headers. */
/* Begin user sect3 */
	BEGIN(YY_G(yy_start_stack)[YY_G(yy_start_stack_ptr)]);
 * binary format is documented in the manual.
bindtextdomain
--bison-bridge
bison bridge not supported for the C++ scanner.
       --bison-bridge      scanner for bison pure parser.
--bison-locations
       --bison-locations   include yylloc support.
/** bit flags for t_flags field of struct yytbl_data */
                    break;
					break;
				break; \
	buf = (char *) yyalloc( n M4_YY_CALL_LAST_ARG );
		buf[i] = yybytes[i];
			buf[n] = (char) c; \
			buf[n++] = (char) c; \
	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;
%# but it needs to be remain short because it is used everywhere.
   but its presence is necessary. */
     * but there's no conditional variable for that yet. */
 * but we do it the disgusting crufty way forced on us by the ()-less
    /* By setting to 0xAA, we expose bugs in
    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
        bytes = sizeof(struct yy_trans_info) * td.td_lolen * (td.td_hilen ? td.td_hilen : 1);
        bytes = td.td_lolen * (td.td_hilen ? td.td_hilen : 1) * dmap->dm_sz;
    bytes = th->th_hsize - 14;
	b->yy_at_bol = 1;
        b->yy_bs_column = 0;
        b->yy_bs_lineno = 1;
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) M4_YY_CALL_LAST_ARG );
	b->yy_buffer_status = YY_BUFFER_NEW;
	b->yy_buf_pos = &b->yy_ch_buf[0];
	b->yy_buf_pos = b->yy_ch_buf = base;
					b->yy_buf_size *= 2;
							 b->yy_buf_size + 2 M4_YY_CALL_LAST_ARG );
					b->yy_buf_size += b->yy_buf_size / 8;
	b->yy_buf_size = size;
	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
				b->yy_ch_buf = 0;
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
				b->yy_ch_buf = (char *)
	b->yy_ch_buf = (char *) yyalloc( b->yy_buf_size + 2 M4_YY_CALL_LAST_ARG );
	b->yy_fill_buffer = 0;
	b->yy_fill_buffer = 1;
	b->yy_input_file = 0;
	b->yy_input_file = file;
        b->yy_is_interactive = 0;
	b->yy_is_interactive = 0;
	b->yy_is_interactive = 1;
        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
	b->yy_is_our_buffer = 0;
	b->yy_is_our_buffer = 1;
	b->yy_n_chars = 0;
	b->yy_n_chars = b->yy_buf_size;
	b = yy_scan_buffer( buf, n M4_YY_CALL_LAST_ARG);
C	4	7	6	L	
/* C99 requires __STDC__ to be defined as 1. */
/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */
  -Ca, --align      trade off larger tables for better memory alignment
-C[aefFmr]
/** Calculate (0-7) = number bytes needed to pad n to next 64-bit boundary. */
     * called from yyrestart() or through yy_get_next_buffer.
					 * call the scanner after we return the
				/* Can't grow it, we don't own it. */
can't open %s
can't open skeleton file %s
Can't use -f or -F with -l option
Can't use --reentrant or --bison-bridge with -l option
Can't use -+ with -CF option
Can't use -+ with -l option
%#      C array, saved as "skel.c" and compiled into the flex binary.
case 0: /* must back up */
case %d:
				case EOB_ACT_CONTINUE_SCAN:
			case EOB_ACT_CONTINUE_SCAN:
				case EOB_ACT_END_OF_FILE:
				case EOB_ACT_LAST_MATCH:
--case-insensitive
                case sizeof (flex_int16_t):
                case sizeof (flex_int32_t):
                case sizeof (flex_int8_t):
                case sizeof(flex_int8_t):
	case YY_END_OF_BUFFER:
case YY_STATE_EOF(%s):
  -c                      do-nothing POSIX option
  -Ce, --ecs        construct equivalence classes
  -Cem              default compression (same as --ecs --meta-ecs)
-Cf and -CF are mutually exclusive
-Cf/-CF and -Cm don't make sense together
-Cf/-CF and -I are incompatible
-Cf/-CF are incompatible with lex-compatibility mode
  -Cf               do not compress tables; use -f representation
  -+,  --c++               generate C++ scanner class
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
	 * characters.
	char *buf;
	char   *th_name;    /**< The name of this table set. NUL terminated. */
	char   *th_version; /**< Flex version string. NUL terminated. */
                    *(char**)v = NULL;
%#        char * y;
	char *yy_buf_pos;		/* current position in input buffer */
    char *yy_c_buf_p;
	char *yy_ch_buf;		/* input buffer */
    char *yy_full_match;
char *yyget_text M4_YY_PARAMS( M4_YY_PROTO_ONLY_ARG );
char *yyget_text  YYFARGS0(void)
    char yy_hold_char;
    char* yy_last_accepting_cpos;
    char *yytext_ptr;
    char *yytext_r;
    char yytext_r[YYLMAX];
char yytext[YYLMAX];
clearerr
			clearerr(yyin); \
  -Cm, --meta-ecs   construct meta-equivalence classes
/* Code executed at the beginning of each rule, after yytext and yyleng
/* Code executed at the end of each rule. */
        /* column is only valid if an input buffer exists. */
 * compatibility.
  Compressed tables always back-up
Compressed tables always back up.
			 * consistency between YY_CURRENT_BUFFER and our
consistency check failed in epsclosure()
				/* Consume the NUL. */
 * convention of taking the scanner as the last argument. Note however, that
	/* copied from yy_switch_to_buffer. */
            /* copy into the deserialized array... */
/* Copy whatever the last rule matched to the standard output. */
 * corresponding action - sets up yytext.
could not create backing-up info file %s
could not create %s
could not create unique end-of-buffer state
Could not write ecstbl
Could not write eoltbl
Could not write ftbl
Could not write ssltbl
could not write tables header
Could not write yyacclist_tbl
Could not write yyacc_tbl
Could not write yybase_tbl
Could not write yychk_tbl
Could not write yydef_tbl
Could not write yymeta_tbl
Could not write yynultrans_tbl
Could not write yynxt_tbl
Could not write yynxt_tbl[][]
        /* Create the reject buffer large enough to save one state per allowed character. */
  -Cr, --read       use read() instead of stdio for scanner input
__ctype_b_loc
__ctype_tolower_loc
__ctype_toupper_loc
	c = *(unsigned char *) YY_G(yy_c_buf_p);	/* cast for 8-bit char's */
%# -*-C-*- vi: set ft=c:
dangerous trailing context
  %d backing-up (non-accepting) states
%d backing up (non-accepting) states.
dcgettext
  %d/%d base-def entries created
  %d/%d character classes needed %d/%d words of storage, %d reused
  %d/%d DFA states (%d words)
  -d, --debug             enable debug mode in scanner
  %d/%d equivalence classes created
  %d/%d meta-equivalence classes created
  %d/%d NFA states
  %d/%d (peak %d) nxt-chk entries created
  %d/%d (peak %d) template nxt-chk entries created
  %d (%d saved) hash collisions, %d DFAs equal
  %d/%d start conditions
  %d/%d unique/duplicate transitions
Debugging:
%# Declare yyguts variable
                default:
            default: 
--default
	default:
/* Default declaration of generated scanner - a define so the user can
#define 
#define BEGIN YY_G(yy_start) = 1 + 2 *
/* Defined in main.c */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#define ECHO LexerOutput( yytext, yyleng )
#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
#define FLEX_BETA
#define FLEX_DEBUG
#define FLEXINT_H
#define FLEX_SCANNER
#define INT16_MAX              (32767)
#define INT16_MIN              (-32767-1)
#define INT32_MAX              (2147483647)
#define INT32_MIN              (-2147483647-1)
#define INT8_MAX               (127)
#define INT8_MIN               (-128)
#define REJECT \
#define REJECT reject_used_but_not_detected
#define %s %d
#define %sHEADER_H 1
#define %sIN_HEADER 1
#define __STDC_LIMIT_MACROS 1
%# Define these macros to be no-ops.
#define UINT16_MAX             (65535U)
#define UINT32_MAX             (4294967295U)
#define UINT8_MAX              (255U)
#define unput(c) yyunput( c, YY_G(yytext_ptr) M4_YY_CALL_LAST_ARG )
#define yyalloc M4_YY_PREFIX[[alloc]]
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)
#define YY_BREAK break;
#define YY_BUFFER_EOF_PENDING 2
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
#define YY_BUF_SIZE 16384
#define YY_BUF_SIZE 32768
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yyconst
#define yyconst const
#define yy_create_buffer M4_YY_PREFIX[[_create_buffer]]
#define YY_CURRENT_BUFFER_LVALUE YY_G(yy_buffer_stack)[YY_G(yy_buffer_stack_top)]
#define YY_CURRENT_BUFFER ( YY_G(yy_buffer_stack) \
#define YY_DECL int %s::yylex()
#define YY_DECL int yyFlexLexer::yylex()
#define YY_DECL int yylex M4_YY_LEX_DECLARATION
#define YY_DECL_IS_OURS 1
#define yy_delete_buffer M4_YY_PREFIX[[_delete_buffer]]
#define YY_DO_BEFORE_ACTION \
#define YY_END_OF_BUFFER_CHAR 0
#define YY_END_OF_BUFFER %d
#define YY_EXIT_FAILURE 2
#define YY_EXTRA_TYPE M4_EXTRA_TYPE_DEFS
#define YY_EXTRA_TYPE void *
#define yyextra YY_G(yyextra_r)
#define YY_FATAL_ERROR(msg) LexerError( msg )
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg M4_YY_CALL_LAST_ARG)
#define yy_flex_debug M4_YY_PREFIX[[_flex_debug]]
#define yy_flex_debug YY_G(yy_flex_debug_r)
#define YY_FLEX_LEX_COMPAT
    #define yyFlexLexer M4_YY_PREFIX[[FlexLexer]]
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#define yy_flush_buffer M4_YY_PREFIX[[_flush_buffer]]
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER M4_YY_CALL_LAST_ARG)
#define yyfree M4_YY_PREFIX[[free]]
#define yy_init_buffer M4_YY_PREFIX[[_init_buffer]]
#define yyin M4_YY_PREFIX[[in]]
#define YY_INPUT(buf,result,max_size) \
#define YY_INTERACTIVE
#define yyin YY_G(yyin_r)
#define yyleng M4_YY_PREFIX[[leng]]
#define yyleng YY_G(yyleng_r)
    #define  YY_LESS_LINENO(n) \
    #define YY_LESS_LINENO(n)
#define yyless(n) \
#define yylex M4_YY_PREFIX[[lex]]
#define yylineno M4_YY_PREFIX[[lineno]]
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
    #    define yylloc YY_G(yylloc_r)
#define YYLMAX 8192
#define yy_load_buffer_state M4_YY_PREFIX[[_load_buffer_state]]
    #    define yylval YY_G(yylval_r)
#define YY_MORE_ADJ 0
#define YY_MORE_ADJ YY_G(yy_more_len)
#define yymore() (YY_G(yy_more_flag) = 1)
#define yymore() (YY_G(yy_more_offset) = yy_flex_strlen( yytext M4_YY_CALL_LAST_ARG))
#define yymore() yymore_used_but_not_detected
#define YY_NEED_STRLEN
#define yy_new_buffer yy_create_buffer
#define YY_NEW_FILE yyrestart( yyin M4_YY_CALL_LAST_ARG )
#define YY_NULL 0
#define YY_NUM_RULES %d
#define YY_NXT_LOLEN (%d)
#define yyout M4_YY_PREFIX[[out]]
#define yyout YY_G(yyout_r)
#define yypad64(n) ((8-((n)%8))%8)
#define YY_READ_BUF_SIZE 16384
#define YY_READ_BUF_SIZE 8192
#define yyrealloc M4_YY_PREFIX[[realloc]]
#define yyrestart M4_YY_PREFIX[[restart]]
#define YY_RESTORE_YY_MORE_OFFSET
#define YY_RESTORE_YY_MORE_OFFSET \
#define YY_RULE_SETUP \
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
#define yy_set_bol(at_bol) \
#define yy_set_interactive(is_interactive) \
#define yyskel_static
#define yyskel_static static
#define YY_SKIP_YYWRAP
#define YY_START_STACK_INCR 25
#define YY_START ((YY_G(yy_start) - 1) / 2)
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
#define YYSTATE YY_START
#define YY_STDINIT
#define YY_STRUCT_YY_BUFFER_STATE
#define yy_switch_to_buffer M4_YY_PREFIX[[_switch_to_buffer]]
%define-yytables
#define YYTABLES_NAME "%s"
%define-yytables   The name for this specific scanner's tables.
#define YYTABLES_TYPES
#define YYTBL_MAGIC 0xF13C57B1
#define YYTDFLAGS2BYTES(td_flags)\
#define yyterminate() return YY_NULL
#define yytext M4_YY_PREFIX[[text]]
#define yytext_ptr yytext
#define yytext_ptr yytext_r
#define yytext YY_G(yytext_r)
#define YY_TRAILING_HEAD_MASK 0x%x
#define YY_TRAILING_MASK 0x%x
#define YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SIZE_T
#define YY_USE_CONST
#define YY_USER_ACTION
#define yywrap M4_YY_PREFIX[[wrap]]
#define yywrap(n) 1
 * definition of BEGIN.
	 * delete it.
	delete [] yy_state_buf;
  %d empty table entries
  %d epsilon states, %d double epsilon states
/** Describes a mapping from a serialized table id to its deserialized state in
 * Design considerations:
/** Destroy the buffer.
/** Destroy the loaded tables, freeing memory, etc.. */
    /* Destroy the main struct (reentrant only). */
	/* Destroy the stack itself. */
    /* Destroy the start condition stack. */
		*(dest++) = *(source++);
			*--dest = *--source;
detected negative compression
DFA Dump:
/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * Ditto for the __ia64__ case accordingly.
  -Dmacro[=defn]           #define macro defn  (default defn is '1')
            dmap++;
        *dmap->dm_arr = p = (void *) yyalloc (bytes M4_YY_CALL_LAST_ARG);
dnl   1. Redistributions of source code must retain the above copyright
dnl  1. Redistributions of source code must retain the above copyright
dnl   2. Redistributions in binary form must reproduce the above copyright
dnl  2. Redistributions in binary form must reproduce the above copyright
dnl   All rights reserved.
dnl  All rights reserved.
dnl   are met:
dnl  are met:
dnl   Copyright (c) 1990 The Regents of the University of California.
dnl  Copyright (c) 1990 The Regents of the University of California.
dnl   Department of Energy and the University of California.
dnl  Department of Energy and the University of California.
dnl      documentation and/or other materials provided with the distribution.
dnl     documentation and/or other materials provided with the distribution.
dnl  flex code (hence the name "_shared").
dnl   IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
dnl  IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
dnl   may be used to endorse or promote products derived from this software
dnl  may be used to endorse or promote products derived from this software
dnl   modification, are permitted provided that the following conditions
dnl  modification, are permitted provided that the following conditions
dnl   Neither the name of the University nor the names of its contributors
dnl  Neither the name of the University nor the names of its contributors
dnl      notice, this list of conditions and the following disclaimer.
dnl     notice, this list of conditions and the following disclaimer.
dnl      notice, this list of conditions and the following disclaimer in the
dnl     notice, this list of conditions and the following disclaimer in the
dnl   PURPOSE.
dnl  PURPOSE.
dnl   Redistribution and use in source and binary forms, with or without
dnl  Redistribution and use in source and binary forms, with or without
dnl   tables_shared.c - tables serialization code
dnl  tables_shared.h - tables serialization header
dnl   The United States Government has rights in this work pursuant
dnl  The United States Government has rights in this work pursuant
dnl   This code is derived from software contributed to Berkeley by
dnl  This code is derived from software contributed to Berkeley by
dnl  This file is meant to be included in both the skeleton and the actual
dnl   This file is part of flex.
dnl  This file is part of flex.
dnl   THIS SOFTWARE IS PROVIDED `AS IS' AND WITHOUT ANY EXPRESS OR
dnl  THIS SOFTWARE IS PROVIDED `AS IS' AND WITHOUT ANY EXPRESS OR
dnl   to contract no. DE-AC03-76SF00098 between the United States
dnl  to contract no. DE-AC03-76SF00098 between the United States
dnl   Vern Paxson.
dnl  Vern Paxson.
dnl   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
dnl  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
dnl   without specific prior written permission.
dnl  without specific prior written permission.
            do { \
do_action:	/* This label is used only to access EOF actions. */
/* Done after the current pattern has been matched and before the
DO NOT USE THIS FUNCTION!
		/* don't do the read, it's not guaranteed to return an EOF,
		{ /* Don't try to fill the buffer, so this is an EOF. */
 * double cast.
 * down here because we want the user's section 1 to have been scanned first.
    do{ yylineno++;
  %d protos created
  %d rules
  %d sets of reallocations needed
  %d state/nextstate pairs created
  %d table entries
  %d templates created, %d uses
  %d total table entries needed
dup(1) failed
dup2(pipes[0],0)
dup2(pipes[1],1)
dynamic memory failure in copy_string()
	 * each newline.
%#          Each stop-point is numbered here and also in the code generator.
 * easily add parameters.
%#   edit the skeleton.
EFGHHHHIJJKKKLMMNNNNNNOOOPQQQQRSSSTTTUVVVVWWXYYYYYZZZZZZZZZZZZ[[[\\]]]]^^^^^^^^^^^^^^^^^^^^^^^^__
%# e.g.,
EHIJKLMNOPQSRTUVWXY^Z[\_]BF+(
                else
                    }else
            else {
				else
#else	/* ! __cplusplus */
            else if ((td.td_flags & YYTD_PTRANS)) {
else if ( yy_act < %d )
else if ( yy_act == %d )
else if ( yy_act & YY_TRAILING_MASK )
		else switch ( yy_get_next_buffer( M4_YY_CALL_ONLY_ARG ) )
empty machine in dupmachine()
#endif /* ! C99 */
#endif /* __cplusplus */
#endif	/* ! __cplusplus */
#endif	/* defined (__STDC__) */
%endif End reentrant structures and macros.
#endif /* ! FLEXINT_H */
#endif /* __ia64__ */
%endif if-c-only
#endif	/* ifndef YY_NO_INPUT */
%#   %endif        - pop from the previous if code.
#endif /* %sHEADER_H */
#endif /* !YY_DECL */
#endif /* !YY_STRUCT_YY_BUFFER_STATE */
End Marker
	} /* end of action switch */
		 * end-of-buffer state).  Contrast this with the test
********** end of dump
	 * end of it.
		} /* end of scanning one token */
} /* end of yylex */
/* end standard C headers. */
/* end standard C++ headers. */
    }; /* end struct yyguts_t */
/* end table serialization code definitions */
/* end tables serialization structures and prototypes */
/* Enter a start condition.  This macro really ought to take a parameter,
enum yytbl_flags {
enum yytbl_id {
	enum yytbl_id dm_id;/**< table identifier */
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 *	EOB_ACT_LAST_MATCH -
EOF encountered inside an action
EOF encountered inside pattern
	 * EOF (yywrap()) processing, but the only time this flag
Equivalence Classes:
    errno = 0;
			errno=0; \
        errno = EINVAL;
        errno = EIO;
        errno = ENOMEM;
__errno_location
	errno = oerrno;
error closing backup file %s
error closing output file %s
error closing skeleton file %s
error deleting output file %s
error while writing tables
error writing backup file %s
error writing output file %s
exec failed
     *       existing scanners that call yyless() from OUTSIDE yylex. 
	exit( YY_EXIT_FAILURE );
		/* Extend the array by 50%, plus the number we really need. */
extern char *yytext;
extern char yytext[];
extern "C" int isatty M4_YY_PARAMS( int );
extern "C" int yywrap M4_YY_PARAMS( M4_YY_PROTO_ONLY_ARG );
extern FILE *yyin, *yyout;
extern int isatty M4_YY_PARAMS( int );
extern int yy_flex_debug;
extern int yyleng;
extern int yylex M4_YY_LEX_PROTO;
extern int yylineno;
extern int yywrap M4_YY_PARAMS( M4_YY_PROTO_ONLY_ARG );
/** Extract corresponding data size_t from td_flags */
					/*FALLTHROUGH*/
				"fatal error - scanner input buffer overflow" );
		"fatal flex scanner internal error--end of buffer missed" );
fatal flex scanner internal error--end of buffer missed
			"fatal flex scanner internal error--no action found" );
fatal flex scanner internal error--no action found
fatal parse error
  -F, --fast        use alternate table representation. Same as -CFr
  -f, --full        generate fast, large scanner. Same as -Cfr
fgetpos failed
    FILE * fp; /**< input stream */
FILE *yyget_in M4_YY_PARAMS( M4_YY_PROTO_ONLY_ARG );
FILE *yyget_in  YYFARGS0(void)
FILE *yyget_out M4_YY_PARAMS( M4_YY_PROTO_ONLY_ARG );
FILE *yyget_out  YYFARGS0(void)
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
	FILE *yy_input_file;
    FILE *yyin_r, *yyout_r;
FILE *yyin = stdin, *yyout = stdout;
filter_func failed
find_rule: /* we branch to this label when backing up */
/* Find the key and load the DFA tables from the given stream.  */
		/* First allocation is just for 2 elements, since we don't know if this
	/* First move last chars to start of buffer. */
/* First, we deal with  platform-specific or compiler-specific issues. */
/* Flag which is used to allow yywrap()'s to do buffer switches
 * flex code (hence the name "_shared"). 
flex_int16_t
                        ((flex_int16_t *) p)[0] = (flex_int16_t) t32;
            flex_int16_t t16;
                        ((flex_int16_t *) v)[0] = (flex_int16_t) t32;
flex_int32_t
	flex_int32_t n;
                        ((flex_int32_t *) p)[0] = (flex_int32_t) t32;
            flex_int32_t t32;
                        ((flex_int32_t *) v)[0] = (flex_int32_t) t32;
flex_int32_t yy_nxt;
flex_int32_t yy_verify;
                        ((flex_int8_t *) p)[0] = (flex_int8_t) t32;
            flex_int8_t  t8;
            flex_int8_t t8;
                        ((flex_int8_t *) v)[0] = (flex_int8_t) t32;
/* flex integer type definitions */
flex scanner jammed
flex scanner push-back overflow
	flex_uint16_t td_flags;   /**< how to interpret this data */
	flex_uint16_t td_id;      /**< enum yytbl_id table identifier */
	flex_uint16_t th_flags;  /**< Currently unused, must be 0 */
    *((flex_uint16_t *) v) = ntohs (*((flex_uint16_t *) v));
    flex_uint32_t bread; /**< bytes read since beginning of current tableset */
	flex_uint32_t td_hilen;   /**< num elements in highest dimension array */
	flex_uint32_t td_lolen;   /**< num elements in lowest dimension array */
	flex_uint32_t th_hsize;  /**< Size of this header in bytes. */
	flex_uint32_t th_magic;  /**< Must be 0xF13C57B1 (comes from "Flex Table") */
	flex_uint32_t th_ssize;  /**< Size of this dataset, in bytes, including header. */
    *((flex_uint32_t *) v) = ntohl (*((flex_uint32_t *) v));
		/* Flush out information for old buffer. */
     * following macro. This is required in order to pass the c++-multiple-scanners
%# For compilers that can not handle prototypes.
%# For compilers that need traditional function definitions.
/* For convenience, these vars (plus the bison vars far below)
        for(dmap=yydmap; dmap->dm_id; dmap++) {
    /* For future reference: Set errno on error, since we are called by
    for (i = 0; i < len; ){
	for ( i = 0; i < n; ++i )
	for ( i = 0; i < number_to_move; ++i )
	for ( i = 0; i < _yybytes_len; ++i )
        for (j = 0; j < inner_loop_count; j++, i++) {
fork failed
		for ( n = 0; n < max_size && \
	for ( n = 0; s[n]; ++n )
for ( ; ; ) /* until we find what rule we matched */
			 * for us because it doesn't know how to deal
%# For use in function calls to pass the additional argument.
%# For use in function definitions to append the additional argument.
%# For use in function documentation to adjust for additional argument.
%# For use in function prototypes to append the additional argument.
%# For use wherever a Global is accessed or assigned.
	for ( yy_cp = YY_G(yytext_ptr) + YY_MORE_ADJ; yy_cp < YY_G(yy_c_buf_p); ++yy_cp )
for ( yy_c = %s;
                for ( yyl = n; yyl < yyleng; ++yyl )\
for ( yyl = %s; yyl < yyleng; ++yyl )
found too many transitions in mkxtion()
__fprintf_chk
fprintf( stderr, "--accepting default rule (\"%s\")\n",
fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
fprintf( stderr, "--(end of buffer or a NUL)\n" );
fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
fprintf( stderr, "--scanner backing up\n" );
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
freopen(headerfilename) failed
     * from bison output in section 1.*/
            fseek(rd.fp, th.th_ssize - th.th_hsize, SEEK_CUR);
 * future we want to put the buffer states in a more general
%# Generate C99 function defs.
Generated code:
Generates programs that perform pattern-matching on text.
%# Generate traditional function defs
	/* Get memory for full buffer, including space for trailing EOB's. */
get|set|fwrite32 failed
/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
/** Get the current column number.
/** Get the current line number.
/** Get the current token.
/** Get the input stream.
/** Get the length of the current token.
/** Get the number of integers in this table. This is NOT the
/** Get the output stream.
/** Get the user-defined data for this scanner.
GLIBC_2.0
GLIBC_2.1
GLIBC_2.11
GLIBC_2.2
GLIBC_2.3
GLIBC_2.3.4
GLIBC_2.4
GLIBC_2.7
			 * globals.  Here is the right place to do so, because
__gmon_start__
					goto do_action;
goto find_rule;
goto find_rule; \
            goto return_rv;
				goto yy_find_action;
				goto yy_match;
 *  Guarantees space for at least one push.
 * have been set up.
{ /* have to back up */
--header-file[=FILE]
      --header-file=FILE   create a C header file in addition to the scanner
%# Here are the stages, as best as I can describe:
  -h, --help              produce this help message
/* Holds the entire state of the reentrant scanner. */
					 * hoser (like flex itself) wants to
  -i, --case-insensitive  ignore case in patterns
	if ( ! b )
%if-bison-bridge
%#   %if-bison-bridge  - Print for bison-bridge. (push)
    /* If b is the current buffer, then yy_init_buffer was _probably_
	if ( ! buf )
			if ( ! b->yy_ch_buf )
    if (b != YY_CURRENT_BUFFER){
	if ( b == YY_CURRENT_BUFFER )
	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
			if ( b->yy_is_our_buffer )
		if ( c == EOF && ferror( yyin ) ) \
    if ( c == '\n' ){
		if ( c == '\n' ) \
if ( c == '\n' )
%if-c-only
%if-c++-only
%if-c++-only C++ definition
%if-c++-only C++ definition \
%if-c-only Reentrant structure and macros (non-C++).
%if-c-only SNIP! this currently causes conflicts with the c++ scanner
%if-c-only Standard (non-C++) definition
%#   %if-c-only    -  The following lines are NOT printed for C++ scanners.
%#   %if-c++-only  -  The following lines are printed for C++ scanners ONLY.
%if-c-or-c++
%#   %if-c-or-c++  -  The following lines are printed in BOTH C and C++ scanners.
#ifdef __cplusplus
#ifdef FLEX_SCANNER
#ifdef __ia64__
#if defined (__STDC__)
#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
#ifdef VMS
#ifdef __VMS_POSIX
#ifdef YY_DECL_IS_OURS
#ifdef YY_INTERACTIVE
#ifdef YY_NEED_STRLEN
#ifdef YY_STDINIT
#ifdef YY_USE_CONST
#ifdef YY_USER_INIT
        if (dmap->dm_id == id)
    if ((dmap = yytbl_dmap_lookup (dmap, td.td_id M4_YY_CALL_LAST_ARG)) == NULL){
			if( errno != EINTR) \
                        if( ((flex_int16_t *) p)[0] != (flex_int16_t) t32)
                        if(((flex_int16_t *) v)[0] != (flex_int16_t) t32)
                        if( ((flex_int32_t *) p)[0] != (flex_int32_t) t32)
                        if( ((flex_int32_t *) v)[0] != (flex_int32_t) t32)
                        if( ((flex_int8_t *) p)[0] != (flex_int8_t) t32)
                         if( ((flex_int8_t *) v)[0] != (flex_int8_t) t32)
    if (fread (th->th_version, 1, bytes, rd->fp) != bytes){
    if (fread (v, sizeof (flex_uint16_t), 1, rd->fp) != 1){
    if (fread (v, sizeof (flex_uint32_t), 1, rd->fp) != 1){
    if (fread (v, sizeof (flex_uint8_t), 1, rd->fp) != 1){
    /* If it's a struct, we read 2 integers to get one element */
                if (j == 1)
        if (key == NULL)
                    if (M4_YY_TABLES_VERIFY ){
                    if (M4_YY_TABLES_VERIFY){
                    if(M4_YY_TABLES_VERIFY ){
                if( M4_YY_TABLES_VERIFY)
    if(!M4_YY_TABLES_VERIFY){
    if(M4_YY_TABLES_VERIFY)
#ifndef __cplusplus
#ifndef ECHO
#ifndef FLEXINT_H
#ifndef INT16_MAX
#ifndef INT16_MIN
#ifndef INT32_MAX
#ifndef INT32_MIN
#ifndef INT8_MAX
#ifndef INT8_MIN
#ifndef %sHEADER_H
#ifndef __STDC_LIMIT_MACROS
#ifndef UINT16_MAX
#ifndef UINT32_MAX
#ifndef UINT8_MAX
#ifndef __VMS_POSIX
#ifndef YY_BREAK
#ifndef YY_BUF_SIZE
#ifndef YY_DECL
#ifndef YY_EXIT_FAILURE
#ifndef YY_EXTRA_TYPE
#ifndef YY_FATAL_ERROR
#ifndef YY_INPUT
#ifndef YYLMAX
#ifndef YY_NO_INPUT
#ifndef YY_NO_UNISTD_H
#ifndef yypad64
#ifndef YY_READ_BUF_SIZE
#ifndef yyskel_static
#ifndef YY_SKIP_YYWRAP
#ifndef YY_START_STACK_INCR
#ifndef YY_STRUCT_YY_BUFFER_STATE
#ifndef YYTABLES_TYPES
#ifndef YYTBL_MAGIC
#ifndef YYTDFLAGS2BYTES
#ifndef yyterminate
#ifndef yytext_ptr
#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#ifndef YY_TYPEDEF_YY_SCANNER_T
#ifndef YY_TYPEDEF_YY_SIZE_T
#ifndef YY_USER_ACTION
 *  if necessary.
	if (new_buffer == NULL)
	if ( new_in )
	if ( new_out )
				if ( new_size <= 0 )
%if-not-bison-bridge
%#   %if-not-bison-bridge  - Print for non-bison-bridge. (push)
%if-not-reentrant
%#   %if-not-reentrant - Print for non-reentrant scanners. (push)
		if ( number_to_move == YY_MORE_ADJ )
		if ( num_to_read > YY_READ_BUF_SIZE )
        if ( ! p )
    if (*ptr_yy_globals == NULL){
    if (ptr_yy_globals == NULL){
%if-reentrant
%#   %if-reentrant     - Print for reentrant scanners.(push)
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
            if (rv != 0)
	if ( size < 2 ||
	 * If so, '^' rules will be active on the next match, otherwise
        if (strcmp(th.th_name,key) != 0){
                    if( ((struct yy_trans_info **) p)[0] != v)
%#   %if-tables-serialization
%if-tables-serialization definitions
%if-tables-serialization structures and prototypes
	if (tbl->td_hilen > 0)
	if (tbl->td_id == YYTD_ID_TRANSITION)
            if ((td.td_flags & YYTD_STRUCT)) {
    if ((td.td_flags & YYTD_STRUCT))
    if ((td.td_flags & YYTD_STRUCT) != 0)
		 * If this occurs *before* the EOB characters, then it's a
    if (th->th_hsize < 16 || th->th_hsize > 1024){
    if (th->th_magic != YYTBL_MAGIC){
    if ( ! th->th_version )
    if(th.th_version){
                if (!transdmap){
            if(v && *(char**)v){
                /* if we're done with j, increment p */
	 * if we're using stdio for input, then we want to use getc()
 * if you want the limit (max/min) macros for int types. 
if ( yy_accept[yy_current_state] )
if ( yy_act == 0 )
if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
if ( yy_act == YY_G(yy_looking_for_trail_begin) )
if ( yy_act & YY_TRAILING_HEAD_MASK ||
if ( *yy_cp )
		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
        if (! YY_CURRENT_BUFFER )
        if (! YY_CURRENT_BUFFER)
		if ( ! YY_CURRENT_BUFFER ) {
	if ( ! YY_CURRENT_BUFFER ){
	if ( ! YY_CURRENT_BUFFER ){ \
	if ( ! YY_CURRENT_BUFFER ){\
	if ( YY_CURRENT_BUFFER )
	if (!YY_CURRENT_BUFFER)
	if (YY_CURRENT_BUFFER)
	if (YY_CURRENT_BUFFER) {
if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
	if ( YY_CURRENT_BUFFER == new_buffer )
if ( yy_current_state[-1].yy_nxt )
if ( yy_current_state >= %d )
if ( yy_flex_debug )
#if YY_FLEX_SUBMINOR_VERSION > 0
		if ( ! YY_G(yy_buffer_stack) )
	if (!YY_G(yy_buffer_stack)) {
	if (YY_G(yy_buffer_stack_top) > 0)
	if (YY_G(yy_buffer_stack_top) >= (YY_G(yy_buffer_stack_max)) - 1){
		if ( YY_G(yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[YY_G(yy_n_chars)] )
		if ( YY_G(yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[YY_G(yy_n_chars)] )
	if ( YY_G(yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[YY_G(yy_n_chars) + 1] )
	if ( *YY_G(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		if ( YY_G(yy_c_buf_p) - YY_G(yytext_ptr) - YY_MORE_ADJ == 1 )
					if ( ! YY_G(yy_did_buffer_switch_on_eof) )
	if ( !YY_G(yy_init) )
if ( YY_G(yy_lp) && YY_G(yy_lp) < yy_accept[yy_current_state + 1] )
if ( YY_G(yy_more_flag) )
	if ( YY_G(yy_n_chars) == 0 )
		if ( ! YY_G(yy_start) )
		if ( ! YY_G(yy_start_stack) )
	if ( --YY_G(yy_start_stack_ptr) < 0 )
	if ( YY_G(yy_start_stack_ptr) >= YY_G(yy_start_stack_depth) )
            if ( ! YY_G(yy_state_buf) )
		if ( ! yyin )
	if ( yyin->bad() )
	if ( yyin->eof() )
	if ( yyin->eof() || yyin->fail() )
if ( ! yy_is_jam )
if ( yyleng > 0 ) \
if ( yyleng + YY_G(yy_more_offset) >= YYLMAX ) \
if ( yyleng >= YYLMAX ) \
			if ( yy_next_state )
		if ( ! yyout )
	if ((yy_size_t) (YY_G(yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
        if(yytbl_data_load (yydmap,&rd M4_YY_CALL_LAST_ARG) != 0){
    if( yytbl_fload(fp, YYTABLES_NAME M4_YY_CALL_LAST_ARG) != 0)
        if (yytbl_hdr_read (&th, &rd M4_YY_CALL_LAST_ARG) != 0){
    if (yytbl_read16 (&td.td_id, rd) != 0
    if (yytbl_read32 (&(th->th_hsize), rd) != 0
    if (yytbl_read32 (&(th->th_magic), rd) != 0)
            if(yytbl_read8(&t8,rd) != 0)
                    if ( yytext[yyl] == '\n' )\
if ( yytext[yyl] == '\n' )
					if ( yywrap( M4_YY_CALL_ONLY_ARG ) )
				if ( yywrap( M4_YY_CALL_ONLY_ARG ) )
-I (interactive) entails a minor performance penalty
  -I, --interactive       generate interactive scanner (opposite of -B)
/** Immediately switch to a different input stream.
		 * immediate realloc on the next call.
	 * implementations that use char* generic pointers, and those
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <errno.h>
#include "flexdef.h"
#include <FlexLexer.h>
#include <inttypes.h>
#include <iostream> 
#include <netinet/in.h>
					/* Include room in for 2 EOB chars. */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include "tables.h"
#include <unistd.h>
incomplete name definition
		/* Increase the buffer to prepare for a possible push. */
                /* increment p */
		 * in input().
    /* Initialization is the same as for the non-reentrant scanner.
/* Initializes or reinitializes a buffer.
        inner_loop_count = 1;
        inner_loop_count = 2;
 * input buffer.
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
input buffer overflow, can't enlarge buffer because scanner uses REJECT
input error reading skeleton file %s
input in flex scanner failed
Input line too long
input rules are too complicated (>= %d NFA states)
insanity detected
     * inside the loop below. This scanner might not even have a transition
	 * instead of fread(), to make sure we stop fetching input after
 * instead of setting up a fresh yyin.  A bit of a hack ...
    int     bytes;
		int c = '*'; \
 * integer for use as an array index.  If the signed char is negative,
--interactive
Internal error. flexopts are malformed.
 * Internal utility routines.
%#    int foo ();
%#    int foo (int x, char* y)
%#    int foo(int x, char* y);
%#    int foo M4_YY_PARAMS(int x, char* y);
%#    int foo (x,y,yyscanner)
%#    int foo YYFARGS2(int,x, char*,y)
		int grow_size = 8 /* arbitrary grow size */;
     * In that case, we don't want to reset the lineno or column.
%# in them. This is to distinguish them from CPP macros.
                                                      int, id)
        int    j;
    int     len, i, rv, inner_loop_count;
int main ()
int main M4_YY_PARAMS(void);
				int new_size = b->yy_buf_size * 2;
	int num_to_alloc;
			int num_to_read =
	int oerrno = errno;
			int offset = YY_G(yy_c_buf_p) - YY_G(yytext_ptr);
                                 into the expanded yy_transition
        int pad;
	int ret_val;
    int rv=0;
%#        int x;
		int yy_amount_of_matched_text = (int) (yy_cp - YY_G(yytext_ptr)) - 1;
	int yy_at_bol;
    int yy_bs_column; /**< The column count. */
    int yy_bs_lineno; /**< The line count. */
	int yy_buffer_status;
			int yy_c_buf_p_offset =
    int yy_did_buffer_switch_on_eof;
	int yy_fill_buffer;
    int yy_flex_debug_r;
int yy_flex_debug = %s;
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
int yyFlexLexer::LexerInput( char* buf, int max_size )
int yyFlexLexer::yy_get_next_buffer()
    int yyFlexLexer::yyinput()
int yyFlexLexer::yylex()
    int yyFlexLexer::yy_top_state()
int yyFlexLexer::yywrap() { return 1; }
    int yy_full_lp;
    int *yy_full_state;
int yyget_column  YYFARGS0(void)
int yyget_debug M4_YY_PARAMS( M4_YY_PROTO_ONLY_ARG );
int yyget_debug  YYFARGS0(void)
int yyget_leng M4_YY_PARAMS( M4_YY_PROTO_ONLY_ARG );
int yyget_leng  YYFARGS0(void)
int yyget_lineno M4_YY_PARAMS( M4_YY_PROTO_ONLY_ARG );
int yyget_lineno  YYFARGS0(void)
				(int) (YY_G(yy_c_buf_p) - b->yy_ch_buf);
    int yy_init;
	int yy_is_interactive;
	int yy_is_our_buffer;
                int yyl;\
int yyl;
    int yyleng_r;
        int yyless_macro_arg = (n); \
int yylex_destroy M4_YY_PARAMS( M4_YY_PROTO_ONLY_ARG );
int yylex_destroy  YYFARGS0(void)
int yylex_init_extra M4_YY_PARAMS( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
int yylex_init_extra( yy_user_defined, ptr_yy_globals )
int yylex_init M4_YY_PARAMS(yyscan_t* scanner);
int yylex_init( ptr_yy_globals )
int yylex_init(yyscan_t* ptr_yy_globals)
int yylineno = 1;
    int yylineno_r;
    int yy_looking_for_trail_begin;
    int yy_lp;
    int yy_more_flag;
    int yy_more_len;
    int yy_more_offset;
    int yy_n_chars;
	int yy_n_chars;
    int yy_prev_more_offset;
    int yy_start;
    int *yy_start_stack;
    int yy_start_stack_depth;
    int yy_start_stack_ptr;
int yytables_destroy M4_YY_PARAMS(M4_YY_PROTO_ONLY_ARG);
int yytables_destroy YYFARGS0(void)
int yytables_fload M4_YY_PARAMS(FILE * fp M4_YY_PROTO_LAST_ARG);
int yytables_fload YYFARGS1(FILE *, fp)
_IO_getc
_IO_putc
_IO_stdin_used
	 * is looked at is after yywrap() is called, so it's safe
__isoc99_sscanf
 * is returned in "result".
 * is the reason, too, why this function also must handle its own declaration).
iteration value must be positive
	/* It's okay to grow etc. this buffer, and we should throw it
 jam-transitions: EOF 
			/* just a shorter name for the current buffer */
		 * just force an EOF
			 * just pointed yyin at a new source and called
	 * just pointing yyin at a new input file.
_Jv_RegisterClasses
    /* Keep trying until we find the right set of tables or end of file. */
-l AT&T lex compatibility option entails a large performance penalty
    len = yytbl_calc_total_len (&td);
lex.backup
--lex-compat
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
lex.%s.%s
lex.%s.tables
libc.so.6
__libc_start_main
/lib/ld-linux.so.2
libm.so.6
/* Limits of integral types. */
#line 0 "M4_YY_OUTFILE_NAME"
#line 4000 "M4_YY_OUTFILE_NAME"
^#line ([[:digit:]]+) "(.*)"
#line %d "%s"
        /* lineno is only valid if an input buffer exists. */
%# Lines in this skeleton starting with a "%" character are "control lines"
%# listed and processed in misc.c.
  -l, --lex-compat        maximal compatibility with original lex
  -L,  --noline            suppress #line directives in scanner
        /* Load the data tables */
/** Load the DFA tables for this scanner from the given stream.  */
/* Load the DFA tables from the given stream.  */
long int
__longjmp_chk
         (long)yy_rule_linenum[yy_act], yytext );
/** lookup id in the dmap list.
    /* Lookup the map for the transition table so we have it in case we need it
[:^lower:] is ambiguous in case insensitive scanner
m4_changecom
m4_changecom`'m4_dnl
m4_changequote
m4_changequote([[, ]])
m4_changequote`'m4_dnl
m4_changequote([[,]])[[]]m4_dnl
m4_define([[M4_YY_CALL_LAST_ARG]])
m4_define( [[M4_YY_CALL_LAST_ARG]], [[, yyscanner]])
m4_define([[M4_YY_CALL_ONLY_ARG]])
m4_define( [[M4_YY_CALL_ONLY_ARG]], [[yyscanner]])
m4_define( [[M4_YY_DECL_GUTS_VAR]], [[m4_dnl]])
m4_define( [[M4_YY_DECL_GUTS_VAR]], [[struct yyguts_t * yyg = (struct yyguts_t*)yyscanner]])
m4_define([[M4_YY_DECL_LAST_ARG]])
m4_define( [[M4_YY_DECL_LAST_ARG]],  [[yyscan_t yyscanner;]])
m4_define( [[M4_YY_DEF_LAST_ARG]])
    m4_define( [[M4_YY_DEF_LAST_ARG]], [[, yyscanner]])
    m4_define( [[M4_YY_DEF_LAST_ARG]],  [[, yyscan_t yyscanner]])
    m4_define( [[M4_YY_DEF_ONLY_ARG]])
    m4_define( [[M4_YY_DEF_ONLY_ARG]],  [[void]])
    m4_define( [[M4_YY_DEF_ONLY_ARG]], [[yyscanner]])
    m4_define( [[M4_YY_DEF_ONLY_ARG]],  [[yyscan_t yyscanner]])
m4_define( [[M4_YY_DOC_PARAM]], [[]])
m4_define( [[M4_YY_DOC_PARAM]], [[@param yyscanner The scanner object.]])
m4_define( [[M4_YY_INCR_LINENO]],
m4_define( [[M4_YY_IN_HEADER]],[[]])m4_dnl
    m4_define( [[M4_YY_LEX_DECLARATION]], [[\]]
m4_define( [[M4_YY_LEX_DECLARATION]], [[YYFARGS0(void)]])
    m4_define( [[M4_YY_LEX_PROTO]], [[\]]
m4_define( [[M4_YY_LEX_PROTO]], [[M4_YY_PARAMS(M4_YY_PROTO_ONLY_ARG)]])
m4_define([[M4_YY_NOOP]])[[]]m4_dnl
m4_define( [[M4_YY_NO_POP_STATE]])
m4_define( [[M4_YY_NO_PUSH_STATE]])
m4_define( [[M4_YY_NO_TOP_STATE]])
m4_define( [[M4_YY_OUTFILE_NAME]],[[%s]])m4_dnl
    m4_define( [[M4_YY_PARAMS]], [[()]])
    m4_define( [[M4_YY_PARAMS]], [[($*)]])
m4_define( [[M4_YY_PROTO_LAST_ARG]])
m4_define( [[M4_YY_PROTO_LAST_ARG]],  [[, yyscan_t yyscanner]])
m4_define( [[M4_YY_PROTO_ONLY_ARG]],  [[void]])
m4_define( [[M4_YY_PROTO_ONLY_ARG]],  [[yyscan_t yyscanner]])
m4_define( [[%s]], [[%s]])m4_dnl
    m4_define(yy[[alloc]], [[M4_YY_PREFIX[[alloc]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[_create_buffer]], [[M4_YY_PREFIX[[_create_buffer]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[_delete_buffer]], [[M4_YY_PREFIX[[_delete_buffer]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[ensure_buffer_stack]], [[M4_YY_PREFIX[[ensure_buffer_stack]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define( [[YYFARGS0]], [[(M4_YY_DEF_ONLY_ARG) [[\]]
    m4_define( [[YYFARGS0]], [[(M4_YY_DEF_ONLY_ARG)]])
    m4_define( [[YYFARGS1]], [[($1 $2 M4_YY_DEF_LAST_ARG)]])
    m4_define( [[YYFARGS1]], [[($2 M4_YY_DEF_LAST_ARG) [[\]]
    m4_define( [[YYFARGS2]], [[($1 $2, $3 $4 M4_YY_DEF_LAST_ARG)]])
    m4_define( [[YYFARGS2]], [[($2,$4 M4_YY_DEF_LAST_ARG) [[\]]
    m4_define( [[YYFARGS3]], [[($1 $2, $3 $4, $5 $6 M4_YY_DEF_LAST_ARG)]])
    m4_define( [[YYFARGS3]], [[($2,$4,$6 M4_YY_DEF_LAST_ARG) [[\]]
    m4_define(yy[[_flex_debug]], [[M4_YY_PREFIX[[_flex_debug]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[_flush_buffer]], [[M4_YY_PREFIX[[_flush_buffer]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[free]], [[M4_YY_PREFIX[[free]]m4_ifelse($#,0,,[[($@)]])]])
m4_define( [[YY_G]], [[($1)]])
        m4_define(yy[[get_column]], [[M4_YY_PREFIX[[get_column]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[get_debug]], [[M4_YY_PREFIX[[get_debug]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[get_extra]], [[M4_YY_PREFIX[[get_extra]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[get_in]], [[M4_YY_PREFIX[[get_in]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[get_leng]], [[M4_YY_PREFIX[[get_leng]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[get_lineno]], [[M4_YY_PREFIX[[get_lineno]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[get_lloc]], [[M4_YY_PREFIX[[get_lloc]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[get_lval]], [[M4_YY_PREFIX[[get_lval]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[get_out]], [[M4_YY_PREFIX[[get_out]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[get_text]], [[M4_YY_PREFIX[[get_text]]m4_ifelse($#,0,,[[($@)]])]])
m4_define( [[YY_G]], [[yyg->$1]])
    m4_define(yy[[_init_buffer]], [[M4_YY_PREFIX[[_init_buffer]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[in]], [[M4_YY_PREFIX[[in]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[leng]], [[M4_YY_PREFIX[[leng]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[lex_destroy]], [[M4_YY_PREFIX[[lex_destroy]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[lex_init_extra]], [[M4_YY_PREFIX[[lex_init_extra]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[lex_init]], [[M4_YY_PREFIX[[lex_init]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[lex]], [[M4_YY_PREFIX[[lex]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[lineno]], [[M4_YY_PREFIX[[lineno]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[_load_buffer_state]], [[M4_YY_PREFIX[[_load_buffer_state]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[out]], [[M4_YY_PREFIX[[out]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[pop_buffer_state]], [[M4_YY_PREFIX[[pop_buffer_state]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[push_buffer_state]], [[M4_YY_PREFIX[[push_buffer_state]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[realloc]], [[M4_YY_PREFIX[[realloc]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[restart]], [[M4_YY_PREFIX[[restart]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[_scan_buffer]], [[M4_YY_PREFIX[[_scan_buffer]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[_scan_bytes]], [[M4_YY_PREFIX[[_scan_bytes]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[_scan_string]], [[M4_YY_PREFIX[[_scan_string]]m4_ifelse($#,0,,[[($@)]])]])
        m4_define(yy[[set_column]], [[M4_YY_PREFIX[[set_column]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[set_debug]], [[M4_YY_PREFIX[[set_debug]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[set_extra]], [[M4_YY_PREFIX[[set_extra]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[set_in]], [[M4_YY_PREFIX[[set_in]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[set_lineno]], [[M4_YY_PREFIX[[set_lineno]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[set_lloc]], [[M4_YY_PREFIX[[set_lloc]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[set_lval]], [[M4_YY_PREFIX[[set_lval]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[set_out]], [[M4_YY_PREFIX[[set_out]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[_switch_to_buffer]], [[M4_YY_PREFIX[[_switch_to_buffer]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[tables_destroy]], [[M4_YY_PREFIX[[tables_destroy]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[tables_fload]], [[M4_YY_PREFIX[[tables_fload]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[TABLES_NAME]], [[M4_YY_PREFIX[[TABLES_NAME]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[text]], [[M4_YY_PREFIX[[text]]m4_ifelse($#,0,,[[($@)]])]])
    m4_define(yy[[wrap]], [[M4_YY_PREFIX[[wrap]]m4_ifelse($#,0,,[[($@)]])]])
    m4_dnl  accept the lval parameter.
m4_dnl ifdef(`__gnu__', ,`errprint(Flex requires GNU M4. Set the PATH or set the M4 environment variable to its path name.) m4exit(2)')
    m4_dnl  Locations are used. yylex should also accept the ylloc parameter.
    m4_dnl M4_YY_DECL_GUTS_VAR();
    m4_dnl  The bison pure parser is used. Redefine yylex to
M4_EXTRA_TYPE_DEFS
m4_ifdef( [[M4_EXTRA_TYPE_DEFS]],
m4_ifdef( [[M4_YY_ALWAYS_INTERACTIVE]],
m4_ifdef( [[M4_YY_ALWAYS_INTERACTIVE]],,
    m4_ifdef( [[<M4_YY_BISON_LLOC>]],
    m4_ifdef( [[M4_YY_BISON_LVAL]],
m4_ifdef( [[M4_YY_HAS_START_STACK_VARS]],
m4_ifdef( [[M4_YY_IN_HEADER]],
m4_ifdef( [[M4_YY_IN_HEADER]],,[[
m4_ifdef( [[M4_YY_IN_HEADER]], [[#endif]])
m4_ifdef( [[M4_YY_IN_HEADER]], [[#ifdef YY_HEADER_EXPORT_START_CONDITIONS]])
m4_ifdef( [[M4_YY_IN_HEADER]], , [[m4_define([[M4_YY_NOT_IN_HEADER]], [[]])]])
m4_ifdef([[M4_YY_MAIN]], [[
    m4_ifdef( [[M4_YY_NEVER_INTERACTIVE]],
    m4_ifdef( [[M4_YY_NEVER_INTERACTIVE]],,
m4_ifdef( [[M4_YY_NO_ANSI_FUNC_DEFS]],
m4_ifdef( [[M4_YY_NO_ANSI_FUNC_PROTOS]],
m4_ifdef( [[M4_YY_NO_DESTROY]],,
m4_ifdef( [[M4_YY_NO_FLEX_ALLOC]],,
m4_ifdef( [[M4_YY_NO_FLEX_FREE]],,
m4_ifdef( [[M4_YY_NO_FLEX_REALLOC]],,
m4_ifdef( [[M4_YY_NO_GET_COLUMN]],,
m4_ifdef( [[M4_YY_NO_GET_DEBUG]],,
m4_ifdef( [[M4_YY_NO_GET_EXTRA]],,
m4_ifdef( [[M4_YY_NO_GET_IN]],,
m4_ifdef( [[M4_YY_NO_GET_LENG]],,
m4_ifdef( [[M4_YY_NO_GET_LINENO]],,
    m4_ifdef( [[M4_YY_NO_GET_LLOC]],,
m4_ifdef( [[M4_YY_NO_GET_LVAL]],,
m4_ifdef( [[M4_YY_NO_GET_OUT]],,
m4_ifdef( [[M4_YY_NO_GET_TEXT]],,
    m4_ifdef( [[M4_YY_NO_POP_STATE]],,
    m4_ifdef( [[M4_YY_NO_PUSH_STATE]],,
m4_ifdef( [[M4_YY_NO_SCAN_BUFFER]],,
m4_ifdef( [[M4_YY_NO_SCAN_BYTES]],,
m4_ifdef( [[M4_YY_NO_SCAN_STRING]],,
m4_ifdef( [[M4_YY_NO_SET_COLUMN]],,
m4_ifdef( [[M4_YY_NO_SET_DEBUG]],,
m4_ifdef( [[M4_YY_NO_SET_EXTRA]],,
m4_ifdef( [[M4_YY_NO_SET_IN]],,
m4_ifdef( [[M4_YY_NO_SET_LINENO]],,
    m4_ifdef( [[M4_YY_NO_SET_LLOC]],,
m4_ifdef( [[M4_YY_NO_SET_LVAL]],,
m4_ifdef( [[M4_YY_NO_SET_OUT]],,
    m4_ifdef( [[M4_YY_NOT_IN_HEADER]],
    m4_ifdef( [[M4_YY_NO_TOP_STATE]],,
    m4_ifdef( [[M4_YY_NOT_REENTRANT]],
m4_ifdef( [[M4_YY_NO_UNISTD_H]],,
    m4_ifdef( [[M4_YY_NO_UNPUT]],,
m4_ifdef( [[M4_YY_PREFIX]],, [[m4_define([[M4_YY_PREFIX]], [[yy]])]])
    m4_ifdef( [[M4_YY_REENTRANT]],
m4_ifdef( [[M4_YY_REENTRANT]],  [[m4_define([[M4_YY_HAS_START_STACK_VARS]])]])
m4_ifdef( [[M4_YY_REENTRANT]], , [[m4_define([[M4_YY_NOT_REENTRANT]], [[]])]])
m4_ifdef( [[M4_YY_STACK_USED]],
m4_ifdef( [[M4_YY_STACK_USED]], [[m4_define([[M4_YY_HAS_START_STACK_VARS]])]])
m4_ifdef( [[M4_YY_TABLES_EXTERNAL]],
m4_ifdef( [[M4_YY_TEXT_IS_ARRAY]],
    m4_ifdef( [[M4_YY_USE_LINENO]],
m4_ifdef( [[M4_YY_USE_LINENO]],[[
m4_ifdef( [[M4_YY_USES_REJECT]],
m4_ifelse(M4_YY_PREFIX,yy,,
m4_undefine( [[M4_YY_IN_HEADER]])m4_dnl
m4_undefine( [[%s]])m4_dnl
M4_YY_ALWAYS_INTERACTIVE
<M4_YY_BISON_LLOC>
M4_YY_BISON_LVAL
								M4_YY_CALL_LAST_ARG);
    M4_YY_DECL_GUTS_VAR();
    M4_YY_DECL_GUTS_VAR(); /* This var may be unused depending upon options. */
        M4_YY_DECL_LAST_ARG]])
 *  M4_YY_DOC_PARAM
 * M4_YY_DOC_PARAM
M4_YY_INCR_LINENO();
M4_YY_MAIN
M4_YY_NEVER_INTERACTIVE
M4_YY_NO_ANSI_FUNC_DEFS
M4_YY_NO_ANSI_FUNC_PROTOS
M4_YY_NO_FLEX_ALLOC
M4_YY_NO_FLEX_FREE
M4_YY_NO_FLEX_REALLOC
M4_YY_NO_GET_DEBUG
M4_YY_NO_GET_EXTRA
M4_YY_NO_GET_IN
M4_YY_NO_GET_LENG
M4_YY_NO_GET_LINENO
M4_YY_NO_GET_LLOC
M4_YY_NO_GET_LVAL
M4_YY_NO_GET_OUT
M4_YY_NO_GET_TEXT
[[]]M4_YY_NOOP[M4_YY_NOOP[M4_YY_NOOP[[]]
[[]]M4_YY_NOOP]M4_YY_NOOP]M4_YY_NOOP[[]]
M4_YY_NO_POP_STATE
M4_YY_NO_PUSH_STATE
M4_YY_NO_SCAN_BUFFER
M4_YY_NO_SCAN_BYTES
M4_YY_NO_SCAN_STRING
M4_YY_NO_SET_DEBUG
M4_YY_NO_SET_EXTRA
M4_YY_NO_SET_IN
M4_YY_NO_SET_LINENO
M4_YY_NO_SET_LLOC
M4_YY_NO_SET_LVAL
M4_YY_NO_SET_OUT
M4_YY_NO_TOP_STATE
M4_YY_NO_UNISTD_H
M4_YY_NO_UNPUT
M4_YY_OUTFILE_NAME
               [[M4_YY_PARAMS(YYSTYPE * yylval_param M4_YY_PROTO_LAST_ARG)]])
               [[M4_YY_PARAMS(YYSTYPE * yylval_param, YYLTYPE * yylloc_param M4_YY_PROTO_LAST_ARG)]])
M4_YY_PREFIX
M4_YY_REENTRANT
M4_YY_SC_DEFS
M4_YY_STACK_USED
M4_YY_TABLES_EXTERNAL
M4_YY_TABLES_VERIFY
M4_YY_TEXT_IS_ARRAY
M4_YY_USE_LINENO
M4_YY_USES_REJECT
/* Macros after this point can all be overridden by user definitions in
%#  Macros for preproc stage.
%# Macros for runtime processing stage.
/** Magic number for serialized format. */
malformed '%top' directive
memory allocation failed in allocate_array()
memory allocation failed in yy_flex_xmalloc()
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    memset (&td, 0, sizeof (struct yytbl_data));
    memset (th, 0, sizeof (struct yytbl_hdr));
		memset(YY_G(yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
		memset(YY_G(yy_buffer_stack) + YY_G(yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
--meta-ecs
Meta-Equivalence Classes:
Miscellaneous:
missing }
missing quote
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
multiple <<EOF>> rules for start condition %s
		n *= 2;
name defined twice
name "%s" ridiculously long
  -n                      do-nothing POSIX option
			{ /* need more input */
     * need the dmap.dm_sz entry to tell us the sizeof the individual
		{ /* need to shift things up to make room */
negative range in character class
--never-interactive
		new_size = YY_G(yy_start_stack_depth) * sizeof( int );
 *	next_state = yy_try_NUL_trans( current_state );
--noalign
--noansi-definitions
       --noansi-definitions old-style function definitions
--noansi-prototypes
       --noansi-prototypes  empty parameter list in prototypes
  No backing up
No backing up.
  no character classes
--nodebug
--nodefault
       --noFUNCTION        do not generate a particular FUNCTION
--noline
--nomain
--nometa-ecs
--noreentrant
--noreject
     *       normally declared as a register variable-- so it is not worth it.
/* No semi-colon after return; correct usage is to write "yyterminate();" -
--nostdinit
	 * not.
					/* Note: because we've taken care in
 * @note If you want to scan bytes that may contain NUL values, then use
			{ /* Not enough room in the buffer - grow it. */
		/* Note that here we test for yy_c_buf_p "<=" to the position
 * @note This function does not reset the start condition to @c INITIAL .
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
%not-for-header
%#   %not-for-header  -  Begin code that should NOT appear in a ".h" file.
     * Notice that we increment 'i' in the inner loop.
--nounistd
       --nounistd          do not include <unistd.h>
--nounput
--nowarn
    /* Now eat padding. */
--noyyget_extra
--noyyget_in
--noyyget_leng
--noyyget_lineno
--noyyget_lloc
--noyyget_lval
--noyyget_out
--noyyget_text
--noyylineno
--noyymore
--noyy_pop_state
--noyy_push_state
--noyy_scan_buffer
--noyy_scan_bytes
--noyy_scan_string
--noyyset_extra
--noyyset_in
--noyyset_lineno
--noyyset_lloc
--noyyset_lval
--noyyset_out
--noyy_top_state
--noyywrap
		n *= tbl->td_hilen;
	n = tbl->td_lolen;
                          : NULL)
 * NULL or when we need an lvalue. For internal use only.
	/* Number of characters read into yy_ch_buf, not including EOB
/* Number of entries by which start-condition stack grows. */
						number_to_move - 1;
	number_to_move = (int) (YY_G(yy_c_buf_p) - YY_G(yytext_ptr)) - 1;
		num_to_alloc = 1;
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								num_to_alloc * sizeof(struct yy_buffer_state*)
		num_to_alloc = YY_G(yy_buffer_stack_max) + grow_size;
			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
			num_to_read = YY_READ_BUF_SIZE;
	n = _yybytes_len + 2;
		 * of the first EOB in the buffer, since yy_c_buf_p will
			/* Okay, we're now positioned to make the NUL
%ok-for-header
%#   %ok-for-header   -  %c and %e are used for building a header file.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
/* On IA-64, the buffer size is 16k, not 8k */
/* On IA-64, the buffer size is 16k, not 8k.
	/* Only push if top exists. Otherwise, replace top. */
  -o, --outfile=FILE      specify output filename
'^' operator results in sub-optimal performance
Options -+ and --reentrant are mutually exclusive.
option `%s' doesn't allow an argument
option `%s' is ambiguous
option `%s' requires an argument
%option yyclass only meaningful for C++ scanners
%option yylineno cannot be used with REJECT
%%option yylineno entails a performance penalty ONLY on rules that can match newline characters
--outfile=FILE
out of dynamic memory in yy_create_buffer()
out of dynamic memory in yyensure_buffer_stack()
out of dynamic memory in yy_get_next_buffer()
out of dynamic memory in yylex()
out of dynamic memory in yy_scan_buffer()
out of dynamic memory in yy_scan_bytes()
out of memory expanding start-condition stack
 out-transitions: 
pad64 failed
        pad = yypad64(rd->bread);
 * @param b a buffer created with yy_create_buffer()
 * @param base the character buffer
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *  @param dmap pointer to first element in list
 *  @param dmap used to performing mapping
 * @param file A readable stream.
 * @param input_file A readable stream.
 * @param in_str A readable stream.
 * @param line_number
 * @param new_buffer The new input buffer.
 *  @param new_buffer The new state.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param size the size in bytes of the character buffer
 *  @param td the table 
 * @param user_defined The data to be associated with this scanner.
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yybytes the byte buffer to scan
 * @param yystr a NUL-terminated string to scan
        p = dmap->dm_arr; 
peek attempt when sko stack is empty
--perf-report
                    p = ((flex_int16_t *) p) + 1;
                    p = ((flex_int32_t *) p) + 1;
                    p = ((flex_int8_t *) p) + 1;
pipe failed
P	N	E	S	H	J	J	
--pointer
/* Points to current character in buffer. */
popped too many times in skeleton.
    /* Pop the buffer stack, destroying each element. */
--posix-compat
POSIXLY_CORRECT
	 * possible backing-up.
			 * possible that this happened because the user
/** Possible values for td_id field. Each one corresponds to a
  -p, --perf-report       write performance report to stderr
-P PREFIX
  -P,  --prefix=STRING     use STRING as prefix instead of "yy"
%#      pre-compilation stage of flex. Only macros starting
%# Prefixes.
--prefix=PREFIX
premature EOF
--preproc=NUM
__printf_chk
					 * proceeding.  But for input(),
			 * process it.
/* Promotes a possibly negative, possibly signed char to an unsigned
                    p = (struct yy_trans_info *) p + 1;
                p = (struct yy_trans_info **) p + 1;
    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );
/** Pushes the new state onto the stack. The new state becomes
Q	P	e	c	a	e	m	
        rd.bread = 0;
        rd->bread += bytes;
    rd->bread += sizeof(flex_uint16_t);
    rd->bread += sizeof(flex_uint32_t);
    rd->bread += sizeof(flex_uint8_t);
    rd.fp = fp;
    /* read and map each element.
/** Read a table while mapping its contents to the local array. 
		/* Read in more data. */
            /* read into t32 no matter what the real size is. */
/** Read the header */
/* Redefine yyless() so it works in section 3 code. */
--reentrant
regcomp failed: %s
regerror
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
		register char *source =
	register char *source = YY_G(yytext_ptr);
	register char *yy_cp;
	register char *yy_cp, *yy_bp;
register char *yy_cp = YY_G(yy_c_buf_p);
	register int i;
	register int n;
	register int number_to_move, i;
		register int number_to_move = YY_G(yy_n_chars) + 2;
	register int yy_act;
register int yy_c = %d;
	register int yy_is_jam;
register YY_CHAR yy_c;
register YY_CHAR yy_c = %s;
register yyconst struct yy_trans_info *yy_trans_info;
	register yy_state_type yy_current_state;
--reject
REJECT cannot be used with -f or -F
REJECT entails a large performance penalty
/** Removes and deletes the top of the stack, if present.
/* Report a fatal error. */
					/* Reset buffer status. */
    /* Reset the globals. This is important in a non-reentrant scanner so the next time
		result = n; \
		return;
            return 0;
		return 0;
 *  @return 0 on success
                    return -1;
                return -1;
        return 1;
		return -1;
	return 1;
/* Return all but the first "n" matched characters back to the input stream. */
	return b;
	return c;
            return dmap;
/* Returned upon end-of-file. */
			return EOB_ACT_END_OF_FILE;
			return EOB_ACT_LAST_MATCH;
						return EOF;
					return input(M4_YY_CALL_ONLY_ARG);
	return n;
    return NULL;
 *  @return NULL if not found.
	return ret_val;
    return rv;
return_rv:
 * Returns a code representing an action:
 * Returns the top of the stack, or NULL.
 * @return the allocated buffer state.
 * @return the newly allocated buffer state object.
 * @return the newly allocated buffer state object. 
 *  @return the number of integers in the table
	return (void *) malloc( size );
	return (void *) realloc( (char *) ptr, size );
    return yycolumn;
	return yy_current_state;
    return yyextra;
    return yy_flex_debug;
	return YY_G(yy_start_stack)[YY_G(yy_start_stack_ptr) - 1];
    return yyin;
		return yyin->gcount();
    return yy_init_globals ( *ptr_yy_globals );
					return yyinput(M4_YY_CALL_ONLY_ARG);
	return yy_is_jam ? 0 : yy_current_state;
    return yyleng;
    return yylineno;
    return yylloc;
    return yylval;
    return yyout;
	return yy_scan_bytes( yystr, strlen(yystr) M4_YY_CALL_LAST_ARG);
    return yytext;
		ret_val = EOB_ACT_CONTINUE_SCAN;
			ret_val = EOB_ACT_END_OF_FILE;
			ret_val = EOB_ACT_LAST_MATCH;
  -R,  --reentrant         generate a reentrant C scanner
rule cannot be matched
/* rule %d can match eol */
            rv = -1;
                rv = yytbl_read16 (&t16, rd);
                rv = yytbl_read32 (&t32, rd);
                rv = yytbl_read8 (&t8, rd);
/* %s */
/* %s */\
		s1[i] = s2[i];
/* Same as previous macro, but useful when we know that the buffer stack is not
 *  same thing as the number of elements.
    /* Sanity check on header size. Greater than 1k suggests some funny business. */
 * scan from a @e copy of @a bytes.
 * scan from a @e copy of @a str.
Scanner behavior:
  scanner options: -
scanner requires -8 flag to use the character %s
 * "scanner state".
 *  scanner table of the same name.
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
%s -= %d;
%s:%d: %s
 * section 1.
%#          (See gen.c, etc. for details.)
					 * sees that we've accumulated a
 * @see yy_switch_to_buffer
setlocale
/** Set the current column.
/** Set the current line number.
/** Set the input stream. This does not discard the current
/** Set the user-defined data. This data is never touched by the scanner.
/** Setup the input buffer state to scan a string. The next call to yylex() will
/** Setup the input buffer state to scan directly from a user-specified character buffer.
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
?%s: fatal internal error at %s:%d %s
%s: fatal internal error, %s
short int
%# ...should be written as
	 * shouldn't try reading from the input source any more.  We might
		 * (since all states make transitions on EOB to the
/* Size of default input buffer. */
                ? sizeof(flex_int16_t)\
                :sizeof(flex_int32_t)))
            ? sizeof(flex_int8_t)\
	/* Size of input buffer in bytes, not including room for EOB
    size_t  bytes;
	size_t  dm_sz;		/**< local sizeof() each element in table. */
		size_t n; \
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    size_t yy_buffer_stack_top; /**< index of top of stack. */
--skel=FILE
            /* Skip ahead to next set */
  -s, --nodefault         suppress default rule to ECHO unmatched text
snprintf
__snprintf_chk
					 * So convert the EOB_ACT_LAST_MATCH
 * some compilers to complain about unreachable statements.
%# Some negated symbols
*Something Weird* - tok: %d val: %d
-s option given but default rule can be matched
^[[:space:]]*$
/* Special action meaning "start processing a new file". */
/* Special case for "unistd.h", since it is non-ANSI. We include it way
Specify degree of table compression (default is -Cem)
%s = %s + %d;
  -S, --skel=FILE         specify skeleton file
<%s> specified twice
%stables
__stack_chk_fail
/* Stack of input buffers. */
start condition %s declared twice
start-condition stack underflow
state # %4d	
state # %d:
state # %d accepts: 
state # %d accepts: [%d]
State #%d is non-accepting -
/*(state = (%s) */
static char *yy_c_buf_p = (char *) 0;
static char *yy_full_match;
static char yy_hold_char;
static char *yy_last_accepting_cpos;
static int input M4_YY_PARAMS( M4_YY_PROTO_ONLY_ARG );
    static int input  YYFARGS0(void)
static int yy_did_buffer_switch_on_eof;
static int yy_flex_strlen M4_YY_PARAMS( yyconst char * M4_YY_PROTO_LAST_ARG);
static int yy_flex_strlen YYFARGS1( yyconst char *,s)
static int yy_full_lp;
static int *yy_full_state;
static int yy_get_next_buffer M4_YY_PARAMS( M4_YY_PROTO_ONLY_ARG );
static int yy_get_next_buffer YYFARGS0(void)
static int yy_init = 0;		/* whether we need to initialize */
static int yy_init_globals M4_YY_PARAMS( M4_YY_PROTO_ONLY_ARG );
static int yy_init_globals YYFARGS0(void)
static int yyinput M4_YY_PARAMS( M4_YY_PROTO_ONLY_ARG );
    static int yyinput YYFARGS0(void)
static int yy_looking_for_trail_begin = 0;
static int yy_lp;
static int yy_more_flag = 0;
static int yy_more_len = 0;
static int yy_more_offset = 0;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
static int yy_prev_more_offset = 0;
static int yy_start = 0;	/* start state number */
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
        static int yy_start_stack_ptr = 0;
static int yytbl_data_load YYFARGS2(struct yytbl_dmap *, dmap, struct yytbl_reader*, rd)
static int yytbl_fload YYFARGS2(FILE *, fp, const char *, key)
static int yytbl_hdr_read YYFARGS2(struct yytbl_hdr *, th, struct yytbl_reader *, rd)
static int yytbl_read16 (void *v, struct yytbl_reader * rd)
static int yytbl_read32 (void *v, struct yytbl_reader * rd)
static int yytbl_read8 (void *v, struct yytbl_reader * rd)
    static int yy_top_state M4_YY_PARAMS( M4_YY_PROTO_ONLY_ARG );
    static int yy_top_state  YYFARGS0(void)
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static struct yytbl_dmap yydmap[] =
static struct yytbl_dmap *yytbl_dmap_lookup YYFARGS2(struct yytbl_dmap *, dmap,
static void yyensure_buffer_stack M4_YY_PARAMS( M4_YY_PROTO_ONLY_ARG );
static void yyensure_buffer_stack YYFARGS0(void)
static void yy_fatal_error M4_YY_PARAMS( yyconst char msg[] M4_YY_PROTO_LAST_ARG );
static void yy_fatal_error YYFARGS1(yyconst char*, msg)
static void yy_flex_strncpy M4_YY_PARAMS( char *, yyconst char *, int M4_YY_PROTO_LAST_ARG);
static void yy_flex_strncpy YYFARGS3( char*,s1, yyconst char *,s2, int,n)
static void yy_init_buffer M4_YY_PARAMS( YY_BUFFER_STATE b, FILE *file M4_YY_PROTO_LAST_ARG );
    static void yy_init_buffer  YYFARGS2( YY_BUFFER_STATE ,b, FILE *,file)
static void yy_load_buffer_state M4_YY_PARAMS( M4_YY_PROTO_ONLY_ARG );
static void yy_load_buffer_state  YYFARGS0(void)
    static void yy_pop_state M4_YY_PARAMS( M4_YY_PROTO_ONLY_ARG );
    static void yy_pop_state  YYFARGS0(void)
    static void yy_push_state M4_YY_PARAMS( int new_state M4_YY_PROTO_LAST_ARG);
    static void yy_push_state YYFARGS1( int ,new_state)
    static void yyunput M4_YY_PARAMS( int c, char *buf_ptr  M4_YY_PROTO_LAST_ARG);
    static void yyunput YYFARGS2( int,c, register char *,yy_bp)
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */
static yyconst flex_int16_t * %s = 0;
static yyconst flex_int16_t %s[%d] =
static yyconst flex_int32_t * %s = 0;
static yyconst flex_int32_t %s[%d] =
static yyconst struct yy_trans_info **yy_start_state_list =0;
static yyconst struct yy_trans_info *yy_start_state_list[%d] =
static yyconst struct yy_trans_info *yy_transition = 0;
static yyconst struct yy_trans_info yy_transition[%d] =
static yyconst %s *yy_nxt =0;
static yyconst %s yy_nxt[][%d] =
static yyconst yy_state_type * %s = 0;
static yyconst yy_state_type %s[%d] =
static yy_state_type yy_get_previous_state M4_YY_PARAMS( M4_YY_PROTO_ONLY_ARG );
    static yy_state_type yy_get_previous_state YYFARGS0(void)
static yy_state_type yy_last_accepting_state;
static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static yy_state_type yy_try_NUL_trans M4_YY_PARAMS( yy_state_type current_state  M4_YY_PROTO_LAST_ARG);
    static yy_state_type yy_try_NUL_trans  YYFARGS1( yy_state_type, yy_current_state)
std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
std::cerr << "--(end of buffer or a NUL)\n";
std::cerr << "--EOF (start condition " << YY_START << ")\n";
	std::cerr << msg << std::endl;
std::cerr << "--scanner backing up\n";
--stdinit
       --stdinit           initialize yyin/yyout to stdin/stdout
	std::istream* yy_input_file;
<stdout>
--stdout
	 * still have a bunch of tokens to match, though, because of
__strcpy_chk
     * struct members.
/* Structures and prototypes for serializing flex tables.  The
struct yy_buffer_state
struct yyguts_t
    struct yyguts_t dummy_yyguts;
struct yytbl_data {
    struct yytbl_data td;
struct yytbl_dmap {
    struct yytbl_dmap *dmap=0;
    struct yytbl_dmap *transdmap=0;
struct yytbl_hdr {
    struct yytbl_hdr th;
struct yytbl_reader {
    struct yytbl_reader rd;
struct yy_trans_info
struct yy_trans_info*
                    ((struct yy_trans_info **) p)[0] = v;
                    : &(((struct yy_trans_info *) p)->yy_nxt);
                struct yy_trans_info *v;
 * such as during a yyrestart() or at EOF.
		/* Support of yytext. */
%s version %s usage statistics:
                switch (dmap->dm_sz) {
/** Switch to a different input buffer.
		switch ( yy_act )
			switch ( yy_get_next_buffer( M4_YY_CALL_ONLY_ARG ) )
            switch (YYTDFLAGS2BYTES (td.td_flags)) {
symbol table memory allocation failed
 * synopsis
%s yy_nxt;
%s yy_verify;
                /* t32 is an index into the transition array. */
                /* t32 is a plain int. copy data, then incrememnt p. */
                /* t32 is the j'th member of a two-element struct. */
                t32 = t16;
                t32 = t8;
T$,9T$T|B
Table Compression:
/* Table of booleans, true if rule could match eol. */
tables.c
--tables-file[=FILE]
      --tables-file[=FILE] write tables to FILE
--tables-verify
%tables-yydmap
%tables-yydmap generated elements
     * table, which is ok.
            :(((td_flags) & YYTD_DATA16)\
        (((td_flags) & YYTD_DATA8)\
     * test in the regression suite. We get reports that it breaks inheritance.
 * That's why we explicitly handle the declaration, instead of using our macros.
	 * that use void* generic pointers.  It works with the latter
%# the argument lists to each C function.
	/* The cast to (char *) in the following accommodates both
the character range [%c-%c] is ambiguous in a case-insensitive scanner
%# The complexity here is necessary so that m4 preserves
/* The "const" storage-class-modifier is valid. */
/* The contents of this function are C++ specific, so the YY_G macro is not used.
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
		 * the current run.
 *  the current state. This function will allocate the stack
%# The exception to this rule is YY_G, which is an m4 macro, 
 *  -  The format allows many tables per file.
     * The --full yy_transition table is a special case, since we
%# The function prototype
%# The function prototype taking 2 arguments
%#   the generated scanner as a C-style comment. This is to aid those who
/* The intent behind this definition is that it'll catch
/** The main scanner function which does all the work.
 *  The next element becomes the new top.
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
%#      The quoting is "[[" and "]]" so we don't interfere with
					 * there's no matching to consider.
    /* The rest are the same as the globals declared in the non-reentrant scanner. */
   These are made visible to non-reentrant scanners for convenience. */
    /* These are only needed for trailing context rules,
         * The second time is to handle the second member of the
	/* These first three are mutually exclusive */
/* The serialized tables header. */
	/* These two are mutually exclusive. */
/* The state buf must be large enough to hold one state per character in the main buffer.
 *  -  The tables can be streamed.
 * The user defined value in the first argument will be available to yyalloc in
 * The user has a chance to override it with an option.
		/* They forgot to leave room for the EOB's. */
 * the yyextra field.
	/* This block is copied from yy_switch_to_buffer. */
/* This file is meant to be included in both the skeleton and the actual
%# This file is processed in several stages.
     * This function is called from yylex_destroy(), so don't allocate here.
 * This function is sometimes called more than once on the same buffer,
					/* This happens because yy_g_n_b()
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
			 * this is the first action (other than possibly a
%# This is the m4 way to say "(stack_used || is_reentrant)
     * This loop iterates once for each element of the td_data array.
        /* This loop really executes exactly 1 or 2 times.
    /* This must go here because YYSTYPE and YYLTYPE are included
 * this scanner.  This is the bridge between our "generic" deserialization code
/* This struct is not used in this scanner,
/* This used to be an fputs(), but since the string might contain NUL's,
			/* This was really a NUL. */
			{ /* This was really a NUL. */
th_magic|th_hsize write32 failed
th_name writen failed
%#      through m4. Macros beginning with `m4_' will be processed.
th_ssize|th_flags write failed
    th->th_name = th->th_version + strlen (th->th_version) + 1;
    th->th_version = (char *) yyalloc (bytes M4_YY_CALL_LAST_ARG);
            th.th_version = NULL;
        th->th_version = NULL;
        th.th_version = NULL;
th_version writen failed
T$(;l$,t
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
%# TODO: This is messy.
	/* TODO. We should be able to replace this entire function body
					 * to EOB_ACT_END_OF_FILE.
	 * to go ahead and always set it.
					 * token and flags that we need to
too many rules (> %d)!
	/* total number of ints */
trailing context made variable due to preceding '|' action
trailing context used twice
    transdmap = yytbl_dmap_lookup (dmap, YYTD_ID_TRANSITION M4_YY_CALL_LAST_ARG);
			 * transition.  We couldn't have
/* Translate the current start state into a value that can be later handed
			 * treat this as a final EOF.
					 * try matching the token before
Try `%s --help' for more information.
	/* Try to read more data. */
  -t, --stdout            write scanner on stdout instead of %s
  -T, --trace             %s should run in trace mode
typedef char YY_CHAR;
typedef int16_t flex_int16_t;
typedef int32_t flex_int32_t;
typedef int8_t flex_int8_t;
typedef int flex_int32_t;
typedef int yy_state_type;
typedef short int flex_int16_t;
typedef signed char flex_int8_t;
typedef size_t yy_size_t;
typedef struct yy_buffer_state *YY_BUFFER_STATE;
typedef uint16_t flex_uint16_t;
typedef uint32_t flex_uint32_t;
typedef uint8_t flex_uint8_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned char YY_CHAR;
typedef unsigned int flex_uint32_t;
typedef unsigned short int flex_uint16_t;
typedef void* yyscan_t;
typedef yyconst struct yy_trans_info *yy_state_type;
undeclared start condition %s
undefined definition {%s}
#undef %sIN_HEADER
#undef YY_DECL
#undef YY_DECL_IS_OURS
#undef YY_DO_BEFORE_ACTION
#undef YY_FLUSH_BUFFER
#undef yyless
#undef yy_new_buffer
#undef YY_NEW_FILE
#undef YY_NXT_LOLEN
#undef yy_set_bol
#undef yy_set_interactive
	/* undo effects of setting up yytext */
		/* Undo effects of setting up yytext. */ \
/* undo the effects of YY_DO_BEFORE_ACTION */
		/* Undo the effects of YY_DO_BEFORE_ACTION. */
unknown -C option '%c'
Unknown error=(%d)
unknown error processing section 1
/* Unload the tables from memory. */
Unmatched '{'
unrecognized '%' directive
unrecognized %%option: %s
Unrecognized option `%s'
unrecognized rule
[:^upper:] ambiguous in case insensitive scanner
Usage: %s [OPTIONS]...
Usage: %s [OPTIONS] [FILE]...
%#      user code.
    /* User-defined. Not touched by flex. */
/* User-visible API */
/usr/bin/m4
/usr/share/locale
u	u	r	x	
		 * valid NUL; if not, then we've hit the end of the buffer.
Variable trailing context rule at line %d
variable trailing context rules cannot be used with -f or -F
Variable trailing context rules entail a large performance penalty
            v = dmap->dm_arr;
--verbose
--version
	 * (via yyrestart()), so that the user can continue scanning by
/* vim:set noexpandtab cindent tabstop=8 softtabstop=0 shiftwidth=8 textwidth=0: */
                v = j == 0 ? &(((struct yy_trans_info *) p)->yy_verify)
	void  **dm_arr;		/**< address of pointer to store the deserialized table. */
	(void) fprintf( stderr, "%s\n", msg );
    void   *p=0;
	void   *td_data;     /**< table data */
                void   *v;
            void * v;
void *yyalloc M4_YY_PARAMS( yy_size_t M4_YY_PROTO_LAST_ARG );
void *yyalloc YYFARGS1( yy_size_t ,size)
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, new_size M4_YY_CALL_LAST_ARG );
void yy_delete_buffer M4_YY_PARAMS( YY_BUFFER_STATE b M4_YY_PROTO_LAST_ARG );
    void yy_delete_buffer YYFARGS1( YY_BUFFER_STATE ,b)
void yyFlexLexer::LexerError( yyconst char msg[] )
void yyFlexLexer::LexerOutput( const char* buf, int size )
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
void yyFlexLexer::yyensure_buffer_stack(void)
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
    void yyFlexLexer::yy_load_buffer_state()
void yyFlexLexer::yypop_buffer_state (void)
    void yyFlexLexer::yy_pop_state()
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
    void yyFlexLexer::yy_push_state( int new_state )
    void yyFlexLexer::yyrestart( std::istream* input_file )
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
void yy_flush_buffer M4_YY_PARAMS( YY_BUFFER_STATE b M4_YY_PROTO_LAST_ARG );
    void yy_flush_buffer YYFARGS1( YY_BUFFER_STATE ,b)
void yyfree M4_YY_PARAMS( void * M4_YY_PROTO_LAST_ARG );
void yyfree YYFARGS1( void *,ptr)
					(void *) YY_G(yy_start_stack), new_size M4_YY_CALL_LAST_ARG );
	(void) yyin->read( buf, max_size );
	(void) yyout->write( buf, size );
void yypop_buffer_state M4_YY_PARAMS( M4_YY_PROTO_ONLY_ARG );
void yypop_buffer_state YYFARGS0(void)
void yypush_buffer_state M4_YY_PARAMS( YY_BUFFER_STATE new_buffer M4_YY_PROTO_LAST_ARG );
void yypush_buffer_state YYFARGS1(YY_BUFFER_STATE,new_buffer)
void *yyrealloc M4_YY_PARAMS( void *, yy_size_t M4_YY_PROTO_LAST_ARG );
void *yyrealloc  YYFARGS2( void *,ptr, yy_size_t ,size)
void yyrestart M4_YY_PARAMS( FILE *input_file M4_YY_PROTO_LAST_ARG );
    void yyrestart  YYFARGS1( FILE *,input_file)
void yyset_column YYFARGS1( int , column_no)
void yyset_debug M4_YY_PARAMS( int debug_flag M4_YY_PROTO_LAST_ARG );
void yyset_debug YYFARGS1( int ,bdebug)
void yyset_extra M4_YY_PARAMS( YY_EXTRA_TYPE user_defined M4_YY_PROTO_LAST_ARG );
void yyset_extra YYFARGS1( YY_EXTRA_TYPE ,user_defined)
void yyset_in  M4_YY_PARAMS( FILE * in_str M4_YY_PROTO_LAST_ARG );
void yyset_in YYFARGS1( FILE * ,in_str)
void yyset_lineno M4_YY_PARAMS( int line_number M4_YY_PROTO_LAST_ARG );
void yyset_lineno YYFARGS1( int ,line_number)
        void yyset_lloc M4_YY_PARAMS( YYLTYPE * yylloc_param M4_YY_PROTO_LAST_ARG );
void yyset_lloc YYFARGS1( YYLTYPE * ,yylloc_param)
void yyset_lval M4_YY_PARAMS( YYSTYPE * yylval_param M4_YY_PROTO_LAST_ARG );
void yyset_lval YYFARGS1( YYSTYPE * ,yylval_param)
void yyset_out  M4_YY_PARAMS( FILE * out_str M4_YY_PROTO_LAST_ARG );
void yyset_out YYFARGS1( FILE * ,out_str)
void yy_switch_to_buffer M4_YY_PARAMS( YY_BUFFER_STATE new_buffer M4_YY_PROTO_LAST_ARG );
    void yy_switch_to_buffer  YYFARGS1( YY_BUFFER_STATE ,new_buffer)
                    v = &(((struct yy_trans_info *) (transdmap->dm_arr))[t32]);
                    v = &((*((struct yy_trans_info **) (transdmap->dm_arr)))[t32]);
  -v, --verbose           write summary of scanner statistics to stdout
  -V, --version           report %s version
`	v	v	n	q	q	
        /* Walk the dmap, freeing the pointers */
			 * want to build jamming into it because then it
warning, %s
	/* We always need two end-of-buffer characters.  The first causes
 *  -  We can lookup tables by name.
 *  -  We do not hinder future unicode support.
    /* We do not touch yylineno unless the option is enabled. */
	/* We don't actually know whether we did this switch during
 * we don't want an extra ';' after the "return" because that will cause
			/* We matched a single character, the EOB, so
			/* We matched some text prior to the EOB, first
	 * we need to put in 2 end-of-buffer characters.
 * we now use fwrite().
        /* We point to the address of a pointer. */
        /* We point to the array itself */
/* We provide macros for accessing buffer states in case in the
    /* we read it all into th_version, and point th_name into that data */
			/* We're scanning a new file or input source.  It's
 * we want to instead treat it as an 8-bit unsigned char, hence the
     * We will address this in a future release of flex, or omit the C++ scanner
	/* When an EOF's been seen but there's still some text to process
	 * When we actually see the EOF, we change the status to "new"
	/* Whether this is an "interactive" input source; if so, and
	/* Whether to try to fill the input buffer when we reach the
	/* Whether we "own" the buffer - i.e., we know we created it,
	/* Whether we're considered to be at the beginning of a line.
%# ...which could possibly generate
            }while(0)
	while ( 0 )
	while ( 1 )		/* loops until end-of-file is reached */
    while (dmap->dm_id)
    while (!feof(rd.fp)) {
		while ( num_to_read <= 0 )
        while(--pad >= 0){
    while (rd.bread < th.th_ssize){
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
	while ( (result = read( fileno(yyin), (char *) buf, max_size )) < 0 ) \
		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
while ( yy_base[yy_current_state] != %d );
while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	while(YY_CURRENT_BUFFER){
while ( yy_current_state != %d );
while ( (yy_current_state = yy_nxt[yy_current_state][ %s ]) > 0 )
while ( (yy_current_state = yy_nxt[yy_current_state*YY_NXT_LOLEN +  %s ]) > 0 )
			 * will run more slowly).
	 * with
%#      with `m4_' are processed, and quoting is normal.
			 * with the possibility of jamming (and we don't
  -w, --nowarn            do not generate warnings
  -X, --posix-compat      maximal compatibility with POSIX lex
yy_accept
yy_acclist
yy_act = yy_accept[yy_current_state];
yy_act = yy_acclist[YY_G(yy_lp)];
yy_act = yy_current_state[-1].yy_nxt;
					yy_act = YY_STATE_EOF(YY_START);
yy_act &= ~YY_TRAILING_HEAD_MASK;
		yy_bp += (int) (dest - source);
		/* yy_bp points to the position in yy_ch_buf of the start of
		yy_bp = yy_cp;
				yy_bp = YY_G(yytext_ptr) + YY_MORE_ADJ;
			yy_bp = YY_G(yytext_ptr) + YY_MORE_ADJ;
	YY_BREAK
				YY_BUFFER_EOF_PENDING;
	yy_buffer_stack = 0;
	yy_buffer_stack_max = 0;
	yy_buffer_stack_top = 0;
	YY_BUFFER_STATE b;
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
YY_BUFFER_STATE yy_create_buffer M4_YY_PARAMS( FILE *file, int size M4_YY_PROTO_LAST_ARG );
    YY_BUFFER_STATE yy_create_buffer  YYFARGS2( FILE *,file, int ,size)
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
YY_BUFFER_STATE yy_scan_buffer M4_YY_PARAMS( char *base, yy_size_t size M4_YY_PROTO_LAST_ARG );
YY_BUFFER_STATE yy_scan_buffer  YYFARGS2( char *,base, yy_size_t ,size)
YY_BUFFER_STATE yy_scan_bytes M4_YY_PARAMS( yyconst char *bytes, int len M4_YY_PROTO_LAST_ARG );
YY_BUFFER_STATE yy_scan_bytes  YYFARGS2( yyconst char *,yybytes, int ,_yybytes_len)
YY_BUFFER_STATE yy_scan_string M4_YY_PARAMS( yyconst char *yy_str M4_YY_PROTO_LAST_ARG );
YY_BUFFER_STATE yy_scan_string YYFARGS1( yyconst char *, yystr)
	yy_c_buf_p = 0;
		/* yy_c_buf_p now points to the character we want to return.
					 * yy_c_buf_p so that if some total
	/* yy_ch_buf has to be 2 characters longer than the size given because
--yyclass=NAME
      --yyclass=NAME      name of C++ class
        yycolumn=0;
    yycolumn = column_no;
--yy_cp;
++yy_cp;
	*yy_cp = '\0'; \
	*--yy_cp = (char) c;
		yy_cp += (int) (dest - source);
(*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : %d)
    yy_cp = YY_G(yy_c_buf_p);
				yy_cp = ++YY_G(yy_c_buf_p);
				yy_cp = YY_G(yy_c_buf_p);
yy_cp = YY_G(yy_full_match); /* restore poss. backed-over text */ \
	*yy_cp = YY_G(yy_hold_char);
		*yy_cp = YY_G(yy_hold_char);
		*yy_cp = YY_G(yy_hold_char); \
*yy_cp = YY_G(yy_hold_char); /* undo effects of setting up yytext */
*yy_cp = YY_G(yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = YY_G(yy_last_accepting_cpos);
yy_cp = YY_G(yy_last_accepting_cpos) + 1;
(*yy_cp ? YY_SC_TO_UI(*yy_cp) : %d)
            yy_create_buffer( yyin, YY_BUF_SIZE M4_YY_CALL_LAST_ARG);
            yy_create_buffer( yyin, YY_BUF_SIZE M4_YY_CALL_LAST_ARG); \
				yy_create_buffer( yyin, YY_BUF_SIZE M4_YY_CALL_LAST_ARG);
      yy_c = %s )
			YY_CURRENT_BUFFER_LVALUE =
		YY_CURRENT_BUFFER_LVALUE =    \
	YY_CURRENT_BUFFER_LVALUE = new_buffer;
		YY_CURRENT_BUFFER_LVALUE = NULL;
	YY_CURRENT_BUFFER_LVALUE = NULL;
YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = YY_G(yy_c_buf_p);
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[YY_G(yy_n_chars)];
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[YY_G(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[YY_G(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = YY_G(yy_n_chars);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = YY_G(yy_n_chars) = 0;
yy_current_state = (int) yy_def[yy_current_state];
yy_current_state += YY_AT_BOL();
yy_current_state = -yy_current_state;
yy_current_state += yy_current_state[%s].yy_nxt;
				yy_current_state = yy_get_previous_state( M4_YY_CALL_ONLY_ARG );
			yy_current_state = yy_get_previous_state( M4_YY_CALL_ONLY_ARG );
yy_current_state = YY_G(yy_last_accepting_state);
yy_current_state = YY_G(yy_start);
yy_current_state = *--YY_G(yy_state_ptr);
yy_current_state = *YY_G(yy_state_ptr); /* restore curr. state */ \
				yy_current_state = yy_next_state;
yy_current_state = yy_NUL_trans[yy_current_state];
yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
yy_current_state = yy_nxt[yy_current_state][%d];
yy_current_state = yy_nxt[yy_current_state][%s];
yy_current_state = yy_nxt[yy_current_state*YY_NXT_LOLEN + %d];
yy_current_state = yy_nxt[yy_current_state*YY_NXT_LOLEN + %s];
yy_current_state = yy_start_state_list[YY_G(yy_start)];
yy_current_state = yy_start_state_list[YY_G(yy_start) + YY_AT_BOL()];
yy_current_state += yy_trans_info->yy_nxt;
yy_c = yy_meta[(unsigned int) yy_c];
		yy_delete_buffer( YY_CURRENT_BUFFER M4_YY_CALL_LAST_ARG );
		yy_delete_buffer( YY_CURRENT_BUFFER M4_YY_CALL_LAST_ARG);
	yy_delete_buffer( YY_CURRENT_BUFFER M4_YY_CALL_LAST_ARG);
	yy_delete_buffer(YY_CURRENT_BUFFER M4_YY_CALL_LAST_ARG);
	yy_did_buffer_switch_on_eof = 0;
		YY_DO_BEFORE_ACTION;
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
YY_DO_BEFORE_ACTION; /* set up yytext again */
yy_ec[YY_SC_TO_UI(*++yy_cp)] 
yy_ec[YY_SC_TO_UI(*yy_cp)]
yy_ec[YY_SC_TO_UI(*yy_cp)] 
        yyensure_buffer_stack (M4_YY_CALL_ONLY_ARG);
        yyensure_buffer_stack (M4_YY_CALL_ONLY_ARG); \
			yyensure_buffer_stack (M4_YY_CALL_ONLY_ARG);
	yyensure_buffer_stack (M4_YY_CALL_ONLY_ARG);
	yyensure_buffer_stack(M4_YY_CALL_ONLY_ARG);
    YY_EXTRA_TYPE yyextra_r;
YY_EXTRA_TYPE yyget_extra M4_YY_PARAMS( M4_YY_PROTO_ONLY_ARG );
YY_EXTRA_TYPE yyget_extra  YYFARGS0(void)
    YY_EXTRA_TYPE yy_user_defined;
    yyextra = user_defined ;
               [[YYFARGS1(YYSTYPE *,yylval_param)]])
               [[YYFARGS2(YYSTYPE *,yylval_param, YYLTYPE *,yylloc_param)]])
				YY_FATAL_ERROR(
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
        yy_fatal_error("bad magic number" /*TODO: not fatal.*/ M4_YY_CALL_LAST_ARG);
YY_FATAL_ERROR( "flex scanner jammed" )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		YY_FATAL_ERROR( "input in flex scanner failed" );
        yy_fatal_error("insane header size detected" /*TODO: not fatal.*/ M4_YY_CALL_LAST_ARG);
                    yy_fatal_error("invalid dmap->dm_sz for plain int" /*TODO: not fatal.*/ M4_YY_CALL_LAST_ARG);
                    yy_fatal_error("invalid dmap->dm_sz for struct" /*TODO: not fatal.*/ M4_YY_CALL_LAST_ARG);
                yy_fatal_error("invalid td_flags" /*TODO: not fatal.*/ M4_YY_CALL_LAST_ARG);
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
            YY_FATAL_ERROR( "out of dynamic memory in yytbl_data_load()" );
        YY_FATAL_ERROR( "out of dynamic memory in yytbl_hdr_read()" );
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		YY_FATAL_ERROR( "start-condition stack underflow" );
        yy_fatal_error("table id not found in map." /*TODO: not fatal.*/ M4_YY_CALL_LAST_ARG);
                        yy_fatal_error("tables verification failed at flex_int16_t" M4_YY_CALL_LAST_ARG);
                        yy_fatal_error("tables verification failed at flex_int32_t" M4_YY_CALL_LAST_ARG);
                        yy_fatal_error("tables verification failed at flex_int8_t" M4_YY_CALL_LAST_ARG);
                        yy_fatal_error("tables verification failed at YYTD_PTRANS" M4_YY_CALL_LAST_ARG);
                        yy_fatal_error("tables verification failed at YYTD_STRUCT flex_int16_t" M4_YY_CALL_LAST_ARG);
                           yy_fatal_error("tables verification failed at YYTD_STRUCT flex_int32_t" M4_YY_CALL_LAST_ARG);
                        yy_fatal_error("tables verification failed at YYTD_STRUCT flex_int8_t" M4_YY_CALL_LAST_ARG);
YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
                    yy_fatal_error("transition table not found" /*TODO: not fatal.*/ M4_YY_CALL_LAST_ARG);
           yy_fatal_error( "yyset_column called with no buffer" M4_YY_CALL_LAST_ARG); 
           yy_fatal_error( "yyset_lineno called with no buffer" M4_YY_CALL_LAST_ARG); 
yy_find_action:
	yy_flex_debug = 0;
    yy_flex_debug = bdebug ;
yyFlexLexer::~yyFlexLexer()
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
yy_flex_strncpy( &yytext[YY_G(yy_more_offset)], YY_G(yytext_ptr), yyleng + 1 M4_YY_CALL_LAST_ARG); \
yy_flex_strncpy( yytext, YY_G(yytext_ptr), yyleng + 1 M4_YY_CALL_LAST_ARG); \
	yy_flush_buffer( b M4_YY_CALL_LAST_ARG);
                    yyfree(*(char**)v M4_YY_CALL_LAST_ARG);
            yyfree(th.th_version M4_YY_CALL_LAST_ARG);
        yyfree(th->th_version M4_YY_CALL_LAST_ARG);
	yyfree( (void *) b M4_YY_CALL_LAST_ARG );
		yyfree( (void *) b->yy_ch_buf M4_YY_CALL_LAST_ARG );
	yyfree( yy_buffer_stack M4_YY_CALL_LAST_ARG );
	yyfree(YY_G(yy_buffer_stack) M4_YY_CALL_LAST_ARG);
        yyfree( YY_G(yy_start_stack) M4_YY_CALL_LAST_ARG );
    yyfree ( YY_G(yy_state_buf) M4_YY_CALL_LAST_ARG);
    yyfree ( yyscanner M4_YY_CALL_LAST_ARG );
	yyfree( yy_start_stack M4_YY_CALL_LAST_ARG );
					 * yy_get_next_buffer() to have set up
/* yy_get_next_buffer - try to read in a new buffer
/* yy_get_previous_state - get the state just before the EOB char was reached */
			 * yy_get_previous_state() go ahead and do it
								(YY_G(yy_buffer_stack),
    YY_G(yy_buffer_stack) = 0;
    YY_G(yy_buffer_stack_max) = 0;
		YY_G(yy_buffer_stack_max) = num_to_alloc;
	YY_G(yy_buffer_stack) = NULL;
		YY_G(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
		YY_G(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
		--YY_G(yy_buffer_stack_top);
		YY_G(yy_buffer_stack_top)++;
    YY_G(yy_buffer_stack_top) = 0;
		YY_G(yy_buffer_stack_top) = 0;
                          ? YY_G(yy_buffer_stack)[YY_G(yy_buffer_stack_top)] \
			++YY_G(yy_c_buf_p);
				YY_G(yy_c_buf_p) =
		*YY_G(yy_c_buf_p) = '\0'; \
			*YY_G(yy_c_buf_p) = '\0';
	*YY_G(yy_c_buf_p) = '\0';	/* preserve yytext */
			YY_G(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];
    YY_G(yy_c_buf_p) = (char *) 0;
	YY_G(yy_c_buf_p) = yy_cp;
YY_G(yy_c_buf_p) = yy_cp
		YY_G(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
	*YY_G(yy_c_buf_p) = YY_G(yy_hold_char);
		*YY_G(yy_c_buf_p) = YY_G(yy_hold_char);
					YY_G(yy_c_buf_p) = YY_G(yytext_ptr) + offset;
			YY_G(yy_c_buf_p) = YY_G(yytext_ptr) + yy_amount_of_matched_text;
					YY_G(yy_c_buf_p) = YY_G(yytext_ptr) + YY_MORE_ADJ;
		YY_G(yy_c_buf_p) = yytext + yyless_macro_arg; \
				YY_G(yy_did_buffer_switch_on_eof) = 0;
		YY_G(yy_did_buffer_switch_on_eof) = 1;
	YY_G(yy_did_buffer_switch_on_eof) = 1;
YY_G(yy_full_lp) = YY_G(yy_lp);
    YY_G(yy_full_match) = 0;
YY_G(yy_full_match) = yy_cp;
YY_G(yy_full_state) = YY_G(yy_state_ptr);
	YY_G(yy_hold_char) = *yy_cp;
	YY_G(yy_hold_char) = *yy_cp; \
		YY_G(yy_hold_char) = *YY_G(yy_c_buf_p); \
	YY_G(yy_hold_char) = *++YY_G(yy_c_buf_p);
	YY_G(yy_hold_char) = *YY_G(yy_c_buf_p);
    YY_G(yy_init) = 0;
		YY_G(yy_init) = 1;
YY_G(yy_last_accepting_cpos) = yy_cp;
YY_G(yy_last_accepting_state) = yy_current_state;
     YY_G(yy_looking_for_trail_begin) )
YY_G(yy_looking_for_trail_begin) = 0;
YY_G(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
YY_G(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
++YY_G(yy_lp);
++YY_G(yy_lp); \
    YY_G(yy_lp) = 0;
YY_G(yy_lp) = yy_accept[yy_current_state];
YY_G(yy_lp) = YY_G(yy_full_lp); /* restore orig. accepting pos. */ \
YY_G(yy_more_flag) = 0;
YY_G(yy_more_len)
YY_G(yy_more_len) = 0;
YY_G(yy_more_len) = YY_G(yy_c_buf_p) - YY_G(yytext_ptr);
    YY_G(yy_more_offset) = 0;
YY_G(yy_more_offset) = 0; \
YY_G(yy_more_offset) = YY_G(yy_prev_more_offset); \
	YY_G(yy_n_chars) += number_to_move;
			YY_G(yy_n_chars), (size_t) num_to_read );
			YY_G(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;
			YY_G(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	YY_G(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
YY_G(yy_prev_more_offset)
    YY_G(yy_prev_more_offset) = 0;
YY_G(yy_prev_more_offset) = YY_G(yy_more_offset); \
    YY_G(yy_start) = 0;
			YY_G(yy_start) = 1;	/* first start state */
    YY_G(yy_start_stack_depth) = 0;
		YY_G(yy_start_stack_depth) += YY_START_STACK_INCR;
			YY_G(yy_start_stack) = (int *) yyalloc( new_size M4_YY_CALL_LAST_ARG );
			YY_G(yy_start_stack) = (int *) yyrealloc(
        YY_G(yy_start_stack) = NULL;
    YY_G(yy_start_stack) =  NULL;
    YY_G(yy_start_stack_ptr) = 0;
	YY_G(yy_start_stack)[YY_G(yy_start_stack_ptr)++] = YY_START;
    YY_G(yy_state_buf) = 0;
    YY_G(yy_state_buf)  = NULL;
            YY_G(yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  M4_YY_CALL_LAST_ARG);
    YY_G(yy_state_ptr) = 0;
*YY_G(yy_state_ptr)++ = yy_current_state;
YY_G(yy_state_ptr) = YY_G(yy_full_state); /* restore orig. state */ \
YY_G(yy_state_ptr) = YY_G(yy_state_buf);
    YY_G(yytext_ptr) = 0;
					YY_G(yytext_ptr) + yy_amount_of_matched_text;
	YY_G(yytext_ptr) = yy_bp;
	YY_G(yytext_ptr) = yy_bp; \
	YY_G(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];
	YY_G(yytext_ptr) = YY_G(yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
YY_G(yytext_ptr) -= YY_G(yy_more_len); \
/* yy_hold_char holds the character lost when yytext is formed. */
	yyin = arg_yyin;
    yyin = (FILE *) 0;
	yyin->get( buf[0] );
    yyin = in_str ;
	yy_init = 0;
	yy_init_buffer( b, file M4_YY_CALL_LAST_ARG);
	yy_init_buffer( YY_CURRENT_BUFFER, input_file M4_YY_CALL_LAST_ARG);
    yy_init_globals. Leave at 0x00 for releases. */
    yy_init_globals( M4_YY_CALL_ONLY_ARG);
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyin = & std::cin;
    yyin = stdin;
			yyin = stdin;
YY_INT_ALIGNED
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
yy_is_jam = (yy_current_state <= 0);
yy_is_jam = (yy_current_state == 0);
yy_is_jam = (yy_current_state == %d);
yy_is_jam = (yy_trans_info->yy_verify != yy_c);
yyleng = (size_t) (yy_cp - yy_bp); \
yyleng = (size_t) (yy_cp - YY_G(yytext_ptr)); \
yyleng -= YY_G(yy_more_offset); \
yyleng += YY_G(yy_more_offset); \
		yyleng = yyless_macro_arg; \
        YY_LESS_LINENO(yyless_macro_arg);\
	yylex();
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
    yylex_destroy( lexer);
			 * yylex().  If so, then we have to assure
     * yylex_init()
/* yylex_init_extra has the same functionality as yylex_init, but follows the
/* yylex_init is special because it creates the scanner itself, so it is
    yylex_init(&lexer);
     * yylex() is called, initialization will occur. */
    yylex( lexer );
                        --yylineno;\
        --yylineno;
    yylineno++;
--yylineno
    yylineno =  1;
	yylineno = 1;	// this will only get updated if %option yylineno
    yylineno = line_number;
      --yylineno          track line count in yylineno
    yylloc = yylloc_param;
		yy_load_buffer_state( M4_YY_CALL_ONLY_ARG );
	yy_load_buffer_state( M4_YY_CALL_ONLY_ARG );
	yy_looking_for_trail_begin = 0;
       YYLTYPE *yyget_lloc M4_YY_PARAMS( M4_YY_PROTO_ONLY_ARG );
YYLTYPE *yyget_lloc  YYFARGS0(void)
        YYLTYPE * yylloc;
    YYLTYPE * yylloc_r;
    yylval = yylval_param;
yy_match:
--yymore
yymore() entails a minor performance penalty
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;
						YY_NEW_FILE;
			yy_next_state = yy_try_NUL_trans( yy_current_state M4_YY_CALL_LAST_ARG);
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
yy_NUL_trans
	yyout = arg_yyout;
    yyout = (FILE *) 0;
		yyout = new_out;
    yyout = out_str ;
			yyout = & std::cout;
    yyout = stdout;
			yyout = stdout;
	 *		yypop_buffer_state();
		yypop_buffer_state(M4_YY_CALL_ONLY_ARG);
	 *		yypush_buffer_state(new_buffer);
					yyrealloc( (void *) b->yy_ch_buf,
					yyrestart( yyin M4_YY_CALL_LAST_ARG);
			yyrestart( yyin  M4_YY_CALL_LAST_ARG);
		YY_RESTORE_YY_MORE_OFFSET
		YY_RESTORE_YY_MORE_OFFSET \
yy_rule_can_match_eol
yy_rule_linenum
YY_RULE_SETUP
 *       yy_scan_bytes() instead.
    yyscanner = NULL;
    yyscan_t lexer;
    yyscan_t* ptr_yy_globals;
%#        yyscan_t yyscanner;
YY_SC_TO_UI(*++yy_cp)
YY_SC_TO_UI(*yy_cp)
    yyset_extra (yy_user_defined, &dummy_yyguts);
    yyset_extra (yy_user_defined, *ptr_yy_globals);
	yy_size_t n;
		yy_size_t new_size;
		yy_size_t new_size = YY_G(yy_n_chars) + number_to_move + (YY_G(yy_n_chars) >> 1);
	yy_size_t yy_buf_size;
yyskel_static flex_int32_t yytbl_calc_total_len (const struct yytbl_data *tbl)
yyskel_static flex_int32_t yytbl_calc_total_len (const struct yytbl_data *tbl);
	yy_start = 0;
	yy_start_stack = NULL;
	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_state_buf = 0;
	yy_state_buf = new yy_state_type[YY_STATE_BUF_SIZE];
    yy_state_type yyFlexLexer::yy_get_previous_state()
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
    yy_state_type yy_last_accepting_state;
			yy_state_type yy_next_state;
    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
YYSTYPE * yyget_lval M4_YY_PARAMS( M4_YY_PROTO_ONLY_ARG );
YYSTYPE * yyget_lval  YYFARGS0(void)
        YYSTYPE * yylval;
    YYSTYPE * yylval_r;
	yy_switch_to_buffer( b M4_YY_CALL_LAST_ARG );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  M4_YY_CALL_LAST_ARG) M4_YY_CALL_LAST_ARG);
        || yytbl_read16 (&td.td_flags, rd) != 0
        || yytbl_read16 (&(th->th_flags), rd) != 0)
        || yytbl_read32 (&td.td_hilen, rd) != 0
        || yytbl_read32 (&td.td_lolen, rd) != 0)
        || yytbl_read32 (&(th->th_ssize), rd) != 0
	YYTD_DATA16 = 0x02,  /**< data is an array of type flex_int16_t */
	YYTD_DATA32 = 0x04,  /**< data is an array of type flex_int32_t */
	YYTD_DATA8 = 0x01,   /**< data is an array of type flex_int8_t */
	YYTD_ID_ACCEPT = 0x01,		/**< 1-dim ints */
	{YYTD_ID_ACCEPT, (void**)&yy_accept, sizeof(%s)},
	YYTD_ID_ACCLIST = 0x0C		/**< 1-dim ints */
	{YYTD_ID_ACCLIST, (void**)&yy_acclist, sizeof(%s)},
	YYTD_ID_BASE = 0x02,		/**< 1-dim ints */
	{YYTD_ID_BASE, (void**)&yy_base, sizeof(%s)},
	YYTD_ID_CHK = 0x03,		/**< 1-dim ints */
	{YYTD_ID_CHK, (void**)&yy_chk, sizeof(%s)},
	YYTD_ID_DEF = 0x04,		/**< 1-dim ints */
	{YYTD_ID_DEF, (void**)&yy_def, sizeof(%s)},
	YYTD_ID_EC = 0x05,		/**< 1-dim ints */
	{YYTD_ID_EC, (void**)&yy_ec, sizeof(%s)},
	YYTD_ID_META = 0x06,		/**< 1-dim ints */
	{YYTD_ID_META, (void**)&yy_meta, sizeof(%s)},
	YYTD_ID_NUL_TRANS = 0x07,	/**< 1-dim ints, maybe indices */
	{YYTD_ID_NUL_TRANS, (void**)&yy_NUL_trans, sizeof(%s)},
	YYTD_ID_NXT = 0x08,		/**< may be 2 dimensional ints */
	{YYTD_ID_NXT, (void**)&yy_nxt, sizeof(%s)},
	YYTD_ID_RULE_CAN_MATCH_EOL = 0x09, /**< 1-dim ints */
	{YYTD_ID_RULE_CAN_MATCH_EOL, (void**)&yy_rule_can_match_eol, sizeof(%s)},
	YYTD_ID_START_STATE_LIST = 0x0A,	/**< 1-dim indices into trans tbl  */
	{YYTD_ID_START_STATE_LIST, (void**)&yy_start_state_list, sizeof(%s)},
	YYTD_ID_TRANSITION = 0x0B,	/**< structs */
	{YYTD_ID_TRANSITION, (void**)&yy_transition, sizeof(%s)},
	YYTD_PTRANS = 0x08,  /**< data is a list of indexes of entries
	YYTD_STRUCT = 0x10  /**< data consists of yy_trans_info structs */
         * YYTD_STRUCT for the yy_transition array.
yyterminate();
         yytext );
         "(\"" << yytext << "\")\n";
					 * yytext, we can now set up
		(yytext[yyleng - 1] == '\n'); \
		yytext[yyleng] = YY_G(yy_hold_char); \
      (yy_trans_info = &yy_current_state[(unsigned int) yy_c])->
yy_trans_info = &yy_current_state[(unsigned int) yy_c];
    &yy_transition[%d],
/* yy_try_NUL_trans - try to make a transition on the NUL character
		YY_USER_INIT;
yy_verify == yy_c;
--yywrap
		/* zero only the new slots.*/

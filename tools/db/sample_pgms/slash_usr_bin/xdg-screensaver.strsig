            ;;
         ;;
        ;;
        *)
      ;;
#--------------------------------------
#----------------------------------------
#-----------------------------------------
#---------------------------------------------
#------------------------------------------------------------
#-------------------------------------------------------------
#----------------------------------------------------------------------------
                      2> /dev/null
                  2> /dev/null
                 2> /dev/null
    action="$1"
activate
        activate)
  activate)
  # Add window_id and xprop_pid to the xdg-screensave status file
    # All output to stderr
  already_tracked=$?
          already_tracked=0
    already_tracked=1
#   and/or sell copies of the Software, and to permit persons to whom the
An exit code of 0 indicates success while a non-zero exit code indicates
    A required tool could not be found.
#   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
        # Automatic resume when $screensaver_file disappears
       [a-zA-Z]*-*)
     # Be careful not to facilitate a symlink attack
    # Be silent
#!/bin/sh
                  boolean:true \
called. 0x1c00007 must be the X Window ID of an existing window.
    case "$1" in
case $1 in
  case "$DE" in
    case "$file" in
        case "$parm" in
cat << _MANUALPAGE
  cat "$screensaver_file" 2> /dev/null | (
cat << _USAGE
Causes the screensaver to be disabled till xdg-screensaver resume 0x1c00007 is
check_common_commands "$@"
check_common_commands()
# Check if we can use "mv -T"
check_input_file()
check_output_file()
# Checks for known desktop environments
# Checks for shared commands, e.g. --help
check_vendor_prefix()
    check_window_id
check_window_id()
  cleanup_suspend
cleanup_suspend()
  # Clean up the administration and resume the screensaver
Commands
#   Common utility functions included in all XDG wrapper scripts
# Consider "gnome-screensaver" a separate DE
# Consider "xscreensaver" a separate DE
#   copy of this software and associated documentation files (the "Software"),
#   Copyright 2006, Bryce Harrington <bryce@osdl.org>
# DBUS interface for gnome-screensaver
            dbus-send --session \
        dbus-send --session \
        dcop kdesktop KScreensaverIface configure > /dev/null
        dcop kdesktop KScreensaverIface enable false > /dev/null
        dcop kdesktop KScreensaverIface lock > /dev/null
        dcop kdesktop KScreensaverIface quit > /dev/null
        dcop kdesktop KScreensaverIface save > /dev/null
   DEBUG 1 "mv -T available"
   DEBUG 1 "mv -T not available"
  DEBUG 2 "Running $XPROP -id $window_id"
     DEBUG 3 Window $window_id does not exist
     DEBUG 3 Window $window_id exists
     DEBUG 3 "xprop not found"
Description
                          --dest=org.freedesktop.ScreenSaver \
                      --dest=org.freedesktop.ScreenSaver \
                  --dest=org.freedesktop.ScreenSaver \
                          --dest=org.gnome.ScreenSaver \
                  --dest=org.gnome.ScreenSaver \
detectDE
detectDE()
    digits.
        DIR=`dirname "$1"`
          # Disable DPMS
    done
     done
     # Don't track window if we don't have xprop
    do_resume
do_resume()
        echo
        echo "$@"
  echo "$@" >&2
    echo 'A vendor prefix consists of alpha characters ([a-zA-Z]) and is terminated' >&2
            echo "disabled"
            echo "enabled"
            echo "ERROR: dbus org.freedesktop.ScreenSaver.GetActive returned '$status'" >&2
            echo "ERROR: dbus org.gnome.ScreenSaver.GetActive returned '$status'" >&2
            echo "ERROR: kdesktop KScreensaverIface isEnabled returned '$status'" >&2
        echo "ERROR:  Unknown command '$1'" >&2
        echo "ERROR: Unknown command '$1'" >&2
        echo "ERROR: Unknown command '$1" >&2
            echo "ERROR:  xset q did not report the screensaver timeout" >&2
            echo "ERROR: xset q did not report the screensaver timeout" >&2
        echo "Try 'xdg-screensaver --help' for more information." >&2
            echo "Use 'man xdg-screensaver' or 'xdg-screensaver --manual' for additional info."
        echo "Use 'man xdg-screensaver' or 'xdg-screensaver --manual' for additional info."
    echo "Use --novendor to override or 'xdg-screensaver --manual' for additional info." >&2
        echo "$wid:$pid"
  echo "$window_id:$xprop_pid" >> $tmpfile
    echo 'with a dash ("-"). An example '"$file_label"' is '"'example-$file'" >&2
            echo "xdg-screensaver 1.0.2"
        echo "xdg-screensaver: $@" >&2
    echo "xdg-screensaver: $file_label '$file' does not have a proper vendor prefix" >&2
    elif `dbus-send --print-reply --dest=org.freedesktop.DBus /org/freedesktop/DBus org.freedesktop.DBus.GetNameOwner string:org.gnome.SessionManager > /dev/null 2>&1` ; then DE=gnome;
        elif [ "$timeout" -eq 0 ]; then
    elif [ x"$DESKTOP_SESSION" = x"LXDE" ]; then DE=lxde;
    elif [ x"$GNOME_DESKTOP_SESSION_ID" != x"" ]; then DE=gnome;
    elif xprop -root _DT_SAVE_MODE 2> /dev/null | grep ' = \"xfce4\"$' >/dev/null 2>&1; then DE=xfce;
        elif [ x"$result" != "x0" ]; then
        elif [ x"$status" = "xfalse" ]; then
    else
      else
        else
    else DE=""
    Error in command line syntax.
    esac
        esac
Examples
    exit 0
    exit 1
    exit 2
    exit 3
    exit 4
    exit 5
    exit 6
    exit $already_tracked
Exit Codes
exit_failure_file_missing()
        exit_failure_file_missing "file '$1' does not exist"
exit_failure_file_permission_read()
        exit_failure_file_permission_read "no permission to read file '$1'"
exit_failure_file_permission_write()
            exit_failure_file_permission_write "no permission to create file '$1'"
            exit_failure_file_permission_write "no permission to write to file '$1'"
    exit_failure_operation_failed
exit_failure_operation_failed()
     exit_failure_operation_failed "Window $window_id does not exist"
exit_failure_operation_impossible()
exit_failure_syntax()
    exit_failure_syntax "unknown command '$1'"
        exit_failure_syntax "WindowID argument missing"
# Exit script on failure returned by a tool application
# Exit script on failure to locate necessary tool applications
# Exit script on insufficient permission to read a specified file
# Exit script on insufficient permission to write a specified file
# Exit script on malformed arguments, not enough arguments
# Exit script on missing file specified on command line
# Exit script on successfully completing the desired operation
            exit_success
    exit_success
exit_success()
failure. The following failure codes can be returned:
      fi
        fi
    file=`basename "$1"`
    file_label="$2"
  # Filter stale entries from the xdg-screensaver status file
  # Find the PID of the trackingprocess
#   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    gnome_screensaver)
        gnome-screensaver-command --lock > /dev/null 2> /dev/null
gnome-screensaver-command -q > /dev/null 2>&1 && DE="gnome_screensaver"
                          | grep boolean | cut -d ' ' -f 5`
                  | grep uint32 | cut -d ' ' -f 5 >| "$screensaver_file.cookie" \
  grep -v "$window_id:$xprop_pid\$" "$screensaver_file" > "$tmpfile" 2> /dev/null
            --help)
# http://people.gnome.org/~mccann/gnome-screensaver/docs/gnome-screensaver.html
  if [ "$1" = "reset" ] ; then
  if [ "$1" = "resume" ] ; then
  if [ "$1" = "suspend" ] ; then
if [ "$action" = "resume" ] ; then
if [ "$action" = "suspend" ] ; then
  if [ "$already_tracked" -eq "0" ] ; then
    if [ -e "$1" ]; then
    if [ ! -e "$1" ]; then
        if [ -f "$screensaver_file.cookie" ] ; then
      if [ -f "$screensaver_file.dpms" ]; then
        if [ -f "$screensaver_file" ] ; then
    if [ $# -gt 0 ]; then
    # if it does not exists, check if we are allowed to write on the directory
if mv -T ... ... 2>&1 | grep '\.\.\.' > /dev/null ; then
  if [ -n "$lockfile_command" ] ; then
  if [ -n "$xprop_pid" ] && ps -p "$xprop_pid" 2> /dev/null | grep xprop > /dev/null; then
      if ps -p "$pid" 2> /dev/null | grep xprop > /dev/null; then
    if [ ! -r "$1" ]; then
if [ $result -eq 0 ]; then
    IFS=":"
    IFS="$IFS_save"
    IFS_save="$IFS"
  if [ ! -s "$screensaver_file" ] ; then
  if [ -s "$tmpfile" ] ; then
    # if the file exists, check if it is writeable
        if [ "$timeout" -gt 0 ]; then
        if [ $try -eq 3 ] ; then
        if [ ! -w "$1" ]; then
        if [ ! -w "$DIR" -o ! -x "$DIR" ]; then
        if [ $wid = $window_id ] ; then
if [ ${XDG_UTILS_DEBUG_LEVEL-0} -lt 1 ]; then
    if [ x"$KDE_FULL_SESSION" = x"true" ]; then DE=kde;
      if [ x"$KDE_SESSION_VERSION" = x"4" ]; then
  if $XPROP -id $window_id > /dev/null 2> /dev/null; then
      if xset -q | grep 'DPMS is Enabled' > /dev/null 2> /dev/null; then
        if [ x"$status" = "xtrue" -o x"$status" = "xfalse" ]; then
        if [ x"$status" = "xtrue" ]; then
    if [ -z "$1" ] ; then
  if [ -z "$XPROP" ]; then
#   in all copies or substantial portions of the Software.
# It also always returns 1 in KDE 3.4 and earlier
    kde)
# kfmclient exec/openURL can give bogus exit value in KDE <= 3.5.4
kfmclient_fix_exit_code()
     kill -s TERM $xprop_pid
     # Kill the tracking process
#   LICENSE:
     local try
        lock)
    locked, depending on existing system policies.
  lockfile
lockfile()
     $lockfile_command -1 -l 10 -s 3 "$screensaver_file".lock
lockfile_command=`which lockfile 2> /dev/null`
  lockfile # Obtain lockfile
    Lock the screen immediately.
    major=`echo $version | sed 's/KDE.*: \([0-9]\).*/\1/'`
            --manual)
--manual
            manualpage
manualpage()
_MANUALPAGE
    may be asked to authenticate first.
    minor=`echo $version | sed 's/KDE.*: [0-9]*\.\([0-9]\).*/\1/'`
    must remain in existance for the duration of the suspension.
   MV="mv"
   MV="mv -T"
    $MV "$tmpfile" "$screensaver_file"
  $MV "$tmpfile" "$screensaver_file"
          $MV "$tmpfile" "$screensaver_file.dpms"
    [ -n "$file_label" ] || file_label="filename"
   # No secure moves available, use home dir
    number consisting of the prefix 0x followed by one or more hexadecimal
                          org.freedesktop.ScreenSaver.GetActive \
                  org.freedesktop.ScreenSaver.Inhibit \
                  org.freedesktop.ScreenSaver.Lock \
                  org.freedesktop.ScreenSaver.SetActive \
                      org.freedesktop.ScreenSaver.UnInhibit \
                          /org/gnome/ScreenSaver \
                  /org/gnome/ScreenSaver \
                          org.gnome.ScreenSaver.GetActive \
                  org.gnome.ScreenSaver.SetActive \
                  org.gnome.ScreenSaver.SimulateUserActivity \
#   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# or missing required option.
#   OTHER DEALINGS IN THE SOFTWARE.
#   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
        parm="$1"
perform_action()
perform_action "$action"
      perform_action resume
    period of inactivity and prints disabled if the screensaver is not enabled.
#   Permission is hereby granted, free of charge, to any person obtaining a
     # Poor man's attempt at doing a lockfile
                          --print-reply \
                  --print-reply \
    Prints enabled to stdout if the screensaver is enabled to turn on after a
# prints usage information
          # Re-enable DPMS
#   Refer to the usage() function below for usage.
    release=`echo $version | sed 's/KDE.*: [0-9]*\.[0-9]*\.\([0-9]\).*/\1/'`
                          --reply-timeout=2000 \
                  --reply-timeout=2000 \
        reset)
  reset)
      # Restore DPMS state
        result=$?
        result=0
  result=1
        resume)
  resume)
    Resume the screensaver and monitor power management after being suspended.
resume WindowID
    return
     return
         return
    return 0
            return 1
        return 1
  # Return if $window_id is being tracked already
            rm -f "$screensaver_file.cookie"
  rm -f "$screensaver_file".lock
            rm -f "$screensaver_file".lock || return # Can't remove lockfile
      rm "$screensaver_file"
          rm "$screensaver_file.dpms"
    same time. In that case screensaver operation is only restored once the
      # Save DPMS state
                          /ScreenSaver \
                      /ScreenSaver \
                  /ScreenSaver \
   screensaver_file="$HOME/.xdg-screensaver-"`echo $(hostname)-$DISPLAY | sed 's/:/-/g'`
      # $screensaver_file is empty, do resume
  ) < $screensaver_file > $tmpfile
   screensaver_file="/tmp/xdg-screensaver-$USER-"`echo $DISPLAY | sed 's/:/-/g'`
screensaver_freedesktop()
          screensaver_freedesktop "$1"
screensaver_gnome_screensaver()
      screensaver_gnome_screensaver "$1"
    screensaver has been resumed in relation to each of the windows
screensaver_kde()
          screensaver_kde "$1"
        screensaver_suspend_loop \
screensaver_suspend_loop()
        screensaver_suspend_loop xscreensaver-command -deactivate
screensaver_xscreensaver()
      screensaver_xscreensaver "$1"
screensaver_xserver()
      screensaver_xserver "$1"
# set variable DE to the desktop environments name, lowercase
    shift
        shift
    Show command synopsis.
    Show the xdg-utils version information.
    Show this manualpage.
# Simply return 0 in such case
        sleep 1
#   Software is furnished to do so, subject to the following conditions:
  # Start tracking $window_id
    # Start tracking $window_id and resume the screensaver once it disappears
        status)
  status)
        status=`dbus-send --session \
        status=`dcop kdesktop KScreensaverIface isEnabled`
                  string:$window_id \
                  string:xdg-screensaver \
        suspend)
  suspend)
    # Suspend pending, don't do a thing
    Suspends the screensaver and monitor power management. WindowID must be the
suspend WindowID
Synopsis
    test "$major" -gt 3 && return $1
    test "$minor" -gt 5 && return $1
    test "$release" -gt 4 && return $1
          test "${TMPDIR+set}" = set || TMPDIR=/tmp
  test "${TMPDIR+set}" = set || TMPDIR=/tmp
#   The above copyright notice and this permission notice shall be included
    The action failed.
#   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
#   the rights to use, copy, modify, merge, publish, distribute, sublicense,
    The screensaver can be suspended in relation to multiple windows at the
#   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        timeout=`xset q | sed '/^Screen Saver:/,/^[^ ]/ { s/.*timeout: *\([0-9]*\).*/\1/; t }; d'`
  ) > $tmpfile
          tmpfile=`mktemp $TMPDIR/tmp.XXXXXXXXXX`
  tmpfile=`mktemp $TMPDIR/tmp.XXXXXXXXXX`
#   to deal in the Software without restriction, including without limitation
to use xdg-screensaver as root.
track_window()
    ( track_window  ) 2> /dev/null > /dev/null &
            try=0
     try=0
        try=$(($try+1))
    Turns the screensaver off immediately. If the screen was locked the user
        # Turns the screensaver off right now
    Turns the screensaver on immediately. This may result in the screen getting
                          --type=method_call \
                      --type=method_call \
                  --type=method_call \
                      uint32:$value \
  unlockfile
    unlockfile
      unlockfile
unlockfile()
  unlockfile # Free lockfile
        usage
            usage
#   Utility script to control screensaver.
            value=`cat "$screensaver_file.cookie"`
            --version)
--version
    version=`kde${KDE_SESSION_VERSION}-config --version 2>/dev/null | grep '^KDE'`
  # Wait for xprop to edit, it means that the window disappeared
  wait $xprop_pid
    # We are already tracking $window_id, don't do anything
   # We can securely move files in /tmp with mv -T
  (while [ -f "$screensaver_file" ]; do $*; sleep 50; done) > /dev/null 2> /dev/null &
    while [ $# -gt 0 ] ; do
     while ! ln -s "$screensaver_file".lock "$screensaver_file".lock 2> /dev/null;
    while read wid pid; do
window_id=
    window_id="$1"
    WindowID can be represented as either a decimal number or as a hexadecimal
    WindowID must be the same X Window ID that was passed to a previous call of
[ x"$1" != x"" ] || exit_failure_syntax
    xdg_redirect_output=" >&2"
    xdg_redirect_output=" > /dev/null 2> /dev/null"
#   xdg-screensaver
xdg-screensaver { activate | lock | reset | status }
xdg-screensaver - command line tool for controlling the screensaver
xdg-screensaver { --help | --manual | --version }
xdg-screensaver is for use inside a desktop session only. It is not recommended
xdg-screensaver provides commands to control the screensaver.
xdg-screensaver resume WindowID
    xdg-screensaver suspend
xdg-screensaver suspend 0x1c00007
xdg-screensaver suspend WindowID
#@xdg-utils-common@
  [ ${XDG_UTILS_DEBUG_LEVEL} -lt $1 ] && return 0;
  $XPROP -id $window_id -spy > /dev/null &
  xprop_pid=$!
  xprop_pid=`grep "$window_id:" "$screensaver_file" 2> /dev/null | cut -d ':' -f 2`
XPROP=`which xprop 2> /dev/null`
    xscreensaver)
        xscreensaver-command -activate > /dev/null 2> /dev/null
        xscreensaver-command -deactivate > /dev/null 2> /dev/null
        xscreensaver-command -lock > /dev/null 2> /dev/null
xscreensaver-command -version 2> /dev/null | grep XScreenSaver > /dev/null && DE="xscreensaver"
          xset -dpms
          xset +dpms
          xset dpms force on
        xset s activate > /dev/null
        xset s default > /dev/null
        xset s off > /dev/null
        xset s reset > /dev/null
    X Window ID of an existing window of the calling application. The window
  [ -z "${XDG_UTILS_DEBUG_LEVEL}" ] && return 0;
[ -z "${XDG_UTILS_DEBUG_LEVEL}" ] && unset XDG_UTILS_DEBUG_LEVEL;

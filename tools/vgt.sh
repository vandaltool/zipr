#!/bin/bash

source $(dirname $0)/ps_wrapper.source $0



declare -a configs
declare -A style_options

is_natural()
{
	if [[ $1 =~ ^[0-9]+$ ]]; then
		# echo Detected natural -- bash uses 0 as normal exit
		return 0
	else
		#echo Detected non-natural -- bash uses non-zero as err exit
		return 1	
	fi
}

init_globals()
{
	do_marshaling=0
	do_duckseason=0
	variant_sets=1
	input_package=""
	output_package=""
	duck_json=""
	config_label=""
	verbose=0
	temp_dir=""
	keep_temp=0
}

usage_raw()
{
	echo ""
	echo "Usage:"
	echo ""
	echo "$1 "
	echo "   --input-package <path> "
	echo "   --output-package <path> "
	echo "   --config <config> [options...]"
	echo ""
	echo "Options:"
	echo ""
	echo "	--input-package <path>                    path to input package of replicants"
	echo "	-i <path>                                 "
	echo ""
	echo "	--temp-dir <path>                         path to temporary files needed to build output"
	echo "	-t <path>                                 package -- caution!  used in a cache-like way!"
	echo ""
	echo "	--output-package <path>                   path to write a package of diverse variants"
	echo "	-o <path>                                 "
	echo ""
	echo "	--config <config>                         describe the configuration to use, e.g., 2structNoc+1probBilr"
	echo "	-c <path>                                 "
	echo ""
	echo "  --extra-style-flags <style>:<flags>       pass along <flags> when creating variants of type <style>"
	echo "  -e <style>:<flags>                        if <style> is empty (i.e., the paramters starts with a : or has no :) "
	echo "                                            or has the value \"default\", <flags> is passed to all styles.  "
	echo "                                            Can be repeated to add more flags."
	echo "                                            Possible values for <flags> is undocumented.  See \$PS."
	echo ""
	echo "	--marshaling <# variant sets>             include checkpoint, recovery, and marshaling support for the "
	echo "	--marshalling <# variant sets>            application and specify how many variant sets to use"
	echo "	-m <# variant sets>                       "
	echo ""
	echo "	--duck-json <daffy.json>                  Specify the input file generated by daffy for this application."
	echo "	-d <daffy.json>                           "
	echo ""
	echo "	--keep                                    Keep temp directory"
	echo "	-k                                        "
	echo ""
	echo "	--help, --usage, -h                       Display this message and exit."
	echo "	--verbose, -v                             Spew debug data"
	echo ""
	echo "Notes:"
	echo "	* Not all listed configurations will work on all programs.  For example, stack samping (probSS or structSS) "
	echo "	  is incompatible with exception handling.  It's recommended you start with simpler configs for testing purposes."
	echo "	* This tool may take a long time.  High CPU load indicates progress is being made."
	echo "	* Configurations are of the form:"
	echo ""
	echo "			<#><style>+<#>style+..."
	echo ""
	echo "		where <#> represents a positive, integer number of variants"
	echo "		and <style> represents how to configure those variants."
	echo "		For example, '2structNoc+1probBilr' means 2 structured variants with "
	echo "		non-overlapping code with 1 probablistic code layout variant."
	echo ""
	echo "	* In configuration descriptions, Use the + notation when more than one variant style is desired."
	echo "	* Behavior when a configuration has a duplicate style is undefined. "
	echo "	* Possible style options are:"
	ls -1 $PEASOUP_HOME/tools/cfar_configs/*.sh|sed "s:^.*cfar_:		:g"|sed "s/\.sh$//g"| awk '{ print length, $0 }' | sort -n -s | cut -d" " -f2-
	
	exit 1
}

usage()
{
	usage_raw "$@" | less
	exit 1
}

parse_args()
{
	program=$0
	init_globals

        short_opts="i:o:m:d:kc:huvt:e:"
        long_opts="--long do-marshaling:
                   --long do-marshalling:
                   --long config:
                   --long input-package:
                   --long temp-dir:
                   --long output-package:
                   --long duck-json:
                   --long keep
                   --long extra-style-flags:
                   --long help
                   --long usage
                   --long verbose
		"

        # solaris does not support long option names
        if [[ `uname -s` = "SunOS" ]]; then
                TEMP=`getopt $short_opts "$@"`
        else
                TEMP=`getopt -o $short_opts $long_opts -n 'vgt.sh' -- "$@"`
        fi

        # error check #
        if [[ "$?" != 0 ]] ; then echo "Terminating..." >&2 ; exit -1 ; fi

        # Note the quotes around `$TEMP': they are essential!
        eval set -- "$TEMP"


	# the configuration you'd like to protect for the application
        while true ; do
                case "$1" in
			--do-marshaling|--do-marshalling|-m)
				do_marshaling=1
				shift
				variant_sets=$1
				shift
				#echo Enabling marshaling with $variant_sets variant sets.
			;;
			--duck-json|-d)
				shift
				duck_json=$1
				shift
			;;
			--keep|-k)
				keep_temp=1
				shift
			;;
			--input-package|-i)
				shift
				input_package=$(echo "$1"|sed "s:/*$::")
				shift
			;;
			--temp-dir|-t)
				shift
				keep_temp=1
				temp_dir=$1
				shift
			;;
			--output-package|-o)
				shift
				output_package=$(echo "$1"|sed "s:/*$::")
				shift
			;;
			--config|-c)
				shift
				config_label=$1
				shift
			;;
			--extra-style-flags|-e)
				shift
				extra_flag=$1
				style=${extra_flag%%:*}	 # delete longest (%%) string that matches regex :* starting at end of string (%)
				flag=${extra_flag#*:} 	 # delete shortest (##) string that matches regex *: starting at begining of string (#)
				#echo "in extra-style-flags, style='$style'"
				#echo "in extra-style-flags, flag='$flag'"
				if [[ -z "$style" ]]; then
					style_options["default"]="${style_options[default]} $flag"
				else
					style_options["$style"]="${style_options[$style]} $flag"
				fi
				shift
			;;
			--verbose|-v)
				verbose=1
				shift
			;;
			--help|--usage|-h|-u)
				usage $program
			;;	
			--)
				break;
			;;	
			*)
			echo "unknown option: $1"
			exit 1
			;;
		esac
	done
}


sanity_check_args()
{
	if [[ "$do_marshaling" = "1" ]] && [[ "$do_duckseason" = "1" ]]; then
		echo "--duck-season is incompatible with --do-marshaling"
		exit 1
	fi

	if [[ -z "$input_package"  ]]; then
		echo "Must specify an input package of replicants. "
		exit 1
	fi
	if [[ ! -d "$input_package" ]]; then
		echo "Input package does not exist: $input_package"
		exit 1
	fi

	if [[ ! -z "$output_package" ]]; then
		# if exists and not a directory
		if [[ -e "$output_package" ]]; then
			echo "Cannot make output package directory: $output_package"
			exit 1
		fi
	fi

	if ! is_natural "$variant_sets" ; then
		echo "Variant set specifier ($variant_sets) is not an integer";
		exit 1
	fi
	if [[ 0 -gt "$variant_sets" || 100 -lt "$variant_sets" ]] ; then
		echo "Invalid number of variant sets.  Must be 0 < #variant_sets < 100."
		exit 1
	fi

	if [[ -z "$config_label" ]]; then
		echo "Must specify a configuration to build"
		exit 1
	fi
	if [[ ! -f $input_package/monitor.conf ]]; then
		echo "Cannot find monitor.conf in input package $input_package."
		exit 1
	fi
}

find_configs()
{

	# configurations to provide for this variant set.

	local config_count=0
	for config in $(echo $config_label | sed "s|+| |g")
	do
		#echo Found config=$config
		config_name=$(echo $config | sed "s|^[0-9]*||")
		#echo Found config_name=$config_name
		config_num=$(echo $config | sed "s|\(^[0-9]*\).*|\1|")
		#echo Found config_num=$config_num
	
		# find any extra flags for this option
		config_options="${style_options[$config_name]} ${style_options[default]}"
		#echo config_options=$config_options

		if [[ ! -x $PEASOUP_HOME/tools/cfar_configs/cfar_$config_name.sh ]]; then
			echo "Cannot find config named $config_name"
			exit 1
		fi
		if ! is_natural "$config_num"; then
			echo "Found bad configuration number ($config_num) in config $config"
			exit 1
		fi


		configs[$config_count]="cfar_${config_name}.sh $config_num $config_options"

		config_count=$(expr $config_count + 1)
	done

	# build options for package generation
	gen_mvee_opts=""

	# check for marshaling support
	if [[ $do_marshaling = 1 ]]; then
		gen_mvee_opts="$gen_mvee_opts --include-cr"
	fi

	# check for NOH xform.
	if [[ "$config_label" =~ .*structNoh.* ]]  || [[ "$config_label" =~ .*probNoh.* ]] || [[ "$config_label" =~ .*phase1* ]] ; then
		gen_mvee_opts="$gen_mvee_opts --enablenoh"
	fi

	if [[ "$config_label" =~ .*structNol.* ]]  || [[ "$config_label" =~ .*probNol.* ]] || [[ "$config_label" =~ .*phase1* ]]; then
		gen_mvee_opts="$gen_mvee_opts --enablenol"
	fi
	if [[ "$config_label" =~ .*probHeaprand* ]]  || [[ "$config_label" =~ .*phase1* ]]; then
		gen_mvee_opts="$gen_mvee_opts --diehard"
	fi

	if [[ $verbose = 1 ]]; then
		echo gen_mvee_opts are $gen_mvee_opts
	fi

	# FIXME
	# need to pass duck_json to duck-season step.
	# need image_name to duck-season step?
	# need VGT flag for "extra PS options such as --step-option move_globals:-d --step-option move_globals:.interp"
}

find_main_exe()
{
	# need to add --mainexe flag to gen_mvee_opts
	mon_conf=$input_package/monitor.conf
	main_alias=$(cat $mon_conf |jq '.variant.global.exec.path'|sed 's/"//g')
	variant_name=$(cat $mon_conf | jq '.variant.sets.default[0]') # leave quotes 
	variant_alias=$(cat $mon_conf |jq '.variant.specs['"$variant_name"'].exec.alias'|grep "$main_alias="|sed 's/",//g'|sed 's/"//g'|sed "s/.*=//")

	main_exe=$(basename $variant_alias)
	gen_mvee_opts="$gen_mvee_opts --mainexe $main_exe"
	if [[ $verbose = 1 ]]; then
		echo "main_exe name is $main_exe"
		echo "gen_mvee_opts are $gen_mvee_opts"
	fi


}


# ---- probably not changing these things.

find_extra_preloads()
{
	mon_conf=$input_package/monitor.conf
	preloads=$(cat $mon_conf|jq '.variant.global.exec.env'|grep LD_PRELOAD|sed 's|"||g'|sed "s|.*=||")
	extra_preloads=" --extra_preloads $preloads"

	if [[ $verbose = 1 ]]; then
		echo extra_preloads=$extra_preloads
	fi
}



find_executable_files()
{
	# inputs to the script.

	# which files to protect
	#files="KUDYN_00006_GCC_64"
	files=$(find $input_package -exec file {} \; |grep -i elf |cut -d":" -f1)

	if [[ $verbose = 1 ]]; then
		echo exe_elf_files=$files
	fi

}

find_class()
{
	# which class this atd.
	# class=$(echo $files |sed "s/_CLANG_64//"|sed "s/_GCC_64//" )
	mon_conf=$input_package/monitor.conf
	class=$(cat $mon_conf|jq '.atd.class'|sed 's|"||g'|sed "s|.*=||")
	if [[ $class = "null" ]]; then
		echo "Warning!  Input package does not specify an atd.class setting.  Assuming NO_POLLS..."
		class="NO_POLLS"
	fi
	if [[ $verbose = 1 ]]; then
		echo class=$class
	fi
}

find_application_name()
{
	# which server is this?
	mon_conf=$input_package/monitor.conf
	server=$(cat $mon_conf|jq '.atd.server'|sed 's|"||g'|sed "s|.*=||")
	if [[ $server = "null" ]]; then
		echo "Error!  Input package does not specify an atd.server setting."
		exit 1
	fi
	if [[ $verbose = 1 ]]; then
		echo server=$server
	fi
}

find_command_line()
{
	# args for the server?
	# changed output log to /dev/null so it's not chckpointed, as documented on apogee wiki
	# args=' "-p", "8888", "-d", "/tmp/www", "-D", "-c", "/cgi-bin/**", "-l", "/dev/null", "-i", "/testing/results/thttpd.pid" '
	mon_conf=$input_package/monitor.conf
	args=$(cat $mon_conf |jq '.variant.global.exec.argv'|grep -v -e '\[' -e '\]' )

	if [[ $args = "null" ]]; then
		echo "Error!  Input package does not specify .variant.global.exec.argv"
		exit 1
	fi
	if [[ $verbose = 1 ]]; then
		echo argv="$args"
	fi
}


find_temp_dir()
{
	if [[ -z "$temp_dir" ]]; then
		# where to put intermediate results.
		outdir=$input_package-temp.$$
	else
		outdir=$temp_dir
	fi
}


find_output_dir()
{
	if [[ -z "$output_package" ]]; then
		finaldir="$(echo ${input_package}|sed "s:-:_:")-${config_label}-UVATA1-$(date "+%d_%m_%Y")"
	else
		finaldir="$output_package"
	fi
	if [[ -d "$finaldir" ]]; then
		echo "$finaldir already exists; aborting...."
		exit 1
	else
		if ! mkdir "$finaldir" ; then
			echo "Error creating output directory"
			exit 1
		fi
	fi
}

generate_variants()
{
	for variant_set_no in $(seq 1 $variant_sets)
	do
		echo Creating variant set $variant_set_no
		myoutdir=$outdir/vs-$variant_set_no
		#create outdir
		mkdir -p $myoutdir

		#for each config
		for config in "${configs[@]}"
		do
			echo Creating variants for $config

			# and for each file
			for file in $files
			do
				# parse the script/num variants from the config 
				script=$(echo $config|cut -d" " -f1)
				numvariants=$(echo $config|cut -d" " -f2)
				options=$(echo $config|cut -d" " -f3-)

				# run cfar.sh
				$PEASOUP_HOME/tools/cfar_configs/$script $numvariants $file $myoutdir $options
				
				if [[ $? != 0 ]]; then
					echo "Protection failed."
					exit 1
				fi

			done
		done
	done
	echo Variant generation complete.
}

generate_package()
{
	# generate a config.
	$PEASOUP_HOME/tools/generate_mvee_package.sh --indir "$outdir" --outdir "$finaldir" --class "$class" --server "$server" --args "$args" $gen_mvee_opts  $extra_preloads

	# FIXME:  can't find this used, although I know it is.
	#cp $CFAR_EMT_PLUGINS/debug/libdebug.so $finaldir
}

cleanup()
{
	if [[ "$keep_temp" = 0 ]]; then
		echo "Cleaning up temp dir: '$outdir'"
		/bin/rm -Rf $outdir
	else
		echo "Skipping clean up"
		echo "temp dir is:  $outdir"
	fi
}


main()
{
	parse_args "$@"
	sanity_check_args
	find_output_dir
	find_configs
	find_extra_preloads
	find_executable_files
	find_class
	find_application_name
	find_command_line
	find_temp_dir
	find_main_exe
	generate_variants
	generate_package
	cleanup
}

main "$@"

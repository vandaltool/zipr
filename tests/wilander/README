#########################################################################
# README - Wilander Buffer Overrun Suite
#
#	Modified for use with Memory Monitor Strata (mmStrata)
#
# 	Author: Michele Co, mc2zk@cs.virginia.edu
#########################################################################
# The Makefile has been modified December 2007 to accomodate 
#	the build process for NICECAP 2007 - mmStrata prototype 2
#	December 11, 2007
#
#	NOTE: This test suite contains attacks that are known
#	to work when:
#		* compiled with gcc v. 3.2.2 (NO optimizations, 
#			any optimizations cause some attacks to fail) 
#		* run on Linux Fedora Core 6 as a 32-bit x86 binary
#
#########################################################################

QUICK START
-----------

	0) To build the Wilander buffer overrun test suite with strata, the following environment variables must be set:

	STRATA 		# the path to strata directory
	STRATA_HOME 	# the path to strata directory (for legacy reasons)
	NICECAP_HOME	# the path to directory containing the nicecap_link script
			# CVS repository module name: nicecap_example 
	DIABLO_HOME	# the path to diablo directory.  Only ld_script from this directory is needed
			# CVS repository module name: diablo
	NICECAP_HOME	# the path to nicecap_example directory 
			# (CVS module: nicecap_example)
	SMPSA_HOME	# the path to IDAPro SMP static analyzer plugin  
			# (CVS module: SMPStaticAnalyzer)
	TOOLCHAIN	# the path to diablo toolchain
			# (CVS module: diablo_toolchain)

	1) To build, type: make 
		Several output files will be generated:
		a) wilander_tests.with_strata.proto2 
			- A wrapper script that invokes the *.stratafied executable 
		b) wilander_tests.with_strata.proto2.idb
			- This is an IDA pro intermediate file 
		c) wilander_tests.with_strata.proto2.ncexe
			- The non-stratafied executable
		d) wilander_tests.with_strata.proto2.ncexe.annot
			- The annotations file generated by IDA Pro SMPAnalyzer plugin
		e) wilander_tests.with_strata.proto2.ncexe.data
			- An intermediate file generated by the ${STRATA}/tools/stratafier/do_stratafy.sh script
		f) wilander_tests.with_strata.proto2.ncexe.log
			- A log file generated by the IDA Pro SMPStaticAnalyzer plugin
		g) wilander_tests.with_strata.proto2.ncexe.readelf
			- List of symbols generated by readelf
		h) wilander_tests.with_strata.proto2.ncexe.SMPobjdump
			- objdump of .ncexe
		i) wilander_tests.with_strata.proto2.stratafied
			- The stratafied application
		j) wilander_tests.asm
			- disassembly of wilander_tests.with_strata.proto2.ncexe produced by IDA Pro
	2) To run, invoke the wilander_tests.with_strata.proto2 with the desired case number (see below for description of case number mappings).  If you encounter problems, try invoking the *.stratafied file directly (if having a problem with the stratafied version).

Here is a sample commandline:

STRATA_SMP=1 STRATA_DOUBLE_FREE=1 STRATA_LOG=warn STRATA_INSTRUMENT=1 wilander_tests.with_strata.proto2 5


DESCRIPTION
-----------

This directory contains several files related to the John Wilander buffer overrun test suite described in "A Comparison of Publicly Available Tools for Dynamic Buffer Overflow Prevention" (NDSS 2003, San Diego, CA, pp. 149-162).

There are five files: 


	1) dynamic_testbed_john_wilander.original.c
		This is the testbed as originally delivered.  Strata is not built in.  Many test cases did not work out of the box due to some changes in the way the compiler laid out variables, particularly the ordering.  This file can be used to compare if certain cases do not work on the target machine.

	2) dynamic_testbed_john_wilander.with_strata.c
		This file is the Wilander testbed modified in the following ways:
		- Opposite direction variable layout ordering (from original code) handled.  The original cases are still in place and should still work if the variables are laid out with the original ordering assumption. 
		- Stack-based cases were modified so that they worked within our system.
		- Strata library included

	3) dynamic_testbed_john_wilander.nicecap.c
		Only difference between this file and dynamic_testbed_john_wilander.with_strata.c is the lack of including <strata.h>
		This file is the Wilander testbed modified in the following ways:
		- Opposite direction variable layout ordering (from original code) handled.  The original cases are still in place and should still work if the variables are laid out with the original ordering assumption. 
		- Stack-based cases were modified so that they worked within our system.
		- Strata library NOT included


	4 and 5) rev_memcpy.c  and rev_memcpy.h
		These are implementations of a reverse memcpy() function to enable buffer underrun to handle if the variable layout is reversed from the original suite's assumptions.


CASE NUMBER SUMMARY
-------------------

	The following is a summary of the test cases included in the suite as described by the published paper.

Case No.	Description
----------------------------
-4	Stack overflow all the way to FUNCTION PTR as PARAMETER
-3	Stack overflow all the way to LONGJMP BUFFER as PARAMETER
-2	Stack overflow of a POINTER, then pointing at FUNCTION PTR as param
-1	Stack overflow of a POINTER, then pointing at LONGJMP BUFFER as param
 1	Stack overflow all the way to RETURN ADDRESS
 2	Stack overflow all the way to OLD BASE POINTER
 3	Stack overflow all the way to FUNCTION PTR as local variable
 4	Stack overflow all the way to LONGJMP BUFFER as a local variable
 5	BSS (static/global) overflow all the way to FUNCTION PTR
 6	BSS (static/global) overflow all the way to LONGJMP BUFFER
 7	Stack overwrite of a PTR to point at RETURN ADDRESS
 8	Stack overwrite of a PTR to point at BASE POINTER
 9	Stack overwrite of a PTR to point at FUNCTION PTR as variable
10	Stack overwrite of a PTR to point at LONGJMP BUFFER as variable
11	BSS (static/global) overwrite of a PTR to point at RETURN ADDRESS
12	BSS (static/global) overwrite of a PTR to point at BASE PTR
13	BSS (static/global) overwrite of a PTR to point at FUNCTION PTR as variable
14	BSS (static/global) overwrite of a PTR to point at LONGJMP BUFFER as variable
15	HEAP overwrite of a PTR to point at RETURN ADDRESS
16	HEAP overwrite of a PTR to point at OLD BASE POINTER
17	HEAP overwrite of a PTR to modify a FUNCTION POINTER
18	HEAP overwrite of a PTR to point at a LONGJMP BUFFER
19	HEAP overwrite all the way to overwrite a FUNCTION POINTER
20	HEAP overwrite all the way to overwrite a LONGJMP BUFFER


import os
import tarfile
import shutil
import re
import fileinput

def substitute_in_file(file, search_pattern, replacement):
    with open(file, "r") as source:
        lines = source.readlines()
    with open(file, "w") as source:
        for line in lines:
            source.write(re.sub(search_pattern, replacement, line))

Import('env')

env.Replace(SECURITY_TRANSFORMS_HOME=os.environ['SECURITY_TRANSFORMS_HOME'])
env.Replace(CFLAGS="-m64")
env.Replace(CCFLAGS="-m64")
env.Replace(INSTALL_PATH_PREFIX="$SECURITY_TRANSFORMS_HOME/appfw/lib/64")

SQLITE3_DIR=os.path.join(os.environ['SECURITY_TRANSFORMS_HOME'], 'third_party/SQLITE3')

print 'i am in cwd: ', os.getcwd()

if env.GetOption('clean'):
    print 'option clean is turned on'
    if os.path.exists(SQLITE3_DIR):
        shutil.rmtree(SQLITE3_DIR)
    if os.path.exists('appfw_sqlite3.c'):
        os.remove('appfw_sqlite3.c')
    if os.path.exists('appfw_sqlite3.h'):
        os.remove('appfw_sqlite3.h')
    if os.path.exists('combined_sqlite3.c'):
        os.remove('combined_sqlite3.c')
else:
    if not os.path.exists(SQLITE3_DIR):
        os.makedirs(SQLITE3_DIR)     # make directory 
        tgz=tarfile.open(os.path.join(os.environ['SECURITY_TRANSFORMS_HOME'], 'third_party/sqlite-autoconf-3071300.tar.gz'), "r:gz")
        print 'Extracting needed files from sqlite3 tarball'
        tgz.list(verbose=False)
        tgz.extract('sqlite-autoconf-3071300/sqlite3.h', SQLITE3_DIR)
        tgz.extract('sqlite-autoconf-3071300/sqlite3.c', SQLITE3_DIR)

    assert os.path.isdir(SQLITE3_DIR)

    source_dir = os.path.join(SQLITE3_DIR, 'sqlite-autoconf-3071300') 
    target_dir = os.getcwd()
    shutil.copy(os.path.join(source_dir, 'sqlite3.c'), os.path.join(target_dir, 'appfw_sqlite3.c'))
    shutil.copy(os.path.join(source_dir, 'sqlite3.h'), os.path.join(target_dir, 'appfw_sqlite3.h'))

    print 'Copying sqlite3.h into: ' + os.path.join(target_dir, 'sqlite3.h')
    shutil.copy(os.path.join(source_dir, 'sqlite3.h'), os.path.join(target_dir, 'sqlite3.h'))
    print 'Copying sqlite3.h into: ' + os.path.abspath(os.path.join(target_dir, '..', 'sqlite3.h'))
    shutil.copy(os.path.join(source_dir, 'sqlite3.h'), os.path.abspath(os.path.join(target_dir, '..', 'sqlite3.h')))

    assert os.path.exists(os.path.abspath(os.path.join(target_dir, '..', 'sqlite3.h')))
    assert os.path.exists(os.path.abspath(os.path.join(target_dir, 'sqlite3.h')))

    # need to do the sed replacement:  sqlite3.[ch] --> appfw_sqlite3.[ch]
    substitute_in_file(os.path.join(target_dir,'appfw_sqlite3.c'), 'sqlite3', 'appfw_sqlite3')
    substitute_in_file(os.path.join(target_dir,'appfw_sqlite3.h'), 'sqlite3', 'appfw_sqlite3')

    sqlfw_c = os.path.join(os.environ['SECURITY_TRANSFORMS_HOME'], 'appfw', 'src', 'sqlfw.c')
    combined_sqlite3_c = os.path.join(os.environ['SECURITY_TRANSFORMS_HOME'], 'appfw', 'src', 'combined_sqlite3.c')

    with open(combined_sqlite3_c, 'w') as fout:
       for line in fileinput.input(files=('appfw_sqlite3.c', sqlfw_c)):
           fout.write(line)

    assert os.path.exists(os.path.abspath(os.path.join(target_dir, '..', 'sqlite3.h')))
    assert os.path.exists(os.path.abspath(os.path.join(target_dir, 'sqlite3.h')))

libname="appfw"

files_c = '''
    appfw_ldap.c
    openldap_hook.c
    mysql_hook.c
    sqlite3_hook.c
    osc_hook.c
    pg_hook.c
    hooker.c
    oscfw.c
    xqfw.c
    combined_sqlite3.c
    '''

files_cpp = '''
    osc_parse.cpp
    sql_structure.cpp
    xq_hook.cpp
    xq_parser.cpp
    appfw.cpp
    '''

cpppath = os.path.join(os.environ['SECURITY_TRANSFORMS_HOME'], 'appfw', 'src')
cpppath += ''' 
	/usr/include/postgresql
	/usr/include/mysql
	/usr/include/libxml2
	/usr/include/x86_64-linux-gnu
	'''


CFLAGS=" -fPIC -Wall -W -Wextra -Wconversion "
CFLAGS+=" -DSQLITE_OS_UNIX=1 -DSQLITE_THREADSAFE=0 -DSQLITE_DEBUG=0 -DSQLITE_OMIT_LOAD_EXTENSION -DSQLITE_4_BYTE_ALIGNED_MALLOC " 
CFLAGS+=" -DXQILLA_MAJOR_VER=2 -DXQILLA_MINOR_VER=9 "

env=env.Clone(CPPPATH=Split(cpppath))
env.Append(CCFLAGS=CFLAGS)
env.Append(LINKFLAGS=env['CFLAGS'])

lib=env.SharedLibrary(libname, Split(files_c + files_cpp))

install=env.Install("$INSTALL_PATH_PREFIX", lib)

Default(install)

